package api

import "net/url"

/* 用户信用 */
type UserCredit struct {
	/* 收到的好评总条数。取值范围:大于零的整数 */
	GoodNum int64 `json:"good_num"`

	/* 信用等级（是根据score生成的），信用等级：淘宝会员在淘宝网上的信用度，分为20个级别，级别如：level = 1 时，表示一心；level = 2 时，表示二心 */
	Level int64 `json:"level"`

	/* 信用总分（“好评”加一分，“中评”不加分，“差评”扣一分。分越高，等级越高） */
	Score int64 `json:"score"`

	/* 收到的评价总条数。取值范围:大于零的整数 */
	TotalNum int64 `json:"total_num"`
}

/* 用户地址 */
type Location struct {
	/* 详细地址，最大256个字节（128个中文） */
	Address string `json:"address"`

	/* 所在城市（中文名称） */
	City string `json:"city"`

	/* 国家名称 */
	Country string `json:"country"`

	/* 区/县（只适用于物流API） */
	District string `json:"district"`

	/* 所在省份（中文名称） */
	State string `json:"state"`

	/* 邮政编码 */
	Zip string `json:"zip"`
}

/* 用户 */
type User struct {
	/* 有无绑定。可选值:bind(绑定),notbind(未绑定) */
	AlipayBind string `json:"alipay_bind"`

	/* 是否受限制。可选值:limited(受限制),unlimited(不受限) */
	AutoRepost string `json:"auto_repost"`

	/* 用户头像地址 */
	Avatar string `json:"avatar"`

	/* 生日 */
	Birthday string `json:"birthday"`

	/* 买家信用 */
	BuyerCredit *UserCredit `json:"buyer_credit"`

	/* 是否参加消保 */
	ConsumerProtection bool `json:"consumer_protection"`

	/* 用户注册时间。格式:yyyy-MM-dd HH:mm:ss */
	Created string `json:"created"`

	/* 联系人email */
	Email string `json:"email"`

	/* 是否购买多图服务。可选值:true(是),false(否) */
	HasMorePic bool `json:"has_more_pic"`

	/* 用户作为卖家是否开过店 */
	HasShop bool `json:"has_shop"`

	/* 表示用户是否具备修改商品减库存逻辑的权限（一共有拍下减库存和付款减库存两种逻辑） 值含义： 1）true：是 2）false：否。 */
	HasSubStock bool `json:"has_sub_stock"`

	/* 用户是否是金牌卖家 */
	IsGoldenSeller bool `json:"is_golden_seller"`

	/* 是否24小时闪电发货(实物类) */
	IsLightningConsignment bool `json:"is_lightning_consignment"`

	/* 可上传商品图片数量 */
	ItemImgNum int64 `json:"item_img_num"`

	/* 单张商品图片最大容量(商品主图大小)。单位:k */
	ItemImgSize int64 `json:"item_img_size"`

	/* 最近登陆时间。格式:yyyy-MM-dd HH:mm:ss */
	LastVisit string `json:"last_visit"`

	/* 是否是无名良品用户，true or false */
	Liangpin bool `json:"liangpin"`

	/* 用户当前居住地公开信息。如：location.city获取其中的city数据 */
	Location *Location `json:"location"`

	/* 是否订阅了淘宝天下杂志 */
	MagazineSubscribe bool `json:"magazine_subscribe"`

	/* 用户昵称 */
	Nick string `json:"nick"`

	/* 用户是否为网游用户，属于隐私信息，需要登陆才能查看自己的。 目前仅供taobao.user.get使用 */
	OnlineGaming bool `json:"online_gaming"`

	/* 有无实名认证。可选值:authentication(实名认证),not authentication(没有认证) */
	PromotedType string `json:"promoted_type"`

	/* 可上传属性图片数量 */
	PropImgNum int64 `json:"prop_img_num"`

	/* 单张销售属性图片最大容量（非主图的商品图片和商品属性图片）。单位:k */
	PropImgSize int64 `json:"prop_img_size"`

	/* 卖家信用 */
	SellerCredit *UserCredit `json:"seller_credit"`

	/* 性别。可选值:m(男),f(女) */
	Sex string `json:"sex"`

	/* 卖家是否签署食品卖家承诺协议 */
	SignFoodSellerPromise bool `json:"sign_food_seller_promise"`

	/* 状态。可选值:normal(正常),inactive(未激活),delete(删除),reeze(冻结),supervise(监管) */
	Status string `json:"status"`

	/* 用户类型。可选值:B(B商家),C(C商家) */
	Type string `json:"type"`

	/* 用户字符串ID */
	Uid string `json:"uid"`

	/* 用户数字ID */
	UserId int64 `json:"user_id"`

	/* 用户参与垂直市场类型。shoes表示鞋城垂直市场用户，3C表示3C垂直市场用户。多个类型之间用","分隔。如：一个用户既是3C用户又是鞋城用户，那么这个字段返回就是"3C,shoes"。如果用户不是垂直市场用户，此字段返回为""。 */
	VerticalMarket string `json:"vertical_market"`

	/* 用户的全站vip信息，可取值如下：c(普通会员),asso_vip(荣誉会员)，vip1,vip2,vip3,vip4,vip5,vip6(六个等级的正式vip会员)，共8种取值，其中asso_vip是由vip会员衰退而成，与主站上的vip0对应。 */
	VipInfo string `json:"vip_info"`
}

/* 图书类目导入返回结果 */
type ProductBooks struct {
	/* 作者/著者 */
	Author string `json:"author"`

	/* 条形码，13位，9787开头 */
	BarCode string `json:"bar_code"`

	/* 完整的图书名称 */
	BookName string `json:"book_name"`

	/* 类目id */
	CategoryId int64 `json:"category_id"`

	/* ISBN号 */
	Isbn string `json:"isbn"`

	/* 图书价格，若有多个，则以';'号分隔 */
	Price string `json:"price"`
}

/* 产品图片 */
type ProductImg struct {
	/* 添加时间.格式:yyyy-mm-dd hh:mm:ss */
	Created string `json:"created"`

	/* 产品图片ID */
	Id int64 `json:"id"`

	/* 修改时间.格式:yyyy-mm-dd hh:mm:ss */
	Modified string `json:"modified"`

	/* 图片序号。产品里的图片展示顺序，数据越小越靠前。要求是正整数。 */
	Position int64 `json:"position"`

	/* 图片所属产品的ID */
	ProductId int64 `json:"product_id"`

	/* 图片地址.(绝对地址,格式:http://host/image_path) */
	Url string `json:"url"`
}

/* 产品结构 */
type Product struct {
	/* 产品条码信息，仅在taobao.products.search接口且商城可用 */
	BarcodeStr string `json:"barcode_str"`

	/* 产品的非关键属性列表.格式:pid:vid;pid:vid. */
	Binds string `json:"binds"`

	/* 产品的非关键属性字符串列表.格式同props_str(<strong>注：</strong><font color="red">属性名称中的冒号":"被转换为："#cln#";
	分号";"被转换为："#scln#"
	</font>) */
	BindsStr string `json:"binds_str"`

	/* 商品类目名称 */
	CatName string `json:"cat_name"`

	/* 商品类目ID.必须是叶子类目ID */
	Cid int64 `json:"cid"`

	/* 产品的collect次数（不提供数据，返回0) */
	CollectNum int64 `json:"collect_num"`

	/* 品类ID */
	CommodityId int64 `json:"commodity_id"`

	/* 创建时间.格式:yyyy-mm-dd hh:mm:ss */
	Created string `json:"created"`

	/* 标识是否为达尔文体系下的产品 。
	如果为空表示是非达尔文体系下的产品
	如果cspu:0 表示是达尔文体系下的产品，有cspu正在待小二审核，但不能发布商品。
	如果cspu:1 表示是达尔文体系下的产品，且有小二确认的cspu，能发布商品 */
	CspuFeature string `json:"cspu_feature"`

	/* 用户自定义属性,结构：pid1:value1;pid2:value2 例如：“20000:优衣库”，表示“品牌:优衣库” */
	CustomerProps string `json:"customer_props"`

	/* 产品的描述.最大25000个字节 */
	Desc string `json:"desc"`

	/* 标识套装产品是否有效，无效的套装产品需要重新发布 */
	IsSuiteEffective bool `json:"is_suite_effective"`

	/* 产品的级别level */
	Level int64 `json:"level"`

	/* 修改时间.格式:yyyy-mm-dd hh:mm:ss */
	Modified string `json:"modified"`

	/* 产品名称 */
	Name string `json:"name"`

	/* 外部产品ID */
	OuterId string `json:"outer_id"`

	/* 产品对应的图片路径 */
	PicPath string `json:"pic_path"`

	/* 产品的主图片地址.(绝对地址,格式:http://host/image_path) */
	PicUrl string `json:"pic_url"`

	/* 产品的市场价.单位为元.精确到2位小数;如:200.07 */
	Price float64 `json:"price,string"`

	/* 产品扩展信息 */
	ProductExtraInfos []*ProductExtraInfo `json:"product_extra_infos>product_extra_info"`

	/* 产品ID */
	ProductId int64 `json:"product_id"`

	/* 产品的子图片.目前最多支持4张。fields中设置为product_imgs.id、product_imgs.url、product_imgs.position 等形式就会返回相应的字段 */
	ProductImgs []*ProductImg `json:"product_imgs>product_img"`

	/* 产品的属性图片.比如说黄色对应的产品图片,绿色对应的产品图片。fields中设置为product_prop_imgs.id、
	product_prop_imgs.props、product_prop_imgs.url、product_prop_imgs.position等形式就会返回相应的字段 */
	ProductPropImgs []*ProductPropImg `json:"product_prop_imgs>product_prop_img"`

	/* 销售属性值别名。格式为pid1:vid1:alias1;pid1:vid2:alia2。 */
	PropertyAlias string `json:"property_alias"`

	/* 产品的关键属性列表.格式：pid:vid;pid:vid */
	Props string `json:"props"`

	/* 产品的关键属性字符串列表.比如:品牌:诺基亚;型号:N73(<strong>注：</strong><font color="red">属性名称中的冒号":"被转换为："#cln#";
	分号";"被转换为："#scln#"
	</font>) */
	PropsStr string `json:"props_str"`

	/* 产品的评分次数 */
	RateNum int64 `json:"rate_num"`

	/* 产品的销售量 */
	SaleNum int64 `json:"sale_num"`

	/* 产品的销售属性列表.格式:pid:vid;pid:vid */
	SaleProps string `json:"sale_props"`

	/* 产品的销售属性字符串列表.格式同props_str(<strong>注：</strong><font color="red">属性名称中的冒号":"被转换为："#cln#";
	分号";"被转换为："#scln#"
	</font>) */
	SalePropsStr string `json:"sale_props_str"`

	/* 产品卖点描述，长度限制20个汉字 */
	SellPt string `json:"sell_pt"`

	/* 产品的店内价格 */
	ShopPrice string `json:"shop_price"`

	/* 产品的标准价格 */
	StandardPrice string `json:"standard_price"`

	/* 当前状态(0 商家确认 1 屏蔽 3 小二确认 2 未确认 -1 删除) */
	Status int64 `json:"status"`

	/* 套装产品关联的子规格,同时该字段不为空标识该产品是套装产品 */
	SuiteItemsStr string `json:"suite_items_str"`

	/* 模板ID */
	TemplateId int64 `json:"template_id"`

	/* 淘宝标准产品编码 */
	Tsc string `json:"tsc"`

	/* 垂直市场,如：3（3C），4（鞋城） */
	VerticalMarket int64 `json:"vertical_market"`
}

/* 退款超时结构 */
type RefundRemindTimeout struct {
	/* 是否存在超时。可选值:true(是),false(否) */
	ExistTimeout bool `json:"exist_timeout"`

	/* 提醒的类型（退款详情中提示信息的类型） */
	RemindType int64 `json:"remind_type"`

	/* 超时时间。格式:yyyy-MM-dd HH:mm:ss */
	Timeout string `json:"timeout"`
}

/* 留言/凭证数据结构 */
type RefundMessage struct {
	/* 留言内容。最大长度: 400个字节 */
	Content string `json:"content"`

	/* 留言创建时间。格式:yyyy-MM-dd HH:mm:ss */
	Created string `json:"created"`

	/* 留言编号 */
	Id int64 `json:"id"`

	/* 退款类型：NORMAL（普通留言），RETURN_GOODS_APPROVED（卖家留退货地址时留言）；如果为RETURN_GOODS_APPROVED，则退款留言中有卖家收货地址 */
	MessageType string `json:"message_type"`

	/* 留言者编号 */
	OwnerId int64 `json:"owner_id"`

	/* 留言者昵称 */
	OwnerNick string `json:"owner_nick"`

	/* 留言者身份
	1代表买家，2代表卖家，3代表小二 */
	OwnerRole string `json:"owner_role"`

	/* 凭证附件地址（图片） */
	PicUrls []*PicUrl `json:"pic_urls>pic_url"`

	/* 退款编号。 */
	RefundId int64 `json:"refund_id"`
}

/* 订单结构 */
type Order struct {
	/* 手工调整金额.格式为:1.01;单位:元;精确到小数点后两位. */
	AdjustFee string `json:"adjust_fee"`

	/* 捆绑的子订单号，表示该子订单要和捆绑的子订单一起发货，用于卖家子订单捆绑发货 */
	BindOid int64 `json:"bind_oid"`

	/* 买家昵称 */
	BuyerNick string `json:"buyer_nick"`

	/* 买家是否已评价。可选值：true(已评价)，false(未评价) */
	BuyerRate bool `json:"buyer_rate"`

	/* 交易商品对应的类目ID */
	Cid int64 `json:"cid"`

	/* 子订单发货时间，当卖家对订单进行了多次发货，子订单的发货时间和主订单的发货时间可能不一样了，那么就需要以子订单的时间为准。（没有进行多次发货的订单，主订单的发货时间和子订单的发货时间都一样） */
	ConsignTime string `json:"consign_time"`

	/* 子订单级订单优惠金额。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	DiscountFee string `json:"discount_fee"`

	/* 分摊之后的实付金额 */
	DivideOrderFee string `json:"divide_order_fee"`

	/* 子订单的交易结束时间
	说明：子订单有单独的结束时间，与主订单的结束时间可能有所不同，在有退款发起的时候或者是主订单分阶段付款的时候，子订单的结束时间会早于主订单的结束时间，所以开放这个字段便于订单结束状态的判断 */
	EndTime string `json:"end_time"`

	/* 商品的字符串编号(注意：iid近期即将废弃，请用num_iid参数) */
	Iid string `json:"iid"`

	/* 子订单所在包裹的运单号 */
	InvoiceNo string `json:"invoice_no"`

	/* 表示订单交易是否含有对应的代销采购单。
	如果该订单中存在一个对应的代销采购单，那么该值为true；反之，该值为false。 */
	IsDaixiao bool `json:"is_daixiao"`

	/* 是否超卖 */
	IsOversold bool `json:"is_oversold"`

	/* 是否是服务订单，是返回true，否返回false。 */
	IsServiceOrder bool `json:"is_service_order"`

	/* 子订单是否是www订单 */
	IsWww bool `json:"is_www"`

	/* 套餐ID */
	ItemMealId int64 `json:"item_meal_id"`

	/* 套餐的值。如：M8原装电池:便携支架:M8专用座充:莫凡保护袋 */
	ItemMealName string `json:"item_meal_name"`

	/* 子订单发货的快递公司名称 */
	LogisticsCompany string `json:"logistics_company"`

	/* 订单修改时间，目前只有taobao.trade.ordersku.update会返回此字段。 */
	Modified string `json:"modified"`

	/* 购买数量。取值范围:大于零的整数 */
	Num int64 `json:"num"`

	/* 商品数字ID */
	NumIid int64 `json:"num_iid"`

	/* 子订单编号 */
	Oid int64 `json:"oid"`

	/* 子订单来源,如jhs(聚划算)、taobao(淘宝)、wap(无线) */
	OrderFrom string `json:"order_from"`

	/* 商家外部编码(可与商家外部系统对接)。外部商家自己定义的商品Item的id，可以通过taobao.items.custom.get获取商品的Item的信息 */
	OuterIid string `json:"outer_iid"`

	/* 外部网店自己定义的Sku编号 */
	OuterSkuId string `json:"outer_sku_id"`

	/* 优惠分摊 */
	PartMjzDiscount string `json:"part_mjz_discount"`

	/* 子订单实付金额。精确到2位小数，单位:元。如:200.07，表示:200元7分。对于多子订单的交易，计算公式如下：payment = price * num + adjust_fee - discount_fee ；单子订单交易，payment与主订单的payment一致，对于退款成功的子订单，由于主订单的优惠分摊金额，会造成该字段可能不为0.00元。建议使用退款前的实付金额减去退款单中的实际退款金额计算。 */
	Payment string `json:"payment"`

	/* 商品图片的绝对路径 */
	PicPath string `json:"pic_path"`

	/* 商品价格。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	Price string `json:"price"`

	/* 最近退款ID */
	RefundId int64 `json:"refund_id"`

	/* 退款状态。退款状态。可选值 WAIT_SELLER_AGREE(买家已经申请退款，等待卖家同意) WAIT_BUYER_RETURN_GOODS(卖家已经同意退款，等待买家退货) WAIT_SELLER_CONFIRM_GOODS(买家已经退货，等待卖家确认收货) SELLER_REFUSE_BUYER(卖家拒绝退款) CLOSED(退款关闭) SUCCESS(退款成功) */
	RefundStatus string `json:"refund_status"`

	/* 卖家昵称 */
	SellerNick string `json:"seller_nick"`

	/* 卖家是否已评价。可选值：true(已评价)，false(未评价) */
	SellerRate bool `json:"seller_rate"`

	/* 卖家类型，可选值为：B（商城商家），C（普通卖家） */
	SellerType string `json:"seller_type"`

	/* 子订单的运送方式（卖家对订单进行多次发货之后，一个主订单下的子订单的运送方式可能不同，用order.shipping_type来区分子订单的运送方式） */
	ShippingType string `json:"shipping_type"`

	/* 商品的最小库存单位Sku的id.可以通过taobao.item.sku.get获取详细的Sku信息 */
	SkuId string `json:"sku_id"`

	/* SKU的值。如：机身颜色:黑色;手机套餐:官方标配 */
	SkuPropertiesName string `json:"sku_properties_name"`

	/* 订单快照详细信息 */
	Snapshot string `json:"snapshot"`

	/* 订单快照URL */
	SnapshotUrl string `json:"snapshot_url"`

	/* 订单状态（请关注此状态，如果为TRADE_CLOSED_BY_TAOBAO状态，则不要对此订单进行发货，切记啊！）。可选值:
	<ul>
	<li>TRADE_NO_CREATE_PAY(没有创建支付宝交易)
	<li>WAIT_BUYER_PAY(等待买家付款)
	<li>WAIT_SELLER_SEND_GOODS(等待卖家发货,即:买家已付款)
	<li>WAIT_BUYER_CONFIRM_GOODS(等待买家确认收货,即:卖家已发货)
	<li>TRADE_BUYER_SIGNED(买家已签收,货到付款专用)
	<li>TRADE_FINISHED(交易成功)
	<li>TRADE_CLOSED(付款以后用户退款成功，交易自动关闭)
	<li>TRADE_CLOSED_BY_TAOBAO(付款以前，卖家或买家主动关闭交易)
	<li>PAY_PENDING(国际信用卡支付付款确认中) */
	Status string `json:"status"`

	/* 发货的仓库编码 */
	StoreCode string `json:"store_code"`

	/* 门票有效期的key */
	TicketExpdateKey string `json:"ticket_expdate_key"`

	/* 对应门票有效期的外部id */
	TicketOuterId string `json:"ticket_outer_id"`

	/* 订单超时到期时间。格式:yyyy-MM-dd HH:mm:ss */
	TimeoutActionTime string `json:"timeout_action_time"`

	/* 商品标题 */
	Title string `json:"title"`

	/* 应付金额（商品价格 * 商品数量 + 手工调整金额 - 子订单级订单优惠金额）。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	TotalFee string `json:"total_fee"`
}

/* 退款结构 */
type Refund struct {
	/* 卖家收货地址 */
	Address string `json:"address"`

	/* 退款先行垫付默认的未申请状态 0;
	退款先行垫付申请中  1;
	退款先行垫付，垫付完成 2;
	退款先行垫付，卖家拒绝收货 3;
	退款先行垫付，垫付关闭 4;
	退款先行垫付，垫付分账成功 5; */
	AdvanceStatus int64 `json:"advance_status"`

	/* 支付宝交易号 */
	AlipayNo string `json:"alipay_no"`

	/* 买家昵称 */
	BuyerNick string `json:"buyer_nick"`

	/* 物流公司名称 */
	CompanyName string `json:"company_name"`

	/* 退款申请时间。格式:yyyy-MM-dd HH:mm:ss */
	Created string `json:"created"`

	/* 不需客服介入1;
	需要客服介入2;
	客服已经介入3;
	客服初审完成 4;
	客服主管复审失败5;
	客服处理完成6; */
	CsStatus int64 `json:"cs_status"`

	/* 退款说明 */
	Desc string `json:"desc"`

	/* 退货时间。格式:yyyy-MM-dd HH:mm:ss */
	GoodReturnTime string `json:"good_return_time"`

	/* 货物状态。可选值
	BUYER_NOT_RECEIVED (买家未收到货)
	BUYER_RECEIVED (买家已收到货)
	BUYER_RETURNED_GOODS (买家已退货) */
	GoodStatus string `json:"good_status"`

	/* 买家是否需要退货。可选值:true(是),false(否) */
	HasGoodReturn bool `json:"has_good_return"`

	/* 申请退款的商品字符串编号(注意：iid近期即将废弃，请用num_iid参数) */
	Iid string `json:"iid"`

	/* 更新时间。格式:yyyy-MM-dd HH:mm:ss */
	Modified string `json:"modified"`

	/* 商品购买数量 */
	Num int64 `json:"num"`

	/* 申请退款的商品数字编号 */
	NumIid int64 `json:"num_iid"`

	/* 子订单号。如果是单笔交易oid会等于tid */
	Oid int64 `json:"oid"`

	/* 退款对应的订单交易状态。
	可选值
	TRADE_NO_CREATE_PAY(没有创建支付宝交易)
	WAIT_BUYER_PAY(等待买家付款)
	WAIT_SELLER_SEND_GOODS(等待卖家发货,即:买家已付款)
	WAIT_BUYER_CONFIRM_GOODS(等待买家确认收货,即:卖家已发货)
	TRADE_BUYER_SIGNED(买家已签收,货到付款专用)
	TRADE_FINISHED(交易成功)
	TRADE_CLOSED(交易关闭)
	TRADE_CLOSED_BY_TAOBAO(交易被淘宝关闭)
	ALL_WAIT_PAY(包含：WAIT_BUYER_PAY、TRADE_NO_CREATE_PAY)
	ALL_CLOSED(包含：TRADE_CLOSED、TRADE_CLOSED_BY_TAOBAO)
	取自"http://open.taobao.com/dev/index.php/%E4%BA%A4%E6%98%93%E7%8A%B6%E6%80%81" */
	OrderStatus string `json:"order_status"`

	/* 支付给卖家的金额(交易总金额-退还给买家的金额)。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	Payment string `json:"payment"`

	/* 商品价格。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	Price string `json:"price"`

	/* 退款原因 */
	Reason string `json:"reason"`

	/* 退还金额(退还给买家的金额)。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	RefundFee string `json:"refund_fee"`

	/* 退款单号 */
	RefundId int64 `json:"refund_id"`

	/* 退款超时结构RefundRemindTimeout */
	RefundRemindTimeout *RefundRemindTimeout `json:"refund_remind_timeout"`

	/* 卖家昵称 */
	SellerNick string `json:"seller_nick"`

	/* 物流方式.可选值:free(卖家包邮),post(平邮),express(快递),ems(EMS). */
	ShippingType string `json:"shipping_type"`

	/* 退货运单号 */
	Sid string `json:"sid"`

	/* 分账给卖家的钱 */
	SplitSellerFee string `json:"split_seller_fee"`

	/* 分账给淘宝的钱 */
	SplitTaobaoFee string `json:"split_taobao_fee"`

	/* 退款状态。
	可选值
	WAIT_SELLER_AGREE(买家已经申请退款，等待卖家同意)
	WAIT_BUYER_RETURN_GOODS(卖家已经同意退款，等待买家退货)
	WAIT_SELLER_CONFIRM_GOODS(买家已经退货，等待卖家确认收货)
	SELLER_REFUSE_BUYER(卖家拒绝退款)
	CLOSED(退款关闭)
	SUCCESS(退款成功) */
	Status string `json:"status"`

	/* 淘宝交易单号 */
	Tid int64 `json:"tid"`

	/* 商品标题 */
	Title string `json:"title"`

	/* 交易总金额。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	TotalFee string `json:"total_fee"`
}

/* 交易结构 */
type Trade struct {
	/* 卖家手工调整金额，精确到2位小数，单位：元。如：200.07，表示：200元7分。来源于订单价格修改，如果有多笔子订单的时候，这个为0，单笔的话则跟[order].adjust_fee一样 */
	AdjustFee string `json:"adjust_fee"`

	/* 买家的支付宝id号，在UIC中有记录，买家支付宝的唯一标示，不因为买家更换Email账号而改变。 */
	AlipayId int64 `json:"alipay_id"`

	/* 支付宝交易号，如：2009112081173831 */
	AlipayNo string `json:"alipay_no"`

	/* 付款时使用的支付宝积分的额度,单位分，比如返回1，则为1分钱 */
	AlipayPoint int64 `json:"alipay_point"`

	/* 创建交易接口成功后，返回的支付url */
	AlipayUrl string `json:"alipay_url"`

	/* 淘宝下单成功了,但由于某种错误支付宝订单没有创建时返回的信息。taobao.trade.add接口专用 */
	AlipayWarnMsg string `json:"alipay_warn_msg"`

	/* 区域id，代表订单下单的区位码，区位码是通过省市区转换而来，通过区位码能精确到区内的划分，比如310012是杭州市西湖区华星路 */
	AreaId string `json:"area_id"`

	/* 物流到货时效截单时间，格式 HH:mm */
	ArriveCutTime string `json:"arrive_cut_time"`

	/* 物流到货时效，单位天 */
	ArriveInterval int64 `json:"arrive_interval"`

	/* 同步到卖家库的时间，taobao.trades.sold.incrementv.get接口返回此字段 */
	AsyncModified string `json:"async_modified"`

	/* 交易中剩余的确认收货金额（这个金额会随着子订单确认收货而不断减少，交易成功后会变为零）。精确到2位小数;单位:元。如:200.07，表示:200 元7分 */
	AvailableConfirmFee string `json:"available_confirm_fee"`

	/* 买家支付宝账号 */
	BuyerAlipayNo string `json:"buyer_alipay_no"`

	/* 买家下单的地区 */
	BuyerArea string `json:"buyer_area"`

	/* 买家货到付款服务费。精确到2位小数;单位:元。如:12.07，表示:12元7分 */
	BuyerCodFee string `json:"buyer_cod_fee"`

	/* 买家邮件地址 */
	BuyerEmail string `json:"buyer_email"`

	/* 买家备注旗帜（与淘宝网上订单的买家备注旗帜对应，只有买家才能查看该字段）
	红、黄、绿、蓝、紫 分别对应 1、2、3、4、5 */
	BuyerFlag int64 `json:"buyer_flag"`

	/* 买家备注（与淘宝网上订单的买家备注对应，只有买家才能查看该字段） */
	BuyerMemo string `json:"buyer_memo"`

	/* 买家留言 */
	BuyerMessage string `json:"buyer_message"`

	/* 买家昵称 */
	BuyerNick string `json:"buyer_nick"`

	/* 买家获得积分,返点的积分。格式:100;单位:个。返点的积分要交易成功之后才能获得。 */
	BuyerObtainPointFee int64 `json:"buyer_obtain_point_fee"`

	/* 买家是否已评价。可选值:true(已评价),false(未评价)。如买家只评价未打分，此字段仍返回false */
	BuyerRate bool `json:"buyer_rate"`

	/* 买家可以通过此字段查询是否当前交易可以评论，can_rate=true可以评价，false则不能评价。 */
	CanRate bool `json:"can_rate"`

	/* 货到付款服务费。精确到2位小数;单位:元。如:12.07，表示:12元7分。 */
	CodFee string `json:"cod_fee"`

	/* 货到付款物流状态。
	初始状态 NEW_CREATED,
	接单成功 ACCEPTED_BY_COMPANY,
	接单失败 REJECTED_BY_COMPANY,
	接单超时 RECIEVE_TIMEOUT,
	揽收成功 TAKEN_IN_SUCCESS,
	揽收失败 TAKEN_IN_FAILED,
	揽收超时 TAKEN_TIMEOUT,
	签收成功 SIGN_IN,
	签收失败 REJECTED_BY_OTHER_SIDE,
	订单等待发送给物流公司 WAITING_TO_BE_SENT,
	用户取消物流订单 CANCELED */
	CodStatus string `json:"cod_status"`

	/* 交易佣金。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	CommissionFee string `json:"commission_fee"`

	/* 物流发货时效，单位小时 */
	ConsignInterval int64 `json:"consign_interval"`

	/* 卖家发货时间。格式:yyyy-MM-dd HH:mm:ss */
	ConsignTime string `json:"consign_time"`

	/* 交易创建时间。格式:yyyy-MM-dd HH:mm:ss */
	Created string `json:"created"`

	/* 使用信用卡支付金额数 */
	CreditCardFee string `json:"credit_card_fee"`

	/* 建议使用trade.promotion_details查询系统优惠
	系统优惠金额（如打折，VIP，满就送等），精确到2位小数，单位：元。如：200.07，表示：200元7分 */
	DiscountFee string `json:"discount_fee"`

	/* 交易结束时间。交易成功时间(更新交易状态为成功的同时更新)/确认收货时间或者交易关闭时间 。格式:yyyy-MM-dd HH:mm:ss */
	EndTime string `json:"end_time"`

	/* 电子凭证的垂直信息 */
	EticketExt string `json:"eticket_ext"`

	/* 快递代收款。精确到2位小数;单位:元。如:212.07，表示:212元7分 */
	ExpressAgencyFee string `json:"express_agency_fee"`

	/* 判断订单是否有买家留言，有买家留言返回true，否则返回false */
	HasBuyerMessage bool `json:"has_buyer_message"`

	/* 是否包含邮费。与available_confirm_fee同时使用。可选值:true(包含),false(不包含) */
	HasPostFee bool `json:"has_post_fee"`

	/* 订单中是否包含运费险订单，如果包含运费险订单返回true，不包含运费险订单，返回false */
	HasYfx bool `json:"has_yfx"`

	/* 商品字符串编号(注意：iid近期即将废弃，请用num_iid参数) */
	Iid string `json:"iid"`

	/* 发票抬头 */
	InvoiceName string `json:"invoice_name"`

	/* 发票类型 */
	InvoiceType string `json:"invoice_type"`

	/* 是否是3D淘宝交易 */
	Is3D bool `json:"is_3D"`

	/* 表示是否是品牌特卖（常规特卖，不包括特卖惠和特实惠）订单，如果是返回true，如果不是返回false。当此字段与is_force_wlb均为true时，订单强制物流宝发货。 */
	IsBrandSale bool `json:"is_brand_sale"`

	/* 表示订单交易是否含有对应的代销采购单。
	如果该订单中存在一个对应的代销采购单，那么该值为true；反之，该值为false。 */
	IsDaixiao bool `json:"is_daixiao"`

	/* 订单是否强制使用物流宝发货。当此字段与is_brand_sale均为true时，订单强制物流宝发货。此字段为false时，该订单根据流转规则设置可以使用物流宝或者常规方式发货 */
	IsForceWlb bool `json:"is_force_wlb"`

	/* 是否保障速递，如果为true，则为保障速递订单，使用线下联系发货接口发货，如果未false，则该订单非保障速递，根据卖家设置的订单流转规则可使用物流宝或者常规物流发货。 */
	IsLgtype bool `json:"is_lgtype"`

	/* 是否是多次发货的订单
	如果卖家对订单进行多次发货，则为true
	否则为false */
	IsPartConsign bool `json:"is_part_consign"`

	/* 表示订单交易是否网厅订单。 如果该订单是网厅订单，那么该值为true；反之，该值为false。 */
	IsWt bool `json:"is_wt"`

	/* 次日达订单送达时间 */
	LgAging string `json:"lg_aging"`

	/* 次日达，三日达等送达类型 */
	LgAgingType string `json:"lg_aging_type"`

	/* 订单出现异常问题的时候，给予用户的描述,没有异常的时候，此值为空 */
	MarkDesc string `json:"mark_desc"`

	/* 交易修改时间(用户对订单的任何修改都会更新此字段)。格式:yyyy-MM-dd HH:mm:ss */
	Modified string `json:"modified"`

	/* 商品购买数量。取值范围：大于零的整数,对于一个trade对应多个order的时候（一笔主订单，对应多笔子订单），num=0，num是一个跟商品关联的属性，一笔订单对应多比子订单的时候，主订单上的num无意义。 */
	Num int64 `json:"num"`

	/* 商品数字编号 */
	NumIid int64 `json:"num_iid"`

	/* 卡易售垂直表信息，去除下单ip之后的结果 */
	NutFeature string `json:"nut_feature"`

	/* 导购宝=crm */
	O2o string `json:"o2o"`

	/* 导购宝提货方式，inshop：店内提货，online：线上发货 */
	O2oDelivery string `json:"o2o_delivery"`

	/* 导购员id */
	O2oGuideId string `json:"o2o_guide_id"`

	/* 导购员名称 */
	O2oGuideName string `json:"o2o_guide_name"`

	/* 外部订单号 */
	O2oOutTradeId string `json:"o2o_out_trade_id"`

	/* 导购员门店id */
	O2oShopId string `json:"o2o_shop_id"`

	/* 导购门店名称 */
	O2oShopName string `json:"o2o_shop_name"`

	/* 订单列表 */
	Orders []*Order `json:"orders>order"`

	/* 付款时间。格式:yyyy-MM-dd HH:mm:ss。订单的付款时间即为物流订单的创建时间。 */
	PayTime string `json:"pay_time"`

	/* 实付金额。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	Payment string `json:"payment"`

	/* 天猫点券卡实付款金额,单位分 */
	PccAf int64 `json:"pcc_af"`

	/* 商品图片绝对途径 */
	PicPath string `json:"pic_path"`

	/* 买家使用积分,下单时生成，且一直不变。格式:100;单位:个. */
	PointFee int64 `json:"point_fee"`

	/* 邮费。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	PostFee string `json:"post_fee"`

	/* 商品价格。精确到2位小数；单位：元。如：200.07，表示：200元7分 */
	Price string `json:"price"`

	/* 交易促销详细信息 */
	Promotion string `json:"promotion"`

	/* 优惠详情 */
	PromotionDetails []*PromotionDetail `json:"promotion_details>promotion_detail"`

	/* 买家实际使用积分（扣除部分退款使用的积分），交易完成后生成（交易成功或关闭），交易未完成时该字段值为0。格式:100;单位:个 */
	RealPointFee int64 `json:"real_point_fee"`

	/* 卖家实际收到的支付宝打款金额（由于子订单可以部分确认收货，这个金额会随着子订单的确认收货而不断增加，交易成功后等于买家实付款减去退款金额）。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	ReceivedPayment string `json:"received_payment"`

	/* 收货人的详细地址 */
	ReceiverAddress string `json:"receiver_address"`

	/* 收货人的所在城市<br>
	注：因为国家对于城市和地区的划分的有：省直辖市和省直辖县级行政区（区级别的）划分的，淘宝这边根据这个差异保存在不同字段里面
	比如：广东广州：广州属于一个直辖市是放在的receiver_city的字段里面；而河南济源：济源属于省直辖县级行政区划分，是区级别的，放在了receiver_district里面
	<br>建议：程序依赖于城市字段做物流等判断的操作，最好加一个判断逻辑：如果返回值里面只有receiver_district参数，该参数作为城市 */
	ReceiverCity string `json:"receiver_city"`

	/* 收货人的所在地区<br>
	注：因为国家对于城市和地区的划分的有：省直辖市和省直辖县级行政区（区级别的）划分的，淘宝这边根据这个差异保存在不同字段里面
	比如：广东广州：广州属于一个直辖市是放在的receiver_city的字段里面；而河南济源：济源属于省直辖县级行政区划分，是区级别的，放在了receiver_district里面
	<br>建议：程序依赖于城市字段做物流等判断的操作，最好加一个判断逻辑：如果返回值里面只有receiver_district参数，该参数作为城市 */
	ReceiverDistrict string `json:"receiver_district"`

	/* 收货人的手机号码 */
	ReceiverMobile string `json:"receiver_mobile"`

	/* 收货人的姓名 */
	ReceiverName string `json:"receiver_name"`

	/* 收货人的电话号码 */
	ReceiverPhone string `json:"receiver_phone"`

	/* 收货人的所在省份 */
	ReceiverState string `json:"receiver_state"`

	/* 收货人的邮编 */
	ReceiverZip string `json:"receiver_zip"`

	/* 卖家支付宝账号 */
	SellerAlipayNo string `json:"seller_alipay_no"`

	/* 卖家是否可以对订单进行评价 */
	SellerCanRate bool `json:"seller_can_rate"`

	/* 卖家货到付款服务费。精确到2位小数;单位:元。如:12.07，表示:12元7分。卖家不承担服务费的订单：未发货的订单获取服务费为0，发货后就能获取到正确值。 */
	SellerCodFee string `json:"seller_cod_fee"`

	/* 卖家邮件地址 */
	SellerEmail string `json:"seller_email"`

	/* 卖家备注旗帜（与淘宝网上订单的卖家备注旗帜对应，只有卖家才能查看该字段）
	红、黄、绿、蓝、紫 分别对应 1、2、3、4、5 */
	SellerFlag int64 `json:"seller_flag"`

	/* 卖家备注（与淘宝网上订单的卖家备注对应，只有卖家才能查看该字段） */
	SellerMemo string `json:"seller_memo"`

	/* 卖家手机 */
	SellerMobile string `json:"seller_mobile"`

	/* 卖家姓名 */
	SellerName string `json:"seller_name"`

	/* 卖家昵称 */
	SellerNick string `json:"seller_nick"`

	/* 卖家电话 */
	SellerPhone string `json:"seller_phone"`

	/* 卖家是否已评价。可选值:true(已评价),false(未评价) */
	SellerRate bool `json:"seller_rate"`

	/* 订单将在此时间前发出，主要用于预售订单 */
	SendTime string `json:"send_time"`

	/* 服务子订单列表 */
	ServiceOrders []*ServiceOrder `json:"service_orders>service_order"`

	/* 物流标签 */
	ServiceTags []*LogisticsTag `json:"service_tags>logistics_tag"`

	/* 创建交易时的物流方式（交易完成前，物流方式有可能改变，但系统里的这个字段一直不变）。可选值：free(卖家包邮),post(平邮),express(快递),ems(EMS),virtual(虚拟发货)，25(次日必达)，26(预约配送)。 */
	ShippingType string `json:"shipping_type"`

	/* 交易快照详细信息 */
	Snapshot string `json:"snapshot"`

	/* 交易快照地址 */
	SnapshotUrl string `json:"snapshot_url"`

	/* 交易状态。可选值:
	 * TRADE_NO_CREATE_PAY(没有创建支付宝交易)
	 * WAIT_BUYER_PAY(等待买家付款)
	 * SELLER_CONSIGNED_PART(卖家部分发货)
	 * WAIT_SELLER_SEND_GOODS(等待卖家发货,即:买家已付款)
	 * WAIT_BUYER_CONFIRM_GOODS(等待买家确认收货,即:卖家已发货)
	 * TRADE_BUYER_SIGNED(买家已签收,货到付款专用)
	 * TRADE_FINISHED(交易成功)
	 * TRADE_CLOSED(付款以后用户退款成功，交易自动关闭)
	 * TRADE_CLOSED_BY_TAOBAO(付款以前，卖家或买家主动关闭交易)
	 * PAY_PENDING(国际信用卡支付付款确认中)
	 * WAIT_PRE_AUTH_CONFIRM(0元购合约中) */
	Status string `json:"status"`

	/* 分阶段付款的已付金额（万人团订单已付金额） */
	StepPaidFee string `json:"step_paid_fee"`

	/* 分阶段付款的订单状态（例如万人团订单等），目前有三返回状态
	FRONT_NOPAID_FINAL_NOPAID(定金未付尾款未付)，FRONT_PAID_FINAL_NOPAID(定金已付尾款未付)，FRONT_PAID_FINAL_PAID(定金和尾款都付) */
	StepTradeStatus string `json:"step_trade_status"`

	/* 交易编号 (父订单的交易编号) */
	Tid int64 `json:"tid"`

	/* 超时到期时间。格式:yyyy-MM-dd HH:mm:ss。业务规则：
	前提条件：只有在买家已付款，卖家已发货的情况下才有效
	如果申请了退款，那么超时会落在子订单上；比如说3笔ABC，A申请了，那么返回的是BC的列表, 主定单不存在
	如果没有申请过退款，那么超时会挂在主定单上；比如ABC，返回主定单，ABC的超时和主定单相同 */
	TimeoutActionTime string `json:"timeout_action_time"`

	/* 交易标题，以店铺名作为此标题的值。注:taobao.trades.get接口返回的Trade中的title是商品名称 */
	Title string `json:"title"`

	/* 商品金额（商品价格乘以数量的总金额）。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	TotalFee string `json:"total_fee"`

	/* 交易内部来源。
	WAP(手机);HITAO(嗨淘);TOP(TOP平台);TAOBAO(普通淘宝);JHS(聚划算)
	一笔订单可能同时有以上多个标记，则以逗号分隔 */
	TradeFrom string `json:"trade_from"`

	/* 交易备注。 */
	TradeMemo string `json:"trade_memo"`

	/* 交易外部来源：ownshop(商家官网) */
	TradeSource string `json:"trade_source"`

	/* 交易类型列表，同时查询多种交易类型可用逗号分隔。默认同时查询guarantee_trade, auto_delivery, ec, cod的4种交易类型的数据
	可选值
	fixed(一口价)
	auction(拍卖)
	guarantee_trade(一口价、拍卖)
	auto_delivery(自动发货)
	independent_simple_trade(旺店入门版交易)
	independent_shop_trade(旺店标准版交易)
	ec(直冲)
	cod(货到付款)
	fenxiao(分销)
	game_equipment(游戏装备)
	shopex_trade(ShopEX交易)
	netcn_trade(万网交易)
	external_trade(统一外部交易)
	step (万人团)
	nopaid(无付款订单)
	pre_auth_type(预授权0元购机交易) */
	Type string `json:"type"`

	/* 订单的运费险，单位为元 */
	YfxFee string `json:"yfx_fee"`

	/* 运费险支付号 */
	YfxId string `json:"yfx_id"`

	/* 运费险类型 */
	YfxType string `json:"yfx_type"`

	/* 在返回的trade对象上专门增加一个字段zero_purchase来区分，这个为true的就是0元购机预授权交易 */
	ZeroPurchase bool `json:"zero_purchase"`
}

/* Sku结构 */
type Sku struct {
	/* 商品级别的条形码 */
	Barcode string `json:"barcode"`

	/* 基础色数据 */
	ChangeProp string `json:"change_prop"`

	/* sku创建日期 时间格式：yyyy-MM-dd HH:mm:ss */
	Created string `json:"created"`

	/* sku所属商品id(注意：iid近期即将废弃，请用num_iid参数) */
	Iid string `json:"iid"`

	/* sku最后修改日期 时间格式：yyyy-MM-dd HH:mm:ss */
	Modified string `json:"modified"`

	/* sku所属商品数字id */
	NumIid int64 `json:"num_iid"`

	/* 商家设置的外部id。天猫和集市的卖家，需要登录才能获取到自己的商家编码，不能获取到他人的商家编码。 */
	OuterId string `json:"outer_id"`

	/* 属于这个sku的商品的价格 取值范围:0-100000000;精确到2位小数;单位:元。如:200.07，表示:200元7分。 */
	Price string `json:"price"`

	/* sku的销售属性组合字符串（颜色，大小，等等，可通过类目API获取某类目下的销售属性）,格式是p1:v1;p2:v2 */
	Properties string `json:"properties"`

	/* sku所对应的销售属性的中文名字串，格式如：pid1:vid1:pid_name1:vid_name1;pid2:vid2:pid_name2:vid_name2…… */
	PropertiesName string `json:"properties_name"`

	/* 属于这个sku的商品的数量， */
	Quantity int64 `json:"quantity"`

	/* sku级别发货时间 */
	SkuDeliveryTime string `json:"sku_delivery_time"`

	/* sku的id */
	SkuId int64 `json:"sku_id"`

	/* 表示SKu上的产品规格信息 */
	SkuSpecId int64 `json:"sku_spec_id"`

	/* sku状态。 normal:正常 ；delete:删除 */
	Status string `json:"status"`

	/* 商品在付款减库存的状态下，该sku上未付款的订单数量 */
	WithHoldQuantity int64 `json:"with_hold_quantity"`
}

/* 商品视频关联记录 */
type Video struct {
	/* 视频关联记录创建时间（格式：yyyy-MM-dd HH:mm:ss） */
	Created string `json:"created"`

	/* 视频关联记录的id，和商品相对应 */
	Id int64 `json:"id"`

	/* 视频记录关联的商品的数字id(注意：iid近期即将废弃，请用num_iid参数) */
	Iid string `json:"iid"`

	/* 视频关联记录修改时间（格式：yyyy-MM-dd HH:mm:ss） */
	Modified string `json:"modified"`

	/* 视频记录所关联的商品的数字id */
	NumIid int64 `json:"num_iid"`

	/* video的url连接地址。淘秀里视频记录里面存储的url地址 */
	Url string `json:"url"`

	/* video的id，对应于视频在淘秀的存储记录 */
	VideoId int64 `json:"video_id"`
}

/* 店铺动态评分信息 */
type ShopScore struct {
	/* 发货速度评分 */
	DeliveryScore string `json:"delivery_score"`

	/* 商品描述评分 */
	ItemScore string `json:"item_score"`

	/* 服务态度评分 */
	ServiceScore string `json:"service_score"`
}

/* 店铺内卖家自定义类目 */
type SellerCat struct {
	/* 卖家自定义类目编号 */
	Cid int64 `json:"cid"`

	/* 创建时间。格式：yyyy-MM-dd HH:mm:ss */
	Created string `json:"created"`

	/* 修改时间。格式：yyyy-MM-dd HH:mm:ss */
	Modified string `json:"modified"`

	/* 卖家自定义类目名称 */
	Name string `json:"name"`

	/* 父类目编号，值等于0：表示此类目为店铺下的一级类目，值不等于0：表示此类目有父类目 */
	ParentCid int64 `json:"parent_cid"`

	/* 链接图片地址 */
	PicUrl string `json:"pic_url"`

	/* 该类目在页面上的排序位置 */
	SortOrder int64 `json:"sort_order"`

	/* 店铺类目类型：可选值：manual_type：手动分类，new_type：新品上价， tree_type：二三级类目树 ，property_type：属性叶子类目树， brand_type：品牌推广 */
	Type string `json:"type"`
}

/* 采购单子单退款详情 */
type RefundDetail struct {
	/* 下游买家的退款信息 */
	BuyerRefund *BuyerRefund `json:"buyer_refund"`

	/* 分销商nick */
	DistributorNick string `json:"distributor_nick"`

	/* 是否退货 */
	IsReturnGoods bool `json:"is_return_goods"`

	/* 退款修改时间。格式:yyyy-MM-dd HH:mm:ss */
	Modified string `json:"modified"`

	/* 支付给供应商的金额 */
	PaySupFee float64 `json:"pay_sup_fee,string"`

	/* 主采购单id */
	PurchaseOrderId int64 `json:"purchase_order_id"`

	/* 退款创建时间 */
	RefundCreateTime string `json:"refund_create_time"`

	/* 退款说明 */
	RefundDesc string `json:"refund_desc"`

	/* 退款的金额 */
	RefundFee float64 `json:"refund_fee,string"`

	/* 退款流程类型：
	4：发货前退款；
	1：发货后退款不退货；
	2：发货后退款退货 */
	RefundFlowType int64 `json:"refund_flow_type"`

	/* 退款原因 */
	RefundReason string `json:"refund_reason"`

	/* 退款状态
	1：买家已经申请退款，等待卖家同意
	2：卖家已经同意退款，等待买家退货
	3：买家已经退货，等待卖家确认收货
	4：退款关闭
	5：退款成功
	6：卖家拒绝退款
	12：同意退款，待打款
	9：没有申请退款
	10：卖家拒绝确认收货 */
	RefundStatus int64 `json:"refund_status"`

	/* 子单id */
	SubOrderId int64 `json:"sub_order_id"`

	/* 供应商nick */
	SupplierNick string `json:"supplier_nick"`

	/* 超时时间 */
	Timeout string `json:"timeout"`

	/* 超时类型：
	1：供应商同意退款/同意退货超时；
	2：供应商确认收货超时 */
	ToType int64 `json:"to_type"`
}

/* 产品的各种图片信息 */
type FenxiaoImage struct {
	/* 图片id */
	ImageId int64 `json:"image_id"`

	/* 图片顺序 */
	ImagePosition int64 `json:"image_position"`

	/* 图片对应的url */
	ImageUrl string `json:"image_url"`

	/* 当图片类型为属性图片时，表示图片对应的属性pv对。 */
	Properties string `json:"properties"`

	/* 图片类型（PRODUCT：产品图片  EXTPRODUCT：产品辅图  PROPERTIES：产品属性图片 ） */
	Type string `json:"type"`
}

/* 评价大印象返回的印象词接口 */
type ImprItemDO struct {
	/* 印象标签的id */
	AttributeId int64 `json:"attribute_id"`

	/* 被买家评价提及到的印象标签次数 */
	Count int64 `json:"count"`

	/* 印象标签情感倾向 1表示正面 -1表示负面 0表示中性 */
	Status int64 `json:"status"`

	/* 印象标签的名称 */
	Title string `json:"title"`
}

/* 采购单留言列表 */
type OrderMessage struct {
	/* 留言内容 */
	MessageContent string `json:"message_content"`

	/* 留言时间 */
	MessageTime string `json:"message_time"`

	/* 留言标题，例如：分销商留言，供应商留言，买家留言 */
	MessageTitle string `json:"message_title"`

	/* 留言时的图片地址 */
	PicUrl string `json:"pic_url"`
}

/* 下游买家退款信息 */
type BuyerRefund struct {
	/* 订单id */
	BizOrderId int64 `json:"biz_order_id"`

	/* 下游买家nick */
	BuyerNick string `json:"buyer_nick"`

	/* 货物的状态：
	买家已收到货
	买家已退货
	买家未收到货 */
	GoodsStatusDesc string `json:"goods_status_desc"`

	/* 退款修改时间。格式:yyyy-MM-dd HH:mm:ss */
	Modified string `json:"modified"`

	/* 买家是否退货 */
	NeedReturnGoods bool `json:"need_return_goods"`

	/* 退款创建时间 */
	RefundCreateTime string `json:"refund_create_time"`

	/* 退款说明 */
	RefundDesc string `json:"refund_desc"`

	/* 交易退款id */
	RefundId int64 `json:"refund_id"`

	/* 退款原因 */
	RefundReason string `json:"refund_reason"`

	/* 退款状态 */
	RefundStatus int64 `json:"refund_status"`

	/* 退还买家的金额 */
	ReturnFee int64 `json:"return_fee"`

	/* 采购单子单id */
	SubOrderId int64 `json:"sub_order_id"`

	/* 支付分销商的金额 */
	ToSellerFee int64 `json:"to_seller_fee"`
}

/* 旅游商品结构。 */
type TravelItems struct {
	/* 商品发布后的状态。onsale出售中，instock仓库中。 */
	ApproveStatus string `json:"approve_status"`

	/* 商城返点比例，为5的倍数，最低0.5%。[0,500] */
	AuctionPoint int64 `json:"auction_point"`

	/* 商品所属叶子类目ID。 */
	Cid int64 `json:"cid"`

	/* 商品发布时间。 */
	Created string `json:"created"`

	/* 下架时间，未使用（格式：yyyy-MM-dd HH:mm:ss）。 */
	DelistTime string `json:"delist_time"`

	/* 商品描述，字数要大于5个字符，小于50000个字符。 */
	Desc string `json:"desc"`

	/* 商品详情url。 */
	DetailUrl string `json:"detail_url"`

	/* 最晚成团提前天数，最小0天，最大为300天，不填默认为0天。 */
	Duration int64 `json:"duration"`

	/* 费用包含，不超过1500个字符。 */
	FeeInclude string `json:"fee_include"`

	/* 费用不包，不超过1500个字符。 */
	FeeNotInclude string `json:"fee_not_include"`

	/* 机票信息，不超过1500字 */
	FlightInfo string `json:"flight_info"`

	/* 运费承担方式,seller（卖家承担），buyer（买家承担）。 */
	FreightPayer string `json:"freight_payer"`

	/* 集合地，不超过30个字符。 */
	GatheringPlace string `json:"gathering_place"`

	/* 会员打折 true/false。 */
	HasDiscount bool `json:"has_discount"`

	/* 是否有发票,true/false。 */
	HasInvoice bool `json:"has_invoice"`

	/* 是否有橱窗true/false。 */
	HasShowcase bool `json:"has_showcase"`

	/* 酒店信息，不超过1500字符 */
	HotelInfo string `json:"hotel_info"`

	/* 用户自行输入的类目属性ID串。结构："pid1,pid2,pid3"，如："2000"（表示品牌） 注：通常一个类目下用户可输入的关键属性不超过1个。在度假线路类目中，该属性ID为“自由行包含元素”或“一日游包含元素”属性ID。 */
	InputPids string `json:"input_pids"`

	/* 用户自行输入的子属性名和属性值，如“自定义自由行包含元素”。 */
	InputStr string `json:"input_str"`

	/* 是否“铁定出游”商品。 */
	IsTdcy bool `json:"is_tdcy"`

	/* 是否定时上架商品。 */
	IsTiming bool `json:"is_timing"`

	/* 商品数字ID。 */
	ItemId int64 `json:"item_id"`

	/* 商品图片列表(包括主图)。 */
	ItemImgs []*TravelItemsImg `json:"item_imgs>travel_items_img"`

	/* 上架时间,未使用（格式：yyyy-MM-dd HH:mm:ss）。 */
	ListTime string `json:"list_time"`

	/* 电子凭证信息。 */
	LocalityLife *TravelItemsLocalityLife `json:"locality_life"`

	/* 宝贝所在地，格式为(省份:城市)。 */
	Location string `json:"location"`

	/* 最多橱窗数。 */
	MaxShowcase int64 `json:"max_showcase"`

	/* 商品修改时间（格式：yyyy-MM-dd HH:mm:ss）。 */
	Modified string `json:"modified"`

	/* 卖家昵称。 */
	Nick string `json:"nick"`

	/* 商品数量。 */
	Num int64 `json:"num"`

	/* 预定须知，不超过1500个字符。 */
	OrderInfo string `json:"order_info"`

	/* 商家编码。 */
	OuterId string `json:"outer_id"`

	/* 自费项目，不超过1500个字符。 */
	OwnExpense string `json:"own_expense"`

	/* 商品主图片地址。 */
	PicUrl string `json:"pic_url"`

	/* 商品价格，格式：500；单位：分；精确到：分。 */
	Price int64 `json:"price"`

	/* 商品属性列表。格式为：pid:vid;pid:vid。例如度假线路商品，那么这里就需要填写：出发地属性id:城市id;目的地市属性id:目的地市id;…… */
	Props string `json:"props"`

	/* 商品属性名称。标识着props内容里面的pid和vid所对应的名称。格式为：pid1:vid1:pid_name1:vid_name1;pid2:vid2:pid_name2:vid_name2…… */
	PropsName string `json:"props_name"`

	/* 退改规定，不超过1500个字符。 */
	RefundRegulation string `json:"refund_regulation"`

	/* 秒杀商品类型。 */
	SecondKill string `json:"second_kill"`

	/* 商品所属的店铺内卖家自定义类目列表，多个以“,”分割。 */
	SellerCids string `json:"seller_cids"`

	/* 购物店信息，不超过1500个字符。 */
	ShopingInfo string `json:"shoping_info"`

	/* 商品Sku列表。 */
	Skus []*TravelItemsSku `json:"skus>travel_items_sku"`

	/* 商品开始出售时间。 */
	Start string `json:"start"`

	/* 商品是否支持拍下减库存:1支持;2取消支持(付款减库存)。 */
	SubStock int64 `json:"sub_stock"`

	/* 门票信息，不超过1500字 */
	TicketInfo string `json:"ticket_info"`

	/* 商品标题，能超过60字符，一个汉字占2个字符。 */
	Title string `json:"title"`

	/* 套餐价格日历信息。 */
	TravelItemsCombos []*TravelItemsCombo `json:"travel_items_combos>travel_items_combo"`

	/* 商品类型(fixed:一口价;auction:拍卖)注：取消团购。 */
	Type string `json:"type"`

	/* 已被使用的橱窗数。 */
	UsedShowcase int64 `json:"used_showcase"`

	/* 商品是否违规，违规：true , 不违规：false。 */
	Violation bool `json:"violation"`

	/* 不带html标签的desc文本信息，该字段只在taobao.item.get接口中返回。 */
	WapDesc string `json:"wap_desc"`

	/* 适合wap应用的商品详情url。 */
	WapDetailUrl string `json:"wap_detail_url"`
}

/* 旅游度假商品地区结构。 */
type TravelItemsAreaNode struct {
	/* 该地区下所有下级地区集合(目前地区只有两级，国内：省-市；国际： 国家-城市)。 */
	SubPropValues []*TravelItemsPropValue `json:"sub_prop_values>travel_items_prop_value"`

	/* 地区属性值。 */
	TravelItemsPropValue *TravelItemsPropValue `json:"travel_items_prop_value"`
}

/* 确认收货费用结构 */
type TradeConfirmFee struct {
	/* 确认收货的金额(不包含邮费)。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	ConfirmFee float64 `json:"confirm_fee,string"`

	/* 需确认收货的邮费，当不是最后一笔收货或者没有邮费时是0.00。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	ConfirmPostFee float64 `json:"confirm_post_fee,string"`

	/* 是否是最后一笔订单（只对子订单有效，当其他子订单都是交易完成时，返回true，否则false） */
	IsLastOrder bool `json:"is_last_order"`
}

/* 旅游商品类目属性结构 */
type TravelItemsProp struct {
	/* 商品所属叶子类目ID，旅游度假8个叶子类目 */
	Cid int64 `json:"cid"`

	/* 是否可枚举。可选值:true(是),false(否)。 */
	IsEnums bool `json:"is_enums"`

	/* 是否可输入。可选值:true(是),false(否)。 */
	IsInput bool `json:"is_input"`

	/* 是否销售属性。可选值:true(是),false(否)。 */
	IsSaleProp bool `json:"is_sale_prop"`

	/* 发布商品时是否可以多选。可选值: true (是) , false(否)。 */
	Multi bool `json:"multi"`

	/* 发布商品时是否必选。可选值: true (是) , false(否) */
	Must bool `json:"must"`

	/* 属性名称 */
	Name string `json:"name"`

	/* 旅游商品类目属性ID */
	Pid int64 `json:"pid"`

	/* 排列序号，表示同级类目的展现次序，如数值相等则按名称次序排列。取值范围:大于零的整数 */
	SortOrder int64 `json:"sort_order"`

	/* 商品类目属性值集合。 */
	TravelItemsPropValues []*TravelItemsPropValue `json:"travel_items_prop_values>travel_items_prop_value"`
}

/* 卖家商品信息 */
type LotteryWangcaiSellerGoodsInfo struct {
	/* 活动开始时间 */
	ActBeginTime string `json:"act_begin_time"`

	/* 活动结束时间 */
	ActEndTime string `json:"act_end_time"`

	/* 商品id */
	GoodsId int64 `json:"goods_id"`

	/* 彩种id */
	LotteryTypeId int64 `json:"lottery_type_id"`

	/* 赠送类型：0：满就送，1：好评送，2：分享送，3：游戏送，4：收藏送 */
	PresentType int64 `json:"present_type"`
}

/* ItemImg结构 */
type ItemImg struct {
	/* 图片创建时间 时间格式：yyyy-MM-dd HH:mm:ss */
	Created string `json:"created"`

	/* 商品图片的id，和商品相对应（主图id默认为0） */
	Id int64 `json:"id"`

	/* 图片放在第几张（多图时可设置） */
	Position int64 `json:"position"`

	/* 图片链接地址 */
	Url string `json:"url"`
}

/* 旅游度假线路电子凭证（本地生活）结构。 */
type TravelItemsLocalityLife struct {
	/* 表示是否使用邮寄 0: 代表不使用邮寄； 1：代表使用邮寄；如果不设置这个值，代表不使用邮寄。 */
	ChooseLogis int64 `json:"choose_logis"`

	/* 电子交易凭证有效期，有三种格式：如果有效期为起止日期类型，此值为2012-08-06,2012-08-16 如果有效期为【购买成功日至】类型则格式为2012-08-16 ；如果有效期为天数类型则格式为15 */
	Expirydate string `json:"expirydate"`

	/* 格式为 码商id:nick */
	Merchant string `json:"merchant"`

	/* 网点ID,在参数empty_fields里设置locality_life.network_id可删除网点ID。 */
	NetworkId string `json:"network_id"`

	/* 电子凭证售中自动退款比例。 */
	OnsaleAutoRefundRatio int64 `json:"onsale_auto_refund_ratio"`

	/* 退款比例，百分比%前的数字，1-100的正整数值；在参数empty_fields里设置travel_items_locality_life.refund_ratio可删除退款比例。 */
	RefundRatio int64 `json:"refund_ratio"`

	/* 核销打款:1代表核销打款,0代表非核销打款; 在参数empty_fields里设置travel_items_locality_life.verification可删除核销打款。 */
	Verification string `json:"verification"`
}

/* 店铺类目 */
type ShopCat struct {
	/* 类目编号 */
	Cid int64 `json:"cid"`

	/* 该类目是否为父类目。即：该类目是否还有子类目 */
	IsParent bool `json:"is_parent"`

	/* 类目名称 */
	Name string `json:"name"`

	/* 父类目编号，注：此类目指前台类目，值等于0：表示此类目为一级类目，值不等于0：表示此类目有父类目 */
	ParentCid int64 `json:"parent_cid"`
}

/* 旅游度假线路套餐价格日历结构。 */
type TravelItemsCombo struct {
	/* 销售属性套餐属性值结构。 */
	Combo *TravelItemsPropValue `json:"combo"`

	/* 套餐下的价格日历集合。 */
	ComboPriceCalendars []*TravelItemsPriceCalendar `json:"combo_price_calendars>travel_items_price_calendar"`
}

/* 产品属性图片 */
type ProductPropImg struct {
	/* 添加时间.格式:yyyy-mm-dd hh:mm:ss */
	Created string `json:"created"`

	/* 产品属性图片ID */
	Id int64 `json:"id"`

	/* 修改时间.格式:yyyy-mm-dd hh:mm:ss */
	Modified string `json:"modified"`

	/* 图片序号。产品里的图片展示顺序，数据越小越靠前。要求是正整数。 */
	Position int64 `json:"position"`

	/* 图片所属产品的ID */
	ProductId int64 `json:"product_id"`

	/* 属性串(pid:vid),目前只有颜色属性.如:颜色:红色表示为　1627207:28326 */
	Props string `json:"props"`

	/* 图片地址.(绝对地址,格式:http://host/image_path) */
	Url string `json:"url"`
}

/* 旅游度假线路价格日历结构。 */
type TravelItemsPriceCalendar struct {
	/* 儿童库存 */
	ChildNum int64 `json:"child_num"`

	/* 儿童价格（以“分”为单位）。 */
	ChildPrice int64 `json:"child_price"`

	/* 日期。 */
	Date string `json:"date"`

	/* 单人房差（以“分”为单位） */
	DiffPrice int64 `json:"diff_price"`

	/* 成人库存 */
	ManNum int64 `json:"man_num"`

	/* 成人价格（以“分”为单位） */
	ManPrice int64 `json:"man_price"`
}

/* 旅游商品类目属性值结构 */
type TravelItemsPropValue struct {
	/* 商品所属叶子类目ID，旅游度假8个叶子类目。 */
	Cid int64 `json:"cid"`

	/* 属性值名称。 */
	Name string `json:"name"`

	/* 属性ID。 */
	Pid int64 `json:"pid"`

	/* 属性名称。 */
	PropName string `json:"prop_name"`

	/* 排列序号，表示同级类目的展现次序，如数值相等则按名称次序排列。取值范围:大于零的整数。 */
	SortOrder int64 `json:"sort_order"`

	/* 属性值ID。 */
	Vid int64 `json:"vid"`
}

/* 旅游商品销售属性SKU结构。 */
type TravelItemsSku struct {
	/* SKU创建日期 时间格式：yyyy-MM-dd HH:mm:ss。 */
	Created string `json:"created"`

	/* SKU所属商品数字ID */
	ItemId int64 `json:"item_id"`

	/* SKU最后修改日期 时间格式：yyyy-MM-dd HH:mm:ss。 */
	Modified string `json:"modified"`

	/* 商家设置的外部ID */
	OuterId string `json:"outer_id"`

	/* 属于这个SKU的商品的价格 取值范围:0-2<<63-1;单位:分。如:20007，表示:200元7分。 */
	Price int64 `json:"price"`

	/* SKU的销售属性组合字符串（出发日期，出游人群，等等，可通过taobao.travel.itemsprops.get接口获取旅游类目下的销售属性），格式是p1:v1;p2:v2。 */
	Properties string `json:"properties"`

	/* SKU所对应的销售属性的中文名字串，格式如：pid1:vid1:pid_name1:vid_name1;pid2:vid2:pid_name2:vid_name2……。 */
	PropertiesName string `json:"properties_name"`

	/* 属于这个SKU的商品的数量。 */
	Quantity int64 `json:"quantity"`

	/* SKU的ID */
	SkuId int64 `json:"sku_id"`
}

/* 旅游商品图片结构。 */
type TravelItemsImg struct {
	/* 图片创建时间 时间格式：yyyy-MM-dd HH:mm:ss。 */
	Created string `json:"created"`

	/* 商品图片的ID。 */
	Id int64 `json:"id"`

	/* 图片放在第几张（多图时可设置） */
	Position int64 `json:"position"`

	/* 图片链接地址。 */
	Url string `json:"url"`
}

/* 店铺信息 */
type Shop struct {
	/* 总橱窗数量，对于C卖家返回总橱窗数，对于B卖家返回0（只有taobao.shop.remainshowcase.get可以返回） */
	AllCount int64 `json:"all_count"`

	/* 店铺公告 */
	Bulletin string `json:"bulletin"`

	/* 店铺所属的类目编号 */
	Cid int64 `json:"cid"`

	/* 开店时间。格式：yyyy-MM-dd HH:mm:ss */
	Created string `json:"created"`

	/* 店铺描述 */
	Desc string `json:"desc"`

	/* 最后修改时间。格式：yyyy-MM-dd HH:mm:ss */
	Modified string `json:"modified"`

	/* 卖家昵称 */
	Nick string `json:"nick"`

	/* 店标地址。返回相对路径，可以用"http://logo.taobao.com/shop-logo"来拼接成绝对路径 */
	PicPath string `json:"pic_path"`

	/* 剩余橱窗数量，对于C卖家返回剩余橱窗数，对于B卖家返回-1（只有taobao.shop.remainshowcase.get可以返回） */
	RemainCount int64 `json:"remain_count"`

	/* 店铺动态评分信息 */
	ShopScore *ShopScore `json:"shop_score"`

	/* 店铺编号。shop+sid.taobao.com即店铺地址，如shop123456.taobao.com */
	Sid int64 `json:"sid"`

	/* 店铺标题 */
	Title string `json:"title"`

	/* 已用的橱窗数量，对于C卖家返回已使用的橱窗数，对于B卖家返回-1（只有taobao.shop.remainshowcase.get可以返回） */
	UsedCount int64 `json:"used_count"`
}

/* 小额支付单笔支付 */
type SinglePayDetail struct {
	/* 支付宝冻结订单号 */
	AlipayOrderNo string `json:"alipay_order_no"`

	/* 本次支付金额 */
	Amount string `json:"amount"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 最近修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 本次支付url地址 */
	PayUrl string `json:"pay_url"`

	/* 收款人的userId */
	ReceiveUserId string `json:"receive_user_id"`

	/* 本次支付的支付宝流水号 */
	TransferOrderNo string `json:"transfer_order_no"`

	/* 本次支付的外部单据号 */
	TransferOutOrderNo string `json:"transfer_out_order_no"`
}

/* 冻结订单详情 */
type UnfreezeOrderDetail struct {
	/* 支付宝订单号 */
	AlipayOrderNo string `json:"alipay_order_no"`

	/* 订单创建时间 */
	CreateTime string `json:"create_time"`

	/* 备注 */
	Memo string `json:"memo"`

	/* 冻结订单的商户订单号 */
	MerchantOrderNo string `json:"merchant_order_no"`

	/* 订单的最近修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 冻结金额（含服务费） */
	OrderAmount string `json:"order_amount"`

	/* 订单状态：I：初始，S：成功，F：失败 */
	OrderStatus string `json:"order_status"`

	/* 解冻金额（含服务费） */
	UnfreezeAmount string `json:"unfreeze_amount"`
}

/* 商品属性图片结构 */
type PropImg struct {
	/* 图片创建时间 时间格式：yyyy-MM-dd HH:mm:ss */
	Created string `json:"created"`

	/* 属性图片的id，和商品相对应 */
	Id int64 `json:"id"`

	/* 图片放在第几张（多图时可设置） */
	Position int64 `json:"position"`

	/* 图片所对应的属性组合的字符串 */
	Properties string `json:"properties"`

	/* 图片链接地址 */
	Url string `json:"url"`
}

/* 小额支付冻结订单详情 */
type MicroPayOrderDetail struct {
	/* 支付宝订单号，此订单号作为后续支付冻结金以及转账的订单标识 */
	AlipayOrderNo string `json:"alipay_order_no"`

	/* 支付方的支付宝userId */
	AlipayUserId string `json:"alipay_user_id"`

	/* 可用于支付的金额（除去服务费） */
	AvailableAmount string `json:"available_amount"`

	/* 订单创建时间 */
	CreateTime string `json:"create_time"`

	/* 冻结资金的到期自动解冻时间 */
	ExpireTime string `json:"expire_time"`

	/* 冻结金额（不包含服务费） */
	FreezeAmount string `json:"freeze_amount"`

	/* 备注 */
	Memo string `json:"memo"`

	/* 商户订单号,这个是调用传入的 */
	MerchantOrderNo string `json:"merchant_order_no"`

	/* 订单的最近修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 订单状态：I：初始，S：成功 */
	OrderStatus string `json:"order_status"`

	/* 支付的金额（含服务费） */
	PayAmount string `json:"pay_amount"`

	/* 冻结资金支付确认方式，
	NO_CONFIRM：不需要付款确认，调用接口直接扣款
	PAY_PASSWORD:
	在转账需要付款方用支付密码确认，才可以转账成功 */
	PayConfirm string `json:"pay_confirm"`
}

/* 聊天记录列表 */
type MsgList struct {
	/* 当direction=0有效，完整消息内容 */
	Content string `json:"content"`

	/* 表示消息方向
	0:from_id->to_id
	1:to_id->from_id */
	Direction int64 `json:"direction"`

	/* 当direction=1有效，消息长度 */
	Length int64 `json:"length"`

	/* 东八区时间 */
	Time string `json:"time"`

	/* type & 1  ：自动回复<br>
	type & 2  : 陌生人消息（等于0是好友消息）<br>
	type & 4  : 广播消息<br>
	type & 8  : 最近联系人陌生人消息<br>
	type & 16 : 离线消息<br>
	type & 32 : 子账号转发系统消息 */
	Type int64 `json:"type"`

	/* 当direction=1有效，url列表 */
	UrlLists []*UrlList `json:"url_lists>url_list"`

	/* 当direction=1有效，（关键词，数量）列表 */
	WordLists []*WordCountList `json:"word_lists>word_count_list"`
}

/* 关键词列表 */
type WordList struct {
	/* 关键词 */
	Word string `json:"word"`
}

/* 关键词统计 */
type WordCountList struct {
	/* 关键词数量 */
	Count int64 `json:"count"`

	/* 关键词 */
	Word string `json:"word"`
}

/* url列表 */
type UrlList struct {
	/* url列表 */
	Url string `json:"url"`
}

/* 品牌 */
type Brand struct {
	/* vid的值 */
	Name string `json:"name"`

	/* 品牌的属性id */
	Pid int64 `json:"pid"`

	/* 品牌的属性名 */
	PropName string `json:"prop_name"`

	/* 对应属性的 pid:vid 串中的vid */
	Vid int64 `json:"vid"`
}

/* 商品类目结构 */
type ItemCat struct {
	/* 商品所属类目ID */
	Cid int64 `json:"cid"`

	/* Feature对象列表
	目前已有的属性：
	若Attr_key为 udsaleprop，attr_value为1 则允许卖家在改类目新增自定义销售属性,不然为不允许 */
	Features []*Feature `json:"features>feature"`

	/* 该类目是否为父类目(即：该类目是否还有子类目) */
	IsParent bool `json:"is_parent"`

	/* 类目名称 */
	Name string `json:"name"`

	/* 父类目ID=0时，代表的是一级的类目 */
	ParentCid int64 `json:"parent_cid"`

	/* 排列序号，表示同级类目的展现次序，如数值相等则按名称次序排列。取值范围:大于零的整数 */
	SortOrder int64 `json:"sort_order"`

	/* 状态。可选值:normal(正常),deleted(删除) */
	Status string `json:"status"`
}

/* 属性值 */
type PropValue struct {
	/* 类目ID */
	Cid int64 `json:"cid"`

	/* 属性值feature */
	Features []*Feature `json:"features>feature"`

	/* 是否为父类目属性 */
	IsParent bool `json:"is_parent"`

	/* 修改时间（类目增量专用） */
	ModifiedTime string `json:"modified_time"`

	/* 三种枚举类型：modify，add，delete (增量类目专用) */
	ModifiedType string `json:"modified_type"`

	/* 属性值 */
	Name string `json:"name"`

	/* 属性值别名 */
	NameAlias string `json:"name_alias"`

	/* 属性 ID */
	Pid int64 `json:"pid"`

	/* 属性名 */
	PropName string `json:"prop_name"`

	/* 排列序号。取值范围:大于零的整数 */
	SortOrder int64 `json:"sort_order"`

	/* 状态。可选值:normal(正常),deleted(删除) */
	Status string `json:"status"`

	/* 属性值ID */
	Vid int64 `json:"vid"`
}

/* Item(商品)结构 */
type Item struct {
	/* 售后服务ID,该字段仅在taobao.item.get接口中返回 */
	AfterSaleId int64 `json:"after_sale_id"`

	/* 商品上传后的状态。onsale出售中，instock库中 */
	ApproveStatus string `json:"approve_status"`

	/* 天猫订单抽佣比例，为5的倍数，最低0.5%。跟淘客佣金没有关系。 */
	AuctionPoint int64 `json:"auction_point"`

	/* 代充商品类型。在代充商品的类目下，不传表示不标记商品类型（交易搜索中就不能通过标记搜到相关的交易了）。可选类型： no_mark(不做类型标记) time_card(点卡软件代充) fee_card(话费软件代充) */
	AutoFill string `json:"auto_fill"`

	/* 商品级别的条形码 */
	Barcode string `json:"barcode"`

	/* 基础色数据 */
	ChangeProp string `json:"change_prop"`

	/* 商品所属的叶子类目 id */
	Cid int64 `json:"cid"`

	/* 货到付款运费模板ID */
	CodPostageId int64 `json:"cod_postage_id"`

	/* Item的发布时间，目前仅供taobao.item.add和taobao.item.get可用 */
	Created string `json:"created"`

	/* 定制工具Id */
	CustomMadeTypeId string `json:"custom_made_type_id"`

	/* 下架时间（格式：yyyy-MM-dd HH:mm:ss） */
	DelistTime string `json:"delist_time"`

	/* 发货时间信息 */
	DeliveryTime *DeliveryTime `json:"delivery_time"`

	/* 商品描述, 字数要大于5个字符，小于25000个字符 */
	Desc string `json:"desc"`

	/* 宝贝描述规范化模块锚点信息 */
	DescModuleInfo *DescModuleInfo `json:"desc_module_info"`

	/* 商品描述模块化，模块列表，由List转化成jsonArray存入，后端逻辑验证通过，拼装成模块内容+锚点导航后存入desc中。数据结构具体参见Item_Desc_Module */
	DescModules string `json:"desc_modules"`

	/* 商品url */
	DetailUrl string `json:"detail_url"`

	/* ems费用,格式：5.00；单位：元；精确到：分 */
	EmsFee float64 `json:"ems_fee,string"`

	/* 快递费用,格式：5.00；单位：元；精确到：分 */
	ExpressFee float64 `json:"express_fee,string"`

	/* 宝贝特征值，
	只有在Top支持的特征值才能保存到宝贝上 */
	Features string `json:"features"`

	/* 食品安全信息，包括：生产许可证编号、产品标准号、厂名、厂址等 */
	FoodSecurity *FoodSecurity `json:"food_security"`

	/* 运费承担方式,seller（卖家承担），buyer(买家承担） */
	FreightPayer string `json:"freight_payer"`

	/* 全球购商品采购地信息（地区/国家），代表全球购商品的产地信息。 */
	GlobalStockCountry string `json:"global_stock_country"`

	/* 全球购商品采购地信息（库存类型），有两种库存类型：现货和代购;
	参数值为1时代表现货，值为2时代表代购 */
	GlobalStockType string `json:"global_stock_type"`

	/* 支持会员打折,true/false */
	HasDiscount bool `json:"has_discount"`

	/* 是否有发票,true/false */
	HasInvoice bool `json:"has_invoice"`

	/* 橱窗推荐,true/false */
	HasShowcase bool `json:"has_showcase"`

	/* 是否有保修,true/false */
	HasWarranty bool `json:"has_warranty"`

	/* 加价幅度。如果为0，代表系统代理幅度。
	在竞拍中，为了超越上一个出价，会员需要在当前出价上增加金额，这个金额就是加价幅度。卖家在发布宝贝的时候可以自定义加价幅度，也可以让系统自动代理加价。系统自动代理加价的加价幅度随着当前出价金额的增加而增加，我们建议会员使用系统自动代理加价，并请买家在出价前看清楚加价幅度的具体金额。另外需要注意是，此功能只适用于拍卖的商品。
	以下是系统自动代理加价幅度表：
	当前价（加价幅度 ）
	1-40（ 1 ）、41-100（ 2 ）、101-200（5 ）、201-500 （10）、501-1001（15）、001-2000（25）、2001-5000（50）、5001-10000（100）
	10001以上         200 */
	Increment string `json:"increment"`

	/* 用户内店宝贝装修模板id */
	InnerShopAuctionTemplateId int64 `json:"inner_shop_auction_template_id"`

	/* 用户自行输入的类目属性ID串。结构："pid1,pid2,pid3"，如："20000"（表示品牌） 注：通常一个类目下用户可输入的关键属性不超过1个。 */
	InputPids string `json:"input_pids"`

	/* 用户自行输入的子属性名和属性值，结构:"父属性值;一级子属性名;一级子属性值;二级子属性名;自定义输入值,....",如：“耐克;耐克系列;科比系列;科比系列;2K5”，input_str需要与input_pids一一对应，注：通常一个类目下用户可输入的关键属性不超过1个。所有属性别名加起来不能超过 3999字节。 */
	InputStr string `json:"input_str"`

	/* 是否是3D淘宝的商品 */
	Is3D bool `json:"is_3D"`

	/* 是否为达尔文挂接成功了的商品 */
	IsCspu bool `json:"is_cspu"`

	/* 是否在外部网店显示 */
	IsEx bool `json:"is_ex"`

	/* 非分销商品：0，代销：1，经销：2 */
	IsFenxiao int64 `json:"is_fenxiao"`

	/* 是否24小时闪电发货 */
	IsLightningConsignment bool `json:"is_lightning_consignment"`

	/* 是否是线下商品。
	1：线上商品（默认值）；
	2：线上或线下商品；
	3：线下商品。 */
	IsOffline string `json:"is_offline"`

	/* 商品是否为先行赔付
	taobao.items.search和taobao.items.vip.search专用 */
	IsPrepay bool `json:"is_prepay"`

	/* 是否在淘宝显示 */
	IsTaobao bool `json:"is_taobao"`

	/* 是否定时上架商品 */
	IsTiming bool `json:"is_timing"`

	/* 虚拟商品的状态字段 */
	IsVirtual bool `json:"is_virtual"`

	/* 标示商品是否为新品。
	值含义：true-是，false-否。 */
	IsXinpin bool `json:"is_xinpin"`

	/* 商品图片列表(包括主图)。fields中只设置item_img可以返回ItemImg结构体中所有字段，如果设置为item_img.id、item_img.url、item_img.position等形式就只会返回相应的字段 */
	ItemImgs []*ItemImg `json:"item_imgs>item_img"`

	/* 表示商品的体积，用于按体积计费的运费模板。该值的单位为立方米（m3）。
	该值支持两种格式的设置：格式1：bulk:3,单位为立方米(m3),表示直接设置为商品的体积。格式2：weight:10;breadth:10;height:10，单位为米（m） */
	ItemSize string `json:"item_size"`

	/* 商品的重量，用于按重量计费的运费模板。注意：单位为kg */
	ItemWeight string `json:"item_weight"`

	/* 上架时间（格式：yyyy-MM-dd HH:mm:ss） */
	ListTime string `json:"list_time"`

	/* 本地生活电子交易凭证业务，目前此字段只涉及到的信息为有效期:
	如果有效期为起止日期类型，此值为2012-08-06,2012-08-16
	如果有效期为【购买成功日 至】类型则格式为2012-08-16
	如果有效期为天数类型则格式为3 */
	LocalityLife *LocalityLife `json:"locality_life"`

	/* 商品所在地 */
	Location *Location `json:"location"`

	/* 商品修改时间（格式：yyyy-MM-dd HH:mm:ss） */
	Modified string `json:"modified"`

	/* 宝贝主图视频的数据信息，包括：视频ID，视频缩略图URL，视频时长，视频状态等信息。 */
	MpicVideo *MpicVideo `json:"mpic_video"`

	/* 是否为新消保法中的7天无理由退货 */
	Newprepay string `json:"newprepay"`

	/* 卖家昵称 */
	Nick string `json:"nick"`

	/* 商品数量 */
	Num int64 `json:"num"`

	/* 商品数字id */
	NumIid int64 `json:"num_iid"`

	/* 是否淘1站商品 */
	OneStation bool `json:"one_station"`

	/* 商家外部编码(可与商家外部系统对接)。需要授权才能获取。 */
	OuterId string `json:"outer_id"`

	/* 用户外店装修模板id */
	OuterShopAuctionTemplateId int64 `json:"outer_shop_auction_template_id"`

	/* 用于保存拍卖有关的信息 */
	PaimaiInfo *PaimaiInfo `json:"paimai_info"`

	/* 商品主图片地址 */
	PicUrl string `json:"pic_url"`

	/* 平邮费用,格式：5.00；单位：元；精确到：分 */
	PostFee float64 `json:"post_fee,string"`

	/* 宝贝所属的运费模板ID，如果没有返回则说明没有使用运费模板 */
	PostageId int64 `json:"postage_id"`

	/* 商品价格，格式：5.00；单位：元；精确到：分 */
	Price float64 `json:"price,string"`

	/* 宝贝所属产品的id(可能为空). 该字段可以通过taobao.products.search 得到 */
	ProductId int64 `json:"product_id"`

	/* 消保类型，多个类型以,分割。可取以下值：
	2：假一赔三；4：7天无理由退换货；taobao.items.search和taobao.items.vip.search专用 */
	PromotedService string `json:"promoted_service"`

	/* 商品属性图片列表。fields中只设置prop_img可以返回PropImg结构体中所有字段，如果设置为prop_img.id、prop_img.url、prop_img.properties、prop_img.position等形式就只会返回相应的字段 */
	PropImgs []*PropImg `json:"prop_imgs>prop_img"`

	/* 属性值别名,比如颜色的自定义名称 */
	PropertyAlias string `json:"property_alias"`

	/* 商品属性 格式：pid:vid;pid:vid */
	Props string `json:"props"`

	/* 商品属性名称。标识着props内容里面的pid和vid所对应的名称。格式为：pid1:vid1:pid_name1:vid_name1;pid2:vid2:pid_name2:vid_name2……(<strong>注：</strong><font color="red">属性名称中的冒号":"被转换为："#cln#";
	分号";"被转换为："#scln#"
	</font>) */
	PropsName string `json:"props_name"`

	/* 商品所属卖家的信用等级数，1表示1心，2表示2心……，只有调用商品搜索:taobao.items.get和taobao.items.search的时候才能返回 */
	Score int64 `json:"score"`

	/* 秒杀商品类型。打上秒杀标记的商品，用户只能下架并不能再上架，其他任何编辑或删除操作都不能进行。如果用户想取消秒杀标记，需要联系小二进行操作。如果秒杀结束需要自由编辑请联系活动负责人（小二）去掉秒杀标记。可选类型
	web_only(只能通过web网络秒杀)
	wap_only(只能通过wap网络秒杀)
	web_and_wap(既能通过web秒杀也能通过wap秒杀) */
	SecondKill string `json:"second_kill"`

	/* 达尔文数据挂接，第二步保存结果 */
	SecondResult bool `json:"second_result"`

	/* 商品卖点信息，天猫商家使用字段，最长150个字符。 */
	SellPoint string `json:"sell_point"`

	/* 是否承诺退换货服务! */
	SellPromise bool `json:"sell_promise"`

	/* 商品所属的店铺内卖家自定义类目列表 */
	SellerCids string `json:"seller_cids"`

	/* <a href="http://open.taobao.com/dev/index.php/Sku">Sku</a>列表。fields中只设置sku可以返回Sku结构体中所有字段，如果设置为sku.sku_id、sku.properties、sku.quantity等形式就只会返回相应的字段 */
	Skus []*Sku `json:"skus>sku"`

	/* 商品销量 */
	SoldQuantity int64 `json:"sold_quantity"`

	/* 商品新旧程度(全新:new，闲置:unused，二手：second) */
	StuffStatus string `json:"stuff_status"`

	/* 商品是否支持拍下减库存:1支持;2取消支持(付款减库存);0(默认)不更改 集市卖家默认拍下减库存; 商城卖家默认付款减库存 */
	SubStock int64 `json:"sub_stock"`

	/* 商品的子标题，给商品增加卖点等描述 */
	SubTitle string `json:"sub_title"`

	/* 页面模板id */
	TemplateId string `json:"template_id"`

	/* 商品标题,不能超过60字节 */
	Title string `json:"title"`

	/* 商品类型(fixed:一口价;auction:拍卖)注：取消团购 */
	Type string `json:"type"`

	/* 有效期,7或者14（默认是7天） */
	ValidThru int64 `json:"valid_thru"`

	/* 该字段废弃，请勿使用。 */
	VideoId int64 `json:"video_id"`

	/* 商品视频列表(目前只支持单个视频关联)。fields中只设置video可以返回Video结构体中所有字段，如果设置为video.id、video.video_id、
	video.url等形式就只会返回相应的字段 */
	Videos []*Video `json:"videos>video"`

	/* 商品是否违规，违规：true , 不违规：false */
	Violation bool `json:"violation"`

	/* 不带html标签的desc文本信息，该字段只在taobao.item.get接口中返回 */
	WapDesc string `json:"wap_desc"`

	/* 适合wap应用的商品详情url ，该字段只在taobao.item.get接口中返回 */
	WapDetailUrl string `json:"wap_detail_url"`

	/* 无线的宝贝描述 */
	WirelessDesc string `json:"wireless_desc"`

	/* 预扣库存，即付款减库存的商品现在有多少处于未付款状态的订单 */
	WithHoldQuantity int64 `json:"with_hold_quantity"`

	/* 商品所属的商家的旺旺在线状况，
	taobao.items.search和taobao.items.vip.search专用 */
	WwStatus bool `json:"ww_status"`
}

/* 授权 */
type SellerAuthorize struct {
	/* 品牌列表 */
	Brands []*Brand `json:"brands>brand"`

	/* 类目列表 */
	ItemCats []*ItemCat `json:"item_cats>item_cat"`

	/* 被授权的新品类目列表 */
	XinpinItemCats []*ItemCat `json:"xinpin_item_cats>item_cat"`
}

/* 大家印象标签对应评价信息对象 */
type ImprFeedInfoDO struct {
	/* 1:主评  2:追评 */
	BizType int64 `json:"biz_type"`

	/* 评价内容 */
	Feedback string `json:"feedback"`

	/* 评价创建时间 */
	GmtCreate string `json:"gmt_create"`

	/* 评价的修改时间 */
	GmtModified string `json:"gmt_modified"`

	/* 从评价内容里提取的语义标签 */
	ImprWords []string `json:"impr_words"`
}

/* 商品属性 */
type ItemProp struct {
	/* 子属性的模板（卖家自行输入属性时需要用到） */
	ChildTemplate string `json:"child_template"`

	/* 类目ID */
	Cid int64 `json:"cid"`

	/* 属性的feature列表 */
	Features []*Feature `json:"features>feature"`

	/* 是否允许别名。可选值：true（是），false（否） */
	IsAllowAlias bool `json:"is_allow_alias"`

	/* 是否颜色属性。可选值:true(是),false(否) */
	IsColorProp bool `json:"is_color_prop"`

	/* 是否是可枚举属性。可选值:true(是),false(否) */
	IsEnumProp bool `json:"is_enum_prop"`

	/* 在is_enum_prop是true的前提下，是否是卖家可以自行输入的属性（注：如果is_enum_prop返回false，该参数统一返回false）。可选值:true(是),false(否)。<b>对于品牌和型号属性（包括子属性）：如果用户是C卖家，则可自定义属性；如果是B卖家，则不可自定义属性，而必须要授权的属性。</b> */
	IsInputProp bool `json:"is_input_prop"`

	/* 是否商品属性。可选值:true(是),false(否) */
	IsItemProp bool `json:"is_item_prop"`

	/* 是否关键属性。可选值:true(是),false(否) */
	IsKeyProp bool `json:"is_key_prop"`

	/* 是否销售属性。可选值:true(是),false(否) */
	IsSaleProp bool `json:"is_sale_prop"`

	/* 属性修改时间（增量类目专用） */
	ModifiedTime string `json:"modified_time"`

	/* 三种枚举类型：modify，add，delete（增量类目专用） */
	ModifiedType string `json:"modified_type"`

	/* 发布产品或商品时是否可以多选。可选值:true(是),false(否) */
	Multi bool `json:"multi"`

	/* 发布产品或商品时是否为必选属性。可选值:true(是),false(否) */
	Must bool `json:"must"`

	/* 属性名 */
	Name string `json:"name"`

	/* 上级属性ID */
	ParentPid int64 `json:"parent_pid"`

	/* 上级属性值ID */
	ParentVid int64 `json:"parent_vid"`

	/* 属性 ID 例：品牌的PID=20000 */
	Pid int64 `json:"pid"`

	/*  */
	PropValues []*PropValue `json:"prop_values>prop_value"`

	/* 发布产品或商品时是否为必选属性(与must相同)。可选值:true(是),false(否) */
	Required bool `json:"required"`

	/* 排列序号。取值范围:大于零的整排列序号。取值范围:大于零的整数 */
	SortOrder int64 `json:"sort_order"`

	/* 状态。可选值:normal(正常),deleted(删除) */
	Status string `json:"status"`

	/* 属性值类型。可选值：
	multiCheck(枚举多选)
	optional(枚举单选)
	multiCheckText(枚举可输入多选)
	optionalText(枚举可输入单选)
	text(非枚举可输入) */
	Type string `json:"type"`
}

/* 图片 */
type Picture struct {
	/* 图片上传的来源，有电脑版本宝贝发布，手机版本宝贝发布 */
	ClientType string `json:"client_type"`

	/* 图片的创建时间 */
	Created string `json:"created"`

	/* 图片是否删除的标记 */
	Deleted string `json:"deleted"`

	/* 图片在后台处理之后的md5值
	当md5值为32位长度的字符串时为图片搬家后的文件md5验证码
	md5值为长整数时为图片替换后的时间戳 */
	Md5 string `json:"md5"`

	/* 图片的修改时间 */
	Modified string `json:"modified"`

	/* 图片分类ID */
	PictureCategoryId int64 `json:"picture_category_id"`

	/* 图片ID */
	PictureId int64 `json:"picture_id"`

	/* 返回的是绝对路径如：http://img07.taobaocdn.com/imgextra/i7/22670458/T2dD0kXb4cXXXXXXXX_!!22670458.jpg */
	PicturePath string `json:"picture_path"`

	/* 图片相素,格式:长x宽，如450x150 */
	Pixel string `json:"pixel"`

	/* 图片是否被引用 */
	Referenced bool `json:"referenced"`

	/* 图片大小,bite单位 */
	Sizes int64 `json:"sizes"`

	/* 图片状态,unfroze代表没有被冻结，froze代表被冻结,pass代表排查通过 */
	Status string `json:"status"`

	/* 图片标题 */
	Title string `json:"title"`

	/* 卖家ID */
	Uid int64 `json:"uid"`
}

/* 地址区域结构 */
type Area struct {
	/* 标准行政区域代码.参考:http://www.stats.gov.cn/tjbz/xzqhdm/t20120105_402777427.htm */
	Id int64 `json:"id"`

	/* 地域名称.如北京市,杭州市,西湖区,每一个area_id 都代表了一个具体的地区. */
	Name string `json:"name"`

	/* 父节点区域标识.如北京市的area_id是110100,朝阳区是北京市的一个区,所以朝阳区的parent_id就是北京市的area_id. */
	ParentId int64 `json:"parent_id"`

	/* 区域类型.area区域 1:country/国家;2:province/省/自治区/直辖市;3:city/地区(省下面的地级市);4:district/县/市(县级市)/区;abroad:海外. 比如北京市的area_type = 2,朝阳区是北京市的一个区,所以朝阳区的area_type = 4. */
	Type int64 `json:"type"`

	/* 具体一个地区的邮编 */
	Zip string `json:"zip"`
}

/* 物流公司基础数据结构 */
type LogisticsCompany struct {
	/* 物流公司代码 */
	Code string `json:"code"`

	/* 物流公司标识 */
	Id int64 `json:"id"`

	/* 物流公司简称 */
	Name string `json:"name"`

	/* 运单号验证正则表达式 */
	RegMailNo string `json:"reg_mail_no"`
}

/* 获取的物流订单详情列表 返回的Shipping包含的具体信息为入参fields请求的字段信息 */
type Shipping struct {
	/* 买家昵称 */
	BuyerNick string `json:"buyer_nick"`

	/* 物流公司名称 */
	CompanyName string `json:"company_name"`

	/* 运单创建时间 */
	Created string `json:"created"`

	/* 预约取货结束时间 */
	DeliveryEnd string `json:"delivery_end"`

	/* 预约取货开始时间 */
	DeliveryStart string `json:"delivery_start"`

	/* 谁承担运费.可选值:buyer(买家承担),seller(卖家承担运费). */
	FreightPayer string `json:"freight_payer"`

	/* 标示为是否快捷COD订单 */
	IsQuickCodOrder bool `json:"is_quick_cod_order"`

	/* 表明是否是拆单，默认值0，1表示拆单 */
	IsSpilt int64 `json:"is_spilt"`

	/* 返回发货是否成功。 */
	IsSuccess bool `json:"is_success"`

	/* 货物名称 */
	ItemTitle string `json:"item_title"`

	/* 收件人地址信息(在传输请求参数Fields字段时，必须使用“receiver_location”才能返回此字段) */
	Location *Location `json:"location"`

	/* 运单修改时间 */
	Modified string `json:"modified"`

	/* 物流订单编号 */
	OrderCode string `json:"order_code"`

	/* 运单号.具体一个物流公司的运单号码. */
	OutSid string `json:"out_sid"`

	/* 收件人手机号码 */
	ReceiverMobile string `json:"receiver_mobile"`

	/* 收件人姓名 */
	ReceiverName string `json:"receiver_name"`

	/* 收件人电话 */
	ReceiverPhone string `json:"receiver_phone"`

	/* 卖家是否确认发货.可选值:yes(是),no(否). */
	SellerConfirm string `json:"seller_confirm"`

	/* 卖家昵称 */
	SellerNick string `json:"seller_nick"`

	/* 物流订单状态,可选值:
	CREATED(订单已创建)
	RECREATED(订单重新创建)
	CANCELLED(订单已取消)
	CLOSED(订单关闭)
	SENDING(等候发送给物流公司)
	ACCEPTING(已发送给物流公司,等待接单)
	ACCEPTED(物流公司已接单)
	REJECTED(物流公司不接单)
	PICK_UP(物流公司揽收成功)
	PICK_UP_FAILED(物流公司揽收失败)
	LOST(物流公司丢单)
	REJECTED_BY_RECEIVER(对方拒签)
	ACCEPTED_BY_RECEIVER(发货方式在线下单：对方已签收；自己联系：卖家已发货) */
	Status string `json:"status"`

	/* 拆单子订单列表，对应的数据是：该物流订单下的全部子订单 */
	SubTids []int64 `json:"sub_tids"`

	/* 交易ID */
	Tid int64 `json:"tid"`

	/* 物流方式.可选值:free(卖家包邮),post(平邮),express(快递),ems(EMS). */
	Type string `json:"type"`
}

/* 库存明细 */
type IpcInventoryDetailDo struct {
	/* 主订单号 */
	BizOrderId int64 `json:"biz_order_id"`

	/* 子订单号 */
	BizSubOrderId int64 `json:"biz_sub_order_id"`

	/* 1拍减 2付减 */
	Flag int64 `json:"flag"`

	/* 占用数量 */
	OccupyQuantity int64 `json:"occupy_quantity"`

	/* 货主昵称 */
	OwnerNick string `json:"owner_nick"`

	/* 预扣库存数 */
	ReserveQuantity int64 `json:"reserve_quantity"`

	/* 仓储商品id */
	ScItemId int64 `json:"sc_item_id"`

	/* 仓库编码 */
	StoreCode string `json:"store_code"`
}

/* 评价列表 */
type TradeRate struct {
	/* 评价内容,最大长度:500个汉字 */
	Content string `json:"content"`

	/* 评价创建时间,格式:yyyy-MM-dd HH:mm:ss */
	Created string `json:"created"`

	/* 商品价格,精确到2位小数;单位:元.如:200.07，表示:200元7分 */
	ItemPrice float64 `json:"item_price,string"`

	/* 商品标题 */
	ItemTitle string `json:"item_title"`

	/* 评价者昵称 */
	Nick string `json:"nick"`

	/* 商品的数字ID */
	NumIid int64 `json:"num_iid"`

	/* 子订单ID */
	Oid int64 `json:"oid"`

	/* 被评价者昵称 */
	RatedNick string `json:"rated_nick"`

	/* 评价解释,最大长度:500个汉字 */
	Reply string `json:"reply"`

	/* 评价结果,可选值:good(好评),neutral(中评),bad(差评) */
	Result string `json:"result"`

	/* 评价者角色.可选值:seller(卖家),buyer(买家) */
	Role string `json:"role"`

	/* 交易ID */
	Tid int64 `json:"tid"`

	/* 评价信息是否用于记分，
	可取值：true(参与记分)和false(不参与记分) */
	ValidScore bool `json:"valid_score"`
}

/* 分销产品SKU */
type FenxiaoSku struct {
	/* 代销采购价，单位：元 */
	CostPrice string `json:"cost_price"`

	/* 经销采购价 */
	DealerCostPrice string `json:"dealer_cost_price"`

	/* SkuID */
	Id int64 `json:"id"`

	/* 名称 */
	Name string `json:"name"`

	/* 商家编码 */
	OuterId string `json:"outer_id"`

	/* sku的销售属性组合字符串。格式:pid:vid;pid:vid,如:1627207:3232483;1630696:3284570,表示:机身颜色:军绿色;手机套餐:一电一充。 */
	Properties string `json:"properties"`

	/* 库存 */
	Quantity int64 `json:"quantity"`

	/* 配额可用库存 */
	QuotaQuantity int64 `json:"quota_quantity"`

	/* 预扣库存 */
	ReservedQuantity int64 `json:"reserved_quantity"`

	/* 关联的后端商品id */
	ScitemId int64 `json:"scitem_id"`

	/* 市场价 */
	StandardPrice string `json:"standard_price"`
}

/* 退款留言 */
type TmallRefundMessage struct {
	/* 创建时间 */
	Created string `json:"created"`

	/* 留言内容 */
	MessageContent string `json:"message_content"`

	/* 退款留言 */
	MessageId int64 `json:"message_id"`

	/* 退款单编号 */
	RefundId int64 `json:"refund_id"`

	/* onsale:售中
	aftersale：售后 */
	RefundPhase string `json:"refund_phase"`

	/* 留言用户昵称 */
	UserNick string `json:"user_nick"`

	/* 留言用户角色 */
	UserRole string `json:"user_role"`

	/* 举证信息 */
	VoucherUrls string `json:"voucher_urls"`
}

/* 标签信息 */
type Tag struct {
	/* 标签key */
	TagKey string `json:"tag_key"`

	/* 标签名称 */
	TagName string `json:"tag_name"`

	/* 签标类型 */
	TagType string `json:"tag_type"`
}

/* 退款商品信息 */
type RefundItem struct {
	/* 商品数量 */
	Num int64 `json:"num"`

	/* 商品id */
	NumIid int64 `json:"num_iid"`

	/* 商品外部商家编码 */
	OuterId string `json:"outer_id"`

	/* 商品价格 */
	Price int64 `json:"price"`

	/* sku信息 */
	Sku string `json:"sku"`
}

/* 收货人详细信息 */
type Receiver struct {
	/* 收货人的详细地址信息 */
	Address string `json:"address"`

	/* 证件号 */
	CardId string `json:"card_id"`

	/* 收货人的城市 */
	City string `json:"city"`

	/* 区/县 */
	District string `json:"district"`

	/* 移动电话。 */
	MobilePhone string `json:"mobile_phone"`

	/* 收货人全名。 */
	Name string `json:"name"`

	/* 固定电话。 */
	Phone string `json:"phone"`

	/* 收货人所在省份 */
	State string `json:"state"`

	/* 邮政编码 */
	Zip string `json:"zip"`
}

/* 退货单 */
type ReturnBill struct {
	/* 单据类型 */
	BillType string `json:"bill_type"`

	/* 物流公司 */
	CompanyName string `json:"company_name"`

	/* 退款创建时间 */
	Created string `json:"created"`

	/* 退款说明 */
	Desc string `json:"desc"`

	/* 退款商品信息 */
	ItemList []*RefundItem `json:"item_list>refund_item"`

	/* 最后一次修改时间 */
	Modified string `json:"modified"`

	/* 交易子订单号 */
	Oid int64 `json:"oid"`

	/* 退货单操作日志 */
	OperationLog string `json:"operation_log"`

	/* 申请退款原因 */
	Reason string `json:"reason"`

	/* 退款单编号 */
	RefundId int64 `json:"refund_id"`

	/* onsale:售中
	aftersale：售后 */
	RefundPhase string `json:"refund_phase"`

	/* 退款协议版本 */
	RefundVersion int64 `json:"refund_version"`

	/* 物流运单号 */
	Sid string `json:"sid"`

	/* 退款单 状态
	wait_buyer_return_goods：卖家同意退货
	wait_seller_confirm_goods：买家已退款等待卖家确认
	confirm_success：卖家已同意退款
	confirm_failed: 卖家已拒绝退款 */
	Status string `json:"status"`

	/* 退款单的相关标签信息 */
	TagList []*Tag `json:"tag_list>tag"`

	/* 交易主订单号 */
	Tid int64 `json:"tid"`
}

/* 退款单 */
type RefundBill struct {
	/* 实际退款金额 */
	ActualRefundFee int64 `json:"actual_refund_fee"`

	/* 支付宝交易号 */
	AlipayNo string `json:"alipay_no"`

	/* 扩展属性 */
	Attribute string `json:"attribute"`

	/* 单据类型，退款单 */
	BillType string `json:"bill_type"`

	/* 买家昵称 */
	BuyerNick string `json:"buyer_nick"`

	/* 退款创建时间 */
	Created string `json:"created"`

	/* 淘宝小二是否介入 */
	CsStatus string `json:"cs_status"`

	/* 当前状态超时时间 */
	CurrentPhaseTimeout string `json:"current_phase_timeout"`

	/* 退款说明 */
	Desc string `json:"desc"`

	/* 退款商品信息 */
	ItemList []*RefundItem `json:"item_list>refund_item"`

	/* 最后一次修改时间 */
	Modified string `json:"modified"`

	/* 交易子订单号 */
	Oid int64 `json:"oid"`

	/* cannot_refuse: 不允许操作
	refund_onweb: 需要到网页版操作 */
	OperationConstraint string `json:"operation_constraint"`

	/* 申请退款原因 */
	Reason string `json:"reason"`

	/* 申请退款金额，单位：分 */
	RefundFee int64 `json:"refund_fee"`

	/* 退款单编号 */
	RefundId int64 `json:"refund_id"`

	/* onsale:售中
	aftersale：售后 */
	RefundPhase string `json:"refund_phase"`

	/* refund:仅退款
	return:退款退货 */
	RefundType string `json:"refund_type"`

	/* 退款协议版本 */
	RefundVersion int64 `json:"refund_version"`

	/* 卖家昵称 */
	SellerNick string `json:"seller_nick"`

	/* 退款单 状态
	wait_seller_agree：买家申请，等待卖家同意
	seller_refuse：卖家拒绝
	goods_returning：退货中
	closed：退款失败
	success：退款成功 */
	Status string `json:"status"`

	/* 退款单的相关标签信息 */
	TagList []*Tag `json:"tag_list>tag"`

	/* 交易主订单号 */
	Tid int64 `json:"tid"`

	/* wait_send_good:等待卖家发货
	wait_confirm_good：卖家已发货，等待买家确认收货
	finish: 交易完成 */
	TradeStatus string `json:"trade_status"`
}

/* 商品详情模块 */
type ItemDescModule struct {
	/* 描述具体内容 */
	Content string `json:"content"`

	/* 一个List<String>的Json串，里面是模块引导提示，不超过3条（isv提交时可忽略不传） */
	Intros string `json:"intros"`

	/* 模块id ,(注意:用户自定义模块不用填此项。) */
	ModuleId int64 `json:"module_id"`

	/* 模块名称 */
	ModuleName string `json:"module_name"`

	/* 是否必填 （isv提交时可忽略不传） */
	Required bool `json:"required"`

	/* 淘宝图片空间的地址链接，示例模板，最多不超过三个（isv提交时可忽略不传） */
	TplUrls string `json:"tpl_urls"`

	/* cat_mod:表示是运营设置的类目维度模块，usr_mod表示的是商家自定义模块。 */
	Type string `json:"type"`
}

/* 商品描述模块化信息，包含类目级别的模块信息以及用户自定义模块约束等其他信息 */
type ModularDescInfo struct {
	/* 旧描述与新描述共存时间（切换时间）。 */
	DeadLine string `json:"dead_line"`

	/* 运营定义的该商品所属类目的类目级别模块信息列表，列表顺序即为模块顺序。 */
	ItmDscModules []*ItemDescModule `json:"itm_dsc_modules>item_desc_module"`

	/* 默认值为false，如果此字段为true，则卖家上传的模块化的描述信息可以自定义排序。 */
	UserOrder bool `json:"user_order"`

	/* 用户自定义模块数量最大值限制。类目级别模块+用户级别模块必须小于<20 */
	UsrDefMaxNum int64 `json:"usr_def_max_num"`
}

/* 采购单及子采购单信息 */
type PurchaseOrder struct {
	/* 支付宝交易号。 */
	AlipayNo string `json:"alipay_no"`

	/* 买家nick，供应商查询不会返回买家昵称，分销商查询才会返回。 */
	BuyerNick string `json:"buyer_nick"`

	/* 买家支付给分销商的总金额。注意买家购买的商品可能不是全部来自同一供货商，请同时参考子单上的相关金额。（精确到2位小数;单位:元。如:200.07，表示:200元7分） */
	BuyerPayment float64 `json:"buyer_payment,string"`

	/* 加密后的买家淘宝ID，长度为32位 */
	BuyerTaobaoId string `json:"buyer_taobao_id"`

	/* 物流发货时间。格式:yyyy-MM-dd HH:mm:ss */
	ConsignTime string `json:"consign_time"`

	/* 采购单创建时间。格式:yyyy-MM-dd HH:mm:ss */
	Created string `json:"created"`

	/* 分销商来源网站（taobao）。 */
	DistributorFrom string `json:"distributor_from"`

	/* 分销商实付金额。(精确到2位小数;单位:元。如:200.07，表示:200元7分 ) */
	DistributorPayment float64 `json:"distributor_payment,string"`

	/* 分销商在来源网站的帐号名。 */
	DistributorUsername string `json:"distributor_username"`

	/* 交易结束时间 */
	EndTime string `json:"end_time"`

	/* 主订单属性信息，key-value形式：
	orderNovice ：订单发票抬头；
	orderNoviceContent ：代表发票明细 */
	Features []*Feature `json:"features>feature"`

	/* 分销流水号，分销平台产生的主键 */
	FenxiaoId int64 `json:"fenxiao_id"`

	/* 供应商交易ID 非采购单ID，如果改发货状态 是需要该ID，ID在用户未付款前为0，付款后有具体值（发货时使用该ID） */
	Id int64 `json:"id"`

	/* 自定义key */
	IsvCustomKey []string `json:"isv_custom_key"`

	/* 自定义值 */
	IsvCustomValue []string `json:"isv_custom_value"`

	/* 物流公司 */
	LogisticsCompanyName string `json:"logistics_company_name"`

	/* 运单号 */
	LogisticsId string `json:"logistics_id"`

	/* 采购单留言。（代销模式下信息包括买家留言和分销商留言） */
	Memo string `json:"memo"`

	/* 交易修改时间。格式:yyyy-MM-dd HH:mm:ss */
	Modified string `json:"modified"`

	/* 采购单留言列表 */
	OrderMessages []*OrderMessage `json:"order_messages>order_message"`

	/* 付款时间。格式:yyyy-MM-dd HH:mm:ss */
	PayTime string `json:"pay_time"`

	/* 支付方式：ALIPAY_SURETY（支付宝担保交易）、ALIPAY_CHAIN（分账交易）、TRANSFER（线下转账）、PREPAY（预存款）、IMMEDIATELY（即时到账）、CASHGOODS（先款后货） */
	PayType string `json:"pay_type"`

	/* 采购单邮费。(精确到2位小数;单位:元。如:200.07，表示:200元7分 ) */
	PostFee float64 `json:"post_fee,string"`

	/* 买家详细的信息。 */
	Receiver *Receiver `json:"receiver"`

	/* 配送方式，FAST(快速)、EMS、ORDINARY(平邮)、SELLER(卖家包邮) */
	Shipping string `json:"shipping"`

	/* 订单快照URL */
	SnapshotUrl string `json:"snapshot_url"`

	/* 采购单交易状态。可选值：<br>
	WAIT_BUYER_PAY(等待付款)<br>
	WAIT_SELLER_SEND_GOODS(已付款，待发货）<br>
	WAIT_BUYER_CONFIRM_GOODS(已付款，已发货)<br>
	TRADE_FINISHED(交易成功)<br>
	TRADE_CLOSED(交易关闭)<br>
	WAIT_BUYER_CONFIRM_GOODS_ACOUNTED(已付款（已分账），已发货。只对代销分账支持)<br>
	PAY_ACOUNTED_GOODS_CONFIRM （已分账发货成功）<br>
	PAY_WAIT_ACOUNT_GOODS_CONFIRM（已付款，确认收货） */
	Status string `json:"status"`

	/* 子订单的详细信息列表。 */
	SubPurchaseOrders []*SubPurchaseOrder `json:"sub_purchase_orders>sub_purchase_order"`

	/* 返回供应商备注旗帜
	vlaue在1-5之间。非1-5之间，都采用1作为默认。 1:红色 2:黄色 3:绿色 4:蓝色 5:粉红色 */
	SupplierFlag int64 `json:"supplier_flag"`

	/* 供应商来源网站, values: taobao, alibaba */
	SupplierFrom string `json:"supplier_from"`

	/* 供应商备注 */
	SupplierMemo string `json:"supplier_memo"`

	/* 供应商在来源网站的帐号名。 */
	SupplierUsername string `json:"supplier_username"`

	/* 主订单ID （经销不显示） */
	TcOrderId int64 `json:"tc_order_id"`

	/* 采购单总额（不含邮费,精确到2位小数;单位:元。如:200.07，表示:200元7分 ) */
	TotalFee float64 `json:"total_fee,string"`

	/* 分销方式：AGENT（代销）、DEALER（经销） */
	TradeType string `json:"trade_type"`
}

/* 质检订单使用明细 */
type QualityUsageDetail struct {
	/* 该订单已经使用的数量 */
	ApplicationAmount int64 `json:"application_amount"`

	/* 质检服务的收费项目码 */
	ArticleItemCode string `json:"article_item_code"`

	/* 该订单中尚未使用的数量 */
	AvailableAmount int64 `json:"available_amount"`

	/* 该订单的到期时间 */
	EndDate string `json:"end_date"`

	/* 该订单中每个质检服务的价格 */
	Price float64 `json:"price,string"`

	/* 该订单订购的数量 */
	PurchasAmount int64 `json:"purchas_amount"`

	/* 该订单的开通时间 */
	StartDate string `json:"start_date"`

	/* 订购ID */
	SubId int64 `json:"sub_id"`

	/* 用户ID */
	UserId int64 `json:"user_id"`
}

/* 产品扩展信息 */
type ProductExtraInfo struct {
	/* 产品扩展信息键 */
	FieldKey string `json:"field_key"`

	/* 产品扩展信息名称 */
	FieldName string `json:"field_name"`

	/* 产品扩展信息简介 */
	FieldValue string `json:"field_value"`

	/* 产品ID */
	ProductId int64 `json:"product_id"`
}

/* 分销产品 */
type FenxiaoProduct struct {
	/* 警戒库存 */
	AlarmNumber int64 `json:"alarm_number"`

	/* 类目id */
	CategoryId string `json:"category_id"`

	/* 所在地：市 */
	City string `json:"city"`

	/* 采购价格，单位：元。 */
	CostPrice float64 `json:"cost_price,string"`

	/* 创建时间 */
	Created string `json:"created"`

	/* 经销采购价 */
	DealerCostPrice float64 `json:"dealer_cost_price,string"`

	/* 产品描述路径，通过http请求获取 */
	DescPath string `json:"desc_path"`

	/* 产品描述的内容 */
	Description string `json:"description"`

	/* 折扣ID（新增参数） */
	DiscountId int64 `json:"discount_id"`

	/* 是否有保修，可选值：false（否）、true（是） */
	HaveGuarantee bool `json:"have_guarantee"`

	/* 是否有发票，可选值：false（否）、true（是） */
	HaveInvoice bool `json:"have_invoice"`

	/* 产品图片 */
	Images []*FenxiaoImage `json:"images>fenxiao_image"`

	/* 自定义属性，格式为pid:value;pid:value */
	InputProperties string `json:"input_properties"`

	/* 查询产品列表时，查询入参增加is_authz:yes|no
	yes:需要授权
	no:不需要授权 */
	IsAuthz string `json:"is_authz"`

	/* 导入的商品ID */
	ItemId int64 `json:"item_id"`

	/* 下载人数 */
	ItemsCount int64 `json:"items_count"`

	/* 更新时间 */
	Modified string `json:"modified"`

	/* 产品名称 */
	Name string `json:"name"`

	/* 累计采购次数 */
	OrdersCount int64 `json:"orders_count"`

	/* 商家编码 */
	OuterId string `json:"outer_id"`

	/* 产品分销商信息 */
	Pdus []*FenxiaoPdu `json:"pdus>fenxiao_pdu"`

	/* 产品图片路径 */
	Pictures string `json:"pictures"`

	/* 产品ID */
	Pid int64 `json:"pid"`

	/* ems费用，单位：元 */
	PostageEms float64 `json:"postage_ems,string"`

	/* 快递费用，单位：元 */
	PostageFast float64 `json:"postage_fast,string"`

	/* 运费模板ID */
	PostageId int64 `json:"postage_id"`

	/* 平邮费用，单位：元 */
	PostageOrdinary float64 `json:"postage_ordinary,string"`

	/* 运费类型，可选值：seller（供应商承担运费）、buyer（分销商承担运费） */
	PostageType string `json:"postage_type"`

	/* 产品线ID */
	ProductcatId int64 `json:"productcat_id"`

	/* 产品属性，格式为pid:vid;pid:vid */
	Properties string `json:"properties"`

	/* 属性别名，格式为pid:vid:alias;pid:vid:alias */
	PropertyAlias string `json:"property_alias"`

	/* 所在地：省 */
	Prov string `json:"prov"`

	/* 产品库存 */
	Quantity int64 `json:"quantity"`

	/* 根据商品ID查询时，返回这个产品对应的商品ID，只对分销商查询接口有效 */
	QueryItemId int64 `json:"query_item_id"`

	/* 配额可用库存 */
	QuotaQuantity int64 `json:"quota_quantity"`

	/* 预扣库存 */
	ReservedQuantity int64 `json:"reserved_quantity"`

	/* 最高零售价，单位：分。 */
	RetailPriceHigh float64 `json:"retail_price_high,string"`

	/* 最低零售价，单位：分。 */
	RetailPriceLow float64 `json:"retail_price_low,string"`

	/* 关联的后端商品id */
	ScitemId int64 `json:"scitem_id"`

	/* sku列表 */
	Skus []*FenxiaoSku `json:"skus>fenxiao_sku"`

	/* 产品spu id */
	SpuId int64 `json:"spu_id"`

	/* 采购基准价，单位：元。 */
	StandardPrice float64 `json:"standard_price,string"`

	/* 零售基准价，单位：元 */
	StandardRetailPrice float64 `json:"standard_retail_price,string"`

	/* 发布状态，可选值：up（上架）、down（下架） */
	Status string `json:"status"`

	/* 分销方式：AGENT（只做代销，默认值）、DEALER（只做经销）、ALL（代销和经销都做） */
	TradeType string `json:"trade_type"`

	/* 铺货时间 */
	UpshelfTime string `json:"upshelf_time"`
}

/* 子采购单详细信息 */
type SubPurchaseOrder struct {
	/* 分销商店铺中宝贝一口价 */
	AuctionPrice float64 `json:"auction_price,string"`

	/* 发票应开金额。根据买家实际付款去除邮费后，按各个子单(商品)金额比例进行分摊后的金额，仅供开发票时做票面金额参考。 */
	BillFee float64 `json:"bill_fee,string"`

	/* 买家订单上对应的子单零售金额，除以num（数量）后等于最终宝贝的零售价格（精确到2位小数;单位:元。如:200.07，表示:200元7分） */
	BuyerPayment float64 `json:"buyer_payment,string"`

	/* 创建时间。格式 yyyy-MM-dd HH:mm:ss 。 */
	Created string `json:"created"`

	/* 优惠活动的折扣金额 */
	DiscountFee float64 `json:"discount_fee,string"`

	/* 分销商实付金额=total_fee（分销商应付金额）+改价-优惠。（精确到2位小数;单位:元。如:200.07，表示:200元7分） */
	DistributorPayment float64 `json:"distributor_payment,string"`

	/* Feature对象列表
	目前已有的属性：
	attr_key为 www，attr_value为1 表示是www子订单
	attr_key为 wwwStoreCode，attr_value 是www子订单发货的仓库编码
	attr_key为isWt,attr_value为1 表示是网厅子订单
	attr_key为wtInfo,attr_value为网厅相关合约信息 */
	Features []*Feature `json:"features>feature"`

	/* 分销平台的子采购单主键 */
	FenxiaoId int64 `json:"fenxiao_id"`

	/* 子采购单id，淘宝交易主键，采购单未付款时为0.（只有支付宝 付款才有这个id，其余付款形式该字段为0） */
	Id int64 `json:"id"`

	/* 分销平台上的产品id，同FenxiaoProduct 的pid */
	ItemId int64 `json:"item_id"`

	/* 分销平台上商品商家编码。 */
	ItemOuterId string `json:"item_outer_id"`

	/* 产品的采购数量。取值范围:大于零的整数 */
	Num int64 `json:"num"`

	/* 老的SKU属性值。如: 颜色:红色:别名;尺码:L:别名 */
	OldSkuProperties string `json:"old_sku_properties"`

	/* 代销采购单对应下游200订单状态。
	可选值：
	WAIT_SELLER_SEND_GOODS(已付款，待发货)
	WAIT_BUYER_CONFIRM_GOODS(已付款，已发货)
	TRADE_CLOSED(已退款成功)
	TRADE_REFUNDING(退款中)
	TRADE_FINISHED(交易成功)
	TRADE_CLOSED_BY_TAOBAO(交易关闭) */
	Order200Status string `json:"order_200_status"`

	/* 产品的采购价格。（精确到2位小数;单位:元。如:200.07，表示:200元7分） */
	Price float64 `json:"price,string"`

	/* 优惠活动类型
	0=无优惠
	1=限时折 */
	PromotionType string `json:"promotion_type"`

	/* 退款金额 */
	RefundFee float64 `json:"refund_fee,string"`

	/* 后端商品id */
	ScItemId int64 `json:"sc_item_id"`

	/* 商品的SKU id。当存在时才会有值，建议使用sku_outer_id，sku_properties这两个值 */
	SkuId int64 `json:"sku_id"`

	/* SKU商家编码。 */
	SkuOuterId string `json:"sku_outer_id"`

	/* SKU属性值。如: 颜色:红色:别名;尺码:L:别名 */
	SkuProperties string `json:"sku_properties"`

	/* 快照地址。 */
	SnapshotUrl string `json:"snapshot_url"`

	/* 交易状态。可选值：<br>
	WAIT_BUYER_PAY(等待付款)<br>
	WAIT_CONFIRM(付款信息待确认)<br>
	WAIT_CONFIRM_WAIT_SEND_GOODS(付款信息待确认，待发货)<br>
	WAIT_CONFIRM_SEND_GOODS(付款信息待确认，已发货)<br>
	WAIT_CONFIRM_GOODS_CONFIRM(付款信息待确认，已收货)<br>
	WAIT_SELLER_SEND_GOODS(已付款，待发货)<br>
	WAIT_BUYER_CONFIRM_GOODS(已付款，已发货)<br>
	WAIT_BUYER_CONFIRM_GOODS_ACOUNTED(已付款（已分账），已发货。只对代销分账支持)<br>
	CONFIRM_WAIT_SEND_GOODS(付款信息已确认，待发货)<br>
	CONFIRM_SEND_GOODS(付款信息已确认，已发货)<br>
	TRADE_REFUNDED(已退款)<br>
	TRADE_REFUNDING(退款中)<br>
	TRADE_FINISHED(交易成功)<br>
	TRADE_CLOSED(交易关闭)<br>
	PAY_ACOUNTED_GOODS_CONFIRM （已分账发货成功）<br>
	PAY_WAIT_ACOUNT_GOODS_CONFIRM（已付款，确认收货） */
	Status string `json:"status"`

	/* 商品的卖出金额调整，金额增加时为正数，金额减少时为负数，单位是分，不带小数 */
	TcAdjustFee int64 `json:"tc_adjust_fee"`

	/* 优惠金额，始终为正数，单位是分，不带小数 */
	TcDiscountFee int64 `json:"tc_discount_fee"`

	/* TC子订单ID（经销不显示） */
	TcOrderId int64 `json:"tc_order_id"`

	/* 商品优惠类型：聚划算、秒杀或其他 */
	TcPreferentialType string `json:"tc_preferential_type"`

	/* 采购的产品标题。 */
	Title string `json:"title"`

	/* 分销商应付金额=num(采购数量)*price(采购价)。（精确到2位小数;单位:元。如:200.07，表示:200元7分） */
	TotalFee float64 `json:"total_fee,string"`
}

/* 使用数据推送的用户信息 */
type JdpUser struct {
	/* rds数据库的实例名 */
	RdsName string `json:"rds_name"`

	/* 0:暂停
	1：正常
	2：sessoin失效，停止
	3：已删除 */
	Status int64 `json:"status"`

	/* 用户昵称 */
	UserNick string `json:"user_nick"`
}

/* 产品线 */
type ProductCat struct {
	/* 代销采购价百分比 */
	CostPercentAgent string `json:"cost_percent_agent"`

	/* 经销采购价百分比 */
	CostPercentDealer string `json:"cost_percent_dealer"`

	/* 产品线ID */
	Id int64 `json:"id"`

	/* 产品线名称 */
	Name string `json:"name"`

	/* 产品数量 */
	ProductNum int64 `json:"product_num"`

	/* 最高零食价百分比 */
	RetailHighPercent string `json:"retail_high_percent"`

	/* 最低零售价百分比 */
	RetailLowPercent string `json:"retail_low_percent"`
}

/* 类目属性 */
type Feature struct {
	/* 属性键 */
	AttrKey string `json:"attr_key"`

	/* 属性值 */
	AttrValue string `json:"attr_value"`
}

/* 消息通道的用户结构 */
type TmcUser struct {
	/* 用户首次开通时间 */
	Created string `json:"created"`

	/* 接收用户消息的组名 */
	GroupName string `json:"group_name"`

	/* 用户授权是否有效，true表示授权有效，false表示授权过期 */
	IsValid bool `json:"is_valid"`

	/* 用户最后开通时间 */
	Modified string `json:"modified"`

	/* 用户开通的消息类型列表。如果为空表示应用开通的所有类型 */
	Topics []string `json:"topics"`

	/* 用户ID */
	UserId int64 `json:"user_id"`

	/* 用户昵称 */
	UserNick string `json:"user_nick"`
}

/* 消息通道的通用消息结构 */
type TmcMessage struct {
	/* 消息详细内容，格式为JSON/XML */
	Content string `json:"content"`

	/* 消息ID */
	Id int64 `json:"id"`

	/* 消息发布者的AppKey */
	PubAppKey string `json:"pub_app_key"`

	/* 消息发布时间 */
	PubTime string `json:"pub_time"`

	/* 消息所属主题 */
	Topic string `json:"topic"`

	/* 消息所属的用户编号 */
	UserId int64 `json:"user_id"`

	/* 用户的昵称 */
	UserNick string `json:"user_nick"`
}

/* 消息通道的分组结构 */
type TmcGroup struct {
	/* 分组名称 */
	Name string `json:"name"`

	/* 用户列表 */
	Users []string `json:"users"`
}

/* 采购申请和经销采购单 */
type DealerOrder struct {
	/* 支付宝交易号 */
	AlipayNo string `json:"alipay_no"`

	/* 申请时间 */
	AppliedTime string `json:"applied_time"`

	/* 分销商nick */
	ApplierNick string `json:"applier_nick"`

	/* 分销商最后一次确认/申请/拒绝的时间 */
	AuditTimeApplier string `json:"audit_time_applier"`

	/* 供应商最后一次审核通过/修改/驳回的时间 */
	AuditTimeSupplier string `json:"audit_time_supplier"`

	/* 关闭原因 */
	CloseReason string `json:"close_reason"`

	/* 产品明细 */
	DealerOrderDetails []*DealerOrderDetail `json:"dealer_order_details>dealer_order_detail"`

	/* 经销采购单编号，API发货使用此字段 */
	DealerOrderId int64 `json:"dealer_order_id"`

	/* 已发货数量 */
	DeliveredQuantityCount int64 `json:"delivered_quantity_count"`

	/* 物流费用(精确到2位小数;单位:元。如:200.07，表示:200元7分 ) */
	LogisticsFee float64 `json:"logistics_fee,string"`

	/* 物流方式：
	SELF_PICKUP（自提）、LOGISTICS（物流发货) */
	LogisticsType string `json:"logistics_type"`

	/* 修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* WAIT_FOR_SUPPLIER_AUDIT1：分销商提交申请，待供应商审核；
	SUPPLIER_REFUSE：供应商驳回申请，待分销商确认；
	WAIT_FOR_APPLIER_AUDIT：供应商修改后，待分销商确认；
	WAIT_FOR_SUPPLIER_AUDIT2：分销商拒绝修改，待供应商再审核；
	BOTH_AGREE_WAIT_PAY：审核通过下单成功，待分销商付款
	WAIT_FOR_SUPPLIER_DELIVER：付款成功，待供应商发货；
	WAIT_FOR_APPLIER_STORAGE：供应商发货，待分销商收货；
	TRADE_FINISHED：分销商收货，交易成功；
	TRADE_CLOSED：经销采购单关闭。 */
	OrderStatus string `json:"order_status"`

	/* 付款时间 */
	PayTime string `json:"pay_time"`

	/* 支付方式：
	ALIPAY_SURETY（支付宝担保交易）
	TRANSFER（线下转账）
	PREPAY（预存款）
	IMMEDIATELY（即时到账） */
	PayType string `json:"pay_type"`

	/* 总采购数量 */
	QuantityCount int64 `json:"quantity_count"`

	/* 收货人信息 */
	Receiver *Receiver `json:"receiver"`

	/* 分销商拒绝供应商修改的原因 */
	RefuseReasonApplier string `json:"refuse_reason_applier"`

	/* 供应商驳回申请的原因 */
	RefuseReasonSupplier string `json:"refuse_reason_supplier"`

	/* 供应商备注。
	仅供应商可见。 */
	SupplierMemo string `json:"supplier_memo"`

	/* 供应商备注旗帜。
	1:红色 2:黄色 3:绿色 4:蓝色 5:粉红色。
	仅供应商可见。 */
	SupplierMemoFlag int64 `json:"supplier_memo_flag"`

	/* 供应商nick */
	SupplierNick string `json:"supplier_nick"`

	/* 采购总价(精确到2位小数;单位:元。如:200.07，表示:200元7分 ) */
	TotalPrice float64 `json:"total_price,string"`
}

/* 采购申请/经销采购单中的商品明细 */
type DealerOrderDetail struct {
	/* 经销采购单明细id */
	DealerDetailId int64 `json:"dealer_detail_id"`

	/* 经销采购单编号 */
	DealerOrderId int64 `json:"dealer_order_id"`

	/* 最终价格(精确到2位小数;单位:元。如:200.07，表示:200元7分 ) */
	FinalPrice float64 `json:"final_price,string"`

	/* 该条明细是否已删除。true：已删除；false：未删除。 */
	IsDeleted bool `json:"is_deleted"`

	/* 原始价格(精确到2位小数;单位:元。如:200.07，表示:200元7分 ) */
	OriginalPrice float64 `json:"original_price,string"`

	/* 金额小计(采购数量乘以最终价格。精确到2位小数;单位:元。如:200.07，表示:200元7分 ) */
	PriceCount float64 `json:"price_count,string"`

	/* 产品id */
	ProductId int64 `json:"product_id"`

	/* 产品标题 */
	ProductTitle string `json:"product_title"`

	/* 采购数量 */
	Quantity int64 `json:"quantity"`

	/* sku id */
	SkuId int64 `json:"sku_id"`

	/* 商家编码，是sku则为sku的商家编码，否则是产品的商家编码 */
	SkuNumber string `json:"sku_number"`

	/* 产品规格 */
	SkuSpec string `json:"sku_spec"`

	/* 产品快照url */
	SnapshotUrl string `json:"snapshot_url"`
}

/* 产品资质认证文本信息，包括认证类型以及文本信息 */
type CertTxtInfo struct {
	/* 认证类型的数值id */
	CertType int64 `json:"cert_type"`

	/* 认证文本信息 */
	Text string `json:"text"`
}

/* tmall权益 */
type GradeEquity struct {
	/* 买家会员级别  0:店铺客户  1：普通会员 2：高级会员 3：VIP会员 4：至尊VIP */
	CurGrade string `json:"cur_grade"`

	/* 店铺客户、普通会员 、高级会员、VIP会员、至尊VIP */
	CurGradeName string `json:"cur_grade_name"`

	/* 在包邮的前提下的不免邮区域 */
	ExcludeArea string `json:"exclude_area"`

	/* 返回几倍tmall积分 */
	Point int64 `json:"point"`

	/* 是否该等级开启包邮 */
	Postage bool `json:"postage"`
}

/* 图片分类 */
type PictureCategory struct {
	/* 图片类目的创建时间 */
	Created string `json:"created"`

	/* 图片分类的修改时间 */
	Modified string `json:"modified"`

	/* 一级分类的parent_id为0
	二级分类的则为其父分类的picture_category_id */
	ParentId int64 `json:"parent_id"`

	/* 图片分类ID */
	PictureCategoryId int64 `json:"picture_category_id"`

	/* 图片分类名 */
	PictureCategoryName string `json:"picture_category_name"`

	/* 图片分类排序 */
	Position int64 `json:"position"`

	/* 图片分类型别，sys-fixture代表店铺装修分类(系统分类)，sys-auction代表宝贝图片分类(系统分类)，user-define代表用户自定义分类 */
	Type string `json:"type"`
}

/* 分销API返回数据结构 */
type Distributor struct {
	/* 分销商的支付宝帐户 */
	AlipayAccount string `json:"alipay_account"`

	/* 分销商的淘宝卖家评价 */
	Appraise int64 `json:"appraise"`

	/* 分销商店铺主营类目 */
	CategoryId int64 `json:"category_id"`

	/* 联系人 */
	ContactPerson string `json:"contact_person"`

	/* 分销商创建时间 时间格式：yyyy-MM-dd HH:mm:ss */
	Created string `json:"created"`

	/* 分销商Id */
	DistributorId int64 `json:"distributor_id"`

	/* 分销商姓名 */
	DistributorName string `json:"distributor_name"`

	/* 分销商的email */
	Email string `json:"email"`

	/* 分销商的真实姓名，认证姓名 */
	FullName string `json:"full_name"`

	/* 店铺等级 */
	Level int64 `json:"level"`

	/* 分销商的手机号 */
	MobilePhone string `json:"mobile_phone"`

	/* 分销商的电话 */
	Phone string `json:"phone"`

	/* 分销商的网店链接 */
	ShopWebLink string `json:"shop_web_link"`

	/* 分销商卖家的开店时间 */
	Starts string `json:"starts"`

	/* 分销商ID */
	UserId int64 `json:"user_id"`
}

/* 提示信息对象 */
type TipInfo struct {
	/* 提示信息 */
	Info string `json:"info"`

	/* 后端商品ID或者商家编码 */
	ScItemId string `json:"sc_item_id"`
}

/* 仓库对象 */
type Store struct {
	/* 仓库的物理地址 */
	Address string `json:"address"`

	/* 仓库对应的淘宝区域 */
	AddressAreaName string `json:"address_area_name"`

	/* 仓库简称 */
	AliasName string `json:"alias_name"`

	/* 联系人 */
	Contact string `json:"contact"`

	/* 联系电话 */
	Phone string `json:"phone"`

	/* 邮编 */
	PostCode string `json:"post_code"`

	/* 商家的仓库编码，不允许重复 */
	StoreCode string `json:"store_code"`

	/* 商家的仓库名称 */
	StoreName string `json:"store_name"`

	/* 仓库类型 */
	StoreType string `json:"store_type"`
}

/* 商品库存对象 */
type InventorySum struct {
	/* 库存类型：
	1：正常
	2：损坏
	3：冻结
	10：质押
	11-20:商家自定义 */
	InventoryType int64 `json:"inventory_type"`

	/* 库存类型名称 */
	InventoryTypeName string `json:"inventory_type_name"`

	/* 总占用数量 */
	OccupyQuantity int64 `json:"occupy_quantity"`

	/* 总物理库存数量 */
	Quantity int64 `json:"quantity"`

	/* 总预扣数量 */
	ReserveQuantity int64 `json:"reserve_quantity"`

	/* 商品商家编码 */
	ScItemCode string `json:"sc_item_code"`

	/* 商品后端ID，如果有传sc_item_code,参数可以为0 */
	ScItemId int64 `json:"sc_item_id"`

	/* 商家仓库编码 */
	StoreCode string `json:"store_code"`
}

/* 工具审核结果 */
type CheckToolModule struct {
	/* 工具审核的URL，工具检测通过后，ISV需要把该URL和工具基本信息一起提交UMP工具技术审核。 */
	CheckUrl string `json:"check_url"`

	/* 工具检测结果中的错误信息。 */
	ErrorMessage string `json:"error_message"`

	/* 工具是否检测通过。 */
	IsPass string `json:"is_pass"`

	/* 工具中已经使用的元数据。 */
	MetaDef string `json:"meta_def"`
}

/* 等级折扣数据结构 */
type GradeDiscount struct {
	/* 等级ID或分销商ID */
	DiscountId int64 `json:"discount_id"`

	/* 折扣类型：1-等级、2-分销商折扣 */
	DiscountType int64 `json:"discount_type"`

	/* 采购价格 */
	Price float64 `json:"price,string"`

	/* skuId */
	SkuId int64 `json:"sku_id"`

	/* 模式：1-代销、2-经销 */
	TradeType int64 `json:"trade_type"`
}

/* 合作申请 */
type Requisition struct {
	/* 好评率 */
	DistAppraise int64 `json:"dist_appraise"`

	/* 主营类目 */
	DistCategory int64 `json:"dist_category"`

	/* 主营类目名称 */
	DistCategoryName string `json:"dist_category_name"`

	/* 是否消保(0-不是、1-是) */
	DistIsXiaobao int64 `json:"dist_is_xiaobao"`

	/* 店铺星级 */
	DistLevel int64 `json:"dist_level"`

	/* 分销申请加盟时，给供应商的留言 */
	DistMessage string `json:"dist_message"`

	/* 开店时间 */
	DistOpenDate string `json:"dist_open_date"`

	/* 店铺地址 */
	DistShopAddress string `json:"dist_shop_address"`

	/* 分销商id */
	DistributorId int64 `json:"distributor_id"`

	/* 分销商nick */
	DistributorNick string `json:"distributor_nick"`

	/* 申请时间 */
	GmtCreate string `json:"gmt_create"`

	/* 合作申请ID */
	RequisitionId int64 `json:"requisition_id"`

	/* 申请状态（1-申请中、2-成功、3-被退回、4-已撤消、5-过期） */
	Status int64 `json:"status"`
}

/* 后端商品映射关系对象 */
type ScItemMap struct {
	/* map_type=1时，item_id为IC商品id

	map_type=7时，item_id为分销商品id */
	ItemId int64 `json:"item_id"`

	/* 1:前台和后台关系
	7:分销和后台关系 */
	MapType int64 `json:"map_type"`

	/* 后端商品ID */
	RelItemId int64 `json:"rel_item_id"`

	/* 后端商品所有者商家编码 */
	RelOuterCode string `json:"rel_outer_code"`

	/* 后端商品所有者id */
	RelUserId int64 `json:"rel_user_id"`

	/* 后端商品所有者名称 */
	RelUserNick string `json:"rel_user_nick"`

	/* 当宝贝下没SKU时该字段为空 */
	SkuId int64 `json:"sku_id"`

	/* Ic商家id(分销商id) */
	UserId int64 `json:"user_id"`

	/* Ic商家nick(分销商nick) */
	UserNick string `json:"user_nick"`
}

/* 查询分页结构 */
type QueryPagination struct {
	/* 当前页码数 */
	PageIndex int64 `json:"page_index"`

	/* 分页记录个数，如果用户输入的记录数大于50，则一页显示50条记录 */
	PageSize int64 `json:"page_size"`
}

/* 分销商档案信息 */
type DistributorArchive struct {
	/* 近30天投诉率=近30天投诉总数/近30天支付宝成交笔数 */
	ComplaintsCountPer string `json:"complaints_count_per"`

	/* 供应商授权分销商的产品的下载率。
	率的值都是*10000后的，取值后直接除以100后加上%即可。比如12.33%，返回值是1233。 */
	DownLoadRatio string `json:"down_load_ratio"`

	/* 好评率 */
	GoodEvaluationRate string `json:"good_evaluation_rate"`

	/* 店铺好评率，即店铺累计好评数/店铺评价总数 */
	GoodEvaluationRateD string `json:"good_evaluation_rate_d"`

	/* 总商品数 */
	GoodsSum string `json:"goods_sum"`

	/* 行业主营占比 */
	IndusPerScole string `json:"indus_per_scole"`

	/* 所在行业 */
	Industry string `json:"industry"`

	/* 开店时间 */
	OpenashopTime string `json:"openashop_time"`

	/* 近180天“宝贝与描述相符”店铺动态评分数据 */
	OrderMerchandiseScore string `json:"order_merchandise_score"`

	/* 供应商在分销商店铺中的成交（已付款）订单笔数占比。
	率的值都是*10000后的，取值后直接除以100后加上%即可。比如12.33%，返回值是1233。 */
	OrderShopRatio string `json:"order_shop_ratio"`

	/* 近30天被处罚总数 */
	PunishedCount string `json:"punished_count"`

	/* 近180天“卖家发货速度”店铺动态评分数据 */
	SaleConsignmentScore string `json:"sale_consignment_score"`

	/* 近30天卖家平均退款时间,单位天 */
	SellerRefundTime string `json:"seller_refund_time"`

	/* 近30天平均退款率=近30天退款笔数/近30天支付宝成交笔数 */
	SellerRefundTimePer string `json:"seller_refund_time_per"`

	/* 卖家星级，加载周期：日 */
	SellerStarName string `json:"seller_star_name"`

	/* 卖家类型 */
	SellerType string `json:"seller_type"`

	/* 近180天“卖家服务态度”店铺动态评分数据 */
	ServiceQualityScore string `json:"service_quality_score"`

	/* 店铺url */
	ShopAddress string `json:"shop_address"`

	/* 店铺名称 */
	ShopName string `json:"shop_name"`

	/* 供应商授权分销商的产品的上架率。
	率的值都是*10000后的，取值后直接除以100后加上%即可。比如12.33%，返回值是1233。 */
	UpSelfRatio string `json:"up_self_ratio"`

	/* 供应商在分销商店铺中的上架商品占比。
	率的值都是*10000后的，取值后直接除以100后加上%即可。比如12.33%，返回值是1233。 */
	UpShopRatio string `json:"up_shop_ratio"`

	/* 供应商在分销商店铺中铺货商品UV占店铺商品总UV的比。
	率的值都是*10000后的，取值后直接除以100后加上%即可。比如12.33%，返回值是1233。 */
	UvShopRatio string `json:"uv_shop_ratio"`
}

/* 后端商品 */
type ScItem struct {
	/* 条形码 */
	BarCode string `json:"bar_code"`

	/* 品牌id */
	BrandId int64 `json:"brand_id"`

	/* 品牌名称 */
	BrandName string `json:"brand_name"`

	/* 高 单位：mm */
	Height int64 `json:"height"`

	/* 1表示区域销售，0或是空是非区域销售 */
	IsAreaSale int64 `json:"is_area_sale"`

	/* 贵重品:false:不是 true：是 */
	IsCostly bool `json:"is_costly"`

	/* 是否危险 false：不是  true：是 */
	IsDangerous bool `json:"is_dangerous"`

	/* 是否易碎 false ：不是  true：是 */
	IsFriable bool `json:"is_friable"`

	/* 是否保质期：false:不是 true：是 */
	IsWarranty bool `json:"is_warranty"`

	/* 商品id */
	ItemId int64 `json:"item_id"`

	/* 商品名称 */
	ItemName string `json:"item_name"`

	/* 1.普通供应链商品 2.供应链组合主商品 */
	ItemType int64 `json:"item_type"`

	/* 长度 单位：mm */
	Length int64 `json:"length"`

	/* LIQUID:液体，1：粉体，SOLID：固体 */
	MatterStatus string `json:"matter_status"`

	/* 后端商品options字段 */
	Options int64 `json:"options"`

	/* 商家编码 */
	OuterCode string `json:"outer_code"`

	/* 价格：分（吊牌价） */
	Price int64 `json:"price"`

	/* 商品属性格式是  p1:v1,p2:v2,p3:v3 */
	Properties string `json:"properties"`

	/* 备注 */
	Remark string `json:"remark"`

	/* 体积：立方厘米 */
	Volume int64 `json:"volume"`

	/* 重量.单位：克 */
	Weight int64 `json:"weight"`

	/* 宽 单位：mm */
	Width int64 `json:"width"`

	/* 仓储商编码，可以支持多个，格式wmsname:code */
	WmsCode string `json:"wms_code"`
}

/* 分销商品流量 */
type DistributorItemFlow struct {
	/* 分销商商品PV。返回KV串中可能不足一周数据，如新上架商品、中间下架以及删除等操作导致。 */
	ItemPv string `json:"item_pv"`

	/* 分销商商品UV。返回KV串中可能不足一周数据，如新上架商品、中间下架以及删除等操作导致。 */
	ItemUv string `json:"item_uv"`

	/* 产品ID */
	ProductId int64 `json:"product_id"`
}

/* 优惠标签对象 */
type PromotionTag struct {
	/* 标签结束时间 */
	EndTime string `json:"end_time"`

	/* 标签开始时间 */
	StartTime string `json:"start_time"`

	/* 标签描述 */
	TagDesc string `json:"tag_desc"`

	/* 标签ID */
	TagId int64 `json:"tag_id"`

	/* 标签名称 */
	TagName string `json:"tag_name"`
}

/* 优惠标签查询结果 */
type PromotionTagQuery struct {
	/* 标签结果列表 */
	TagList []*PromotionTag `json:"tag_list>promotion_tag"`

	/* 总记录数 */
	TotalResults int64 `json:"total_results"`
}

/* 拍卖商品相关信息 */
type PaimaiInfo struct {
	/* 用户自定义的固定保证金。如果用户未传则说明用户选择使用淘宝默认的保证金模式10%，此时deposit等于0. */
	Deposit int64 `json:"deposit"`

	/* 降价拍中的降价间隔 */
	Interval int64 `json:"interval"`

	/* 拍卖类型，目前包括增加拍，荷兰拍和降价拍。 */
	Mode int64 `json:"mode"`

	/* 降价拍的保留价 */
	Reserve float64 `json:"reserve,string"`

	/* 对于拍卖来说可以设定有效期，这里是有效期的小时数。 */
	ValidHour int64 `json:"valid_hour"`

	/* 对于拍卖来说可以设定有效期，这里是有效期的分钟数。 */
	ValidMinute int64 `json:"valid_minute"`
}

/* 发货时间数据结构 */
type DeliveryTime struct {
	/* 商品级别设置的发货时间。设置了商品级别的发货时间，相对发货时间，则填写相对发货时间的天数（大于3）；绝对发货时间，则填写yyyy-mm-dd格式，如2013-11-11 */
	DeliveryTime string `json:"delivery_time"`

	/* 发货时间类型：绝对发货时间或者相对发货时间 */
	DeliveryTimeType string `json:"delivery_time_type"`

	/* 设置是否使用发货时间，商品级别，sku级别 */
	NeedDeliveryTime string `json:"need_delivery_time"`
}

/* 质量得分类 */
type Qscore struct {
	/* 类目出价质量得分 */
	CatmatchQscore string `json:"catmatch_qscore"`

	/* 词质量得分列表 */
	KeywordQscoreList []*KeywordQscore `json:"keyword_qscore_list>keyword_qscore"`
}

/* 直通车商品对象属性（Map） */
type ExtraAttributes struct {
	/* 商品在淘宝的发布时间 */
	PublishTime string `json:"publish_time"`

	/* 库存数量 */
	Quantity float64 `json:"quantity,string"`

	/* 商品的累积销量 */
	SalesCount float64 `json:"sales_count,string"`
}

/* 数据推送任务 */
type DataPushTask struct {
	/* 任务所属的appkey */
	AppKey string `json:"app_key"`

	/* 任务编号 */
	Id int64 `json:"id"`

	/* 下次执行时间 */
	NextExecuteTime string `json:"next_execute_time"`

	/* 上一次同步到的时间点 */
	NowSyncTime string `json:"now_sync_time"`

	/* 任务的业务参数，用json格式表示 */
	Params string `json:"params"`

	/* 任务类型代码 */
	Type int64 `json:"type"`

	/* 任务所属的用户编号 */
	UserId int64 `json:"user_id"`

	/* 用户的nick */
	UserNick string `json:"user_nick"`

	/* 任务的版本号，在更新任务时，需要用到此数据 */
	Version int64 `json:"version"`
}

/* 虚拟账户账单结构 */
type BookBill struct {
	/* 虚拟账户科目编号 */
	AccountId int64 `json:"account_id"`

	/* 操作金额 */
	Amount int64 `json:"amount"`

	/* 虚拟账户流水编号 */
	Bid int64 `json:"bid"`

	/* 记账时间 */
	BookTime string `json:"book_time"`

	/* 备注 */
	Description string `json:"description"`

	/* 创建时间 */
	GmtCreate string `json:"gmt_create"`

	/* 流水类型:101-可用金充值;102-可用金扣除;103-冻结;104-解冻;105-冻结金充值;106-冻结金扣除 */
	JournalType int64 `json:"journal_type"`

	/* 流水的商家支付宝id */
	OtherAlipayId string `json:"other_alipay_id"`

	/* 流水的淘宝支付宝id */
	TaobaoAlipayId string `json:"taobao_alipay_id"`
}

/* 账单结构 */
type Bill struct {
	/* 科目编号 */
	AccountId int64 `json:"account_id"`

	/* 支付宝账户编号 */
	AlipayId string `json:"alipay_id"`

	/* 支付宝账户名称 */
	AlipayMail string `json:"alipay_mail"`

	/* 支付宝交易号,暂不提供 */
	AlipayNo string `json:"alipay_no"`

	/* 支付宝备注 */
	AlipayNotice string `json:"alipay_notice"`

	/* 支付宝商户订单号 */
	AlipayOutno string `json:"alipay_outno"`

	/* 账单金额,退款时返回的是负数 */
	Amount int64 `json:"amount"`

	/* 账单编号 */
	Bid int64 `json:"bid"`

	/* 业务时间,订单交易完成的时间 */
	BizTime string `json:"biz_time"`

	/* 记账时间 */
	BookTime string `json:"book_time"`

	/* 创建时间 */
	GmtCreate string `json:"gmt_create"`

	/* 修改时间 */
	GmtModified string `json:"gmt_modified"`

	/* 所属商品编号 */
	NumIid string `json:"num_iid"`

	/* 目标支付宝账户编号 */
	ObjAlipayId string `json:"obj_alipay_id"`

	/* 目标支付宝账户名称 */
	ObjAlipayMail string `json:"obj_alipay_mail"`

	/* 交易子订单编号 */
	OrderId string `json:"order_id"`

	/* 支付时间,收取佣金时支付宝的扣款时间 */
	PayTime string `json:"pay_time"`

	/* 0-未支付,1-支付成功,2-支付失败 */
	Status int64 `json:"status"`

	/* 交易金额 */
	TotalAmount int64 `json:"total_amount"`

	/* 交易订单编号 */
	TradeId string `json:"trade_id"`
}

/* 主站商品对象 */
type SubwayItem struct {
	/* 扩展属性对象 */
	ExtraAttributes *ExtraAttributes `json:"extra_attributes"`

	/* 商品信息在外部系统(淘宝主站)的数字id */
	NumId int64 `json:"num_id"`

	/* 商品信息在外部系统（淘宝主站）的价格 */
	Price float64 `json:"price,string"`

	/* 商品信息在外部系统（淘宝主站）的标题 */
	Title string `json:"title"`
}

/* 直通车商品分页对象 */
type SubwayItemPartition struct {
	/* 商品列表 */
	ItemList []*SubwayItem `json:"item_list>subway_item"`

	/* 排序，
	True:升级False:降序 */
	OrderBy bool `json:"order_by"`

	/* 排序字段 */
	OrderField string `json:"order_field"`

	/* 返回第几页的数据从1开始 */
	PageNo int64 `json:"page_no"`

	/* 每页数据大小 */
	PageSize int64 `json:"page_size"`

	/* 所查询的数据总数，只有当返回第一页数据时有值，当要求返回的数据非第一页时，此返回值无效 */
	TotalItem int64 `json:"total_item"`
}

/* 费用科目 */
type Account struct {
	/* 费用科目编码 */
	AccountCode string `json:"account_code"`

	/* 费用科目编号 */
	AccountId int64 `json:"account_id"`

	/* 费用科目名称 */
	AccountName string `json:"account_name"`

	/* 费用科目类型:1-虚拟账户 2-交易 3-交易佣金 4-服务费 5-天猫积分 6-其他 */
	AccountType int64 `json:"account_type"`
}

/* 子账号基本信息 */
type SubAccountInfo struct {
	/* 子账号是否参与分流 true:参与分流 false:未参与分流 */
	SubDispatchStatus bool `json:"sub_dispatch_status"`

	/* 子账号Id */
	SubId int64 `json:"sub_id"`

	/* 子账号用户名 */
	SubNick string `json:"sub_nick"`

	/* 子账号是否已欠费 true:已欠费 false:未欠费 */
	SubOwedStatus bool `json:"sub_owed_status"`

	/* 子账号当前状态：1正常，2卖家停用，3处罚冻结 */
	SubStatus int64 `json:"sub_status"`

	/* 主账号Id */
	UserId int64 `json:"user_id"`

	/* 主账号用户名 */
	UserNick string `json:"user_nick"`
}

/* 部门信息 */
type Department struct {
	/* 部门ID */
	DepartmentId int64 `json:"department_id"`

	/* 部门名称 */
	DepartmentName string `json:"department_name"`

	/* 当前部门的父部门ID */
	ParentId int64 `json:"parent_id"`

	/* 部门下关联的子账号id列表 */
	SubUserIds []int64 `json:"sub_user_ids"`
}

/* 子账号职务信息 */
type Duty struct {
	/* 职务ID */
	DutyId int64 `json:"duty_id"`

	/* 职务级别 */
	DutyLevel int64 `json:"duty_level"`

	/* 职务名称 */
	DutyName string `json:"duty_name"`
}

/* 子账号详细信息，其中包括账号基本信息、员工信息和部门职务信息 */
type SubUserFullInfo struct {
	/* 部门Id */
	DepartmentId int64 `json:"department_id"`

	/* 部门名称 */
	DepartmentName string `json:"department_name"`

	/* 职务Id */
	DutyId int64 `json:"duty_id"`

	/* 职务等级 */
	DutyLevel int64 `json:"duty_level"`

	/* 职务名称 */
	DutyName string `json:"duty_name"`

	/* 员工ID */
	EmployeeId int64 `json:"employee_id"`

	/* 员工姓名 */
	EmployeeName string `json:"employee_name"`

	/* 员工花名 */
	EmployeeNickname string `json:"employee_nickname"`

	/* 入职员工工号 */
	EmployeeNum string `json:"employee_num"`

	/* 员工入职时间 */
	EntryDate string `json:"entry_date"`

	/* 直接上级的员工ID */
	LeaderId int64 `json:"leader_id"`

	/* 办公电话 */
	OfficePhone string `json:"office_phone"`

	/* 父部门Id */
	ParentDepartment int64 `json:"parent_department"`

	/* 员工性别  1:男;  2:女 */
	Sex int64 `json:"sex"`

	/* 子账号是否参与分流 true:参与分流 false:未参与分流 */
	SubDispatchStatus bool `json:"sub_dispatch_status"`

	/* 子账号Id */
	SubId int64 `json:"sub_id"`

	/* 子账号用户名 */
	SubNick string `json:"sub_nick"`

	/* 子账号是否已欠费 true:已欠费 false:未欠费 */
	SubOwedStatus bool `json:"sub_owed_status"`

	/* 子账号当前状态：1正常，2卖家停用，3处罚冻结 */
	SubStatus int64 `json:"sub_status"`

	/* 子账号企业邮箱 */
	SubuserEmail string `json:"subuser_email"`

	/* 主账号企业邮箱 */
	UserEmail string `json:"user_email"`

	/* 主账号Id */
	UserId int64 `json:"user_id"`

	/* 主账号用户名 */
	UserNick string `json:"user_nick"`

	/* 工作地点 */
	WorkLocation string `json:"work_location"`
}

/* 定向推广位置 */
type Place struct {
	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 最后修改时间 */
	LastUpdateTime string `json:"last_update_time"`

	/* 位置名称 */
	Name string `json:"name"`

	/* 位置标识 */
	PlaceId int64 `json:"place_id"`
}

/* 广告创意分页对象 */
type CreativePage struct {
	/* 广告创意列表 */
	CreativeList []*Creative `json:"creative_list>creative"`

	/* 返回第几页的数据从1开始 */
	PageNo int64 `json:"page_no"`

	/* 每页数据大小 */
	PageSize int64 `json:"page_size"`

	/* 所查询的数据总数，只有当返回第一页数据时有值，当要求返回的数据非第一页时，此返回值无效 */
	TotalItem int64 `json:"total_item"`
}

/* 投放人群 */
type Demographic struct {
	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 投放人群所属的组ID */
	GroupId int64 `json:"group_id"`

	/* 投放人群所属组的组名 */
	GroupName string `json:"group_name"`

	/* 投放人群ID */
	Id int64 `json:"id"`

	/* 最后修改时间 */
	LastUpdateTime string `json:"last_update_time"`

	/* 投放人群名称 */
	Name string `json:"name"`
}

/* 推广组与定向推广位置关系 */
type ADGroupPlace struct {
	/* 推广组ID */
	AdgroupId int64 `json:"adgroup_id"`

	/* 推广计划ID */
	CampaignId int64 `json:"campaign_id"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 是否使用默认出价，0-不用；1-使用； */
	IsDefaultPrice int64 `json:"is_default_price"`

	/* 出价 */
	MaxPrice int64 `json:"max_price"`

	/* 修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 主人昵称 */
	Nick string `json:"nick"`

	/* 位置标识 */
	PlaceId int64 `json:"place_id"`

	/* 位置名称 */
	PlaceName string `json:"place_name"`
}

/* 关键词分页对象 */
type KeywordPage struct {
	/* 关键词列表 */
	KeywordList []*Keyword `json:"keyword_list>keyword"`

	/* 返回第几页的数据从1开始 */
	PageNo int64 `json:"page_no"`

	/* 每页数据大小 */
	PageSize int64 `json:"page_size"`

	/* 所查询的数据总数，只有当返回第一页数据时有值，当要求返回的数据非第一页时，此返回值无效 */
	TotalItem int64 `json:"total_item"`
}

/* 投放人群设置 */
type DemographicSetting struct {
	/* 推广计划ID */
	CampaignId int64 `json:"campaign_id"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 投放人群ID */
	DemographicId int64 `json:"demographic_id"`

	/* 加价 */
	IncrementalPrice int64 `json:"incremental_price"`

	/* 修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 主人昵称 */
	Nick string `json:"nick"`
}

/* 本地生活垂直市场数据结构，修改宝贝时在参数empty_fields里设置locality_life可删除所有电子凭证信息 */
type LocalityLife struct {
	/* 表示是否使用邮寄 0: 代表不使用邮寄； 1：代表使用邮寄；如果不设置这个值，代表不使用邮寄 */
	ChooseLogis string `json:"choose_logis"`

	/* 电子凭证业务属性 */
	Eticket string `json:"eticket"`

	/* 电子交易凭证有效期，有三种格式：
	如果有效期为起止日期类型，此值为2012-08-06,2012-08-16
	如果有效期为【购买成功日 至】类型则格式为2012-08-16
	如果有效期为天数类型则格式为15 */
	Expirydate string `json:"expirydate"`

	/* 格式为
	码商id:nick */
	Merchant string `json:"merchant"`

	/* 网点ID,在参数empty_fields里设置locality_life.network_id可删除网点ID */
	NetworkId string `json:"network_id"`

	/* 电子凭证售中自动退款比例 */
	OnsaleAutoRefundRatio int64 `json:"onsale_auto_refund_ratio"`

	/* 退款比例，百分比%前的数字，1-100的正整数值；在参数empty_fields里设置locality_life.refund_ratio可删除退款比例 */
	RefundRatio int64 `json:"refund_ratio"`

	/* 退款码费承担方。发布电子凭证宝贝的时候会增加“退款码费承担方”配置项，可选填：(1)s（卖家承担） (2)b(买家承担) */
	Refundmafee string `json:"refundmafee"`

	/* 核销打款:1代表核销打款,0代表非核销打款;
	在参数empty_fields里设置locality_life.verification可删除核销打款 */
	Verification string `json:"verification"`
}

/* 该数据结构保存宝贝描述对应的规范化信息 */
type DescModuleInfo struct {
	/* 代表宝贝描述中规范化打标使用到的模块id列表，以逗号分隔。 */
	AnchorModuleIds string `json:"anchor_module_ids"`

	/* 类型代表规范化打标的类型：人工或自动化 */
	Type int64 `json:"type"`
}

/* ProductSpec(产品规格)结构。 */
type ProductSpec struct {
	/* 产品规格条形码，支持EAN-13格式。 */
	Barcode string `json:"barcode"`

	/* 产品品牌id */
	BrandId int64 `json:"brand_id"`

	/* 认证图片列表 */
	CertifiedPics []*CertPicInfo `json:"certified_pics>cert_pic_info"`

	/* 认证文本列表 */
	CertifiedTxts []*CertTxtInfo `json:"certified_txts>cert_txt_info"`

	/* 基础色数据 */
	ChangeProp string `json:"change_prop"`

	/* 用户输入的属性值存放位置，例如可输入的销售属性，当用户获取pid vid后，应该先从spec_props_alias中获取，然后通过类目属性获取，获取不到，可以通过这个字段获取。 */
	CustomePropsName string `json:"custome_props_name"`

	/* 产品规格吊牌价，以分为单位的整数，非负,无默认值，上限999999999 */
	LabelPrice int64 `json:"label_price"`

	/* 上市时间 */
	MarketTime string `json:"market_time"`

	/* 规格的数量，仅当通过组合产品获取时有值 */
	Number int64 `json:"number"`

	/* 产品的主图片地址。绝对地址，格式：http://host/image_path。 */
	PicUrl string `json:"pic_url"`

	/* 产品货号 */
	ProductCode string `json:"product_code"`

	/* 产品ID。 */
	ProductId int64 `json:"product_id"`

	/* 产品规格ID。 */
	SpecId int64 `json:"spec_id"`

	/* 产品规格的销售属性组合。格式为：pid:vid;pid:vid。其中：pid是销售属性id，vid是销售属性值id。如果该类目品牌下面没有销售属性，可以不用填写。销售属性通过tmall.brandcat.salespro.get接口获取。 */
	SpecProps string `json:"spec_props"`

	/* 销售属性值别名。格式为：pid1:vid1:别名1;pid2:vid2:别名2。其中：pid是销售属性id，vid是销售属性值id。别名长度不可以超过30个字符。目前只有颜色销售属性支持别名。 */
	SpecPropsAlias string `json:"spec_props_alias"`

	/* 1:表示可以使用的数据，也就是审核通过的。
	3：表示等待小二审核的产品规格，这个数据暂时还不能使用，要等待审核通过后，才能使用。 */
	Status int64 `json:"status"`
}

/* 产品资质认证图片信息，包括认证类型以及图片url */
type CertPicInfo struct {
	/* 认证类型的数值id */
	CertType int64 `json:"cert_type"`

	/* 认证图片的url地址 */
	PicUrl string `json:"pic_url"`
}

/* 用于保存宝贝描述规范化模块信息 */
type IdsModule struct {
	/* 宝贝描述规范化模块id */
	Id int64 `json:"id"`

	/* 宝贝描述规范化模块名 */
	Name string `json:"name"`

	/* 0为自动打标；
	1为人工打标； */
	Type int64 `json:"type"`
}

/* 被管控的品牌和类目的所对应的销售属性 */
type CatBrandSaleProp struct {
	/* 被管控的品牌的Id */
	BrandId int64 `json:"brand_id"`

	/* 被管控的类目ID */
	CatId int64 `json:"cat_id"`

	/* 如果该属性为营销属性，则获取默认值 */
	DefMarketPropValue int64 `json:"def_market_prop_value"`

	/* true表示：不是产品的规格属性
	false表示：是产品的规格属性。 */
	IsNotSpec bool `json:"is_not_spec"`

	/* 被管控的销售属性ID */
	PropertyId int64 `json:"property_id"`
}

/* 管控的类目以及品牌信息 */
type BrandCatControlInfo struct {
	/* 管控的品牌类目信息，一组列表 */
	BrandCatControls []*BrandCatControl `json:"brand_cat_controls>brand_cat_control"`
}

/* 管控的品牌类目信息 */
type BrandCatControl struct {
	/* 被管控的品牌的ID号码 */
	BrandId int64 `json:"brand_id"`

	/* 被管控的品牌名称 */
	BrandName string `json:"brand_name"`

	/* 被管控的类目的ID号 */
	CatId int64 `json:"cat_id"`

	/* 被管控的类目的ID号 */
	CatName string `json:"cat_name"`

	/* 以;隔开多个认证资料。:隔开资料ID与内容。如？1:产品包装图片;2:完整产品资质 */
	CertifiedData string `json:"certified_data"`
}

/* 支付宝会员信息详情 */
type AlipayUserDetail struct {
	/* 支付宝用户userId */
	AlipayUserId string `json:"alipay_user_id"`

	/* 是否通过实名认证 */
	Certified bool `json:"certified"`

	/* 支付宝登录号 */
	LogonId string `json:"logon_id"`

	/* 真实姓名 */
	RealName string `json:"real_name"`

	/* 性别。可选值:m(男),f(女) */
	Sex string `json:"sex"`

	/* 用户状态。可选:normal(正常), supervise (监管),delete(注销) */
	UserStatus string `json:"user_status"`

	/* 用户类型。可选：personal（个人），company（公司） */
	UserType string `json:"user_type"`
}

/* 经销订单监控记录信息 */
type TradeMonitor struct {
	/* 地区 */
	Area string `json:"area"`

	/* 交易订单的商品购买数量 */
	BuyAmount int64 `json:"buy_amount"`

	/* 收货人姓名 */
	BuyerFullName string `json:"buyer_full_name"`

	/* 买家的淘宝账号昵称 */
	BuyerNick string `json:"buyer_nick"`

	/* 城市 */
	City string `json:"city"`

	/* 经销商的淘宝账号昵称 */
	DistributorNick string `json:"distributor_nick"`

	/* 交易订单的商品id */
	ItemId int64 `json:"item_id"`

	/* 交易订单的商品的商家编码 */
	ItemNumber string `json:"item_number"`

	/* 交易订单的商品价格 */
	ItemPrice int64 `json:"item_price"`

	/* 交易订单的商品的sku名称 */
	ItemSkuName string `json:"item_sku_name"`

	/* 交易订单的商品的sku商家编码 */
	ItemSkuNumber string `json:"item_sku_number"`

	/* 交易订单的商品标题 */
	ItemTitle string `json:"item_title"`

	/* 交易订单的商品总价格（单价×数量+改价+优惠） */
	ItemTotalPrice int64 `json:"item_total_price"`

	/* 交易订单的付款时间 */
	PayTime string `json:"pay_time"`

	/* 供应商的产品id */
	ProductId int64 `json:"product_id"`

	/* 供应商的产品的商家编码 */
	ProductNumber string `json:"product_number"`

	/* 供应商的产品的sku商家编码 */
	ProductSkuNumber string `json:"product_sku_number"`

	/* 供应商的产品标题 */
	ProductTitle string `json:"product_title"`

	/* 省份 */
	Provence string `json:"provence"`

	/* 交易订单的商品最高零售价 */
	RetailPriceHigh int64 `json:"retail_price_high"`

	/* 交易订单的商品最低零售价 */
	RetailPriceLow int64 `json:"retail_price_low"`

	/* 收货人地址 */
	ShippingAddress string `json:"shipping_address"`

	/* 交易订单的状态：
	WAIT_SELLER_SEND_GOODS(已付款，待发货）<br>WAIT_BUYER_CONFIRM_GOODS(已付款，已发货)<br>TRADE_FINISHED(交易成功)
	TRADE_CLOSED(交易关闭)<br>TRADE_REFUNDING（退款中） */
	Status string `json:"status"`

	/* 交易订单的子订单号 */
	SubTcOrderId int64 `json:"sub_tc_order_id"`

	/* 供应商的淘宝账号昵称 */
	SupplierNick string `json:"supplier_nick"`

	/* 商品的卖出金额调整，金额增加时为正数，金额减少时为负数，单位是分，不带小数 */
	TcAdjustFee int64 `json:"tc_adjust_fee"`

	/* 优惠金额，始终为正数，单位是分，不带小数 */
	TcDiscountFee int64 `json:"tc_discount_fee"`

	/* 交易订单号 */
	TcOrderId int64 `json:"tc_order_id"`

	/* 商品优惠类型：聚划算、秒杀或其他 */
	TcPreferentialType string `json:"tc_preferential_type"`

	/* 主键id */
	TradeMonitorId int64 `json:"trade_monitor_id"`
}

/* 客户等待（客服）平均时长列表 */
type WaitingTimesOnDay struct {
	/* 等待时长（统计）日期 */
	WaitingDate string `json:"waiting_date"`

	/* 等待时长列表 */
	WaitingTimeByIds []*WaitingTimeById `json:"waiting_time_by_ids>waiting_time_by_id"`
}

/* 未回复统计列表(按天) */
type NonReplyStatOnDay struct {
	/* （某天的）未回复统计 */
	NonreplyDate string `json:"nonreply_date"`

	/* 未回复统计列表 */
	NonreplyStatByIds []*NonreplyStatById `json:"nonreply_stat_by_ids>nonreply_stat_by_id"`
}

/* 客服评价统计列表(按天) */
type StaffEvalStatOnDay struct {
	/* 评价产生的日期 */
	EvalDate string `json:"eval_date"`

	/* 客服评价统计列表 */
	StaffEvalStatByIds []*StaffEvalStatById `json:"staff_eval_stat_by_ids>staff_eval_stat_by_id"`
}

/* 某天的客服在线时长列表 */
type OnlineTimesOnDay struct {
	/* 在线日期 */
	OnlineDate string `json:"online_date"`

	/* 在线时长列表 */
	OnlineTimeByIds []*OnlineTimeById `json:"online_time_by_ids>online_time_by_id"`
}

/* 批量异步任务结果 */
type Task struct {
	/* 下载文件的MD5校验码，通过此校验码可以检查下载的文件是否是完整的。 */
	CheckCode string `json:"check_code"`

	/* 任务创建时间 */
	Created string `json:"created"`

	/* 大任务结果下载地址。当创建的认任务是大数据量的任务时，获取结果会返回此字段，同时subtasks列表会为空。
	通过这个地址可以下载到结果的结构体，格式同普通任务下载的一样。
	每次获取到的地址只能下载一次。下载的文件加上后缀名.zip打开。 */
	DownloadUrl string `json:"download_url"`

	/* 此任务是由哪个api产生的 */
	Method string `json:"method"`

	/* 定时类型任务的执行时间点 */
	Schedule string `json:"schedule"`

	/* 异步任务处理状态。new（还未开始处理），doing（处理中），done（处理结束）。 */
	Status string `json:"status"`

	/* 子任务处理结果，如果任务还没有处理完，返回的结果列表为空。如果任务处理完毕，返回子任务结果列表 */
	Subtasks []*Subtask `json:"subtasks>subtask"`

	/* 异步任务id。创建异步任务时返回的任务id号 */
	TaskId int64 `json:"task_id"`
}

/* 商品或店铺的信息 */
type CollectItem struct {
	/* 商品或店铺的id号 */
	ItemNumid int64 `json:"item_numid"`

	/* 被收藏宝贝或店铺所有者的昵称 */
	ItemOwnerNick string `json:"item_owner_nick"`

	/* 收藏目标的标题名字 */
	Title string `json:"title"`
}

/* 图片链接 */
type PicUrl struct {
	/* 图片链接地址 */
	Url string `json:"url"`
}

/* 系统自动生成 */
type CheckYaoPiats struct {
	/* 子订单号 */
	BizOrderId int64 `json:"biz_order_id"`

	/* 错误编码 */
	ErrorCode string `json:"error_code"`

	/* 错误信息 */
	ErrorMsg string `json:"error_msg"`

	/* 药监码 */
	PiatsCode string `json:"piats_code"`

	/* 校验是否成功 */
	Success bool `json:"success"`
}

/* 批量异步任务的子任务结果 */
type Subtask struct {
	/* 标记子任务是否成功。为true表示子任务成功，用户可以按照正确执行的结果格式解析sub_task_result。为false表示子任务失败了，用户需要按照失败的结果格式解析sub_task_result（里面只有sub_code和sub_msg） */
	IsSuccess bool `json:"is_success"`

	/* 子任务的有效请求参数，以json格式进行key:value的组合 */
	SubTaskRequest string `json:"sub_task_request"`

	/* 子任务返回的结果，以json格式进行key:value组合，可以和单个api请求结果解析复用。以获取交易订单详情为例：子任务执行成功返回的结果格式为：{“trade”:{"tid":123456,"seller_nick":"淘宝卖家"}}；子任务执行失败结果格式为{"sub_code":"isv.trade-not-exist","sub_msg":"交易订单不存在"} */
	SubTaskResult string `json:"sub_task_result"`
}

/* (某天)回复统计列表 */
type ReplyStatOnDay struct {
	/* 某天（的回复统计） */
	ReplyDate string `json:"reply_date"`

	/* 客服回复统计 */
	ReplyStatByIds []*ReplyStatById `json:"reply_stat_by_ids>reply_stat_by_id"`
}

/* 生鲜电子面单返回信息 */
type FreshWaybill struct {
	/* 简称 */
	Alias string `json:"alias"`

	/* 预留扩展字段 */
	Feature string `json:"feature"`

	/* 大头笔 */
	ShortAddress string `json:"short_address"`

	/* 预计到达时间 */
	Time string `json:"time"`

	/* 交易号 */
	TradeId string `json:"trade_id"`

	/* 获取的所有电子面单号，以“;”分隔 */
	WaybillCode string `json:"waybill_code"`
}

/* 交易的优惠信息详情 */
type PromotionDetail struct {
	/* 优惠金额（免运费、限时打折时为空）,单位：元 */
	DiscountFee float64 `json:"discount_fee,string"`

	/* 赠品的宝贝id */
	GiftItemId string `json:"gift_item_id"`

	/* 满就送商品时，所送商品的名称 */
	GiftItemName string `json:"gift_item_name"`

	/* 满就送礼物的礼物数量 */
	GiftItemNum string `json:"gift_item_num"`

	/* 交易的主订单或子订单号 */
	Id int64 `json:"id"`

	/* 优惠活动的描述 */
	PromotionDesc string `json:"promotion_desc"`

	/* 优惠id，(由营销工具id、优惠活动id和优惠详情id组成，结构为：营销工具id-优惠活动id_优惠详情id，如mjs-123024_211143） */
	PromotionId string `json:"promotion_id"`

	/* 优惠信息的名称 */
	PromotionName string `json:"promotion_name"`
}

/* KFC 关键词过滤匹配结果 */
type KfcSearchResult struct {
	/* 过滤后的文本：
	当匹配到B等级的词时，文本中的关键词被替换为*号，content即为关键词替换后的文本；
	其他情况，content始终为null */
	Content string `json:"content"`

	/* 匹配到的关键词的等级，值为null，或为A、B、C、D。
	当匹配不到关键词时，值为null，否则值为A、B、C、D中的一个。
	A、B、C、D等级按严重程度从高至低排列。 */
	Level string `json:"level"`

	/* 是否匹配到关键词,匹配到则为true. */
	Matched bool `json:"matched"`
}

/* 组及其成员列表 */
type GroupMember struct {
	/* 组编号 */
	GroupId int64 `json:"group_id"`

	/* 组名称 */
	GroupName string `json:"group_name"`

	/* 组成员列表，逗号分隔 */
	MemberList string `json:"member_list"`
}

/* 类目大盘数据结果对象 */
type InsightCategoryDataDTO struct {
	/* 类目id */
	CatId int64 `json:"cat_id"`

	/* 类目名称 */
	CatName string `json:"cat_name"`

	/* 点击量 */
	Click int64 `json:"click"`

	/* 竞争度 */
	Competition int64 `json:"competition"`

	/* 花费，单位（分） */
	Cost int64 `json:"cost"`

	/* 点击转化率 */
	Coverage string `json:"coverage"`

	/* 平均点击花费 */
	Cpc string `json:"cpc"`

	/* 点击率 */
	Ctr string `json:"ctr"`

	/* 直接成交金额 */
	Directtransaction int64 `json:"directtransaction"`

	/* 直接成交笔数 */
	Directtransactionshipping int64 `json:"directtransactionshipping"`

	/* 宝贝搜藏数 */
	Favitemtotal int64 `json:"favitemtotal"`

	/* 店铺搜藏数 */
	Favshoptotal int64 `json:"favshoptotal"`

	/* 总的收藏数，包括宝贝收藏和店铺收藏 */
	Favtotal int64 `json:"favtotal"`

	/* 展现量 */
	Impression int64 `json:"impression"`

	/* 间接成交金额 */
	Indirecttransaction int64 `json:"indirecttransaction"`

	/* 间接成交笔数 */
	Indirecttransactionshipping int64 `json:"indirecttransactionshipping"`

	/* 投入产出比 */
	Roi string `json:"roi"`

	/* 总的成交笔数 */
	Transactionshippingtotal int64 `json:"transactionshippingtotal"`

	/* 成交总金额 */
	Transactiontotal int64 `json:"transactiontotal"`
}

/* 推广计划 */
type Campaign struct {
	/* 推广计划ID */
	CampaignId int64 `json:"campaign_id"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 最后修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 主人昵称 */
	Nick string `json:"nick"`

	/* 用户设置的上下限状态；offline-下线；online-上线； */
	OnlineStatus string `json:"online_status"`

	/* 推广计划结算下线原因，1-余额不足；2-超过日限额，以分号分隔多个下线原因 */
	SettleReason string `json:"settle_reason"`

	/* 推广计划结算状态，offline-下线；online-上线， */
	SettleStatus string `json:"settle_status"`

	/* 推广计划名称，不能多余20个汉字 */
	Title string `json:"title"`
}

/* 词的预测类目对应的结果对象 */
type InsightCategoryForcastDTO struct {
	/* 查询词 */
	Bidword string `json:"bidword"`

	/* 表示该类目的所有父级类目，按层级顺序排列，层级越高的在前面，不同的层级之间用空格分隔 */
	CatPathId string `json:"cat_path_id"`

	/* 表示类目的所有父级类目的名称，不同层级之间用  （ascii码为2的字符）分隔开 */
	CatPathName string `json:"cat_path_name"`

	/* 表示词与该类目的相关度，值越大表示越相关 */
	Score string `json:"score"`
}

/* 表示类目的详细信息 */
type InsightCategoryInfoDTO struct {
	/* 类目Id */
	CatId int64 `json:"cat_id"`

	/* 类目的级别 */
	CatLevel int64 `json:"cat_level"`

	/* 类目名称 */
	CatName string `json:"cat_name"`

	/* 表示该类目的所有父级类目，按层级顺序排列，层级越高的在前面，不同的层级之间用空格分隔 */
	CatPathId string `json:"cat_path_id"`

	/* 表示类目的所有父级类目的名称，不同层级之间用  （ascii码为2的字符）分隔开 */
	CatPathName string `json:"cat_path_name"`

	/* 表示类目信息上次同步的时间 */
	LastSyncTime string `json:"last_sync_time"`

	/* 父类目Id */
	ParentCatId int64 `json:"parent_cat_id"`
}

/* 支付宝交易记录明细 */
type AlipayRecord struct {
	/* 支付宝订单号 */
	AlipayOrderNo string `json:"alipay_order_no"`

	/* 当时支付宝账户余额 */
	Balance string `json:"balance"`

	/* 子业务类型 */
	BusinessType string `json:"business_type"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 账号备注 */
	Memo string `json:"memo"`

	/* 支付宝订单号 */
	MerchantOrderNo string `json:"merchant_order_no"`

	/* 对方的支付宝ID */
	OptUserId string `json:"opt_user_id"`

	/* 支出金额 */
	OutAmount string `json:"out_amount"`

	/* 自己的支付宝ID */
	SelfUserId string `json:"self_user_id"`

	/* 账务类型 */
	Type string `json:"type"`
}

/* 代送商模型 */
type DeliveryAgentVO struct {
	/* 代送商ID */
	AgentId int64 `json:"agent_id"`

	/* 代送商名称 */
	AgentName string `json:"agent_name"`

	/* 代送商userId */
	AgentUserId int64 `json:"agent_user_id"`
}

/* 代送商订单模型 */
type TopDeliveryAgentOrderVO struct {
	/* 买家地址 */
	Address string `json:"address"`

	/* 买家姓名 */
	BuyerName string `json:"buyer_name"`

	/* 买家手机号码 */
	BuyerPhone string `json:"buyer_phone"`

	/* 买家坐标 */
	BuyerPos string `json:"buyer_pos"`

	/* 订单创建时间 */
	CreateTime string `json:"create_time"`

	/* 结束配送时间 */
	EndDeliveryTime string `json:"end_delivery_time"`

	/* 用户留言 */
	Note string `json:"note"`

	/* 订单ID */
	OrderId int64 `json:"order_id"`

	/* 1:创建订单
	2:买家支付订单
	4:买家申请退款
	6:卖家拒绝退款
	12:卖家确认发货
	20:订单关闭
	21:交易成功
	22:订单关闭未付款 */
	OrderStatus int64 `json:"order_status"`

	/* 店铺ID */
	ShopId int64 `json:"shop_id"`

	/* 店铺坐标 */
	ShopPos string `json:"shop_pos"`

	/* 开始配送时间 */
	StartDeliveryTime string `json:"start_delivery_time"`

	/* 店铺地址 */
	StoreAddress string `json:"store_address"`

	/* 店铺名称 */
	StoreName string `json:"store_name"`

	/* 店铺电话号码 */
	StorePhone string `json:"store_phone"`
}

/* 代送商订单展示模型 */
type DdTopPaginationForAgentOrder struct {
	/* 代送商订单列表 */
	List []*TopDeliveryAgentOrderVO `json:"list>top_delivery_agent_order_v_o"`

	/* 翻页游码 */
	PageNum int64 `json:"page_num"`

	/* 页面大小 */
	PageSize int64 `json:"page_size"`

	/* 总记录数 */
	TotalCount int64 `json:"total_count"`

	/* 可返回的记录数 */
	ViewCount int64 `json:"view_count"`
}

/* 筛单结果集 */
type AddressReachableTopResult struct {
	/* 筛单结果l列表 */
	ReachableResultList []*AddressReachableResult `json:"reachable_result_list>address_reachable_result"`
}

/* 物流跟踪信息的一条 */
type TransitStepInfo struct {
	/* 节点说明 ，指明当前节点揽收、派送，签收。 */
	Action string `json:"action"`

	/* 描述 */
	Desc string `json:"desc"`

	/* 地址地一 */
	NodeDescription string `json:"node_description"`

	/* 状态描述 */
	StatusDesc string `json:"status_desc"`

	/* 状态发生的时间 */
	StatusTime string `json:"status_time"`

	/* 时间。。 */
	Time string `json:"time"`
}

/* 子订单的帐务数据结构 */
type OrderAmount struct {
	/* 卖家手工调整的子订单的优惠金额.格式为:1.01;单位:元;精确到小数点后两位. */
	AdjustFee string `json:"adjust_fee"`

	/* 子订单的系统优惠金额。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	DiscountFee string `json:"discount_fee"`

	/* 分摊之后的实付金额 */
	DivideOrderFee string `json:"divide_order_fee"`

	/* 子交易订单中购买商品的数量 */
	Num int64 `json:"num"`

	/* 子订单对应的商品数字id */
	NumIid int64 `json:"num_iid"`

	/* 子交易订单编号 */
	Oid int64 `json:"oid"`

	/* 优惠分摊 */
	PartMjzDiscount string `json:"part_mjz_discount"`

	/* 子订单实付金额。精确到2位小数，单位:元。如:200.07，表示:200元7分。计算公式如下：payment = price * num + adjust_fee - discount_fee + post_fee(邮费，单笔子订单时子订单实付金额包含邮费，多笔子订单时不包含邮费)；对于退款成功的子订单，由于主订单的优惠分摊金额，会造成该字段可能不为0.00元。建议使用退款前的实付金额减去退款单中的实际退款金额计算。 */
	Payment string `json:"payment"`

	/* 商品价格。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	Price string `json:"price"`

	/* 子订单的系统优惠的名称，对应于discount_fee的名称 */
	PromotionName string `json:"promotion_name"`

	/* 子订单对应的商品的sku_id */
	SkuId int64 `json:"sku_id"`

	/* SKU的值。如：机身颜色:黑色;手机套餐:官方标配 */
	SkuPropertiesName string `json:"sku_properties_name"`

	/* 商品标题 */
	Title string `json:"title"`
}

/* 交易订单的帐务信息详情 */
type TradeAmount struct {
	/* 支付宝交易号，如：2009112081173831 */
	AlipayNo string `json:"alipay_no"`

	/* 买家货到付款服务费。精确到2位小数;单位:元。如:12.07，表示:12元7分 */
	BuyerCodFee string `json:"buyer_cod_fee"`

	/* 买家获得积分,返点的积分。格式:100;单位:个 */
	BuyerObtainPointFee int64 `json:"buyer_obtain_point_fee"`

	/* 货到付款服务费。精确到2位小数;单位:元。如:12.07，表示:12元7分 */
	CodFee string `json:"cod_fee"`

	/* 交易佣金。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	CommissionFee string `json:"commission_fee"`

	/* 交易创建时间 */
	Created string `json:"created"`

	/* 交易成功时间(更新交易状态为成功的同时更新)/确认收货时间。格式:yyyy-MM-dd HH:mm:ss */
	EndTime string `json:"end_time"`

	/* 快递代收款。精确到2位小数;单位:元。如:212.07，表示:212元7分 */
	ExpressAgencyFee string `json:"express_agency_fee"`

	/* 子订单的帐务金额详情列表 */
	OrderAmounts []*OrderAmount `json:"order_amounts>order_amount"`

	/* 付款时间。格式:yyyy-MM-dd HH:mm:ss */
	PayTime string `json:"pay_time"`

	/* 主订单实付金额。精确到2位小数;单位:元。如:200.07，表示:200元7分，计算公式如下：
	如果主订单只有一笔子订单 payment = 子订单的实付金额 + 货到付款服务费(如果是货到付款订单) - 主订单的系统级优惠；如果主订单有多笔子订单 payment = 各子订单的实付金额之和 + 货到付款服务费(如果是货到付款订单) + 邮费 - 主订单的系统级优惠 */
	Payment string `json:"payment"`

	/* 邮费。精确到2位小数;单位:元。如:200.07，表示:200元7分。目前只提供整笔交易的邮费，暂不提供各子订单的邮费 */
	PostFee string `json:"post_fee"`

	/* 主交易订单的系统级优惠详情 */
	PromotionDetails []*PromotionDetail `json:"promotion_details>promotion_detail"`

	/* 卖家货到付款服务费。精确到2位小数;单位:元。如:12.07，表示:12元7分 */
	SellerCodFee string `json:"seller_cod_fee"`

	/* 交易主订单编号 */
	Tid int64 `json:"tid"`

	/* 主订单的商品金额（各子订单中商品price * num的和，不包括任何优惠信息）。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	TotalFee string `json:"total_fee"`
}

/* 推广计划的日限额 */
type CampaignBudget struct {
	/* 日限额，单位是元，不得小于30 */
	Budget int64 `json:"budget"`

	/* 推广计划ID */
	CampaignId int64 `json:"campaign_id"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 是否平滑消耗，true-是；false-否；在设置了推广计划日限额后，此属性才生效 */
	IsSmooth bool `json:"is_smooth"`

	/* 最后修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 主人昵称 */
	Nick string `json:"nick"`
}

/* 国内机票乘机人信息数据结构【top订单优化】 */
type Passerger struct {
	/* 乘机人生日：yyyy-mm-dd */
	Birthday string `json:"birthday"`

	/* 乘机人证件号码 */
	CertNo string `json:"cert_no"`

	/* 乘机人证件类型：0，身份证；1，护照；2，学生证；3，军人证；4，回乡证；5，台胞证；6，港澳台胞；7，国际海员；8，外国人永久居留证；9，其它证件 */
	CertType int64 `json:"cert_type"`

	/* ei项 */
	Ei string `json:"ei"`

	/* 扩展字段 */
	Extra string `json:"extra"`

	/* 强制保险金额，单位：分 */
	ForceInsurePrice int64 `json:"force_insure_price"`

	/* 当前乘机人的保险分润金额，单位：分 */
	InsurePromotionPrice int64 `json:"insure_promotion_price"`

	/* 乘机人姓名 */
	Name string `json:"name"`

	/* 乘机人类型：0，成人；1，儿童；2，婴儿 */
	PassengerType int64 `json:"passenger_type"`

	/* pnr */
	Pnr string `json:"pnr"`

	/* 票号 */
	TicketNo string `json:"ticket_no"`

	/* 常旅客卡号 */
	TripCardNo string `json:"trip_card_no"`

	/* 退改签 */
	Tuigaiqian string `json:"tuigaiqian"`
}

/* 推广计划的投放地域 */
type CampaignArea struct {
	/* 值为：“all”；或者用“,”分割的数字，数字必须是直通车全国省市列表的AreaID，如果已经包含省、自治区id，请不要再包括省内市的id； */
	Area string `json:"area"`

	/* 推广计划ID */
	CampaignId int64 `json:"campaign_id"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 最后修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 主人昵称 */
	Nick string `json:"nick"`
}

/* 国内机票，订单基本信息数据结构【top订单优化】 */
type BaseInfo struct {
	/* 买家支付宝帐号 */
	AccountNo string `json:"account_no"`

	/* 支付宝交易号 */
	AlipayTradeNo string `json:"alipay_trade_no"`

	/* 订单出票方式==> 1:手工hk;2:自动出票;3:自动hk手工出票 */
	BookWay int64 `json:"book_way"`

	/* 佣金，单位：分 */
	Commission string `json:"commission"`

	/* 佣金比率 */
	CommissionDiscount string `json:"commission_discount"`

	/* 订单创建时间 */
	CreateTime string `json:"create_time"`

	/* 扩展信息 */
	Extra string `json:"extra"`

	/* 是否强制保险订单，有一张票为强制保险即为true */
	ForceInsure bool `json:"force_insure"`

	/* 是否保险分润订单，有一个乘机人支持分润即为 True */
	InsurePromotion bool `json:"insure_promotion"`

	/* 订单表最近一次修改时间 */
	ModifyTime string `json:"modify_time"`

	/* 订单淘宝唯一主键 */
	OrderId int64 `json:"order_id"`

	/* 订单最晚支付时间 */
	PayLatestTime string `json:"pay_latest_time"`

	/* 订单支付状态==> 0:未付款;1:已付款，冻结买家定金;2:付款给卖家;3:解冻定金给买家;4:已扣佣;5:交易关闭;6:确认可支付;7:确认不可支付 */
	PayStatus int64 `json:"pay_status"`

	/* 联系人邮箱 */
	RelationEmail string `json:"relation_email"`

	/* 联系人手机号 */
	RelationMobile string `json:"relation_mobile"`

	/* 联系人姓名 */
	RelationName string `json:"relation_name"`

	/* 联系人备用电话 */
	RelationPhoneBak string `json:"relation_phone_bak"`

	/* 关联订单号，普通往返另一程订单号，仅两程订单为同一个代理商时提供 */
	RelativeOrderId int64 `json:"relative_order_id"`

	/* 订单状态定义==> 0:未付款;(注：支持保险分润时，订单已付款，保险未付款也为0)1:处理中;2:确定出票;3:预定成功;4:预定失败;5:处理中超时失效;6:支付超时失效;7:买家取消 */
	Status int64 `json:"status"`

	/* 总金额，所有乘机人加机建燃油，单位：分 */
	TotalPrice int64 `json:"total_price"`

	/* 航程类型：0，单程；1，普通往返；2，多程（暂时没有使用）；3，特价往返 */
	TripType int64 `json:"trip_type"`
}

/* 推荐词 */
type RecommendWord struct {
	/* 平均价格 */
	AveragePrice string `json:"average_price"`

	/* 相关度 */
	Pertinence string `json:"pertinence"`

	/* 搜索量 */
	Pv string `json:"pv"`

	/* 推荐的关键词 */
	Word string `json:"word"`
}

/* 代理商订单搜索接口返回数据对象【订单优化】 */
type SearchOrderResult struct {
	/* 是否还有下一页，即满足搜索条件的订单数是否还有下一个分页 */
	HasNext bool `json:"has_next"`

	/* 淘宝机票订单列表 */
	OrderIds []int64 `json:"order_ids"`

	/* 当前淘宝系统设定的搜索结果页大小，即支持一次最多返回订单条数 */
	PageSize int64 `json:"page_size"`
}

/* 推广计划的分时折扣设置 */
type CampaignSchedule struct {
	/* 推广计划ID */
	CampaignId int64 `json:"campaign_id"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 最后修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 主人昵称 */
	Nick string `json:"nick"`

	/* 值为：“all”；或者用“;”分割的每天的设置字符串，该字符串为用“,”分割的时段折扣字符串，格式为：起始时间-结束时间:折扣，其中时间是24小时格式记录18:30，，折扣是1-150整数，表示折扣百分比； */
	Schedule string `json:"schedule"`
}

/* 相关词信息 */
type InsightRelatedWord struct {
	/* 相关词 */
	RelatedWord string `json:"related_word"`

	/* 相关度 */
	Weight string `json:"weight"`
}

/* 国内机票订单行程购票数据结构录入【top订单优化】 */
type CorpInfo struct {
	/* 申请人姓名 */
	ApplyName string `json:"apply_name"`

	/* 申请人工号 */
	ApplyNo string `json:"apply_no"`

	/* 申请时间 */
	ApplyTime string `json:"apply_time"`

	/* 集团id */
	CorprationId string `json:"corpration_id"`

	/* 成本中心 */
	CostCenter string `json:"cost_center"`

	/* 成本中心代码 */
	CostCenterCode string `json:"cost_center_code"`

	/* 费用归属OU的CODE */
	CostOu string `json:"cost_ou"`

	/* 扩展字段 */
	Extra string `json:"extra"`

	/* BPM的fromNO */
	FormNo string `json:"form_no"`

	/* 单据状态代码 */
	FormStatus string `json:"form_status"`

	/* 单据状态描述 */
	ReceiptsStatus string `json:"receipts_status"`

	/* 出差人姓名 */
	TripPersonName string `json:"trip_person_name"`

	/* 出差人工号 */
	TripPersonNo string `json:"trip_person_no"`

	/* 工作地点 */
	WorkSpace string `json:"work_space"`
}

/* 描述一个词的所有相关词的对象 */
type InsightRelatedWords struct {
	/* 原词 */
	Bidword string `json:"bidword"`

	/* 相关词信息列表 */
	RelatedWordItemsList []*InsightRelatedWord `json:"related_word_items_list>insight_related_word"`
}

/* 国内机票订单数据结构【top订单优化】 */
type AtOrder struct {
	/* 订单基础信息 */
	BaseInfo *BaseInfo `json:"base_info"`

	/* 订单行政购票信息 */
	CorpInfo *CorpInfo `json:"corp_info"`

	/* 扩展字段 */
	Extra string `json:"extra"`

	/* 订单行程单信息 */
	Itinerary *Itinerary `json:"itinerary"`

	/* 订单航段信息 */
	SegmentInfos []*SegmentInfo `json:"segment_infos>segment_info"`
}

/* 关键词大盘数据结果对象 */
type InsightWordDataDTO struct {
	/* 关键词 */
	Bidword string `json:"bidword"`

	/* 点击量 */
	Click int64 `json:"click"`

	/* 竞争度 */
	Competition int64 `json:"competition"`

	/* 花费，单位（分） */
	Cost int64 `json:"cost"`

	/* 点击转化率 */
	Coverage string `json:"coverage"`

	/* 平均点击花费 */
	Cpc string `json:"cpc"`

	/* 点击率 */
	Ctr string `json:"ctr"`

	/* 直接成交金额 */
	Directtransaction int64 `json:"directtransaction"`

	/* 直接成交笔数 */
	Directtransactionshipping int64 `json:"directtransactionshipping"`

	/* 宝贝搜藏数 */
	Favitemtotal int64 `json:"favitemtotal"`

	/* 店铺搜藏数 */
	Favshoptotal int64 `json:"favshoptotal"`

	/* 总的收藏数，包括宝贝收藏和店铺收藏 */
	Favtotal int64 `json:"favtotal"`

	/* 展现量 */
	Impression int64 `json:"impression"`

	/* 间接成交金额 */
	Indirecttransaction int64 `json:"indirecttransaction"`

	/* 间接成交笔数 */
	Indirecttransactionshipping int64 `json:"indirecttransactionshipping"`

	/* 投入产出比 */
	Roi string `json:"roi"`

	/* 总的成交笔数 */
	Transactionshippingtotal int64 `json:"transactionshippingtotal"`

	/* 成交总金额 */
	Transactiontotal int64 `json:"transactiontotal"`
}

/* 国内机票航段信息数据结构，【订单优化】 */
type SegmentInfo struct {
	/* 航班航空公司二字码 */
	AirlineCode string `json:"airline_code"`

	/* 航班到达机场三字码 */
	ArrAirportCode string `json:"arr_airport_code"`

	/* 航班到达城市三字码 */
	ArrCityCode string `json:"arr_city_code"`

	/* 航班到达时间，格式yyyy-mm-dd hh:mm:ss */
	ArrTime string `json:"arr_time"`

	/* 出票状态: 0，初始状态；1，hk成功；2，hk失败；3，出票（RR）成功；4，出票（RR）失败；5，取消hk成功 6:取消hk失败 */
	BookStatus int64 `json:"book_status"`

	/* 舱位等级：0，头等舱(F)；1，商务舱(C)；2，经济舱(Y) */
	CabinClass int64 `json:"cabin_class"`

	/* 航班舱位代码 */
	CabinCode string `json:"cabin_code"`

	/* 航班舱位id，淘宝系统唯一键 */
	CabinId int64 `json:"cabin_id"`

	/* 航班实际承运航班号 */
	Carrier string `json:"carrier"`

	/* 航班儿童机建费用，单位：分 */
	ChildFee int64 `json:"child_fee"`

	/* 儿童保险分润金额，单位元 */
	ChildInsurePromotionPrice int64 `json:"child_insure_promotion_price"`

	/* 儿童销售价格，单位：分 */
	ChildPrice int64 `json:"child_price"`

	/* 航班儿童燃油税，单位：分 */
	ChildTax int64 `json:"child_tax"`

	/* 航班出发机场三字码 */
	DepAirportCode string `json:"dep_airport_code"`

	/* 航班出发城市三字码 */
	DepCityCode string `json:"dep_city_code"`

	/* 航班起飞时间，格式yyyy-mm-dd hh:mm:ss */
	DepTime string `json:"dep_time"`

	/* 扩展信息 */
	Extra string `json:"extra"`

	/* 航班成人机建费，单位：分 */
	Fee int64 `json:"fee"`

	/* 淘宝系统航班id唯一键 */
	FlightId int64 `json:"flight_id"`

	/* 航班号 */
	FlightNo string `json:"flight_no"`

	/* 航班机型 */
	FlightType string `json:"flight_type"`

	/* 成人保险分润金额，单位元 */
	InsurePromotionPrice int64 `json:"insure_promotion_price"`

	/* 备注信息，政策中的备注信息 */
	Memo string `json:"memo"`

	/* 乘机人信息列表 */
	Passengers []*Passerger `json:"passengers>passerger"`

	/* 政策id，淘宝系统政策唯一键 */
	PolicyId int64 `json:"policy_id"`

	/* 机票政策类型：6，特价；8，让利；10，特殊 */
	PolicyType int64 `json:"policy_type"`

	/* 销售价格，单位：分 */
	Price int64 `json:"price"`

	/* 航段类型：1，去程；2，回程 */
	SegmentType int64 `json:"segment_type"`

	/* 特殊说明 */
	SpecialRule string `json:"special_rule"`

	/* 航班成人燃油税，单位：分 */
	Tax int64 `json:"tax"`

	/* 当前航段票面价格，单位：分 */
	TicketPrice int64 `json:"ticket_price"`
}

/* 类目下词的相信数据 */
type InsightWordDataUnderCatDTO struct {
	/* 关键词 */
	Bidword string `json:"bidword"`

	/* 类目id */
	CatId int64 `json:"cat_id"`

	/* 类目名称 */
	CatName string `json:"cat_name"`

	/* 点击量 */
	Click int64 `json:"click"`

	/* 竞争度 */
	Competition int64 `json:"competition"`

	/* 花费，单位（分） */
	Cost int64 `json:"cost"`

	/* 点击转化率 */
	Coverage string `json:"coverage"`

	/* 平均点击花费 */
	Cpc string `json:"cpc"`

	/* 点击率 */
	Ctr string `json:"ctr"`

	/* 直接成交金额 */
	Directtransaction int64 `json:"directtransaction"`

	/* 直接成交笔数 */
	Directtransactionshipping int64 `json:"directtransactionshipping"`

	/* 宝贝搜藏数 */
	Favitemtotal int64 `json:"favitemtotal"`

	/* 店铺搜藏数 */
	Favshoptotal int64 `json:"favshoptotal"`

	/* 总的收藏数，包括宝贝收藏和店铺收藏 */
	Favtotal int64 `json:"favtotal"`

	/* 展现量 */
	Impression int64 `json:"impression"`

	/* 间接成交金额 */
	Indirecttransaction int64 `json:"indirecttransaction"`

	/* 间接成交笔数 */
	Indirecttransactionshipping int64 `json:"indirecttransactionshipping"`

	/* 投入产出比 */
	Roi string `json:"roi"`

	/* 总的成交笔数 */
	Transactionshippingtotal int64 `json:"transactionshippingtotal"`

	/* 成交总金额 */
	Transactiontotal int64 `json:"transactiontotal"`
}

/* 国内机票行程单数据结构定义【top订单优化】 */
type Itinerary struct {
	/* 收件人地址 */
	Address string `json:"address"`

	/* 支付宝交易号 */
	AlipayTradeNo string `json:"alipay_trade_no"`

	/* 物流公司代码 */
	CompanyCode string `json:"company_code"`

	/* 邮寄单号 */
	ExpressCode string `json:"express_code"`

	/* 扩展字段 */
	Extra string `json:"extra"`

	/* 淘宝主键id */
	Id int64 `json:"id"`

	/* 行程单号 */
	ItineraryNo string `json:"itinerary_no"`

	/* 收件人手机号 */
	Mobile string `json:"mobile"`

	/* 收件人备用手机号 */
	MobileBak string `json:"mobile_bak"`

	/* 收件人姓名 */
	Name string `json:"name"`

	/* 行程单价格，单位：分 */
	Price string `json:"price"`

	/* 邮寄时间 */
	SendDate string `json:"send_date"`

	/* 行程单订单的状态 0：未付款 1：已付款 2：转交易成功 3：已邮寄 4：已取消 */
	Status int64 `json:"status"`

	/* 行程单类型：6，快递 */
	Type int64 `json:"type"`
}

/* 关键词地域细分数据 */
type InsightWordsAreaDistributeDataDTO struct {
	/* 关键词 */
	Bidword string `json:"bidword"`

	/* 市名称 */
	Cityname string `json:"cityname"`

	/* 点击量 */
	Click int64 `json:"click"`

	/* 竞争度 */
	Competition int64 `json:"competition"`

	/* 花费，单位（分） */
	Cost int64 `json:"cost"`

	/* 点击转化率 */
	Coverage string `json:"coverage"`

	/* 平均点击花费 */
	Cpc string `json:"cpc"`

	/* 点击率 */
	Ctr string `json:"ctr"`

	/* 直接成交金额 */
	Directtransaction int64 `json:"directtransaction"`

	/* 直接成交笔数 */
	Directtransactionshipping int64 `json:"directtransactionshipping"`

	/* 宝贝搜藏数 */
	Favitemtotal int64 `json:"favitemtotal"`

	/* 店铺搜藏数 */
	Favshoptotal int64 `json:"favshoptotal"`

	/* 总的收藏数，包括宝贝收藏和店铺收藏 */
	Favtotal int64 `json:"favtotal"`

	/* 展现量 */
	Impression int64 `json:"impression"`

	/* 间接成交金额 */
	Indirecttransaction int64 `json:"indirecttransaction"`

	/* 间接成交笔数 */
	Indirecttransactionshipping int64 `json:"indirecttransactionshipping"`

	/* 省名称 */
	Provincename string `json:"provincename"`

	/* 投入产出比 */
	Roi string `json:"roi"`

	/* 总的成交笔数 */
	Transactionshippingtotal int64 `json:"transactionshippingtotal"`

	/* 成交总金额 */
	Transactiontotal int64 `json:"transactiontotal"`
}

/* 旺彩赠送DO */
type LotteryWangcaiPresent struct {
	/* isv应用的名称 */
	AppName string `json:"app_name"`

	/* 彩种名称 */
	LotteryName string `json:"lottery_name"`

	/* 赠送时间 */
	PresentDate string `json:"present_date"`

	/* 主键id */
	PresentId int64 `json:"present_id"`

	/* 彩票注数 */
	StakeCount int64 `json:"stake_count"`

	/* 订单状态 */
	Status int64 `json:"status"`

	/* 订单状态描述 */
	StatusDesc string `json:"status_desc"`

	/* 赠言 */
	SweetyWords string `json:"sweety_words"`

	/* 用户昵称 */
	UserNick string `json:"user_nick"`

	/* 用户数字id */
	UserNumId int64 `json:"user_num_id"`

	/* 中奖金额，以分为单位 */
	WinFee int64 `json:"win_fee"`
}

/* 关键词按流量细分的数据 */
type InsightWordSubDataDTO struct {
	/* 关键词 */
	Bidword string `json:"bidword"`

	/* 点击量 */
	Click int64 `json:"click"`

	/* 竞争度 */
	Competition int64 `json:"competition"`

	/* 花费，单位（分） */
	Cost int64 `json:"cost"`

	/* 点击转化率 */
	Coverage string `json:"coverage"`

	/* 平均点击花费 */
	Cpc string `json:"cpc"`

	/* 点击率 */
	Ctr string `json:"ctr"`

	/* 直接成交金额 */
	Directtransaction int64 `json:"directtransaction"`

	/* 直接成交笔数 */
	Directtransactionshipping int64 `json:"directtransactionshipping"`

	/* 宝贝搜藏数 */
	Favitemtotal int64 `json:"favitemtotal"`

	/* 店铺搜藏数 */
	Favshoptotal int64 `json:"favshoptotal"`

	/* 总的收藏数，包括宝贝收藏和店铺收藏 */
	Favtotal int64 `json:"favtotal"`

	/* 展现量 */
	Impression int64 `json:"impression"`

	/* 间接成交金额 */
	Indirecttransaction int64 `json:"indirecttransaction"`

	/* 间接成交笔数 */
	Indirecttransactionshipping int64 `json:"indirecttransactionshipping"`

	/* 投放机制:0:关键词推广 2：定向推广 3：通用定向 */
	Mechanism int64 `json:"mechanism"`

	/* 流量来源：1:PC站内，2：PC站外,4:无线站内 5：无线站外 */
	Network int64 `json:"network"`

	/* 投入产出比 */
	Roi string `json:"roi"`

	/* 总的成交笔数 */
	Transactionshippingtotal int64 `json:"transactionshippingtotal"`

	/* 成交总金额 */
	Transactiontotal int64 `json:"transactiontotal"`
}

/* 彩票赠送的统计数据DO */
type LotteryWangcaiPresentStat struct {
	/* 日期 */
	DateId int64 `json:"date_id"`

	/* 当日赠送彩票的金额 */
	PresentFee int64 `json:"present_fee"`

	/* 当日赠送彩票的注数 */
	PresentStake int64 `json:"present_stake"`

	/* 当日赠送用户数 */
	PresentUser int64 `json:"present_user"`

	/* 送彩方的淘宝数字ID */
	SellerId int64 `json:"seller_id"`
}

/* 食品安全信息，包括：
生产许可证号、产品标准号、厂名、厂址等 */
type FoodSecurity struct {
	/* 厂家联系方式 */
	Contact string `json:"contact"`

	/* 产品标准号 */
	DesignCode string `json:"design_code"`

	/* 厂名 */
	Factory string `json:"factory"`

	/* 厂址 */
	FactorySite string `json:"factory_site"`

	/* 食品添加剂 */
	FoodAdditive string `json:"food_additive"`

	/* 健字号，保健品/膳食营养补充剂 这个类目下特有的信息，此类目下无需填写生产许可证编号（QS），如果填写了生产许可证编号（QS）将被忽略不保存；保存宝贝时，标题前会自动加上健字号产品名称一起作为宝贝标题； */
	HealthProductNo string `json:"health_product_no"`

	/* 配料表 */
	Mix string `json:"mix"`

	/* 保质期 */
	Period string `json:"period"`

	/* 储藏方法 */
	PlanStorage string `json:"plan_storage"`

	/* 生产许可证号 */
	PrdLicenseNo string `json:"prd_license_no"`

	/* 生产结束日期 */
	ProductDateEnd string `json:"product_date_end"`

	/* 生产开始日期 */
	ProductDateStart string `json:"product_date_start"`

	/* 进货结束日期，要在生产日期之后 */
	StockDateEnd string `json:"stock_date_end"`

	/* 进货开始日期，要在生产日期之后 */
	StockDateStart string `json:"stock_date_start"`

	/* 供货商 */
	Supplier string `json:"supplier"`
}

/* 关键词按竞价区间细分的数据 */
type InsightWordPriceDistributeDataDTO struct {
	/* 关键词 */
	Bidword string `json:"bidword"`

	/* 点击量 */
	Click int64 `json:"click"`

	/* 竞争度 */
	Competition int64 `json:"competition"`

	/* 花费，单位（分） */
	Cost int64 `json:"cost"`

	/* 点击转化率 */
	Coverage string `json:"coverage"`

	/* 平均点击花费 */
	Cpc string `json:"cpc"`

	/* 点击率 */
	Ctr string `json:"ctr"`

	/* 直接成交金额 */
	Directtransaction int64 `json:"directtransaction"`

	/* 直接成交笔数 */
	Directtransactionshipping int64 `json:"directtransactionshipping"`

	/* 宝贝搜藏数 */
	Favitemtotal int64 `json:"favitemtotal"`

	/* 店铺搜藏数 */
	Favshoptotal int64 `json:"favshoptotal"`

	/* 总的收藏数，包括宝贝收藏和店铺收藏 */
	Favtotal int64 `json:"favtotal"`

	/* 展现量 */
	Impression int64 `json:"impression"`

	/* 间接成交金额 */
	Indirecttransaction int64 `json:"indirecttransaction"`

	/* 间接成交笔数 */
	Indirecttransactionshipping int64 `json:"indirecttransactionshipping"`

	/* 竞价区间 */
	Price int64 `json:"price"`

	/* 投入产出比 */
	Roi string `json:"roi"`

	/* 总的成交笔数 */
	Transactionshippingtotal int64 `json:"transactionshippingtotal"`

	/* 成交总金额 */
	Transactiontotal int64 `json:"transactiontotal"`
}

/* 淘宝彩票彩种信息描述 */
type LotteryType struct {
	/* 彩种ID */
	Id int64 `json:"id"`

	/* 彩种名称 */
	Name string `json:"name"`
}

/* 标准酒店信息 */
type SHotelInfoObject struct {
	/* 酒店地址 */
	Address string `json:"address"`

	/* 酒店品牌 */
	Brand string `json:"brand"`

	/* 市的code */
	City int64 `json:"city"`

	/* 酒店装修时间 */
	DecorateTime string `json:"decorate_time"`

	/* 酒店描述 */
	Description string `json:"description"`

	/* 地区的值 */
	District int64 `json:"district"`

	/* H5的detail页面的URL */
	H5DetailUrl string `json:"h5_detail_url"`

	/* 酒店设施 */
	HotelFacilities string `json:"hotel_facilities"`

	/* 纬度 */
	Lat string `json:"lat"`

	/* 纬度 */
	Lng string `json:"lng"`

	/* 酒店名称 */
	Name string `json:"name"`

	/* 酒店开业时间 */
	OpeningTime string `json:"opening_time"`

	/* 酒店detail页面的url */
	PcDetailUrl string `json:"pc_detail_url"`

	/* 图片url，多张图片使用","隔开 */
	PicUrls string `json:"pic_urls"`

	/* 省的code */
	Province int64 `json:"province"`

	/* 评论数 */
	RateNumber int64 `json:"rate_number"`

	/* 评分 */
	RateScore string `json:"rate_score"`

	/* 房型信息 */
	Rooms []*SRoomType `json:"rooms>s_room_type"`

	/* 服务设施 */
	Services string `json:"services"`

	/* 标准酒店ID */
	Shid int64 `json:"shid"`

	/* 酒店星级，1-5星，0是客栈 */
	Star string `json:"star"`

	/* 酒店状态,0,营业中；-1，筹建中；-2，暂停营业；-3，已停业； */
	Status int64 `json:"status"`

	/* 电话，包括三种类型：
	1.固定电话，例如：0086-010-85322688
	2.移动电话，例如：13869696363
	3.400或800电话，例如：0086-4006123928 */
	Tel string `json:"tel"`

	/* 酒店类型 */
	Type string `json:"type"`
}

/* 卖家设置售后服务对象 */
type AfterSale struct {
	/* id */
	AfterSaleId int64 `json:"after_sale_id"`

	/* 名称 */
	AfterSaleName string `json:"after_sale_name"`

	/* tfs地址 */
	AfterSalePath string `json:"after_sale_path"`
}

/* 酒店价格rate */
type HotelPriceRate struct {
	/* 手机购买链接前缀 */
	H5BuyUrl string `json:"h5_buy_url"`

	/* 价格和库存信息。
	B:date  日期必须为 T---T+28 日内的日期（T为当天），且不能重复
	C:price 价格 int类型 取值范围1-99999999 单位为分
	D:quota 库存 0为不存在，1为存在 */
	InventoryPrice string `json:"inventory_price"`

	/* 名称 */
	Name string `json:"name"`

	/* 1, "全额支付" 2, "手续费" 3, "定金" 4, "手续费/间夜" 5, "面付" 6, "后付" */
	PaymentType int64 `json:"payment_type"`

	/* pc购买链接前缀 */
	PcBuyUrl string `json:"pc_buy_url"`

	/* 酒店RPID */
	Rpid int64 `json:"rpid"`
}

/* 酒店价格查询对象 */
type HotelPriceSearchObject struct {
	/* 结束 时间 */
	EndDate string `json:"end_date"`

	/* 最低价 */
	LowPrice int64 `json:"low_price"`

	/* 房型价格信息 */
	Rooms []*RoomTypePriceSearchObject `json:"rooms>room_type_price_search_object"`

	/* 标准酒店id */
	Shid int64 `json:"shid"`

	/* 开始 时间 */
	StartDate string `json:"start_date"`
}

/* 房型价格结果对象 */
type RoomTypePriceSearchObject struct {
	/* 房型名称 */
	Name string `json:"name"`

	/* rate列表 */
	Rates []*HotelPriceRate `json:"rates>hotel_price_rate"`

	/* 标准酒店id */
	Srid int64 `json:"srid"`
}

/* 查询揽送范围之内的物流公司信息 */
type LogisticsPartner struct {
	/* 物流公司揽收和资费详细信息 */
	Carriage *CarriageDetail `json:"carriage"`

	/* 揽收说明信息 */
	CoverRemark string `json:"cover_remark"`

	/* 物流公司详细信息 */
	Partner *PartnerDetail `json:"partner"`

	/* 不可送达的说明信息 */
	UncoverRemark string `json:"uncover_remark"`
}

/* 商品优惠策略详情 */
type Promotion struct {
	/* 减价件数，1只减一件，0表示多件 */
	DecreaseNum int64 `json:"decrease_num"`

	/* 优惠类型，PRICE表示按价格优惠，DISCOUNT表示按折扣优惠 */
	DiscountType string `json:"discount_type"`

	/* 优惠额度 */
	DiscountValue string `json:"discount_value"`

	/* 优惠结束日期 */
	EndDate string `json:"end_date"`

	/* 商品数字ID */
	NumIid int64 `json:"num_iid"`

	/* 优惠描述 */
	PromotionDesc string `json:"promotion_desc"`

	/* 优惠ID */
	PromotionId int64 `json:"promotion_id"`

	/* 优惠标题，显示在宝贝详情页面的优惠图标的tip。 */
	PromotionTitle string `json:"promotion_title"`

	/* 优惠开始日期 */
	StartDate string `json:"start_date"`

	/* 优惠策略状态，ACTIVE表示有效，UNACTIVE表示无效 */
	Status string `json:"status"`

	/* 对应的人群标签ID */
	TagId int64 `json:"tag_id"`
}

/* 批次库存查询结果记录 */
type WlbItemBatch struct {
	/* 批次编号 */
	BatchCode string `json:"batch_code"`

	/* 创建者 */
	Creator string `json:"creator"`

	/* 残次数量 */
	DefectQuantity int64 `json:"defect_quantity"`

	/* 到期时间 */
	DueDate string `json:"due_date"`

	/* 创建时间 */
	GmtCreate string `json:"gmt_create"`

	/* 最后修改时间 */
	GmtModified string `json:"gmt_modified"`

	/* 保质期 */
	GuaranteePeriod string `json:"guarantee_period"`

	/* 天（单位） */
	GuaranteeUnit int64 `json:"guarantee_unit"`

	/* 商品批次记录id */
	Id int64 `json:"id"`

	/* 是否删除。0：正常 1：删除 */
	IsDeleted bool `json:"is_deleted"`

	/* 商品id */
	ItemId int64 `json:"item_id"`

	/* 最后修改者 */
	LastModifier string `json:"last_modifier"`

	/* 产地 */
	ProduceArea string `json:"produce_area"`

	/* 生产编号 */
	ProduceCode string `json:"produce_code"`

	/* 生产日期 */
	ProduceDate string `json:"produce_date"`

	/* 商品数量 */
	Quantity int64 `json:"quantity"`

	/* 接受日期 */
	ReceiveDate string `json:"receive_date"`

	/* 描述 */
	Remarks string `json:"remarks"`

	/* 状态。item_batch_status_open:开放 item_batch_status_lock:冻结 item_batch_status_invalid:无效 */
	Status string `json:"status"`

	/* 存储类型 */
	StoreCode string `json:"store_code"`

	/* 用户id */
	UserId int64 `json:"user_id"`

	/* 版本 */
	Version int64 `json:"version"`
}

/* 点菜订单详情 */
type DdTopMenuDetailVO struct {
	/* 联系人 */
	Contact string `json:"contact"`

	/* 菜单创建时间 */
	CreateTime string `json:"create_time"`

	/* 就餐时间 */
	DiningTime string `json:"dining_time"`

	/* 点菜单菜品列表 */
	Items []*DdItemVO `json:"items>dd_item_v_o"`

	/* 菜单编码 */
	MenuId int64 `json:"menu_id"`

	/* 手机号 */
	Mobile string `json:"mobile"`

	/* 买家备注 */
	Note string `json:"note"`

	/* 外部门店id */
	OutStoreId string `json:"out_store_id"`

	/* 付款时间 */
	PayTime string `json:"pay_time"`

	/* 就餐人数 */
	People int64 `json:"people"`

	/* 现价：小于等于原价 */
	RealPrice float64 `json:"real_price,string"`

	/* 状态： */
	Status int64 `json:"status"`

	/* 淘点点门店编码 */
	StoreId string `json:"store_id"`

	/* 桌台编码 */
	TableCode string `json:"table_code"`

	/* 桌台名称 */
	TableName string `json:"table_name"`

	/* 原价 */
	TotalPrice float64 `json:"total_price,string"`
}

/* 菜品视图对象 */
type DdItemVO struct {
	/* 用户点菜份数 */
	Count int64 `json:"count"`

	/* 淘点点菜品id */
	Id int64 `json:"id"`

	/* 菜品名称 */
	Name string `json:"name"`

	/* 原价 */
	OriPrice int64 `json:"ori_price"`

	/* 外部菜品编号 */
	OutId string `json:"out_id"`

	/* 外部skuid */
	OutSkuId string `json:"out_sku_id"`

	/* 菜品出售价格 */
	Price float64 `json:"price,string"`

	/* 淘点点skuid */
	SkuId int64 `json:"sku_id"`

	/* sku名称 */
	SkuName string `json:"sku_name"`

	/* 点菜单菜品状态 */
	Status int64 `json:"status"`
}

/* 图片空间的用户信息获取，包括订购容量等 */
type UserInfo struct {
	/* 用户的可用容量，即订购量与免费量之和 */
	AvailableSpace string `json:"available_space"`

	/* 图片空间的免费容量 */
	FreeSpace string `json:"free_space"`

	/* 图片空间的订购有效期 */
	OrderExpiryDate string `json:"order_expiry_date"`

	/* 用户订购的图片空间容量 */
	OrderSpace string `json:"order_space"`

	/* 剩余的图片空间容量 */
	RemainingSpace string `json:"remaining_space"`

	/* 已使用的图片空间容量 */
	UsedSpace string `json:"used_space"`

	/* 用户自定义的水印参数，通过"|"分割开，如果用户没有定义则为""
	具体水印参数组合方法，用"|"分开，顺序按"是否全局设置|水印文字|是否文字水印优先|透明度|字体|字体大小|字体是否加粗|字体是否斜体|字体是否加下划线|字体颜色|旋转角度|是否带阴影|水印位置|图片水印URL|reference水印相对位置" reference取值有左上（1）/中间（3）/右下（2）,其中的null代表为空 */
	WaterMark string `json:"water_mark"`
}

/* 翻页数据对象 */
type DdTopPagination struct {
	/* 结果列表 */
	List []*DdTopReservedVO `json:"list>dd_top_reserved_v_o"`

	/* 翻页游码 */
	PageNum int64 `json:"page_num"`

	/* 页面大小 */
	PageSize int64 `json:"page_size"`

	/* 总记录数 */
	TotalCount int64 `json:"total_count"`

	/* 可返回的记录数 */
	ViewCount int64 `json:"view_count"`
}

/* 淘点点预定订单列表对象 */
type DdTopReservedVO struct {
	/* 桌台类型：1.散座|2.包厢 */
	AuctionPosition int64 `json:"auction_position"`

	/* 桌子容纳的最大人数 */
	AuctionServeMax int64 `json:"auction_serve_max"`

	/* 桌位容纳的最小人数 */
	AuctionServeMin int64 `json:"auction_serve_min"`

	/* 买家昵称 */
	BuyerNick string `json:"buyer_nick"`

	/* 核销时间 */
	CheckTime string `json:"check_time"`

	/* 城市编码 */
	City int64 `json:"city"`

	/* 下单时间 */
	CreateTime string `json:"create_time"`

	/* 订金，以分为单位 */
	Deposit int64 `json:"deposit"`

	/* 淘点点预定单id */
	Id int64 `json:"id"`

	/* 是否打印，true表示已经打印 */
	IsPrint bool `json:"is_print"`

	/* 点菜单订单id */
	MenuOrderId string `json:"menu_order_id"`

	/* 当天的预定编号 */
	Num int64 `json:"num"`

	/* 预定金付款时间 */
	PaidTime string `json:"paid_time"`

	/* 预定人数 */
	PeopleCount int64 `json:"people_count"`

	/* 退款截止时间 */
	RefundDeadline string `json:"refund_deadline"`

	/* 预定时间 */
	ReserveTime string `json:"reserve_time"`

	/* 卖家标注 */
	SellerMark int64 `json:"seller_mark"`

	/* 卖家备注 */
	SellerMemo string `json:"seller_memo"`

	/* 预订单状态:1-新建,101-结账订单建立,2-用户已付款，12-生成现金券，21-现金券核销，22-付款超时，20-订单过期，301-退款，500-创建订单失败 */
	Status int64 `json:"status"`

	/* 淘点点商户编码 */
	StoreId string `json:"store_id"`

	/* 商户名称 */
	StoreName string `json:"store_name"`

	/* 淘宝订单号 */
	TaobaoOrderId string `json:"taobao_order_id"`

	/* 买家备注 */
	UserMemo string `json:"user_memo"`

	/* 联系人称呼 */
	UserName string `json:"user_name"`

	/* 用户电话 */
	UserPhone string `json:"user_phone"`
}

/* 运费模板对象 */
type DeliveryTemplate struct {
	/* 运费模板上设置的发货地址 */
	Address string `json:"address"`

	/* 可选值：0,1,2,3<br>,说明如下<br>
	1)买家承担运费的模版<br>
	0：买家承担服务费<br>
	1: 卖家承担服务费<br>
	2)卖家承担运费的模版<br>
	2:卖家承担运费的模版（集市），卖家承担服务费<br>
	3:卖家承担运费的模版（天猫），卖家承担服务费<br> */
	Assumer int64 `json:"assumer"`

	/* 该模板上设置的卖家发货地址区域ID，如：address为浙江省杭州市西湖去文三路XX号那么这个consign_area_id的值就是西湖区的ID */
	ConsignAreaId int64 `json:"consign_area_id"`

	/* 模板创建时间 */
	Created string `json:"created"`

	/* 运费模板中运费详细信息对象，包含默认运费和指定地区运费 */
	FeeList []*TopFee `json:"fee_list>top_fee"`

	/* 模板修改时间 */
	Modified string `json:"modified"`

	/* 模板名称，长度不能超过25个字节 */
	Name string `json:"name"`

	/* 物流服务模板支持增值服务列表，多个用分号隔开。cod:货到付款 mops：刷卡付款 */
	Supports string `json:"supports"`

	/* 模块ID */
	TemplateId int64 `json:"template_id"`

	/* 可选值：0
	说明：
	0:表示按宝贝件数计算运费
	<br/><br/>
	1:表示按宝贝重量计算运费
	<br/><br/>
	3:表示按宝贝体积计算运费 */
	Valuation int64 `json:"valuation"`
}

/* 订购关系对象 */
type ServiceSubscribe struct {
	/* 订购总数 */
	AllNum int64 `json:"all_num"`

	/* 将要被使用的那条质检订单的价格 */
	FuturePrice float64 `json:"future_price,string"`

	/* 将要被消耗的质检订单ID */
	FutureSubId int64 `json:"future_sub_id"`

	/* 过期时间 */
	GmtExpiry string `json:"gmt_expiry"`

	/* 订购者昵称 */
	Nick string `json:"nick"`

	/* 服务收费项code */
	ServiceItemCode string `json:"service_item_code"`

	/* 该用户该收费项目下面的所有的订购记录详情 */
	UsageDetailList []*QualityUsageDetail `json:"usage_detail_list>quality_usage_detail"`

	/* 已经使用的数量 */
	UsedNum int64 `json:"used_num"`
}

/* 运费模板中运费信息对象 */
type TopFee struct {
	/* 增费：输入0.00-999.99（最多包含两位小数） 不能为空不输入运费时必须输入0 */
	AddFee string `json:"add_fee"`

	/* 增费标准：当valuation(记价方式)为0时输入1-9999范围内的整数 */
	AddStandard string `json:"add_standard"`

	/* 邮费子项涉及的地区,多个地区用逗号连接数量串;可以用taobao.areas.get接口获取.或者参考:http://www.stats.gov.cn/tjbz/xzqhdm/t20080215_402462675.htm 例 (110000,310000,320000,330000).就代表邮费子项涉 及(北京,上海,江苏,浙江)四个地区.填写时要注意对照地区代码值,如果填入错误地区代码,将会出现错误信息. */
	Destination string `json:"destination"`

	/* 可选值：post:平邮; cod:货到付款; ems:EMS; express:快递公司 */
	ServiceType string `json:"service_type"`

	/* 首费：输入0.01-999.99（最多包含两位小数） 不能为空也不能为0 */
	StartFee string `json:"start_fee"`

	/* 首费标准：当valuation(记价方式)为0时输入1-9999范围内的整数 */
	StartStandard string `json:"start_standard"`
}

/* 服务项属性 */
type ServiceItemProperty struct {
	/* 基础价格 */
	BasicPrice float64 `json:"basic_price,string"`

	/* 质检服务简介 */
	Description string `json:"description"`

	/* 属性列表 */
	ItemPropertyValues []*ItemPropertyValues `json:"item_property_values>item_property_values"`

	/* 服务商的nick */
	Nick string `json:"nick"`

	/* 服务收费项代码 */
	ServiceItemCode string `json:"service_item_code"`

	/* 服务收费项名称 */
	ServiceItemName string `json:"service_item_name"`

	/* 服务名称 */
	ServiceName string `json:"service_name"`
}

/* 服务属性对象 */
type ItemPropertyValues struct {
	/* 服务属性id */
	PropertyId int64 `json:"property_id"`

	/* 属性名称 */
	PropertyName string `json:"property_name"`

	/* 属性值列表. */
	PropertyValues []string `json:"property_values"`
}

/* 质检报告 */
type QtReport struct {
	/* 扩展属性通过冒号分隔属性与属性值. 分号分隔不同属性 */
	ExtAttr string `json:"ext_attr"`

	/* 创建日期 */
	GmtCreate string `json:"gmt_create"`

	/* 质检有效期限 */
	GmtExpiry string `json:"gmt_expiry"`

	/* 出具报告时间。 */
	GmtReport string `json:"gmt_report"`

	/* 提交检查时间 */
	GmtSubmit string `json:"gmt_submit"`

	/* 质检报告在淘宝的Id */
	Id int64 `json:"id"`

	/* 是否合格 */
	IsPassed bool `json:"is_passed"`

	/* 样品的链接 */
	ItemUrl string `json:"item_url"`

	/* 不合格原因 */
	Message string `json:"message"`

	/* 送检人昵称 */
	Nick string `json:"nick"`

	/* 样本宝贝id */
	NumIid int64 `json:"num_iid"`

	/* 质检编号 */
	QtCode string `json:"qt_code"`

	/* 质检项名称 */
	QtName string `json:"qt_name"`

	/* 质检标准 */
	QtStandard string `json:"qt_standard"`

	/* 质检类型 0,全部 1,聚划算认证2,消保打标 */
	QtType int64 `json:"qt_type"`

	/* 质检报告地址 */
	ReportUrl string `json:"report_url"`

	/* 质检服务商名称 */
	SpName string `json:"sp_name"`

	/* 质检报告状态
	0:已提交申请 1:已收到样品 2:已出检测结果 3.已出具报告 */
	Status int64 `json:"status"`
}

/* 登录日志 */
type LoginLog struct {
	/* 用户登录或退出客户端的时间 */
	Time string `json:"time"`

	/* 标志用户登录或退出。
	0表示登陆，1表示退出。 */
	Type string `json:"type"`
}

/* 评价详细 */
type EvalDetail struct {
	/* 评价详细：
	1 非常满意
	2 满意
	3 一般
	4 不满意 */
	EvalCode int64 `json:"eval_code"`

	/* 评价接收者 */
	EvalRecer string `json:"eval_recer"`

	/* 评价发送者 */
	EvalSender string `json:"eval_sender"`

	/* 评价时间 */
	EvalTime string `json:"eval_time"`

	/* 评价发送时间 */
	SendTime string `json:"send_time"`
}

/* 分流权重 */
type StreamWeight struct {
	/* 账号 */
	User string `json:"user"`

	/* 账号对应的权重 */
	Weight int64 `json:"weight"`
}

/* 满就送卖家数据详情 */
type XiamiSellerlist struct {
	/* 总条数 */
	Count int64 `json:"count"`

	/* 卖家销售详情list */
	Info []*XiamiSellerlistInfo `json:"info>xiami_sellerlist_info"`
}

/* 物流公司资费相关信息 */
type CarriageDetail struct {
	/* 续费（单位：元） */
	AddFee int64 `json:"add_fee"`

	/* 续重（单位：千克） */
	AddWeight int64 `json:"add_weight"`

	/* 破损赔付 */
	DamagePayment string `json:"damage_payment"`

	/* 物流公司揽收时间段 */
	GotTime string `json:"got_time"`

	/* 首费（单位：元） */
	InitialFee int64 `json:"initial_fee"`

	/* 首重（单位：千克） */
	InitialWeight int64 `json:"initial_weight"`

	/* 丢单赔付 */
	LostPayment string `json:"lost_payment"`

	/* 快件送达所需的时间(单位：天) */
	WayDay string `json:"way_day"`
}

/* E客服账号操作信息 */
type AccountInfo struct {
	/* 账号 */
	Account string `json:"account"`

	/* 操作列表 */
	AccountStats []*AccountStat `json:"account_stats>account_stat"`

	/* account_stats列表的长度 */
	Count int64 `json:"count"`
}

/* 商城虚拟服务子订单数据结构 */
type ServiceOrder struct {
	/* 卖家昵称 */
	BuyerNick string `json:"buyer_nick"`

	/* 服务所属的交易订单号。如果服务为一年包换，则item_oid这笔订单享受改服务的保护 */
	ItemOid int64 `json:"item_oid"`

	/* 购买数量，取值范围为大于0的整数 */
	Num int64 `json:"num"`

	/* 虚拟服务子订单订单号 */
	Oid int64 `json:"oid"`

	/* 子订单实付金额。精确到2位小数，单位:元。如:200.07，表示:200元7分。 */
	Payment string `json:"payment"`

	/* 服务图片地址 */
	PicPath string `json:"pic_path"`

	/* 服务价格，精确到小数点后两位：单位:元 */
	Price string `json:"price"`

	/* 最近退款的id */
	RefundId int64 `json:"refund_id"`

	/* 卖家昵称 */
	SellerNick string `json:"seller_nick"`

	/* 服务详情的URL地址 */
	ServiceDetailUrl string `json:"service_detail_url"`

	/* 服务数字id */
	ServiceId int64 `json:"service_id"`

	/* 商品名称 */
	Title string `json:"title"`

	/* 服务子订单总费用 */
	TotalFee string `json:"total_fee"`
}

/* 满就送卖家销售详情list */
type XiamiSellerlistInfo struct {
	/* 来源 */
	Comefrom string `json:"comefrom"`

	/* 礼包订单ID */
	GiftOrderId int64 `json:"gift_order_id"`

	/* 创建时间戳 */
	GmtCreate int64 `json:"gmt_create"`

	/* 领取时间戳 */
	GmtGet int64 `json:"gmt_get"`

	/* 后付款订单付款时间 */
	GmtPay int64 `json:"gmt_pay"`

	/* 数字ID */
	Id int64 `json:"id"`

	/* 是否已领取 */
	IsGet int64 `json:"is_get"`

	/* 是否付款 */
	IsPay int64 `json:"is_pay"`

	/* 订单ID */
	OriginalOrderId int64 `json:"original_order_id"`

	/* 礼包名称 */
	Packname string `json:"packname"`

	/* 礼包价格 */
	Pay int64 `json:"pay"`

	/* 关联ID */
	RelationId int64 `json:"relation_id"`

	/* 卖家ID */
	SellerId int64 `json:"seller_id"`

	/* 店铺ID */
	ShopId int64 `json:"shop_id"`

	/* 店铺名称 */
	ShopName string `json:"shop_name"`

	/* 店铺URL */
	ShopUrl string `json:"shop_url"`

	/* 买家ID */
	TaobaoUid int64 `json:"taobao_uid"`

	/* 礼包类型 */
	Type int64 `json:"type"`

	/* 领取的虾米ID */
	UserId int64 `json:"user_id"`
}

/* 国内机票搜索航段信息 */
type AtNSearchSegmentVO struct {
	/* 活动优惠金额,单位分。 */
	ActivityBonus float64 `json:"activity_bonus,string"`

	/* 活动编号 */
	ActivityId int64 `json:"activity_id"`

	/* 到达城市三字码 */
	ArrCity string `json:"arr_city"`

	/* 是否自动出票。 */
	AutoBook bool `json:"auto_book"`

	/* 基准舱位（FCY）价格，单位分 */
	BasicCabinPrice float64 `json:"basic_cabin_price,string"`

	/* 舱位代码 */
	Cabin string `json:"cabin"`

	/* 舱位等级。0-头等舱；1-商务舱；2-经济舱 */
	CabinClass int64 `json:"cabin_class"`

	/* 舱位座位数，123456789AQSCL等。 */
	CabinNum string `json:"cabin_num"`

	/* 出发城市三字码 */
	DepCity string `json:"dep_city"`

	/* 运价类型。0-公布运价；1-折扣运价；2-B2B/卖家接口政策；3-航司外部产品 */
	FareType int64 `json:"fare_type"`

	/* 产品打标，2的N次方标记。 */
	Flag int64 `json:"flag"`

	/* 航班号 */
	FlightNo string `json:"flight_no"`

	/* 发票提供类型。1-提供（等额行程单）；2-不提供；5-提供（等额行程单+发票）；6-提供（等额发票） */
	InvoiceType int64 `json:"invoice_type"`

	/* 销售价格，单位分。 */
	Price float64 `json:"price,string"`

	/* 航段标识。00-去程第一段；01-去程第二段；10-回程第一段；11-回程第二段。 */
	SegmentNumber string `json:"segment_number"`

	/* 库存类型，0-共有库存；1-私有库存；2-可申请库存 */
	StockType int64 `json:"stock_type"`

	/* 产品票面价，单位分 */
	TicketPrice float64 `json:"ticket_price,string"`
}

/* 国内机票搜索商品定义 */
type AtNSearchItemVO struct {
	/* 活动优惠金额 */
	ActivityBonus float64 `json:"activity_bonus,string"`

	/* 代理人编号 */
	AgentId int64 `json:"agent_id"`

	/* JSON串，保存商品扩展信息，相关Key:site(描述是否是极速出票)，I_A_K_P_T_L_U（PC淘客搜索URL），I_A_K_H_T_L_U（H5淘客搜索URL），I_A_K_P_T_D_U（PC淘客下单页URL），I_A_K_H_T_D_U（H5淘客下单页URL）,I_A_K_T_G_Q_01（去程退改签），I_A_K_T_G_Q_10（回程退改签） */
	Attributes string `json:"attributes"`

	/* 基准舱位价格，单位分，往返是来回程各段的基准价格之和。 */
	BasicCabinPrice float64 `json:"basic_cabin_price,string"`

	/* 是否强制保险 */
	ForceInsure bool `json:"force_insure"`

	/* 获取保险分润后的价格，不包含活动。不支持分润时返回0 */
	InsurePrice float64 `json:"insure_price,string"`

	/* 是否是旗舰店商品。 */
	IsQijian bool `json:"is_qijian"`

	/* 商品结果类型，0普通单程，1组合往返；2打包往返；3往返直减 */
	ItemType int64 `json:"item_type"`

	/* 销售价格，单位分 */
	Price float64 `json:"price,string"`

	/* 商品航段数据信息 */
	Segments []*AtNSearchSegmentVO `json:"segments>at_n_search_segment_v_o"`

	/* 是否支持保险分润 */
	SupportInsurePromotion bool `json:"support_insure_promotion"`

	/* 产品票面价，单位分。往返是来回程各段票面价之和 */
	TicketPrice float64 `json:"ticket_price,string"`

	/* 航程类型，0单程，1往返 */
	TripType int64 `json:"trip_type"`
}

/* 国内机票搜索结果 */
type AtNSearchResult struct {
	/* json串，描述活动信息。type：1普通直减、2后返、3多人同行 */
	ActivityMapJson string `json:"activity_map_json"`

	/* json格式字符串：描述代理商的基本信息结构；注意：仅在指定航班号查询的时候有输出。得分项可能有三个Key（不一定全部输出）: normalProdcutScore,specialProductScore,speedIssueProductScore，分别表示普通产品得分，特殊产品（申请票）得分，极速出票产品得分。
	supplyType: 1 ：航空公司代理商， 2： 普通机票代理商 */
	AgentInfoMap string `json:"agent_info_map"`

	/* JSON串，描述航空公司二字码与中文名称的关系 */
	AirlineInfoMap string `json:"airline_info_map"`

	/* JSON串，描述机场三字码和中文名称的对应关系 */
	AirportInfoMap string `json:"airport_info_map"`

	/* JSON串，描述舱位信息，key：航司+舱位代码，如“CA-Y” */
	CabinInfoMap string `json:"cabin_info_map"`

	/* json格式字符串：描述出发/到达城市基本信息 */
	CityInfoMap string `json:"city_info_map"`

	/* JSON串，表示航班具体信息,key为出发+达到+航班号，如："BJSSHAMU5162"。示例值：{“BJSSHAMU5102":{"depTime":1403178600000,"flightType":"333","depAirportCode":"PEK","fees":5000,"depTerm":"T2","flight":"MU5102","stops":0,"airlineCode":"MU","meals":1,"arrTerm":"T2","arrTime":1403178600000,"carrier":"","arrAirportCode":"SHA","taxes":14000}} */
	FlightInfoMap string `json:"flight_info_map"`

	/* json格式字符串：描述当前搜索结果中航班机型信息， small表示小型机；middle表示中型机；large表示大型机 */
	FlightTypeInfoMap string `json:"flight_type_info_map"`

	/* 保险分润扣钱规则说明（单位元）。{"insurePrice":20,//保险总价格
	"insureAdultPrice":15,//保险成人分润价格
	"insureChildPrice":0,//保险儿童分润价格
	"insure9cPrice":20//春秋航空保险分润金额
	} */
	InsurePromotionInfoMapJson string `json:"insure_promotion_info_map_json"`

	/* 机票商品列表 */
	Items []*AtNSearchItemVO `json:"items>at_n_search_item_v_o"`
}

/* E客服账号操作记录 */
type AccountStat struct {
	/* 登录状态。0：离线；1：在线 */
	LoginStatus int64 `json:"login_status"`

	/* 服务状态。0：挂起；1：服务 */
	OnserviceStatus int64 `json:"onservice_status"`

	/* 操作时间。格式：YYYY-mm-dd HH:MM:SS */
	Time string `json:"time"`
}

/* 商品的库存信息和批次信息 */
type WlbItemBatchInventory struct {
	/* 批次库存查询结果 */
	ItemBatch []*WlbItemBatch `json:"item_batch>wlb_item_batch"`

	/* 商品ID */
	ItemId int64 `json:"item_id"`

	/* 商品库存查询结果 */
	ItemInventorys []*WlbItemInventory `json:"item_inventorys>wlb_item_inventory"`

	/* 商品在所有仓库的可销库存总数 */
	TotalQuantity int64 `json:"total_quantity"`
}

/* 物流宝商品库存 */
type WlbItemInventory struct {
	/* 商品id */
	ItemId int64 `json:"item_id"`

	/* 锁定库存数量 */
	LockQuantity int64 `json:"lock_quantity"`

	/* 库存数量 */
	Quantity int64 `json:"quantity"`

	/* 仓库编码 */
	StoreCode string `json:"store_code"`

	/* SELLALBE 可销售库存
	DEFECTIVE 残次
	JISHUN 机损
	XIANGSHUN 箱损
	FREEZE 冻结库存
	ONROAD 在途库存 */
	Type string `json:"type"`
}

/* 营销工具的范围类！ */
type Range struct {
	/* 营销范围参与者id。即MarketingRangeDO中的participateId。 */
	ParticipateId int64 `json:"participate_id"`

	/* 营销范围参与者类型。MarketingRangeDO中的participateType。(1:商品;2:店铺;3:seller;4:sku;5:category;6:shopCategory) */
	ParticipateType int64 `json:"participate_type"`
}

/* 商品信息 */
type SpItem struct {
	/* 下架时间（格式：yyyy-MM-dd HH:mm:ss） */
	DelistTime string `json:"delist_time"`

	/* 商品优惠价格, 如果为空则无优惠.精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	FinalPrice string `json:"final_price"`

	/* 商品ID */
	ItemId string `json:"item_id"`

	/* 商品图片 */
	ItemImgs string `json:"item_imgs"`

	/* 商品的URL */
	ItemUrl string `json:"item_url"`

	/* 上架时间（格式：yyyy-MM-dd HH:mm:ss） */
	ListTime string `json:"list_time"`

	/* 卖家昵称 */
	Nick string `json:"nick"`

	/* 图片地址 */
	PicUrl string `json:"pic_url"`

	/* 商品价格，格式：5.00；单位：元；精确到：分 */
	Price string `json:"price"`

	/* 卖家数字ID */
	SellerId string `json:"seller_id"`

	/* 店铺的链接URL */
	ShopUrl string `json:"shop_url"`

	/* 商品标题 */
	Title string `json:"title"`

	/* 是否是淘客商品（0-非淘客商品，5-淘客商品） */
	Tk string `json:"tk"`

	/* 标识商品类型，天猫商品是1，集市商品是0 */
	Tmall string `json:"tmall"`
}

/* 多条件批量获取的商品的信息 */
type SpItemInfo struct {
	/* 商品优惠价格, 如果为空则无优惠.精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	FinalPrice string `json:"final_price"`

	/* 商品ID */
	ItemId string `json:"item_id"`

	/* 商品的URL */
	ItemUrl string `json:"item_url"`

	/* 卖家昵称 */
	Nick string `json:"nick"`

	/* 图片地址 */
	PicUrl string `json:"pic_url"`

	/* 商品价格.精确到2位小数;单位:元。如:200.07，表示:200元7分 */
	Price string `json:"price"`

	/* 卖家数字ID */
	SellerId string `json:"seller_id"`

	/* 店铺的链接URL */
	ShopUrl string `json:"shop_url"`

	/* 商品标题 */
	Title string `json:"title"`

	/* 是否是淘客商品（0-非淘客商品，5-淘客商品） */
	Tk string `json:"tk"`

	/* 是否天猫： 1是，0否 */
	Tmall string `json:"tmall"`
}

/* 店铺信息的数据结构 */
type SpShop struct {
	/* 店铺好评率，即店铺累计好评数/店铺评价总数。 */
	Gerd string `json:"gerd"`

	/* 卖家信用等级,如果是天猫店铺则返回空值 */
	SellerCredit string `json:"seller_credit"`

	/* 店铺标题 */
	ShopTitle string `json:"shop_title"`

	/* 店铺的链接URL */
	ShopUrl string `json:"shop_url"`

	/* 是否天猫： 1是，0否 */
	Tmall string `json:"tmall"`
}

/* 类目数据分析对象 */
type INCategoryAnalysis struct {
	/* 地域占比
	格式：
	地域名称:占比;地域名称:占比; */
	CategoryAreaPer string `json:"category_area_per"`

	/* 竞价分布
	格式：
	宝贝数:价格;宝贝数:价格; */
	CategoryHpPrice string `json:"category_hp_price"`

	/* 类目id */
	CategoryId int64 `json:"category_id"`

	/* 类目名称 */
	CategoryName string `json:"category_name"`

	/* 来源占比
	格式：
	来源名称:比例;来源名称:比例; */
	CategorySourcePer string `json:"category_source_per"`
}

/* 词数据分析对象 */
type INWordAnalysis struct {
	/* 词名称 */
	Word string `json:"word"`

	/* 词地域占比
	格式：
	地域名称:比例;地域名称2:比例2; */
	WordAreaPer string `json:"word_area_per"`

	/* 词竞价分布
	格式：
	宝贝数:价格;宝贝数:价格; */
	WordHpPrice string `json:"word_hp_price"`

	/* 词来源占比
	格式：
	来源名称1:比例值;来源名称2:比例值; */
	WordSourcePer string `json:"word_source_per"`
}

/* 类目对象 */
type INCategoryTop struct {
	/* 子类目列表 */
	CategoryChildTopList []*INCategoryChildTop `json:"category_child_top_list>i_n_category_child_top"`

	/* 类目属性描述 */
	CategoryDesc string `json:"category_desc"`

	/* 类目对象id */
	CategoryId int64 `json:"category_id"`

	/* 类目名称 */
	CategoryName string `json:"category_name"`

	/* 类目属性对象列表 */
	CategoryPropertiesList []*INCategoryProperties `json:"category_properties_list>i_n_category_properties"`

	/* 用户输入的词 */
	CategroyWord string `json:"categroy_word"`
}

/* 词和类目数据对象 */
type INWordCategory struct {
	/* 词在类目下平均点击价格 */
	AvgPrice int64 `json:"avg_price"`

	/* 类目id */
	CategoryId int64 `json:"category_id"`

	/* 词在类目下点击量 */
	Click int64 `json:"click"`

	/* 词在类目下竞争宝贝数(包括未展现客户) */
	Competition int64 `json:"competition"`

	/* 点击率 */
	Ctr float64 `json:"ctr,string"`

	/* 时间点 */
	Date string `json:"date"`

	/* 词在类目下展现量 */
	Pv int64 `json:"pv"`

	/* 词名称 */
	Word string `json:"word"`
}

/* 词基础数据对象 */
type INWordBase struct {
	/* 词数据信息列表 */
	InRecordBaseList []*INRecordBase `json:"in_record_base_list>i_n_record_base"`

	/* 词名称 */
	Word string `json:"word"`
}

/* 发放成功的优惠券的信息，包括couponNumber和buyerNick */
type CouponResult struct {
	/* 张三 */
	BuyerNick string `json:"buyer_nick"`

	/* 已经发放优惠券的编号 */
	CouponNumber int64 `json:"coupon_number"`
}

/* 词基础数据对象 */
type INRecordBase struct {
	/* 词在类目下平均点击价格 */
	AvgPrice int64 `json:"avg_price"`

	/* 词在类目下点击量 */
	Click int64 `json:"click"`

	/* 词在类目下竞争宝贝数(包括未展现客户) */
	Competition int64 `json:"competition"`

	/* 点击率 */
	Ctr float64 `json:"ctr,string"`

	/* 时间点 */
	Date string `json:"date"`

	/* 词在类目下展现量 */
	Pv int64 `json:"pv"`
}

/* 类目基础数据对象 */
type INCategoryBase struct {
	/* 类目ID */
	CategoryId int64 `json:"category_id"`

	/* 类目名称 */
	CategoryName string `json:"category_name"`

	/* 类目展现量 */
	CategoryPv int64 `json:"category_pv"`

	/* 类目数据信息列表 */
	InRecordBaseList []*INRecordBase `json:"in_record_base_list>i_n_record_base"`
}

/* 类目属性对象 */
type INCategoryProperties struct {
	/* 类目属性对象描述 */
	PropertiesDesc string `json:"properties_desc"`

	/* 类目属性对象ID */
	PropertiesId int64 `json:"properties_id"`

	/* 类目属性名称 */
	PropertiesName string `json:"properties_name"`
}

/* 商品规则 */
type DdTopAuctionRuleVO struct {
	/* 结束时间 */
	DayEnds int64 `json:"day_ends"`

	/* 每天的开始时间， 格式：10000*hh+100*mm+ss */
	DayStarts int64 `json:"day_starts"`

	/* 扩展属性 */
	Features string `json:"features"`

	/* 规则ID */
	Id int64 `json:"id"`

	/* 是否是到店 */
	IsDiandian bool `json:"is_diandian"`

	/* 是否是外卖 */
	IsTakeout bool `json:"is_takeout"`

	/* 规则名 */
	Name string `json:"name"`

	/* 规则结束时间 */
	RuleEnds string `json:"rule_ends"`

	/* 规则开始时间 */
	RuleStarts string `json:"rule_starts"`

	/* 排序 */
	Sort int64 `json:"sort"`

	/* 状态 */
	Status int64 `json:"status"`

	/* 商铺ID */
	StoreId string `json:"store_id"`

	/* 用户ID */
	UserId int64 `json:"user_id"`

	/* 周期轮询0,1,2,3通过逗号间隔 */
	Weeklys string `json:"weeklys"`
}

/* 权限信息 */
type Permission struct {
	/* 1 :允许授权  2：不允许授权 6：不允许授权但默认已有权限 */
	IsAuthorize int64 `json:"is_authorize"`

	/* 父权限code */
	ParentCode string `json:"parent_code"`

	/* 注册到权限中心的code值 */
	PermissionCode string `json:"permission_code"`

	/* 权限名称 */
	PermissionName string `json:"permission_name"`
}

/* 类目对象 */
type INCategoryChildTop struct {
	/* 类目属性描述 */
	CategoryDesc string `json:"category_desc"`

	/* 类目对象id */
	CategoryId int64 `json:"category_id"`

	/* 类目名称 */
	CategoryName string `json:"category_name"`

	/* 类目属性对象列表 */
	CategoryPropertiesList []*INCategoryProperties `json:"category_properties_list>i_n_category_properties"`
}

/* 登录分销用户信息 */
type LoginUser struct {
	/* 入驻时间 */
	CreateTime string `json:"create_time"`

	/* 会员NICK */
	Nick string `json:"nick"`

	/* 分销用户ID */
	UserId int64 `json:"user_id"`

	/* 分销用户类型(1:分销商，2:供应商，3:品牌商；2、3都表示有供货能力，只是身份不同) */
	UserType string `json:"user_type"`
}

/* 子账号基本信息 */
type SubUserInfo struct {
	/* 子账号姓名 */
	FullName string `json:"full_name"`

	/* 是否参与分流 1不参与 2参与 */
	IsOnline int64 `json:"is_online"`

	/* 子账号用户名 */
	Nick string `json:"nick"`

	/* 子账号所属的主账号的唯一标识 */
	SellerId int64 `json:"seller_id"`

	/* 主账号昵称 */
	SellerNick string `json:"seller_nick"`

	/* 子账号当前状态 1正常 -1删除  2冻结 */
	Status int64 `json:"status"`

	/* 子账号Id */
	SubId int64 `json:"sub_id"`
}

/* 送货地址对象 */
type UserThirdAddress struct {
	/* 送货地址 */
	Address string `json:"address"`

	/* 手机号 */
	Mobile string `json:"mobile"`

	/* 买家姓名 */
	Name string `json:"name"`

	/* 联系电话 */
	Phone string `json:"phone"`
}

/* 外卖订单对象 */
type TakeoutThirdOrder struct {
	/* 送餐地址 */
	Address string `json:"address"`

	/* 代送商列表 */
	AgentList []*DeliveryAgentVO `json:"agent_list>delivery_agent_v_o"`

	/* 支付宝流水号 */
	AlipayStreamId string `json:"alipay_stream_id"`

	/* 买家在该订单所在的店铺的历史订单数量 */
	BuyerHistoryOrderCount int64 `json:"buyer_history_order_count"`

	/* 买家的用户昵称 */
	BuyerNick string `json:"buyer_nick"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 配送费 */
	DeliveryPay float64 `json:"delivery_pay,string"`

	/* 距离单位为米 */
	Distance int64 `json:"distance"`

	/* 送达时间要求_结束 */
	EndDeliverytime string `json:"end_deliverytime"`

	/* 距离倒计时结束的秒数 */
	EndSeconds int64 `json:"end_seconds"`

	/* 用户下单方式(PC/APP) */
	From int64 `json:"from"`

	/* 下单餐品列表 */
	GoodsList []*OrderGoods `json:"goods_list>order_goods"`

	/* 订单号 */
	Id int64 `json:"id"`

	/* 订单修改时间 */
	ModifyTime string `json:"modify_time"`

	/* 用户下单时的备注信息 */
	Note string `json:"note"`

	/* 订单状态 */
	OrderStatus int64 `json:"order_status"`

	/* 订单状态文案 */
	OrderStatusInfo string `json:"order_status_info"`

	/* 0 支付宝订单 8 货到付款 */
	OrderType int64 `json:"order_type"`

	/* 买家支付宝账号 */
	PayAccount string `json:"pay_account"`

	/* 付款时间 */
	PayTime string `json:"pay_time"`

	/* 就餐人数 */
	PeopleNumber int64 `json:"people_number"`

	/* 优惠列表 */
	PromotionList []*PromotionO `json:"promotion_list>promotion_o"`

	/* 送达时间要求_起始 */
	StartDeliverytime string `json:"start_deliverytime"`

	/* 店铺联系电话 */
	StoreContactphone string `json:"store_contactphone"`

	/* 分店ID */
	StoreId int64 `json:"store_id"`

	/* 店铺名称 */
	StoreName string `json:"store_name"`

	/* 订单超时的时间 */
	TimeOutStamp string `json:"time_out_stamp"`

	/* 总支付金额 */
	TotalPay float64 `json:"total_pay,string"`

	/* 用户地址对象 */
	UserAddress *UserThirdAddress `json:"user_address"`

	/* 买家ID */
	UserId int64 `json:"user_id"`

	/* X坐标 */
	X string `json:"x"`

	/* y坐标 */
	Y string `json:"y"`
}

/* 外卖订单查询结果 */
type ListResult struct {
	/* 订单列表 */
	ResultList []*TakeoutThirdOrder `json:"result_list>takeout_third_order"`

	/* 返回记录数 */
	ResultSize int64 `json:"result_size"`

	/* 0:失败 1:成功 */
	RetCode string `json:"ret_code"`

	/* 总记录数 */
	TotalCount int64 `json:"total_count"`
}

/* 物流订单商品 */
type OrderGoods struct {
	/* 商品的商家编码 */
	AuctionCode string `json:"auction_code"`

	/* 外卖商品购买数量 */
	Count int64 `json:"count"`

	/* 外卖商品外部ID */
	GoodsCode string `json:"goods_code"`

	/* 商品名称 */
	GoodsName string `json:"goods_name"`

	/* 商品图片id */
	GoodsPicId string `json:"goods_pic_id"`

	/* 物流订单商品数量 */
	GoodsQuantity int64 `json:"goods_quantity"`

	/* 商品ID */
	Id int64 `json:"id"`

	/* 是否是优惠商品 */
	IsPromotion bool `json:"is_promotion"`

	/* 商品价格 */
	ItemValue int64 `json:"item_value"`

	/* 外卖商品名称 */
	Name string `json:"name"`

	/* 商品的唯一编码 */
	OrderGoodsId int64 `json:"order_goods_id"`

	/* 优惠名称 */
	PromotionName string `json:"promotion_name"`

	/* 0 未优惠 1 已优惠 */
	PromotionStatus int64 `json:"promotion_status"`

	/* 优惠类型 */
	PromotionType int64 `json:"promotion_type"`

	/* 外卖商品实际购买价格 */
	RealPrice string `json:"real_price"`

	/* 销售属性 */
	SellProperty string `json:"sell_property"`

	/* 用户id */
	UserId int64 `json:"user_id"`
}

/* 宝贝自定义问题类型 */
type ItemKnowledgeType struct {
	/* 主键ID */
	Id int64 `json:"id"`

	/* 类型描述 */
	TypeDesc string `json:"type_desc"`

	/* 问题类型 */
	TypeKey string `json:"type_key"`

	/* 类型名称 */
	TypeName string `json:"type_name"`
}

/* 表示会员关系的基本信息字段，用于会员列表的基本查询 */
type BasicMember struct {
	/* 最后一次交易的订单号.
	注:该字段从2014.4.23之后不再返回. */
	BizOrderId int64 `json:"biz_order_id"`

	/* 买家会员ID */
	BuyerId int64 `json:"buyer_id"`

	/* 会员昵称 */
	BuyerNick string `json:"buyer_nick"`

	/* 交易关闭金额 */
	CloseTradeAmount float64 `json:"close_trade_amount,string"`

	/* 交易关闭的笔数 */
	CloseTradeCount int64 `json:"close_trade_count"`

	/* 会员等级，0：店铺客户，1：普通会员，2：高级会员，3：VIP会员， 4：至尊VIP会员 */
	Grade int64 `json:"grade"`

	/* 分组的id集合字符串 */
	GroupIds string `json:"group_ids"`

	/* 购买的宝贝件数 */
	ItemNum int64 `json:"item_num"`

	/* 最后交易的日期 */
	LastTradeTime string `json:"last_trade_time"`

	/* 关系来源，1交易成功，2未交易成功 ,3 卖家主动吸纳 */
	RelationSource int64 `json:"relation_source"`

	/* 显示会员的状态，normal正常，blacklist黑名单 */
	Status string `json:"status"`

	/* 交易的金额 */
	TradeAmount float64 `json:"trade_amount,string"`

	/* 交易成功的次数 */
	TradeCount int64 `json:"trade_count"`
}

/* 宝贝自定义解决方案VO */
type ItemKnowledgeSolutionVO struct {
	/* 主键ID */
	Id int64 `json:"id"`

	/* 宝贝ID */
	ItemId int64 `json:"item_id"`

	/* 自定义的问题 */
	Question string `json:"question"`

	/* 解决方案 */
	Solution string `json:"solution"`

	/* 发送状态 1半自动 2全自动 */
	SolutionLevel int64 `json:"solution_level"`

	/* stf 旺旺富文本格式的解决方案 */
	SolutionStf string `json:"solution_stf"`

	/* 关联 athena_item_knowledge_type 表的 type_key字段 */
	TypeKey string `json:"type_key"`

	/* 主账号 */
	UserNick string `json:"user_nick"`
}

/* 卖家设置的等级优惠信息 */
type GradePromotion struct {
	/* 买家会员级别  0:店铺客户  1：普通会员 2：高级会员 3：VIP会员 4：至尊VIP */
	CurGrade string `json:"cur_grade"`

	/* 店铺客户、普通会员 、高级会员、VIP会员、至尊VIP */
	CurGradeName string `json:"cur_grade_name"`

	/* 会员级别折扣率没有小数，990代表9.9折 */
	Discount int64 `json:"discount"`

	/* 普通会员、高级会员、VIP会员、至尊VIP。空的时候代表后续等级未启用或没有下一等级 */
	NextGrade string `json:"next_grade"`

	/* 该等级对应的下一等级1:普通会员  2：高级会员 3：VIP会员 4：至尊VIP 0：后续等级都未启用或没有下一等级 */
	NextGradeName string `json:"next_grade_name"`

	/* 升级到下一个级别的需要的交易额，单位：分 */
	NextUpgradeAmount int64 `json:"next_upgrade_amount"`

	/* 升级到下一个级别的需要的交易量 */
	NextUpgradeCount int64 `json:"next_upgrade_count"`
}

/* 会员信息对象 */
type CrmMember struct {
	/* 平均客单价. */
	AvgPrice float64 `json:"avg_price,string"`

	/* 会员买家id */
	BuyerId int64 `json:"buyer_id"`

	/* 买家昵称 */
	BuyerNick string `json:"buyer_nick"`

	/* 城市.
	请注意:从2014.4.23之后,省市将采用地区标准码,请通过物流API taobao.areas.get接口获取,参考:http://api.taobao.com/apidoc/api.htm?spm=0.0.0.0.nOOF9g&path=cid:7-apiId:59.API对于老的省市代码兼容会逐步下线. */
	City string `json:"city"`

	/* 交易关闭的金额 */
	CloseTradeAmount float64 `json:"close_trade_amount,string"`

	/* 交易关闭的的笔数 */
	CloseTradeCount int64 `json:"close_trade_count"`

	/* 会员等级，0:店铺客户，1：普通会员，2：高级会员，3：VIP会员， 4：至尊VIP会员 */
	Grade int64 `json:"grade"`

	/* 会员拥有的所有分组 */
	GroupIds string `json:"group_ids"`

	/* 交易关闭的宝贝件数 */
	ItemCloseCount int64 `json:"item_close_count"`

	/* 购买的宝贝件数 */
	ItemNum int64 `json:"item_num"`

	/* 最后交易时间 */
	LastTradeTime string `json:"last_trade_time"`

	/* 北京=1,天津=2,河北省=3,山西省=4,内蒙古自治区=5,辽宁省=6,吉林省=7,黑龙江省=8,上海=9,江苏省=10,浙江省=11,安徽省=12,福建省=13,江西省=14,山东省=15,河南省=16,湖北省=17,湖南省=18, 广东省=19,广西壮族自治区=20,海南省=21,重庆=22,四川省=23,贵州省=24,云南省=25,西藏自治区26,陕西省=27,甘肃省=28,青海省=29,宁夏回族自治区=30,新疆维吾尔自治区=31,台湾省=32,香港特别行政区=33,澳门特别行政区=34,海外=35.
	注:请注意:从2014.4.23之后,省市将采用地区标准码,请通过物流API taobao.areas.get接口获取,参考:http://api.taobao.com/apidoc/api.htm?spm=0.0.0.0.nOOF9g&path=cid:7-apiId:59.API对于老的省市代码兼容会逐步下线. */
	Province int64 `json:"province"`

	/* 关系来源，1交易成功，2未成交，3卖家主动吸纳 */
	RelationSource int64 `json:"relation_source"`

	/* 显示会员的状态，normal正常，blacklist黑名单 */
	Status string `json:"status"`

	/* 交易成功的金额 */
	TradeAmount float64 `json:"trade_amount,string"`

	/* 交易成功笔数 */
	TradeCount int64 `json:"trade_count"`
}

/* 描述分组的数据结构 */
type Group struct {
	/* 分组的创建时间 */
	GroupCreate string `json:"group_create"`

	/* 分组的id */
	GroupId int64 `json:"group_id"`

	/* 分组的修改时间 */
	GroupModify string `json:"group_modify"`

	/* 分组的名称 */
	GroupName string `json:"group_name"`

	/* 分组所拥有的会员数量,如果返回值为-1，表示当前服务忙或数据在初始化。 */
	MemberCount int64 `json:"member_count"`

	/* 分组的状态，1表示正常 */
	Status string `json:"status"`
}

/* 关键词预估 */
type Rankingforecast struct {
	/* 词ID */
	KeywordId int64 `json:"keyword_id"`

	/* 主人昵称 */
	Nick string `json:"nick"`

	/* 返回prices对应的排名 */
	Prices []int64 `json:"prices"`

	/* 词名称 */
	Word string `json:"word"`
}

/* 外卖优惠物件 */
type PromotionO struct {
	/* 优惠金额（免运费、限时打折时为空）,单位：元 */
	DiscountFee float64 `json:"discount_fee,string"`

	/* 赠品的宝贝id */
	GiftItemId int64 `json:"gift_item_id"`

	/* 满就送商品时，所送商品的名称 */
	GiftItemName string `json:"gift_item_name"`

	/* 满就送礼物的礼物数量 */
	GiftItemNum int64 `json:"gift_item_num"`

	/* 赠送商品的类型 */
	GiftItemType int64 `json:"gift_item_type"`

	/* 赠品的skuid */
	GiftSkuId int64 `json:"gift_sku_id"`

	/* 就是因为这个商品ID而产生的优惠 */
	ItemId int64 `json:"item_id"`

	/* 交易的主订单或子订单号 */
	OrderId int64 `json:"order_id"`

	/* 优惠活动的描述 */
	PromotionDesc string `json:"promotion_desc"`

	/* 优惠id，(由营销工具id、优惠活动id和优惠详情id组成，结构为：营销工具id-优惠活动id_优惠详情id，如mjs-123024_211143） */
	PromotionId string `json:"promotion_id"`

	/* 优惠信息的名称 */
	PromotionName string `json:"promotion_name"`

	/* ORDER_DISCOUNT(1, "订单优惠"),
	   ITEM_DISCOUNT(2, "菜品优惠"),
	   ALIPAY_DISCOUNT(3, "支付宝优惠"),
	   ITEM_LARGESS(4, "满就送菜"),
	   GIFT_LARGESS(5, "满就送礼物"); */
	PromotionType int64 `json:"promotion_type"`

	/* item_id的sku_id */
	SkuId int64 `json:"sku_id"`
}

/* 授权关系 */
type WlbAuthorization struct {
	/* 授权结束时间 */
	AuthorizeEndTime string `json:"authorize_end_time"`

	/* 授权ID */
	AuthorizeId int64 `json:"authorize_id"`

	/* 授权开始时间 */
	AuthorizeStartTime string `json:"authorize_start_time"`

	/* 代销人用户ID */
	ConsignUserId int64 `json:"consign_user_id"`

	/* 授权商品ID */
	ItemId int64 `json:"item_id"`

	/* 授权名称 */
	Name string `json:"name"`

	/* 货主用户ID */
	OwnerUserId int64 `json:"owner_user_id"`

	/* 授权数量 */
	Quantity int64 `json:"quantity"`

	/* 授权编码 */
	RuleCode string `json:"rule_code"`

	/* 状态：
	VALID -- 1 有效
	INVALIDATION -- 2 失效 */
	Status string `json:"status"`
}

/* 通道消息 */
type WlbMessage struct {
	/* 创建时间 */
	GmtCreate string `json:"gmt_create"`

	/* 消息通道ID */
	Id int64 `json:"id"`

	/* 通知消息编码： STOCK_IN_NOT_CONSISTENT---入库单不一致 CANCEL_ORDER_SUCCESS---取消订单成功 CANCEL_ORDER_FAILURE---取消订单失败 INVENTORY_CHECK---盘点   INVENTORY_CHECK---盘点消息  ORDER_REJECT--wms拒单  ORDER_CONFIRMED--订单处理成功 WMS_FAILED--wms处理失败 */
	MsgCode string `json:"msg_code"`

	/* 通知内容：msg_code为STOCK_IN_NOT_CONSISTENT时,msg_content为:orderCode:code;orderItemId:111;itemId:123;planQuantity:10;relQuantity:6;
	msg_code为CANCEL_ORDER_SUCCESS及其它时,msg_content为：orderCode:code;
	msg_code为CANCEL_ORDER_SUCCESS及其它时,msg_content为：orderCode:code; msg_code为INVENTORY_CHECK时，msg_content为orderCode:code; */
	MsgContent string `json:"msg_content"`

	/* 消息描述 */
	MsgDescription string `json:"msg_description"`

	/* 消息状态： 不需要确认：NO_NEED_CONFIRM 已确认：CONFIRMED 待确认：TO_BE_CONFIRM */
	Status string `json:"status"`

	/* 用户ID */
	UserId int64 `json:"user_id"`
}

/* 物流宝代销关系 */
type WlbConsignMent struct {
	/* 代销关系id */
	Id int64 `json:"id"`

	/* 代销商用户前台宝贝id */
	ItemId int64 `json:"item_id"`

	/* 代销数量 */
	Number int64 `json:"number"`

	/* 供应商商品id */
	TgtItemId int64 `json:"tgt_item_id"`

	/* 供应商用户id */
	TgtUserId int64 `json:"tgt_user_id"`

	/* 代销商用户id */
	UserId int64 `json:"user_id"`
}

/* 物流宝补货统计对象 */
type WlbReplenish struct {
	/* 根据历史统计值计算出来的预期值
	WarnByLast3Days=1; ByLast3Days=3;
	ByLast10Days=10;
	ByLast30Days=30;
	ByLast90Days=90
	WarnByLast3Days为按照过去3天的发出的件数来统计的达到安全库存的天数；其它4项分别为按照过去3、10、30、90天发出的商品件数，现有库存可以维持的天数 */
	EstimateValue string `json:"estimate_value"`

	/* 订单历史统计值
	Last3DaysTotal=3; Last10DaysTotal=10;
	Last30DaysTotal=30; Last90DaysTotal=90
	分别为过去3、10、30、90天发出的商品件数 */
	HistoryValue string `json:"history_value"`

	/* 商品id */
	ItemId int64 `json:"item_id"`

	/* 补货周期（单位：天） */
	RetrievalCount int64 `json:"retrieval_count"`

	/* 可销售库存数 */
	SellCount int64 `json:"sell_count"`

	/* 仓库编码 */
	StoreCode string `json:"store_code"`

	/* 在途库存数 */
	TransportCount int64 `json:"transport_count"`

	/* 用户id */
	UserId int64 `json:"user_id"`

	/* 安全库存 */
	WarnCount int64 `json:"warn_count"`
}

/* 物流宝订单流转信息对象 */
type WlbProcessStatus struct {
	/* 状态内容 */
	Content string `json:"content"`

	/* 操作时间 */
	OperateTime string `json:"operate_time"`

	/* 操作人 */
	Operater string `json:"operater"`

	/* 物流宝订单编码 */
	OrderCode string `json:"order_code"`

	/* 备注 */
	Remark string `json:"remark"`

	/* 订单操作状态：WMS_ACCEPT;WMS_PRINT;WMS_PICK;WMS_CHECK;WMS_PACKAGE;WMS_CONSIGN;WMS_CANCEL;WMS_UNKNOWN;WMS_CONFIRMED
	TMS_ACCEPT;TMS_STATION_IN;TMS_STATION_OUT;TMS_SIGN;TMS_REJECT;TMS_CANCEL;TMS_UNKNOW;SYS_UNKNOWN */
	StatusCode string `json:"status_code"`

	/* 仓库编码 */
	StoreCode string `json:"store_code"`

	/* 仓库合作公司编码 */
	StoreTpCode string `json:"store_tp_code"`

	/* tms合作公司订单编码 */
	TmsOrderCode string `json:"tms_order_code"`

	/* tms合作公司编码 */
	TmsTpCode string `json:"tms_tp_code"`
}

/* 淘点点店铺信息 */
type DianDianShop struct {
	/* 店铺地址 */
	Address string `json:"address"`

	/* 别名 */
	Byname string `json:"byname"`

	/* 城市 */
	City string `json:"city"`

	/* 配送费 */
	DeliveryAmount string `json:"delivery_amount"`

	/* 配送范围坐标 */
	DeliveryRange string `json:"delivery_range"`

	/* 营业时间（配送时间） */
	DeliveryTime string `json:"delivery_time"`

	/* 菜品列表的h5页面 */
	DetailItemUrl string `json:"detail_item_url"`

	/* 区域 */
	District string `json:"district"`

	/* 是否减免，无：0，减：1 */
	Jian string `json:"jian"`

	/* 维度 */
	Lat string `json:"lat"`

	/* 店铺logo */
	LogoUrl string `json:"logo_url"`

	/* 经度 */
	Lon string `json:"lon"`

	/* 起送金额 */
	MinimumAmount string `json:"minimum_amount"`

	/* 多级配送属性 */
	MultiAreaRange string `json:"multi_area_range"`

	/* 店铺名称 */
	Name string `json:"name"`

	/* 0:歇业，1:营业 */
	Status string `json:"status"`

	/* 店铺id */
	StoreId string `json:"store_id"`

	/* 店铺子名称 */
	Subname string `json:"subname"`

	/* 电话 */
	Tel string `json:"tel"`
}

/* 物流宝订单商品 */
type WlbOrderItem struct {
	/* 批次号备注 */
	BatchRemark string `json:"batch_remark"`

	/* 物流宝订单确认状态：
	NO_NEED_CONFIRM--不需要确认
	WAIT_CONFIRM--待确认
	CONFIRMED--已确认 */
	ConfirmStatus string `json:"confirm_status"`

	/* 外部实体id */
	ExtEntityId string `json:"ext_entity_id"`

	/* 外部实体类型 */
	ExtEntityType string `json:"ext_entity_type"`

	/* 第一位标示是否为赠品 */
	Flag int64 `json:"flag"`

	/* 订单商品id */
	Id int64 `json:"id"`

	/* INVENTORY_TYPE_SELL 可销库存
	INVENTORY_TYPE_IMPERFECTIONS 残次库存
	INVENTORY_TYPE_FREEZE 冻结库存
	INVENTORY_TYPE_ON_PASSAGE 在途库存
	INVENTORY_TYPE_ENGINE_DAMAGE 机损
	INVENTORY_TYPE_BOX_DAMAGE 箱损 */
	InventoryType string `json:"inventory_type"`

	/* 订单商品编码 */
	ItemCode string `json:"item_code"`

	/* 物流宝订单商品的物流宝商品id */
	ItemId int64 `json:"item_id"`

	/* 订单商品名称 */
	ItemName string `json:"item_name"`

	/* 商品价格 */
	ItemPrice int64 `json:"item_price"`

	/* 物流宝订单编码 */
	OrderCode string `json:"order_code"`

	/* 物流宝订单id */
	OrderId int64 `json:"order_id"`

	/* 子交易号 */
	OrderSub2code string `json:"order_sub_2code"`

	/* 订单号 */
	OrderSubCode string `json:"order_sub_code"`

	/* (1)其它: OTHER (2)淘宝交易: TAOBAO (3)调拨: ALLOCATION (4)盘点:CHECK (5)销售采购:PRUCHASE(6)其它交易：OTHER_TRADE */
	OrderSubType string `json:"order_sub_type"`

	/* 订单商品图片url */
	PictureUrl string `json:"picture_url"`

	/* 计划数量 */
	PlanQuantity int64 `json:"plan_quantity"`

	/* 货主id */
	ProviderTpId int64 `json:"provider_tp_id"`

	/* 货主nick */
	ProviderTpNick string `json:"provider_tp_nick"`

	/* 商品发布版本号 */
	PublishVersion int64 `json:"publish_version"`

	/* 实际数量 */
	RealQuantity int64 `json:"real_quantity"`

	/* 订单商品备注 */
	Remark string `json:"remark"`

	/* 订单商品用户id */
	UserId int64 `json:"user_id"`

	/* 订单商品用户昵称 */
	UserNick string `json:"user_nick"`
}

/* 系统自动生成 */
type QrcodeDO struct {
	/* 二维码所属渠道ID */
	ChannelId int64 `json:"channel_id"`

	/* 二维码对应的渠道名 */
	ChannelName string `json:"channel_name"`

	/* 二维码的矢量图下载地址，只有设置入参need_eps为true且style不为官方模板时，才返回值 */
	EpsUrl string `json:"eps_url"`

	/* 二维码id */
	QrcodeId int64 `json:"qrcode_id"`

	/* 二维码图片链接 */
	QrcodeUrl string `json:"qrcode_url"`

	/* 二维码的短地址，每一个原始地址都会生成一个短地址 */
	ShortUrl string `json:"short_url"`

	/* 二维码扫码后访问的目的地址 */
	Url string `json:"url"`
}

/* 物流宝订单对象 */
type WlbOrder struct {
	/* 买家nick */
	BuyerNick string `json:"buyer_nick"`

	/* 订单取消状态：
	1-取消中；
	2-取消失败；
	3-取消完成 */
	CancelOrderStatus int64 `json:"cancel_order_status"`

	/* 确认状态：
	(1)不需要确认：NO_NEED_CONFIRM
	(2)等待确认：WAIT_CONFIRM
	(3)已确认:CONFIRMED */
	ConfirmStatus string `json:"confirm_status"`

	/* 计划送达结束时间 */
	ExpectEndTime string `json:"expect_end_time"`

	/* 计划送达开始时间 */
	ExpectStartTime string `json:"expect_start_time"`

	/* 发票信息 */
	InvoiceInfo string `json:"invoice_info"`

	/* 物流宝订单中的商品种类数量 */
	ItemKindsCount int64 `json:"item_kinds_count"`

	/* 出库或者入库，IN表示入库，OUT表示出库 */
	OperateType string `json:"operate_type"`

	/* 订单编码 */
	OrderCode string `json:"order_code"`

	/* 第1位:COD,2:限时配送,3:预售,4:需要发票,5:已投诉,第6位:合单,第7位:拆单 第8位：EXCHANGE-换货， 第9位:VISIT-上门 ， 第10位: MODIFYTRANSPORT-是否可改配送方式，第11位：是否物流代理确认发货 */
	OrderFlag int64 `json:"order_flag"`

	/* 订单来源:
	产生物流订单的原因，比如:

	订单来源:1:TAOBAO;2:EXT;3:ERP;4:WMS */
	OrderSource string `json:"order_source"`

	/* 对应创建物流宝订单top接口中的的out_biz_code字段，主要是用来去重用 */
	OrderSourceCode string `json:"order_source_code"`

	/* 物流状态，
	订单已创建：0
	订单已取消: -1
	订单关闭:-3
	下发中: 10
	已下发: 11
	接收方拒签 :-100
	已发货:100
	签收成功:200 */
	OrderStatus string `json:"order_status"`

	/* 卖家取消,仓库取消标识 */
	OrderStatusReason string `json:"order_status_reason"`

	/* (1)其它:    OTHER
	(2)淘宝交易: TAOBAO
	(3)301:调拨: ALLOCATION
	(4)401:盘点:CHECK
	(5)501:销售采购:PRUCHASE */
	OrderSubType string `json:"order_sub_type"`

	/* 1:正常订单: NARMAL
	2:退货订单: RETURN
	3:换货订单: CHANGE */
	OrderType string `json:"order_type"`

	/* 原订单编码 */
	PrevOrderCode string `json:"prev_order_code"`

	/* 实际入库的种类数量 */
	RealKindsCount int64 `json:"real_kinds_count"`

	/* 应收金额 */
	ReceivableAmount int64 `json:"receivable_amount"`

	/* 收件人具体地址 */
	ReceiverAddress string `json:"receiver_address"`

	/* 区或者县 */
	ReceiverArea string `json:"receiver_area"`

	/* 收件人城市 */
	ReceiverCity string `json:"receiver_city"`

	/* 接收人电子邮箱 */
	ReceiverMail string `json:"receiver_mail"`

	/* 接收人手机号码 */
	ReceiverMobile string `json:"receiver_mobile"`

	/* 接收人姓名 */
	ReceiverName string `json:"receiver_name"`

	/* 接收人固定电话 */
	ReceiverPhone string `json:"receiver_phone"`

	/* 收件人省份 */
	ReceiverProvince string `json:"receiver_province"`

	/* 接收人旺旺 */
	ReceiverWangwang string `json:"receiver_wangwang"`

	/* 收件人邮编 */
	ReceiverZipCode string `json:"receiver_zip_code"`

	/* 订单备注 */
	Remark string `json:"remark"`

	/* 发货日期:
	(1)1 为工作日
	(2)2 为节假日 */
	ScheduleDay string `json:"schedule_day"`

	/* 配送结束时间通常是HH:MM格式 */
	ScheduleEnd string `json:"schedule_end"`

	/* 发货速度  ，
	101-当日达，
	102-次晨达，
	103-次日达 */
	ScheduleSpeed int64 `json:"schedule_speed"`

	/* 配送开始时间通常是HH:MM格式 */
	ScheduleStart string `json:"schedule_start"`

	/* 发件人地址 */
	SenderAddress string `json:"sender_address"`

	/* 发件人所在区 */
	SenderArea string `json:"sender_area"`

	/* 发件人城市 */
	SenderCity string `json:"sender_city"`

	/* 发件人电子邮箱 */
	SenderEmail string `json:"sender_email"`

	/* 发件人移动电话 */
	SenderMobile string `json:"sender_mobile"`

	/* 发件人姓名 */
	SenderName string `json:"sender_name"`

	/* 发件人联系电话 */
	SenderPhone string `json:"sender_phone"`

	/* 发件人所在省份 */
	SenderProvince string `json:"sender_province"`

	/* 发件人邮编 */
	SenderZipCode string `json:"sender_zip_code"`

	/* cod服务费 */
	ServiceFee int64 `json:"service_fee"`

	/* 物流运输方式：
	MAIL-平邮
	EXPRESS-快递
	EMS-EMS
	OTHER-其他 */
	ShippingType string `json:"shipping_type"`

	/* 仓库编码 */
	StoreCode string `json:"store_code"`

	/* 发货物流公司编码，STO,YTO,EMS等 */
	TmsTpCode string `json:"tms_tp_code"`

	/* 订单总价 */
	TotalAmount int64 `json:"total_amount"`

	/* 卖家ID */
	UserId int64 `json:"user_id"`

	/* 卖家NICK */
	UserNick string `json:"user_nick"`
}

/* 卖家定购的服务 */
type WlbSellerSubscription struct {
	/* 定购有效结束日期 */
	EndDate string `json:"end_date"`

	/* 创建时间 */
	GmtCreate string `json:"gmt_create"`

	/* 修改时间 */
	GmtModified string `json:"gmt_modified"`

	/* 定购ID */
	Id int64 `json:"id"`

	/* 判断该仓库是否是实体仓，还是虚拟仓，null是实体仓，10:代表虚拟仓 */
	IsOwnService int64 `json:"is_own_service"`

	/* 父定购ID
	可通过该字段来得之服务上下级关系。
	例定购了仓储服务，下又有TMS服务。
	该字段保存仓储服务ID。 */
	ParentId int64 `json:"parent_id"`

	/* 服务商ID */
	ProviderUserId int64 `json:"provider_user_id"`

	/* 备注 */
	Remark string `json:"remark"`

	/* 自有仓的别名，当当前订购记录为自有仓时才会有值 */
	ServiceAlias string `json:"service_alias"`

	/* 服务编码 */
	ServiceCode string `json:"service_code"`

	/* 服务ID */
	ServiceId int64 `json:"service_id"`

	/* 服务名 */
	ServiceName string `json:"service_name"`

	/* 服务类型，
	STORE 1-仓储、
	TMS 2-TMS、
	PACKAGE 3-包装服务
	SUPPLIER 4-供货
	INSTALL 5-安装
	COMPLEX_SERVICE 100-综合服务 */
	ServiceType string `json:"service_type"`

	/* 定购有效开始日期 */
	StartDate string `json:"start_date"`

	/* 状态
	AUDITING 1-待审核
	CANCEL 2-撤销
	CHECKED 3-审核通过
	FAILED 4-审核未通过
	SYNCHRONIZING 5-同步中 */
	Status string `json:"status"`

	/* 定购用户ID */
	SubscriberUserId int64 `json:"subscriber_user_id"`

	/* 定购用户NICK */
	SubscriberUserNick string `json:"subscriber_user_nick"`

	/* 联系人地址信息 */
	WlbPartnerAddress *WlbPartnerAddress `json:"wlb_partner_address"`

	/* 联系人联系详情 */
	WlbPartnerContact *WlbPartnerContact `json:"wlb_partner_contact"`
}

/* 酒店区域 */
type HotelDivision struct {
	/* 城市编码 */
	Code int64 `json:"code"`

	/* 层级，1：国家，2：州省，3：城市，4：区县 */
	Level int64 `json:"level"`

	/* 城市名称 */
	Name string `json:"name"`

	/* 父行政区编码，例如杭州市(330100)的父行政区为浙江省(330000)。注意：如果parent_code的值为0，表示该行政区为最高级别的行政区，没有父行政区。 */
	ParentCode int64 `json:"parent_code"`

	/* 0：国内；1：国外 */
	Region int64 `json:"region"`

	/* code是否可用来搜索酒店，true：code可直接用于搜索酒店，false: code不可直接用于搜索酒店。 */
	Searchable bool `json:"searchable"`

	/* 类型，0：普通，1：景点,cityTag，如千岛湖 */
	Type int64 `json:"type"`
}

/* 库存变更记录 */
type WlbItemInventoryLog struct {
	/* 批次号 */
	BatchCode string `json:"batch_code"`

	/* 创建日期 */
	GmtCreate string `json:"gmt_create"`

	/* 库存变更ID */
	Id int64 `json:"id"`

	/* VENDIBLE  1-可销售;
	FREEZE  201-冻结库存;
	ONWAY  301-在途库存;
	DEFECT  101-残存品;
	ENGINE_DAMAGE 102-机损;
	BOX_DAMAGE 103-箱损 */
	InventType string `json:"invent_type"`

	/* 商品ID */
	ItemId int64 `json:"item_id"`

	/* 库存操作作类型
	CHU_KU 1-出库
	RU_KU 2-入库
	FREEZE 3-冻结
	THAW 4-解冻
	CHECK_FREEZE 5-冻结确认
	CHANGE_KU 6-库存类型变更 */
	OpType string `json:"op_type"`

	/* 库存操作者ID */
	OpUserId int64 `json:"op_user_id"`

	/* 订单号 */
	OrderCode string `json:"order_code"`

	/* 订单商品ID */
	OrderItemId int64 `json:"order_item_id"`

	/* 处理数量变化值 */
	Quantity int64 `json:"quantity"`

	/* 备注 */
	Remark string `json:"remark"`

	/* 结果值 */
	ResultQuantity int64 `json:"result_quantity"`

	/* 仓库编码 */
	StoreCode string `json:"store_code"`

	/* 用户ID */
	UserId int64 `json:"user_id"`
}

/* 外部商品实体 */
type OutEntityItem struct {
	/* entity_type对应的实体类型的id：
	当entity_type为IC_ITEM时，entity_id为ic的商品id */
	EntityId string `json:"entity_id"`

	/* 外部实体类型：
	IC_ITEM--ic商品
	IC_SKU--ic销售单元 */
	EntityType string `json:"entity_type"`
}

/* 点点店铺分页结构 */
type DianDianShopPage struct {
	/* 淘点点店铺数据列表 */
	DianDianShopList []*DianDianShop `json:"dian_dian_shop_list>dian_dian_shop"`

	/* 下一页页码 */
	NextPage int64 `json:"next_page"`

	/* 页码 */
	PageNo int64 `json:"page_no"`

	/* 每页大小 */
	PageSize int64 `json:"page_size"`

	/* 上一页页码 */
	PrevPage int64 `json:"prev_page"`

	/* 总条数 */
	TotalCount int64 `json:"total_count"`

	/* 总页数 */
	TotalPage int64 `json:"total_page"`
}

/* 订单调度规则 */
type WlbOrderScheduleRule struct {
	/* 收货地址范围: 6位数的地址ID，用逗号分隔。如“140400,230500”。同一个卖家的订单调度规则中，设置的收货地址范围不能重复。 */
	AreaIds string `json:"area_ids"`

	/* 备用配送中心ID */
	BackupStoreId int64 `json:"backup_store_id"`

	/* 默认配送中心ID */
	DefaultStoreId int64 `json:"default_store_id"`

	/* 订单调度规则ID */
	Id int64 `json:"id"`

	/* 发货规则的额外规则设置： 允许组合，用逗号隔开.
	REMARK_STOP--有订单留言不自动下发;
	COD_STOP--货到付款订单不自动下发;
	CHECK_WAREHOUSE_DELIVER--检查仓库的配送范围 */
	Options string `json:"options"`

	/* 预售配送中心ID（预留，暂未使用） */
	PresellStoreId int64 `json:"presell_store_id"`

	/* wlb_base_rule表的ID */
	RuleId int64 `json:"rule_id"`

	/* 商家userId */
	UserId int64 `json:"user_id"`

	/* 商品userNick */
	UserNick string `json:"user_nick"`
}

/* 物流订单运单信息 */
type WlbTmsOrder struct {
	/* 运单号 */
	Code string `json:"code"`

	/* 物流公司编码 */
	CompanyCode string `json:"company_code"`

	/* 物流订单编号 */
	OrderCode string `json:"order_code"`

	/* 物流订单的所有者ID,货主 */
	UserId int64 `json:"user_id"`
}

/* 用户订购信息 */
type ArticleUserSubscribe struct {
	/* 订购关系到期时间 */
	Deadline string `json:"deadline"`

	/* 收费项目代码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得收费项目代码 */
	ItemCode string `json:"item_code"`
}

/* SPU发布模板，定义了产品发布需要那些关键属性，绑定属性。 */
type SpuTemplateDO struct {
	/* 产品绑定属性，内容为属性ID(PID)的列表,绑定属性肯定在类目上有，对应属性的类目特征，子属性请根据PID到类目上去取 */
	AffectProperties []int64 `json:"affect_properties"`

	/* 类目ID */
	CategoryId int64 `json:"category_id"`

	/* 品类ID，和类目ID类似 */
	CommodityId int64 `json:"commodity_id"`

	/* 过滤属性，内容有属性ID(PID)列表，很重要的属性，filter_properties包含的属性，必须填写 */
	FilterProperties []int64 `json:"filter_properties"`

	/* 产品关键属性，内容为属性ID(PID)的列表，注意关键属性可以在类目上不存在。不存在的PID，默认为输入，没有子属性。属性名称在prop_name_str中取 */
	KeyProperties []int64 `json:"key_properties"`

	/* 预留 */
	PropFeatures string `json:"prop_features"`

	/* 属性名称扁平化结构，只保证不在类目上的CP有值 */
	PropNameStr string `json:"prop_name_str"`

	/* 模板ID，发布产品，必须放到Product中 */
	TemplateId int64 `json:"template_id"`
}

/* 应用订单信息 */
type ArticleBizOrder struct {
	/* 应用收费代码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得该应用的收费代码 */
	ArticleCode string `json:"article_code"`

	/* 商品模型名称 */
	ArticleItemName string `json:"article_item_name"`

	/* 应用名称 */
	ArticleName string `json:"article_name"`

	/* 订单号 */
	BizOrderId int64 `json:"biz_order_id"`

	/* 订单类型，1=新订 2=续订 3=升级 4=后台赠送 5=后台自动续订 6=订单审核后生成订购关系（暂时用不到） */
	BizType int64 `json:"biz_type"`

	/* 订单创建时间（订购时间） */
	Create string `json:"create"`

	/* 原价（单位为分） */
	Fee string `json:"fee"`

	/* 收费项目代码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得收费项目代码 */
	ItemCode string `json:"item_code"`

	/* 收费项目名称 */
	ItemName string `json:"item_name"`

	/* 淘宝会员名 */
	Nick string `json:"nick"`

	/* 订购周期  1表示年 ，2表示月，3表示天。 */
	OrderCycle string `json:"order_cycle"`

	/* 订购周期结束时间 */
	OrderCycleEnd string `json:"order_cycle_end"`

	/* 订购周期开始时间 */
	OrderCycleStart string `json:"order_cycle_start"`

	/* 子订单号 */
	OrderId int64 `json:"order_id"`

	/* 优惠（单位为分） */
	PromFee string `json:"prom_fee"`

	/* 退款（单位为分；升级时，系统会将升级前老版本按照剩余订购天数退还剩余金额） */
	RefundFee string `json:"refund_fee"`

	/* 实付（单位为分） */
	TotalPayFee string `json:"total_pay_fee"`
}

/* 套装配置 */
type SuiteConfDO struct {
	/* 如果有值，套装子规格形如：A*n,B*n,C*n....，n只能是inputs中的 */
	Inputs []int64 `json:"inputs"`

	/* 套装，子规格限制数，当前一级类目，最多允许选择多少个产品规格，为空表示无限制。套装子规格形如:A*n,B*n,C*n....,max_size就是C的最大个数 */
	MaxSize int64 `json:"max_size"`

	/* 套装，子规格数量总和限制，当前一级类目，所以子产品规格的数量不能超过这个值，为空表示无限制,套装子规格形如：A*n,B*n,C*n....,max_total_number就是所有n和的最大限制 */
	MaxTotalNumber int64 `json:"max_total_number"`

	/* 一级类目ID，标识在该一级在类目下能布套装 */
	RootCatId int64 `json:"root_cat_id"`

	/* 套装类目ID，当前一级类目，如果发布跨叶子类目的的套装，默认放到那个类目。如果没有值表示root_cat_id类目下发布的套装产品，不支持跨类目 */
	SuiteCatId int64 `json:"suite_cat_id"`
}

/* 分销商等级 */
type FenxiaoGrade struct {
	/* 记录创建时间 */
	Created string `json:"created"`

	/* 主键 */
	GradeId int64 `json:"grade_id"`

	/* 记录最后修改时间 */
	Modified string `json:"modified"`

	/* 分销商等级名称 */
	Name string `json:"name"`
}

/* 来往用户基本信息 */
type LaiwangUser struct {
	/* 头像URL */
	Avatar string `json:"avatar"`

	/* 头像URL（大幅） */
	AvatarBig string `json:"avatar_big"`

	/* 用户所在城市 */
	City string `json:"city"`

	/* 用户性别 */
	Gender string `json:"gender"`

	/* 用户昵称 */
	Name string `json:"name"`

	/* openid */
	Openid string `json:"openid"`
}

/* 卖家积分明细记录 */
type SellerPointRecordModule struct {
	/* 业务扩展信息 ，用于ISV描述积分记录的具体业务信息 */
	BusinessInfo string `json:"business_info"`

	/* 买家NICK */
	BuyerNick string `json:"buyer_nick"`

	/* 积分数量 */
	PointNum int64 `json:"point_num"`

	/* 记录状态 1成功 0冻结 -1失败 */
	Status int64 `json:"status"`

	/* upp内部业务ID，由预扣或预发积分接口返回，ISV可以直接使用，或映射自己的业务ID。 */
	TransactionId int64 `json:"transaction_id"`

	/* 业务发生时间 */
	TransactionTime string `json:"transaction_time"`

	/* 3：ISV送积分
	4：ISV扣减积分 */
	Type int64 `json:"type"`
}

/* 联系人联系详情 */
type WlbPartnerContact struct {
	/* 仓库联系人姓名 */
	Name string `json:"name"`

	/* 联系电话 */
	Phone string `json:"phone"`
}

/* 联系人地址信息 */
type WlbPartnerAddress struct {
	/* 详细地址 */
	Address string `json:"address"`

	/* 区 */
	Borough string `json:"borough"`

	/* 市 */
	City string `json:"city"`

	/* 省 */
	Province string `json:"province"`

	/* 邮编 */
	Zip string `json:"zip"`
}

/* 搭配套餐类。 */
type Meal struct {
	/* 搭配套餐商品列表。item_id为商品的id;item_show_name为商品显示名。因最多允许5个商品进行搭配，所以查询最多有5个，以json格式传出。 */
	ItemList string `json:"item_list"`

	/* 套餐id。 */
	MealId int64 `json:"meal_id"`

	/* 搭配套餐描述！ */
	MealMemo string `json:"meal_memo"`

	/* 搭配套餐名称。 */
	MealName string `json:"meal_name"`

	/* 套餐一口价(单位是：分) */
	MealPrice float64 `json:"meal_price,string"`

	/* 普通运费模板id。若这个字段为空或0时，运费是卖家负责;若这个字段不为空，说明运费模板存在，运费是买家负责。 */
	PostageId int64 `json:"postage_id"`

	/* 套餐状态。有效：VALID;失效：INVALID(有效套餐为可使用的套餐,无效套餐为套餐中有商品下架或库存为0时)。 */
	Status string `json:"status"`
}

/* 应用订购信息 */
type ArticleSub struct {
	/* 应用收费代码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得该应用的收费代码 */
	ArticleCode string `json:"article_code"`

	/* 应用名称 */
	ArticleName string `json:"article_name"`

	/* 是否自动续费 */
	Autosub bool `json:"autosub"`

	/* 订购关系到期时间 */
	Deadline string `json:"deadline"`

	/* 是否到期提醒 */
	ExpireNotice bool `json:"expire_notice"`

	/* 收费项目代码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得收费项目代码 */
	ItemCode string `json:"item_code"`

	/* 收费项目名称 */
	ItemName string `json:"item_name"`

	/* 淘宝会员名 */
	Nick string `json:"nick"`

	/* 状态，1=有效 2=过期 */
	Status int64 `json:"status"`
}

/* Room（酒店商品）结构。各字段详细说明可参考接口定义，如：商品发布接口。 */
type Room struct {
	/* 面积 */
	Area string `json:"area"`

	/* 宽带服务 */
	Bbn string `json:"bbn"`

	/* 床型 */
	BedType string `json:"bed_type"`

	/* 早餐 */
	Breakfast string `json:"breakfast"`

	/* 创建时间 */
	Created string `json:"created"`

	/* 订金 */
	Deposit int64 `json:"deposit"`

	/* 商品描述 */
	Desc string `json:"desc"`

	/* 手续费 */
	Fee int64 `json:"fee"`

	/* 酒店商品id */
	Gid int64 `json:"gid"`

	/* 购买须知 */
	Guide string `json:"guide"`

	/* 酒店id */
	Hid int64 `json:"hid"`

	/* 酒店信息 */
	Hotel *Hotel `json:"hotel"`

	/* 淘宝商品id */
	Iid int64 `json:"iid"`

	/* 修改时间 */
	Modified string `json:"modified"`

	/* 为到店支付卖家特殊使用，代表多种支付类型的房态 */
	MultiRoomQuotas string `json:"multi_room_quotas"`

	/* 支付类型 */
	PaymentType string `json:"payment_type"`

	/* 酒店商品图片Url。多个url用逗号隔开 */
	PicUrl string `json:"pic_url"`

	/* 价格类型 */
	PriceType string `json:"price_type"`

	/* 房型id */
	Rid int64 `json:"rid"`

	/* 房态信息。JSON格式串 */
	RoomQuotas string `json:"room_quotas"`

	/* 房型信息 */
	RoomType *RoomType `json:"room_type"`

	/* 设施服务。JSON格式串 */
	Service string `json:"service"`

	/* 床宽 */
	Size string `json:"size"`

	/* 状态。1：上架。2：下架。3：删除 */
	Status int64 `json:"status"`

	/* 楼层 */
	Storey string `json:"storey"`

	/* 酒店商品名称 */
	Title string `json:"title"`
}

/* HotelOrder（酒店订单）结构。各字段详细说明可参考接口定义。注意：trade_status，refund_status，logistics_status不是严格准确的，请以交易API，物流API等得到的订单状态、物流状态为准确依据。 */
type HotelOrder struct {
	/* 支付宝交易号，22位字符 */
	AlipayTradeNo string `json:"alipay_trade_no"`

	/* 买家最早到达时间 */
	ArriveEarly string `json:"arrive_early"`

	/* 买家最晚到达时间 */
	ArriveLate string `json:"arrive_late"`

	/* 买家淘宝账号 */
	BuyerNick string `json:"buyer_nick"`

	/* 入住时间 */
	CheckinDate string `json:"checkin_date"`

	/* 离店时间 */
	CheckoutDate string `json:"checkout_date"`

	/* 备注，存储关于礼品的信息，比如杜蕾斯 */
	Comment string `json:"comment"`

	/* 联系人姓名 */
	ContactName string `json:"contact_name"`

	/* 联系人电话 */
	ContactPhone string `json:"contact_phone"`

	/* 备用联系人电话 */
	ContactPhoneBak string `json:"contact_phone_bak"`

	/* 订单创建时间 */
	Created string `json:"created"`

	/* 结束时间 */
	EndTime string `json:"end_time"`

	/* 商品id */
	Gid int64 `json:"gid"`

	/* 入住人信息 */
	Guests []*OrderGuest `json:"guests>order_guest"`

	/* 酒店id */
	Hid int64 `json:"hid"`

	/* 物流状态。STATUS_UNCONSIGNED：未发货 -> 等待卖家发货。STATUS_CONSIGNED：已发货 -> 等待买家确认收货。STATUS_DELIVERED：已收货 -> 交易成功。STATUS_REVERT：已经退货 -> 交易失败。STATUS_DELIVERED_PART：部分发货 -> 交易成功。STATUS_NO_OUT_ORDER：还未创建物流订单 */
	LogisticsStatus string `json:"logistics_status"`

	/* 买家留言 */
	Message string `json:"message"`

	/* 订单修改时间 */
	Modified string `json:"modified"`

	/* 天数 */
	Nights int64 `json:"nights"`

	/* 酒店订单id */
	Oid int64 `json:"oid"`

	/* 合作方订单号,最长250个字符 */
	OutOid string `json:"out_oid"`

	/* 付款时间 */
	PayTime string `json:"pay_time"`

	/* 实付款（分） */
	Payment int64 `json:"payment"`

	/* 下单时每间夜的价格（分） */
	Prices []int64 `json:"prices"`

	/* 退款状态。STATUS_WAIT_SELLER_AGREE：买家已经申请退款，等待卖家同意。STATUS_WAIT_BUYER_RETURN_GOODS：卖家已经同意退款，等待买家退货。STATUS_WAIT_SELLER_CONFIRM_GOODS：买家已经退货，等待卖家确认收货。STATUS_CLOSED：退款关闭。STATUS_SUCCESS：退款成功->买家取消预定。STATUS_SELLER_REFUSE_BUYER：卖家拒绝退款。STATUS_WAIT_OUT_PAY_SYSTEM_REFUND：等待外部交易系统退款。STATUS_NO_REFUND：没有申请退款。STATUS_ACTIVE_REFUND：有活动退款。STATUS_END_REFUND：退款结束。 */
	RefundStatus string `json:"refund_status"`

	/* 房型id */
	Rid int64 `json:"rid"`

	/* 房间数 */
	RoomNumber int64 `json:"room_number"`

	/* 卖家淘宝账号 */
	SellerNick string `json:"seller_nick"`

	/* 淘宝订单id */
	Tid int64 `json:"tid"`

	/* 总房价（分） */
	TotalRoomPrice int64 `json:"total_room_price"`

	/* 交易状态。WAIT_BUYER_PAY：未冻结/未付款 -> 等待买家付款。WAIT_SELLER_SEND_GOODS：已冻结/已付款 -> 等待卖家发货 -> 等待卖家确认。TRADE_CLOSED：已退款 -> 交易关闭。TRADE_FINISHED：已转交易 -> 交易成功。TRADE_NO_CREATE_PAY：没有创建支付宝交易。TRADE_CLOSED_BY_TAOBAO：交易被淘宝关闭->卖家关闭交易或卖家核实未入住。TRADE_SUCCESS：预定成功（等待卖家核实入住） */
	TradeStatus string `json:"trade_status"`

	/* 支付类型。A：全额支付。B：灵活支付－手续费。C：灵活支付－订金。D：灵活支付－手续费/间夜 */
	Type string `json:"type"`
}

/* 发货后返回给仓库的名称中转仓信息 */
type ShipFresh struct {
	/* 物流公司名称 */
	DeliveryName string `json:"delivery_name"`

	/* 返回的地址信息 */
	SendAddr string `json:"send_addr"`

	/* 物流公司服务电话 */
	Tel string `json:"tel"`

	/* 旺旺ID */
	WangwangId string `json:"wangwang_id"`
}

/* 商家的仓库信息详情 */
type StoreInfo struct {
	/* 详细地址 */
	Address string `json:"address"`

	/* XXX果园 */
	Name string `json:"name"`

	/* 仓库真实名字 */
	RealName string `json:"real_name"`

	/* 仓库服务代码 */
	ServiceCode string `json:"service_code"`
}

/* 物流宝外部订单 */
type WlbExtOrder struct {
	/* 买家id */
	BuyerId int64 `json:"buyer_id"`

	/* 买家nick */
	BuyerNick string `json:"buyer_nick"`

	/* 订单来源：
	TAOBAO
	PAIPAI */
	ExtOrderSource string `json:"ext_order_source"`

	/* 订单已创建：CREATE
	订单下发中：PROCESSING
	订单接受成功：ACCESSED
	订单关闭：CLOSED */
	ExtOrderStatus string `json:"ext_order_status"`

	/* 订单状态原因 */
	ExtOrderStatusReason string `json:"ext_order_status_reason"`

	/* 订单标识号 */
	Id int64 `json:"id"`

	/* SALE:销售订单
	SALE_RETURN:销售退货单 */
	OperateType string `json:"operate_type"`

	/* 取消前订单 */
	PrevId string `json:"prev_id"`

	/* 收件人地址 */
	ReceiverAddress string `json:"receiver_address"`

	/* 国家地区标准编码 */
	ReceiverCountryId string `json:"receiver_country_id"`

	/* 收件人email */
	ReceiverMail string `json:"receiver_mail"`

	/* 收件人手机 */
	ReceiverMobile string `json:"receiver_mobile"`

	/* 收件人姓名 */
	ReceiverName string `json:"receiver_name"`

	/* 收件人固话 */
	ReceiverPhone string `json:"receiver_phone"`

	/* 收件人旺旺 */
	ReceiverWangwang string `json:"receiver_wangwang"`

	/* 收件人邮编 */
	ReceiverZip string `json:"receiver_zip"`

	/* 订单备注 */
	Remark string `json:"remark"`

	/* 卖家id */
	SellerId int64 `json:"seller_id"`

	/* 卖家nick */
	SellerNick string `json:"seller_nick"`

	/* 发货人姓名 */
	SendName string `json:"send_name"`

	/* 物流运送方式 */
	ShippingType string `json:"shipping_type"`

	/* 快递公司编码 */
	TmsCode string `json:"tms_code"`

	/* 订单总价 */
	TotalPrice int64 `json:"total_price"`

	/* 发货仓库编码 */
	WmsCode string `json:"wms_code"`
}

/* 收\发货 地址 */
type WaybillAddress struct {
	/* 详细地址 */
	AddressDetail string `json:"address_detail"`

	/* -- */
	AddressFormat string `json:"address_format"`

	/* 三级地址 */
	Area string `json:"area"`

	/* 三级地址代码 */
	AreaCode int64 `json:"area_code"`

	/* 二级地址 */
	City string `json:"city"`

	/* 二级地址代码 */
	CityCode int64 `json:"city_code"`

	/* 末级地址 */
	DivisionId int64 `json:"division_id"`

	/* 一级地址 */
	Province string `json:"province"`

	/* 一级地址代码 */
	ProvinceCode int64 `json:"province_code"`

	/* 四级地址 */
	Town string `json:"town"`

	/* 四级地址代码 */
	TownCode int64 `json:"town_code"`

	/* waybill 地址记录ID(非地址库ID) */
	WaybillAddressId int64 `json:"waybill_address_id"`
}

/* 订单数据 */
type TradeOrderInfo struct {
	/* 是否阿里系订单 */
	AliOrder bool `json:"ali_order"`

	/* 收货人地址 */
	ConsigneeAddress *WaybillAddress `json:"consignee_address"`

	/* 收货人 */
	ConsigneeName string `json:"consignee_name"`

	/* 收货人联系方式 */
	ConsigneePhone string `json:"consignee_phone"`

	/* 商品名称 */
	ItemName string `json:"item_name"`

	/* 订单渠道 */
	OrderChannelsType string `json:"order_channels_type"`

	/* 大头笔 */
	ShortAddress string `json:"short_address"`

	/* 交易订单列表 */
	TradeOrderList []string `json:"trade_order_list"`

	/* 面单号 */
	WaybillCode string `json:"waybill_code"`
}

/* 申请面单返回数据 */
type WaybillApplyNewInfo struct {
	/* 预留字段 */
	Feature string `json:"feature"`

	/* -- */
	Result int64 `json:"result"`

	/* 根据收货地址返回大头笔信息 */
	ShortAddress string `json:"short_address"`

	/* 面单对应的订单列 */
	TradeOrderInfo *TradeOrderInfo `json:"trade_order_info"`

	/* 返回的面单号 */
	WaybillCode string `json:"waybill_code"`
}

/* 宝贝详情页面信息 */
type ItemTemplate struct {
	/* 用于区分宝贝模板属于内店和外店 */
	ShopType int64 `json:"shop_type"`

	/* 宝贝模板的id */
	TemplateId int64 `json:"template_id"`

	/* 宝贝详情模板的名称 */
	TemplateName string `json:"template_name"`
}

/* Hotel（酒店）结构。各字段详细说明可参考接口定义，如：酒店发布接口。 */
type Hotel struct {
	/* 酒店地址 */
	Address string `json:"address"`

	/* 某个卖家发布的酒店的别名(注：该字段将要废弃) */
	AliasName string `json:"alias_name"`

	/* 酒店审核被否决的原因 */
	AuditDenyReason string `json:"audit_deny_reason"`

	/* 城市编码 */
	City int64 `json:"city"`

	/* 城市中文名称 */
	CityStr string `json:"city_str"`

	/* 国家编码 */
	Country string `json:"country"`

	/* 国家中文名称 */
	CountryStr string `json:"country_str"`

	/* 创建时间 */
	Created string `json:"created"`

	/* 装修时间 */
	DecorateTime string `json:"decorate_time"`

	/* 酒店介绍 */
	Desc string `json:"desc"`

	/* 区域编码 */
	District int64 `json:"district"`

	/* 区域中文名称 */
	DistrictStr string `json:"district_str"`

	/* 酒店id */
	Hid int64 `json:"hid"`

	/* 酒店级别 */
	Level string `json:"level"`

	/* 修改时间 */
	Modified string `json:"modified"`

	/* 酒店名称 */
	Name string `json:"name"`

	/* 开业时间 */
	OpeningTime string `json:"opening_time"`

	/* 酒店定位 */
	Orientation string `json:"orientation"`

	/* 酒店图片url */
	PicUrl string `json:"pic_url"`

	/* 省份编码 */
	Province int64 `json:"province"`

	/* 省份中文名称 */
	ProvinceStr string `json:"province_str"`

	/* 房型列表 */
	RoomTypes []*RoomType `json:"room_types>room_type"`

	/* 房间数 */
	Rooms int64 `json:"rooms"`

	/* 交通距离与设施服务。JSON格式串。 */
	Service string `json:"service"`

	/* 状态。0：待审核，1：正常（审核通过），2：审核否决，3：停售 */
	Status int64 `json:"status"`

	/* 楼层数 */
	Storeys int64 `json:"storeys"`

	/* 酒店电话 */
	Tel string `json:"tel"`
}

/* 分销商品下载记录 */
type FenxiaoItemRecord struct {
	/* 下载时间 */
	Created string `json:"created"`

	/* 分销商ID */
	DistributorId int64 `json:"distributor_id"`

	/* 商品ID */
	ItemId int64 `json:"item_id"`

	/* 更新时间（系统时间，无业务意义） */
	Modified string `json:"modified"`

	/* 产品ID */
	ProductId int64 `json:"product_id"`

	/* 分销方式：AGENT（只做代销，默认值）、DEALER（只做经销） */
	TradeType string `json:"trade_type"`
}

/* 合作分销关系 */
type Cooperation struct {
	/* 供应商授权的支付方式：ALIPAY(支付宝)、OFFPREPAY(预付款)、OFFTRANSFER(转帐)、OFFSETTLEMENT(后期结算) */
	AuthPayway []string `json:"auth_payway"`

	/* 合作关系ID */
	CooperateId int64 `json:"cooperate_id"`

	/* 分销商ID */
	DistributorId int64 `json:"distributor_id"`

	/* 分销商nick */
	DistributorNick string `json:"distributor_nick"`

	/* 合作终止时间 */
	EndDate string `json:"end_date"`

	/* 等级ID */
	GradeId int64 `json:"grade_id"`

	/* 授权产品线 */
	ProductLine string `json:"product_line"`

	/* 授权产品线名称，和product_line中的值按序对应 */
	ProductLineName []string `json:"product_line_name"`

	/* 合作起始时间 */
	StartDate string `json:"start_date"`

	/* 合作状态： NORMAL(合作中)、 ENDING(终止中) 、END (终止) */
	Status string `json:"status"`

	/* 供应商ID */
	SupplierId int64 `json:"supplier_id"`

	/* 供应商NICK */
	SupplierNick string `json:"supplier_nick"`

	/* 分销方式： AGENT(代销) 、DEALER(经销) */
	TradeType string `json:"trade_type"`
}

/* 限时打折 */
type LimitDiscount struct {
	/* 限时打折结束时间。 */
	EndTime string `json:"end_time"`

	/* 该限时打折宝贝数量。 */
	ItemNum int64 `json:"item_num"`

	/* 限时打折ID。 */
	LimitDiscountId int64 `json:"limit_discount_id"`

	/* 限时打折名称。 */
	LimitDiscountName string `json:"limit_discount_name"`

	/* 限时打折开始时间。 */
	StartTime string `json:"start_time"`
}

/* RoomType（房型）结构。各字段详细说明可参考接口定义，如：房型发布接口。 */
type RoomType struct {
	/* 某卖家提供的房型别名(注：该字段将被废弃) */
	AliasName string `json:"alias_name"`

	/* 房型审核被否决的原因 */
	AuditDenyReason string `json:"audit_deny_reason"`

	/* 创建时间 */
	Created string `json:"created"`

	/* 酒店id */
	Hid int64 `json:"hid"`

	/* 修改时间 */
	Modified string `json:"modified"`

	/* 房型名称 */
	Name string `json:"name"`

	/* 房型id */
	Rid int64 `json:"rid"`

	/* 状态。0：待审核，1：正常（审核通过），2：审核否决，3：停售 */
	Status int64 `json:"status"`
}

/* 地址库返回数据信息 */
type AddressResult struct {
	/* 详细街道地址，不需要重复填写省/市/区 */
	Addr string `json:"addr"`

	/* 区域ID */
	AreaId int64 `json:"area_id"`

	/* 是否默认退货地址 */
	CancelDef bool `json:"cancel_def"`

	/* 市 */
	City string `json:"city"`

	/* 地址库ID */
	ContactId int64 `json:"contact_id"`

	/* 联系人姓名 */
	ContactName string `json:"contact_name"`

	/* 区、县 */
	Country string `json:"country"`

	/* 是否默认取货地址 */
	GetDef bool `json:"get_def"`

	/* 备注 */
	Memo string `json:"memo"`

	/* 手机号码，手机与电话必需有一个
	手机号码不能超过20位 */
	MobilePhone string `json:"mobile_phone"`

	/* 修改日期时间 */
	ModifyDate string `json:"modify_date"`

	/* 电话号码,手机与电话必需有一个 */
	Phone string `json:"phone"`

	/* 省 */
	Province string `json:"province"`

	/* 公司名称, */
	SellerCompany string `json:"seller_company"`

	/* 是否默认发货地址 */
	SendDef bool `json:"send_def"`

	/* 地区邮政编码 */
	ZipCode string `json:"zip_code"`
}

/* 酒店订单入住人结构。 */
type OrderGuest struct {
	/* 入住人姓名 */
	Name string `json:"name"`

	/* 酒店订单id */
	Oid int64 `json:"oid"`

	/* 入住人序号 */
	PersonPos int64 `json:"person_pos"`

	/* 房间序号 */
	RoomPos int64 `json:"room_pos"`

	/* 入住人电话 */
	Tel string `json:"tel"`
}

/* RoomImage（酒店图片）结构。各字段详细说明可参考接口定义，如：商品图片上传接口。 */
type RoomImage struct {
	/* 商品所有图片的url，用”,”隔开。即，当前该商品的所有图片地址。 */
	AllImages string `json:"all_images"`

	/* 酒店商品id */
	Gid int64 `json:"gid"`

	/* 图片url。当前接口操作的图片url。调用上传图片接口时，代表上传图片后得到的图片url。调用删除图片接口时，代表被删除掉的图片url。 */
	Image string `json:"image"`

	/* 图片位置，可选值：1,2,3,4,5。代表图片的位置，如：2，代表第二张图片。 */
	Position int64 `json:"position"`
}

/* 名值对 */
type NameValuePair struct {
	/* 名值对的编码 */
	Code string `json:"code"`

	/* 名值对的文本描述 */
	Name string `json:"name"`
}

/* 酒店搜索返回的酒店对象 */
type SearchHotelObject struct {
	/* 酒店地址 */
	Address string `json:"address"`

	/* 酒店距离搜索中心点的距离，单位：米。注意：在设置了搜索中心点的情况下，才会计算出有效的距离；如果没有设置搜索中心点，则distance的值置为-1。 */
	Distance int64 `json:"distance"`

	/* H5的detail页面的URL */
	H5DetailUrl string `json:"h5_detail_url"`

	/* 酒店detail页面的url */
	HotelDetailUrl string `json:"hotel_detail_url"`

	/* 纬度 */
	Lat string `json:"lat"`

	/* 星级/档次 */
	Level *NameValuePair `json:"level"`

	/* 纬度 */
	Lng string `json:"lng"`

	/* 酒店名称 */
	Name string `json:"name"`

	/* 图片url，多张图片使用","隔开 */
	PicUrls string `json:"pic_urls"`

	/* 酒店价格，注意：单位为分。如果price的值为-1，则表示此酒店下无可售的报价。 */
	Price int64 `json:"price"`

	/* 评论数 */
	RateNumber int64 `json:"rate_number"`

	/* 评分 */
	RateScore string `json:"rate_score"`

	/* 销量 */
	Sell int64 `json:"sell"`

	/* 服务设施 */
	Services []*NameValuePair `json:"services>name_value_pair"`

	/* 标准酒店ID */
	Shid int64 `json:"shid"`

	/* 电话，包括三种类型：
	1.固定电话，例如：0086-010-85322688
	2.移动电话，例如：13869696363
	3.400或800电话，例如：0086-4006123928 */
	Tel string `json:"tel"`
}

/* 限时打折详情 */
type LimitDiscountDetail struct {
	/* 限时打折结束时间。 */
	EndTime string `json:"end_time"`

	/* 该商品限时折扣 */
	ItemDiscount float64 `json:"item_discount,string"`

	/* 商品的id(数字类型) */
	ItemId int64 `json:"item_id"`

	/* 限时打折名称 */
	LimitDiscountName string `json:"limit_discount_name"`

	/* 每人限购数量，1、2、5、10000(不限)。 */
	LimitNum int64 `json:"limit_num"`

	/* 限时打折开始时间。 */
	StartTime string `json:"start_time"`
}

/* 聚划算商品组对象 */
type GroupData struct {
	/* 团结束时间 */
	GroupEndTime string `json:"group_end_time"`

	/* 组id，唯一标识一个聚划算的组 */
	GroupId int64 `json:"group_id"`

	/* 组的名称 */
	GroupName string `json:"group_name"`

	/* 团开始时间 */
	GroupStartTime string `json:"group_start_time"`

	/* 聚划算商品对象列表 */
	ItemList []*ItemData `json:"item_list>item_data"`

	/* 该组是否在聚划算平台显示 */
	JuView bool `json:"ju_view"`

	/* 商品组所对应的平台id，1001=聚划算 */
	PlatformId int64 `json:"platform_id"`
}

/* 公众账号关注者openid列表 */
type LaiwangUsers struct {
	/* 拉取的OPENID个数，最大值为10000 */
	Count int64 `json:"count"`

	/* OPENID列表数据 */
	Data string `json:"data"`

	/* 拉取列表的后一个用户的OPENID */
	NextOpenid string `json:"next_openid"`

	/* 关注该公众账号的总用户数 */
	Total int64 `json:"total"`
}

/* 聚划算应用，展示本地化服务类商品的分店地理信息的对象 */
type ShopPositionData struct {
	/* 店铺的地址 */
	Address string `json:"address"`

	/* 卖家店铺所在的城市 */
	City string `json:"city"`

	/* 淘宝商品的数字id，对应了商品线的一个商品对象标识 */
	ItemId int64 `json:"item_id"`

	/* 卖家店铺的手机联系号码 */
	Phone string `json:"phone"`

	/* 卖家的账户数字id */
	SellerId int64 `json:"seller_id"`

	/* 标识了一个唯一的地址位置对象，具有独立的坐标和交通信息 */
	ShopPositionId int64 `json:"shop_position_id"`

	/* 描述店铺的名称 */
	StoreName string `json:"store_name"`

	/* 店铺的一些交通提示信息 */
	Traffic string `json:"traffic"`

	/* 店铺所在的经度，放大100000倍 */
	X int64 `json:"x"`

	/* 店铺所在的纬度，放大100000倍 */
	Y int64 `json:"y"`
}

/* 聚划算商品对象 */
type ItemData struct {
	/* 商品的聚划算价格，单位分 */
	ActivityPrice int64 `json:"activity_price"`

	/* 商品对应的淘宝类目id */
	CategoryId int64 `json:"category_id"`

	/* 商品对应的聚划算二级类目 */
	ChildCategory int64 `json:"child_category"`

	/* 商品所在城市 */
	City string `json:"city"`

	/* 商品的当前库存 */
	CurrentStock int64 `json:"current_stock"`

	/* 商品对应的折扣 聚划算价/原价 */
	Discount string `json:"discount"`

	/* 是否存在占座（下单未支付的订单） */
	ExistHoldStock bool `json:"exist_hold_stock"`

	/* 商品对应的团id */
	GroupId int64 `json:"group_id"`

	/* 商品是否为锁定状态,锁定状态的商品才显示为可销售 */
	IsLock bool `json:"is_lock"`

	/* 商品对应的聚划算描述信息 */
	ItemDesc string `json:"item_desc"`

	/* 代表聚划算支持的6种消保该商品是否支持，1支持，0不支持
	第一位：如实描述
	第二位：七天退换
	第三位：假一陪三
	第四位：商城正品保障
	第五位：商城提供发票
	第六位：商城7天退换 */
	ItemGuarantee string `json:"item_guarantee"`

	/* 商品的数字id */
	ItemId int64 `json:"item_id"`

	/* 描述商品的状态，AVAIL_BUY=可以购买
	WAIT_FOR_START=即将开始
	EXIST_HOLDER=有占座
	NO_STOCK=卖光了
	OUT_OF_TIME=团购已结束 */
	ItemStatus string `json:"item_status"`

	/* 商品对应的URl */
	ItemUrl string `json:"item_url"`

	/* 商品的长名称 */
	LongName string `json:"long_name"`

	/* 商品活动结束时间点的毫秒值 */
	OnlineEndTime int64 `json:"online_end_time"`

	/* 商品上架开始时间点的毫秒值 */
	OnlineStartTime int64 `json:"online_start_time"`

	/* 商品的原价，单位分 */
	OriginalPrice int64 `json:"original_price"`

	/* 商品对应的聚划算一级类目 */
	ParentCategory int64 `json:"parent_category"`

	/* 商品是否包邮 */
	PayPostage bool `json:"pay_postage"`

	/* 商品对应的图片地址 */
	PicUrl string `json:"pic_url"`

	/* 商品对应的交易线原始图片地址 */
	PicUrlFromIc string `json:"pic_url_from_ic"`

	/* 聚划算图片宽图的地址 */
	PicWideUrl string `json:"pic_wide_url"`

	/* 商品对应的平台id，1001=聚划算 */
	PlatformId int64 `json:"platform_id"`

	/* 卖家对应的信用等级 */
	SellerCredit int64 `json:"seller_credit"`

	/* 商品对应的卖家账户id */
	SellerId int64 `json:"seller_id"`

	/* 商品对应的卖家账户nick */
	SellerNick string `json:"seller_nick"`

	/* 本地化服务对象的分店信息 */
	ShopPositionList []*ShopPositionData `json:"shop_position_list>shop_position_data"`

	/* 商品对应的店铺类型，集市，商城 */
	ShopType string `json:"shop_type"`

	/* 商品短名称 */
	ShortName string `json:"short_name"`

	/* 已参团的人数（付款） */
	SoldCount int64 `json:"sold_count"`
}

/* 客服未回复统计 */
type NonreplyStatById struct {
	/* 客服人员未回复的客户ID */
	NonReplyCustomId string `json:"non_reply_customId"`

	/* 客服未回复数 */
	NonReplyNum int64 `json:"non_reply_num"`

	/* 客服人员ID */
	ServiceStaffId string `json:"service_staff_id"`
}

/* 客服评价统计 */
type StaffEvalStatById struct {
	/* 客服评价 */
	Evaluations []*Evaluation `json:"evaluations>evaluation"`

	/* 客服人员ID */
	ServiceStaffId string `json:"service_staff_id"`
}

/* 创意修改记录，只记录最后一次修改 */
type CreativeRecord struct {
	/* 审核拒绝原因描述 */
	AuditDesc string `json:"audit_desc"`

	/* 审核状态： audit_wait-待审核；audit_pass-审核通过(上线)；audit_reject-审核拒绝；默认为audit_pass。 */
	AuditStatus string `json:"audit_status"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 关键词id */
	CreativeId int64 `json:"creative_id"`

	/* 创意图片地址，必须是推广组对应商品的图片之一 */
	ImgUrl string `json:"img_url"`

	/* 系统记录最后修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 创意被修改的时间 */
	ModifyTime string `json:"modify_time"`

	/* 主人昵称 */
	Nick string `json:"nick"`

	/* 修改前创意图片地址 */
	OldImgUrl string `json:"old_img_url"`

	/* 修改前创意标题 */
	OldTitle string `json:"old_title"`

	/* 创意标题，最多20个汉字 */
	Title string `json:"title"`
}

/* 需求订购信息 */
type SubscInfo struct {
	/* 订单id */
	Id int64 `json:"id"`

	/* 订单状态 */
	ProcessStatus int64 `json:"process_status"`

	/* 销售提成 */
	SaleBonus int64 `json:"sale_bonus"`

	/* 商家名称 */
	SellerName string `json:"seller_name"`

	/* 服务开结束时间 */
	ServiceEndTime string `json:"service_end_time"`

	/* 服务开始时间 */
	ServiceStartTime string `json:"service_start_time"`

	/* 服务商名称 */
	SpName string `json:"sp_name"`

	/* 子账号名称列表 */
	SubAccountList string `json:"sub_account_list"`

	/* 订单创建时间 */
	SubscCreatedTime string `json:"subsc_created_time"`

	/* 订单修改时间 */
	SubscModifiedTime string `json:"subsc_modified_time"`
}

/* 关键词 */
type Keyword struct {
	/* 推广组id */
	AdgroupId int64 `json:"adgroup_id"`

	/* 审核拒绝原因描述 */
	AuditDesc string `json:"audit_desc"`

	/* 审核状态：
	audit_wait-待审核；
	audit_pass-审核通过(上线)；
	audit_reject-审核拒绝；
	audit_offline-审核直接下线；
	默认为 audit_pass。 */
	AuditStatus string `json:"audit_status"`

	/* 推广计划id */
	CampaignId int64 `json:"campaign_id"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 是否使用推广组默认出价，true-是；false-否； */
	IsDefaultPrice bool `json:"is_default_price"`

	/* 是否是垃圾词，false-不是；true-是；垃圾词是近期无点击的词 */
	IsGarbage bool `json:"is_garbage"`

	/* 关键词id */
	KeywordId int64 `json:"keyword_id"`

	/* 匹配模式 */
	MatchScope string `json:"match_scope"`

	/* 关键词出价，单位为分，不能小于5 */
	MaxPrice int64 `json:"max_price"`

	/* 最后修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 主人昵称 */
	Nick string `json:"nick"`

	/* 词质量得分 */
	Qscore string `json:"qscore"`

	/* 关键词 */
	Word string `json:"word"`
}

/* 推广组类目出价 */
type ADGroupCatmatch struct {
	/* 推广组id */
	AdgroupId int64 `json:"adgroup_id"`

	/* 推广计划Id */
	CampaignId int64 `json:"campaign_id"`

	/* 类目出价Id */
	CatmatchId int64 `json:"catmatch_id"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 是否使用推广组默认出价，false-不使用默认出价  true-使用默认出价；默认true */
	IsDefaultPrice bool `json:"is_default_price"`

	/* 类目出价，单位为分，不能小于5 */
	MaxPrice int64 `json:"max_price"`

	/* 最后修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 推广组主人昵称 */
	Nick string `json:"nick"`

	/* 是否启用类目出价；offline-不启用；online-启用；默认启用 */
	OnlineStatus string `json:"online_status"`

	/* 类目出价质量得分 */
	Qscore string `json:"qscore"`
}

/* 创意 */
type Creative struct {
	/* 推广组id */
	AdgroupId int64 `json:"adgroup_id"`

	/* 审核拒绝原因描述 */
	AuditDesc string `json:"audit_desc"`

	/* 审核状态： audit_wait-待审核；audit_pass-审核通过(上线)；audit_reject-审核拒绝；默认为audit_pass。 */
	AuditStatus string `json:"audit_status"`

	/* 推广计划Id */
	CampaignId int64 `json:"campaign_id"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 创意id */
	CreativeId int64 `json:"creative_id"`

	/* 创意图片地址，必须是推广组对应商品的图片之一 */
	ImgUrl string `json:"img_url"`

	/* 最后修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 主人昵称 */
	Nick string `json:"nick"`

	/* 创意标题，最多20个汉字 */
	Title string `json:"title"`
}

/* Campaign投放频道 */
type ChannelOption struct {
	/* 频道id */
	ChannelId int64 `json:"channel_id"`

	/* 是否有非搜索流量，true：是；false：否； */
	IsNonsearch bool `json:"is_nonsearch"`

	/* 是否有搜索流量，true：是；false：否； */
	IsSearch bool `json:"is_search"`

	/* 频道名称 */
	Name string `json:"name"`

	/* 流量名称 */
	TrafficName string `json:"traffic_name"`

	/* 流量类型，taobao：淘宝站内；other：淘宝站外 */
	TrafficType string `json:"traffic_type"`
}

/* 直通车可推广的地域 */
type AreaOption struct {
	/* 地域id */
	AreaId int64 `json:"area_id"`

	/* 地域级别，目前自治区、省、直辖市是1，其他城市、地区是2 */
	Level int64 `json:"level"`

	/* 地域名称 */
	Name string `json:"name"`

	/* 父地域id，若该字段为0表示该行政区为顶层，例如像北京，国外等。 */
	ParentId int64 `json:"parent_id"`
}

/* 商家与CP的订购关系 */
type WaybillApplySubscriptionInfo struct {
	/* CP网点信息及对应的商家的发货信息 */
	BranchAccountCols []*WaybillBranchAccount `json:"branch_account_cols>waybill_branch_account"`

	/* 物流服务商ID */
	CpCode string `json:"cp_code"`

	/* CP类型 */
	CpType int64 `json:"cp_type"`

	/* 订购关系是否建立 */
	Result int64 `json:"result"`
}

/* CP下的网点信息 */
type WaybillBranchAccount struct {
	/* 已用单数 */
	AllocatedQuantity int64 `json:"allocated_quantity"`

	/* 网点ID */
	BranchCode string `json:"branch_code"`

	/* 物流服务商ID */
	CpCode string `json:"cp_code"`

	/* 可用单数 */
	Quantity int64 `json:"quantity"`

	/* 商家ID */
	SellerId int64 `json:"seller_id"`

	/* 当前网点下的发货地址 */
	ShippAddressCols []*WaybillAddress `json:"shipp_address_cols>waybill_address"`
}

/* 更新面单数据 */
type WaybillApplyUpdateInfo struct {
	/* -- */
	Desc string `json:"desc"`

	/* -- */
	Result int64 `json:"result"`

	/* -- */
	TradeOrderInfo *TradeOrderInfo `json:"trade_order_info"`

	/* -- */
	WaybillCode string `json:"waybill_code"`
}

/* 关键词排名推广商品信息 */
type RankedItem struct {
	/* 商品链接 */
	LinkUrl string `json:"link_url"`

	/* 最高出价 */
	MaxPrice float64 `json:"max_price,string"`

	/* 客户昵称 */
	Nick string `json:"nick"`

	/* 排名 */
	Order int64 `json:"order"`

	/* 原始质量评分 */
	RankScore int64 `json:"rank_score"`

	/* 创意标题 */
	Title string `json:"title"`
}

/* 推广组 */
type ADGroup struct {
	/* 推广组id */
	AdgroupId int64 `json:"adgroup_id"`

	/* 推广计划Id */
	CampaignId int64 `json:"campaign_id"`

	/* 商品类目id，从根类目到子类目，用空格分割 */
	CategoryIds string `json:"category_ids"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 默认出价，单位为分，不能小于5 */
	DefaultPrice int64 `json:"default_price"`

	/* 非搜索是否使用默认出价，false-不用；true-使用；默认为true; */
	IsNonsearchDefaultPrice bool `json:"is_nonsearch_default_price"`

	/* 最后修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 推广组主人昵称 */
	Nick string `json:"nick"`

	/* 非搜索出价，单位为分，不能小于5 */
	NonsearchMaxPrice int64 `json:"nonsearch_max_price"`

	/* 通投状态,1：开启；0：暂停；默认为1 */
	NonsearchStatus int64 `json:"nonsearch_status"`

	/* 商品数字id */
	NumIid int64 `json:"num_iid"`

	/* online-上线；audit_offline-审核下线；crm_offline-CRM下线；默认为online */
	OfflineType string `json:"offline_type"`

	/* 用户设置的上下线状态，offline-下线(暂停竞价)；online-上线；默认为online */
	OnlineStatus string `json:"online_status"`

	/* 审核下线原因 */
	Reason string `json:"reason"`
}

/* SubscInfoWrapper */
type SubscInfoWrapper struct {
	/* 需求订购信息 */
	SubscInfoList []*SubscInfo `json:"subsc_info_list>subsc_info"`

	/* 总量 */
	TotalCount int64 `json:"total_count"`
}

/* 库存详情对象。其中包括货主ID，仓库编码，库存，库存类型等属性 */
type WlbInventory struct {
	/* 商品ID */
	ItemId int64 `json:"item_id"`

	/* 冻结(锁定)数量，用来跟踪库存的中间状态，比如前台销售了1件商品，这时lock加1，当商品出库的时候lock再减回去 */
	LockQuantity int64 `json:"lock_quantity"`

	/* 库存数量(有效数量) */
	Quantity int64 `json:"quantity"`

	/* 仓库编码，关联到仓库类型服务的编码非托管库存(卖家自己管理的库存，物流宝不可见又称自有库存)的所在仓库编码: STORE_SYS_PRIVATE */
	StoreCode string `json:"store_code"`

	/* VENDIBLE--可销售库存
	FREEZE--冻结库存
	ONWAY--在途库存
	DEFECT--残次品库存 */
	Type string `json:"type"`

	/* 货主ID */
	UserId int64 `json:"user_id"`
}

/* 物流宝商品 */
type WlbItem struct {
	/* 品牌ID */
	BrandId int64 `json:"brand_id"`

	/* 颜色 */
	Color string `json:"color"`

	/* 创建人 */
	Creator string `json:"creator"`

	/* 标记，用逗号隔开的字符串。
	BIT_HAS_AUTHORIZE 第1位 是否有授权规则;
	BATCH  第2位 是否有批次规则；
	SYNCHRONIZATION 第3位 是否有同步规则。 */
	Flag string `json:"flag"`

	/* 创建日期 */
	GmtCreate string `json:"gmt_create"`

	/* 修改日期 */
	GmtModified string `json:"gmt_modified"`

	/* 货类 */
	GoodsCat string `json:"goods_cat"`

	/* 高 */
	Height int64 `json:"height"`

	/* 商品id */
	Id int64 `json:"id"`

	/* 是否危险品 */
	IsDangerous bool `json:"is_dangerous"`

	/* 是否易碎 */
	IsFriable bool `json:"is_friable"`

	/* 是不是sku商品
	值为true或false */
	IsSku bool `json:"is_sku"`

	/* 商家编码 */
	ItemCode string `json:"item_code"`

	/* 最后修改人 */
	LastModifier string `json:"last_modifier"`

	/* mm */
	Length int64 `json:"length"`

	/* 商品的名称 */
	Name string `json:"name"`

	/* 包装材料 */
	PackageMaterial string `json:"package_material"`

	/* 父item的id，当item为物流宝子商品时，parent_id必填,否则不必填
	可通过父ID来得知商品的关系。 */
	ParentId int64 `json:"parent_id"`

	/* 价格 */
	Price int64 `json:"price"`

	/* 计价货类 */
	PricingCat string `json:"pricing_cat"`

	/* 属性key:value; key:value */
	Properties string `json:"properties"`

	/* 发布版本号，用来同步商 */
	PublishVersion int64 `json:"publish_version"`

	/* 商品备注 */
	Remark string `json:"remark"`

	/* 状态，item_status_valid -- 1 表示 有效 item_status_lock -- 2 表示锁住 */
	Status string `json:"status"`

	/* 前台商品名称 */
	Title string `json:"title"`

	/* 商品类型：
	NORMAL--普通类型;
	COMBINE--组合商品;
	DISTRIBUTION--分销商品;
	默认为NORMAL */
	Type string `json:"type"`

	/* 商品所有人淘宝ID */
	UserId int64 `json:"user_id"`

	/* 商品所有人淘宝nick */
	UserNick string `json:"user_nick"`

	/* 立方mm */
	Volume int64 `json:"volume"`

	/* 重量 */
	Weight int64 `json:"weight"`

	/* 宽 */
	Width int64 `json:"width"`
}

/* 活动数据结构 */
type Activity struct {
	/* 活动id */
	ActivityId int64 `json:"activity_id"`

	/* 领用优惠券的链接 */
	ActivityUrl string `json:"activity_url"`

	/* 已经领取的优惠券的数量 */
	AppliedCount int64 `json:"applied_count"`

	/* 活动对应的优惠券ID */
	CouponId int64 `json:"coupon_id"`

	/* self代表自己创建，other他人创建 */
	CreateUser string `json:"create_user"`

	/* 每个买家限领取优惠券的数量，1～5张 */
	PersonLimitCount int64 `json:"person_limit_count"`

	/* enabled代表有效，invalid代表失效。other代表空值 */
	Status string `json:"status"`

	/* 卖家设置优惠券领取的总领用量 */
	TotalCount int64 `json:"total_count"`
}

/* 优惠券数据结构 */
type Coupon struct {
	/* 订单满多少分才能用这个优惠券，501就是满501分能使用。注意：返回的是“分”，不是“元” */
	Condition int64 `json:"condition"`

	/* 优惠券ID */
	CouponId int64 `json:"coupon_id"`

	/* 优惠券创建时间 */
	CreatTime string `json:"creat_time"`

	/* 优惠券的创建渠道，自己创建/他人创建 */
	CreateChannel string `json:"create_channel"`

	/* 优惠券的面值，返回的是“分”，不是“元”，500代表500分相当于5元 */
	Denominations int64 `json:"denominations"`

	/* 优惠券的截止日期 */
	EndTime string `json:"end_time"`
}

/* 宝贝主图视频数据结构 */
type MpicVideo struct {
	/* 主图视频记录所关联的商品的数字id */
	NumIid int64 `json:"num_iid"`

	/* 主图视频的时长，单位：秒 */
	VideoDuaration int64 `json:"video_duaration"`

	/* 主图视频的在淘视频中的ID */
	VideoId int64 `json:"video_id"`

	/* 主图视频的缩略图URL */
	VideoPic string `json:"video_pic"`

	/* 主图视频的状态 */
	VideoStatus int64 `json:"video_status"`
}

/* 未发放成功买家昵称，发放失败原因 */
type ErrorMessage struct {
	/* 买家昵称 */
	BuyerNick string `json:"buyer_nick"`

	/* 发送失败的原因 */
	Reason string `json:"reason"`
}

/* 物流公司详细信息 */
type PartnerDetail struct {
	/* 物流公司支付宝账号 */
	AccountNo string `json:"account_no"`

	/* 物流公司代码 */
	CompanyCode string `json:"company_code"`

	/* 物流公司id */
	CompanyId int64 `json:"company_id"`

	/* 物流公司简称 */
	CompanyName string `json:"company_name"`

	/* 物流公司全名 */
	FullName string `json:"full_name"`

	/* 运单号验证正则表达式 */
	RegMailNo string `json:"reg_mail_no"`

	/* 旺旺id */
	WangwangId string `json:"wangwang_id"`
}

/* 折扣信息 */
type Discount struct {
	/* 创建时间 */
	Created string `json:"created"`

	/* 折扣详情 */
	Details []*DiscountDetail `json:"details>discount_detail"`

	/* 折扣ID */
	DiscountId int64 `json:"discount_id"`

	/* 修改时间 */
	Modified string `json:"modified"`

	/* 折扣名称 */
	Name string `json:"name"`
}

/* 折扣详情信息 */
type DiscountDetail struct {
	/* 创建时间 */
	Created string `json:"created"`

	/* 折扣详情ID */
	DetailId int64 `json:"detail_id"`

	/* 优惠方式:PERCENT（按折扣优惠）、PRICE（按减价优惠） */
	DiscountType string `json:"discount_type"`

	/* 优惠比率或者优惠价格 10%或10 */
	DiscountValue int64 `json:"discount_value"`

	/* 修改时间 */
	Modified string `json:"modified"`

	/* 会员等级的id或者分销商id */
	TargetId int64 `json:"target_id"`

	/* 等级名称或者分销商名称 */
	TargetName string `json:"target_name"`

	/* 折扣类型:GRADE（按会员等级优惠）、DISTRIBUTOR（按分销商优惠） */
	TargetType string `json:"target_type"`
}

/* 客服评价 */
type Evaluation struct {
	/* 客服评价内容 */
	EvaluationName string `json:"evaluation_name"`

	/* 评价数量 */
	EvaluationNum string `json:"evaluation_num"`
}

/* 在线时长 */
type OnlineTimeById struct {
	/* 客服在线时间长度（秒） */
	OnlineTimes int64 `json:"online_times"`

	/* 客服人员ID */
	ServiceStaffId string `json:"service_staff_id"`
}

/* 平均等待时长 */
type WaitingTimeById struct {
	/* 平均等待时间长度（秒） */
	AvgWaitingTimes int64 `json:"avg_waiting_times"`

	/* 客服人员ID */
	ServiceStaffId string `json:"service_staff_id"`
}

/* 物流服务标签 */
type LogisticServiceTag struct {
	/* 物流服务下的标签属性,多个标签之间有";"分隔 */
	ServiceTag string `json:"service_tag"`

	/* 服务类型=编码
	平邮=POST
	快递=FAST
	EMS=EMS
	消费者选快递时为FAST */
	ServiceType string `json:"service_type"`
}

/* 客服回复统计 */
type ReplyStatById struct {
	/* 客服回复数 */
	ReplyNum int64 `json:"reply_num"`

	/* 客服ID */
	UserId string `json:"user_id"`
}

/* 一页ADGroup列表 */
type ADGroupPage struct {
	/* 商品对象列表 */
	AdgroupList []*ADGroup `json:"adgroup_list>a_d_group"`

	/* 返回第几页的数据从1开始 */
	PageNo int64 `json:"page_no"`

	/* 每页数据大小 */
	PageSize int64 `json:"page_size"`

	/* 所查询的数据总数，只有当返回第一页数据时有值，当要求返回的数据非第一页时，此返回值无效 */
	TotalItem int64 `json:"total_item"`
}

/* 一页推荐词列表 */
type RecommendWordPage struct {
	/* 返回第几页的数据从1开始。
	如果输入的值大于可取得的最大页码值时，将返回
	最大的页码值并且recommend_word_list值将
	为空 */
	PageNo int64 `json:"page_no"`

	/* 每页数据大小 */
	PageSize int64 `json:"page_size"`

	/* 推荐词分页对象列表 */
	RecommendWordList []*RecommendWord `json:"recommend_word_list>recommend_word"`

	/* 所查询的数据总数 */
	TotalItem int64 `json:"total_item"`
}

/* 聊天对象ID列表 */
type Chatpeer struct {
	/* 聊天日期 */
	Date string `json:"date"`

	/* 聊天对象用户ID：cntaobao+淘宝nick，例如cntaobaotest */
	Uid string `json:"uid"`
}

/* 推广计划的投放平台 */
type CampaignPlatform struct {
	/* 推广计划ID */
	CampaignId int64 `json:"campaign_id"`

	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 无线折扣百分比。必须大于等于1，小于等于200的整数 */
	MobileDiscount int64 `json:"mobile_discount"`

	/* 最后修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 主人昵称 */
	Nick string `json:"nick"`

	/* 非搜索投放频道代码数组，频道代码必须是直通车非搜索类频道列表中的值。？ */
	NonsearchChannels []int64 `json:"nonsearch_channels"`

	/* 溢价的百分比，必须是大于等于 1小于等于200的整数 */
	OutsideDiscount int64 `json:"outside_discount"`

	/* 搜索投放频道代码数组，频道代码必须是直通车搜索类频道列表中的值。 */
	SearchChannels []int64 `json:"search_channels"`
}

/* 物流的服务标签 */
type LogisticsTag struct {
	/* 服务标签 */
	LogisticServiceTagList []*LogisticServiceTag `json:"logistic_service_tag_list>logistic_service_tag"`

	/* 主订单或子订单的订单号 */
	OrderId string `json:"order_id"`
}

/* 类目列表，多级结构 */
type Category struct {
	/* 类目id */
	Cateid int64 `json:"cateid"`

	/* 类目名称 */
	Catename string `json:"catename"`
}

/* 外卖类目列表 */
type RootCategory struct {
	/* 一级类目对象 */
	Category *Category `json:"category"`

	/* categroy的list */
	Childslist []*Category `json:"childslist>category"`
}

/* 内含外卖后台类目的list */
type CategoryResult struct {
	/* 类目列表集合 */
	Categorylist []*RootCategory `json:"categorylist>root_category"`
}

/* resultdata返回结果usefulmsg提示信息code返回错误码 */
type CreateResult struct {
	/* 宝贝id */
	ResultData string `json:"result_data"`

	/* 业务提示信息 */
	UsefulMsg string `json:"useful_msg"`
}

/* 商品批量操作返回结果 */
type BatchOperateResult struct {
	/* 商品操作错误代码 */
	ErrorCode string `json:"error_code"`

	/* 操作提示 */
	ErrorMsg string `json:"error_msg"`

	/* 批量操作失败的宝贝列表 */
	FailedItemList []int64 `json:"failed_item_list"`

	/* 操作是否成功，只要有一家宝贝发布成功则返回true */
	Success bool `json:"success"`

	/* 操作成功的宝贝id列表 */
	SuccessItemList []int64 `json:"success_item_list"`
}

/* sku中所包含的属性对 */
type AuctionPVPairDO struct {
	/* 类目销售属性id */
	PropertyId int64 `json:"property_id"`

	/* 类目属性名称 */
	PropertyText string `json:"property_text"`

	/* sku属性对状态值 */
	Status int64 `json:"status"`

	/* 类目属性值id */
	ValueId int64 `json:"value_id"`

	/* 类目属性值名称 */
	ValueText string `json:"value_text"`
}

/* 商品sku对象 */
type AuctionSkuDO struct {
	/* sku描述信息 */
	Description string `json:"description"`

	/* 商品宝贝id */
	ItemId int64 `json:"item_id"`

	/* sku对应外部编码 */
	OuterId string `json:"outer_id"`

	/* sku价格，以分为单位 */
	Price int64 `json:"price"`

	/* sku的属性及属性值id */
	Properties string `json:"properties"`

	/* sku包含的属性对列表 */
	PvList []*AuctionPVPairDO `json:"pv_list>auction_p_v_pair_d_o"`

	/* sku的库存 */
	Quantity int64 `json:"quantity"`

	/* sku_id */
	SkuId int64 `json:"sku_id"`

	/* 状态  1：正常 -1：删除 */
	Status int64 `json:"status"`
}

/* 外卖商品对象 */
type TopAuction struct {
	/* 外卖商品描述 */
	AuctionDesc string `json:"auction_desc"`

	/* 商品sku列表 */
	AuctionSkudos []*AuctionSkuDO `json:"auction_skudos>auction_sku_d_o"`

	/* 宝贝状态(0,1出售状态,-2在仓库中) */
	AuctionStatus int64 `json:"auction_status"`

	/* 外卖宝贝所属后台类目 */
	CategoryId int64 `json:"category_id"`

	/* 商品发布时间(毫秒) */
	CreateTime string `json:"create_time"`

	/* 宝贝外部编码 */
	GoodsNo string `json:"goods_no"`

	/* 外卖商品id */
	ItemId int64 `json:"item_id"`

	/* 单个宝贝限购数量 */
	LimitBuy int64 `json:"limit_buy"`

	/* 最后修改时间(毫秒) */
	ModifyTime string `json:"modify_time"`

	/* 商品最初发布的数量 */
	OldQuantity int64 `json:"old_quantity"`

	/* 宝贝原价 */
	OriPrice string `json:"ori_price"`

	/* 宝贝完整图片路径 */
	PicUrl string `json:"pic_url"`

	/* 宝贝价格，最多两位小数 */
	Price string `json:"price"`

	/* 宝贝库存 */
	Quantity int64 `json:"quantity"`

	/* 1推荐，0不推荐 */
	Recommend int64 `json:"recommend"`

	/* 宝贝规则ID */
	RuleId int64 `json:"rule_id"`

	/* 外卖商品标题 */
	Title string `json:"title"`

	/* 商品多图信息，多个图片url以英文逗号分隔 */
	ViceImage string `json:"vice_image"`
}

/* 店铺基础信息 */
type TopShop struct {
	/* 外卖店铺id */
	Shopid int64 `json:"shopid"`

	/* 外卖店铺名称 */
	Shopname string `json:"shopname"`
}

/* 当前用户城市为单位的店铺列表 */
type TopShopGroupByCity struct {
	/* 城市id */
	Cityid int64 `json:"cityid"`

	/* 城市名称 */
	Cityname string `json:"cityname"`

	/* 店铺list */
	Shoplist []*TopShop `json:"shoplist>top_shop"`
}

/* 以城市维度分的店铺列表 */
type ShopCityResult struct {
	/* 以城市维度分的店铺列表 */
	Cityshoplist []*TopShopGroupByCity `json:"cityshoplist>top_shop_group_by_city"`
}

/* 爱淘宝商品 */
type AitaobaoItem struct {
	/* 淘宝客佣金 */
	Commission float64 `json:"commission,string"`

	/* 累计成交量.注：返回的数据是30天内累计推广量 */
	CommissionNum string `json:"commission_num"`

	/* 淘宝客佣金比率，比如：1234.00代表12.34% */
	CommissionRate string `json:"commission_rate"`

	/* 累计总支出佣金量 */
	CommissionVolume float64 `json:"commission_volume,string"`

	/* 折扣活动结束时间 */
	CouponEndTime string `json:"coupon_end_time"`

	/* 折扣价格 */
	CouponPrice float64 `json:"coupon_price,string"`

	/* 折扣比率 */
	CouponRate string `json:"coupon_rate"`

	/* 折扣活动开始时间 */
	CouponStartTime string `json:"coupon_start_time"`

	/* 商品所在地 */
	ItemLocation string `json:"item_location"`

	/* 卖家昵称 */
	Nick string `json:"nick"`

	/* 淘宝客商品数字id */
	NumIid int64 `json:"num_iid"`

	/* 图片url */
	PicUrl string `json:"pic_url"`

	/* 商品价格 */
	Price float64 `json:"price,string"`

	/* 促销价格 */
	PromotionPrice float64 `json:"promotion_price,string"`

	/* 卖家信用等级 */
	SellerCreditScore int64 `json:"seller_credit_score"`

	/* 卖家id */
	SellerId int64 `json:"seller_id"`

	/* 店铺类型:B(商城),C(集市) */
	ShopType string `json:"shop_type"`

	/* 商品title 宝贝名称 */
	Title string `json:"title"`

	/* 30天内交易量 */
	Volume int64 `json:"volume"`
}

/* 判定服务是否可达的返回结果 */
type AddressReachableResult struct {
	/* 区域编码 */
	DivisionId int64 `json:"division_id"`

	/* 错误码 */
	ErrorCode string `json:"error_code"`

	/* 错误信息 */
	ErrorMsg string `json:"error_msg"`

	/* 物流公司代号 */
	PartnerCode string `json:"partner_code"`

	/* 物流公司编码ID */
	PartnerId int64 `json:"partner_id"`

	/* 物流公司名称 */
	PartnerName string `json:"partner_name"`

	/* 服务是否可达，    0 - 不可达    1 - 可达    2 - 不确定    3 - 未配置 */
	Reachable int64 `json:"reachable"`

	/* 服务对应的数字编码，如揽派范围对应88 */
	ServiceType int64 `json:"service_type"`

	/* 是否成功 */
	Success bool `json:"success"`
}

/* 淘宝客报表成员 */
type Payment struct {
	/* 应用授权码 */
	AppKey string `json:"app_key"`

	/* 所购买商品的类目ID */
	CategoryId int64 `json:"category_id"`

	/* 所购买商品的类目名称 */
	CategoryName string `json:"category_name"`

	/* 用户获得的佣金 */
	Commission float64 `json:"commission,string"`

	/* 佣金比率。比如：0.01代表1% */
	CommissionRate string `json:"commission_rate"`

	/* 订单创建时间 */
	CreateTime string `json:"create_time"`

	/* 商品成交数量 */
	ItemNum int64 `json:"item_num"`

	/* 商品标题 */
	ItemTitle string `json:"item_title"`

	/* 商品ID */
	NumIid int64 `json:"num_iid"`

	/* 推广渠道 */
	OuterCode string `json:"outer_code"`

	/* 成交价格 */
	PayPrice float64 `json:"pay_price,string"`

	/* 成交时间 */
	PayTime string `json:"pay_time"`

	/* 实际支付金额 */
	RealPayFee float64 `json:"real_pay_fee,string"`

	/* 卖家昵称 */
	SellerNick string `json:"seller_nick"`

	/* 店铺名称 */
	ShopTitle string `json:"shop_title"`

	/* isv自定义渠道 */
	SubUnionId string `json:"sub_union_id"`

	/* 淘宝交易号 */
	TradeId int64 `json:"trade_id"`

	/* 淘宝父交易号 */
	TradeParentId int64 `json:"trade_parent_id"`
}

/* 电子书章节信息 */
type EbookMediaChapter struct {
	/* 章节创建时间 */
	Created string `json:"created"`

	/* 章节淘宝ID */
	Tbid int64 `json:"tbid"`
}

/* 产品规格审核信息 */
type Ticket struct {
	/* 如果产品规格，需要商家审核，为商家审核用户ID */
	AuditSellerId int64 `json:"audit_seller_id"`

	/* 创建人ID */
	CreateUserId int64 `json:"create_user_id"`

	/* 产品规格申请时间 */
	GmtCreate string `json:"gmt_create"`

	/* 产品规格审核单最后修改时间 */
	GmtModified string `json:"gmt_modified"`

	/* 关于审核原因，更详细的说明 */
	Memo string `json:"memo"`

	/* 审核原因 */
	Reason string `json:"reason"`

	/* 产品规格ID */
	SpecId int64 `json:"spec_id"`

	/* 1, "商家确认"
	2, "商家拒绝"
	3, "小二确认"
	4, "小二拒绝"
	5, "待商家处理"
	6, "商家审核超时"
	7, "待小二审核" */
	Status int64 `json:"status"`
}

/* 电子书卷信息 */
type EbookMediaVolume struct {
	/* 卷的添加时间 */
	Created string `json:"created"`

	/* 电子书卷ID */
	VolumeId int64 `json:"volume_id"`
}

/* 爱淘宝商品详情 */
type AitaobaoItemDetail struct {
	/* 商品详细信息. fields中需要设置Item下的字段,如设置:iid,detail_url等; 只设置item_detail,则不返回的Item下的所有信息. */
	Item *Item `json:"item"`

	/* 商品所属卖家的信用等级 */
	SellerCreditScore int64 `json:"seller_credit_score"`
}

/* 爱淘宝店铺 */
type AitaobaoShop struct {
	/* 店铺内商品总数 */
	AuctionCount int64 `json:"auction_count"`

	/* 淘宝客店铺佣金比率 */
	CommissionRate string `json:"commission_rate"`

	/* 店铺掌柜信用等级 */
	SellerCredit string `json:"seller_credit"`

	/* 卖家昵称 */
	SellerNick string `json:"seller_nick"`

	/* 店铺名称 */
	ShopTitle string `json:"shop_title"`

	/* 店铺类型 B=商城卖家 C=普通卖家 */
	ShopType string `json:"shop_type"`

	/* 累计推广量 */
	TotalAuction string `json:"total_auction"`

	/* 店铺用户id */
	UserId int64 `json:"user_id"`
}

/* 外卖店铺信息 */
type TakeoutOption struct {
	/* 配送范围地图坐标 */
	AreaRange string `json:"area_range"`

	/* 支持货到付款:1，不支持货到付款：0 */
	CashOnDelivery int64 `json:"cash_on_delivery"`

	/* 主营类目id */
	Cateid int64 `json:"cateid"`

	/* 配送费 */
	DeliveryAmount float64 `json:"delivery_amount,string"`

	/* 配送时间 */
	DeliveryTime string `json:"delivery_time"`

	/* 配送预留时间 */
	EarlyMinutes int64 `json:"early_minutes"`

	/* 满多少免运费 */
	FullAmount float64 `json:"full_amount,string"`

	/* 起送金额 */
	MinimumAmount float64 `json:"minimum_amount,string"`

	/* 外卖店手机号码 */
	Mobile string `json:"mobile"`

	/* 外卖店铺名称 */
	ShopName string `json:"shop_name"`

	/* 外卖店铺id */
	Shopid int64 `json:"shopid"`

	/* 预定，当天：1，三天内：3，七天内：7 */
	SupportDays int64 `json:"support_days"`
}

/* 外卖店信息 */
type TakeoutShop struct {
	/* 店铺地址 */
	Address string `json:"address"`

	/* 城市 */
	City string `json:"city"`

	/* 商户类型 （1：品牌连锁  2:代理商  3：单店经营） */
	MerchantType int64 `json:"merchant_type"`

	/* 店铺名称 */
	Name string `json:"name"`

	/* 电话号码 */
	Phone string `json:"phone"`

	/* 店铺标志图片 */
	PicUrl string `json:"pic_url"`

	/* 地图坐标x，注意此坐标是乘以100000后的值 */
	Posx int64 `json:"posx"`

	/* 地图坐标y，注意此坐标是乘以100000后的值 */
	Posy int64 `json:"posy"`

	/* 外卖店铺id */
	Shopid int64 `json:"shopid"`

	/* 店铺与ISV的关联关系 */
	Shopoutid string `json:"shopoutid"`
}

/* 外卖店信息 */
type TakeoutShopSummaryInfo struct {
	/* 店铺地址 */
	Address string `json:"address"`

	/* 城市 */
	City string `json:"city"`

	/* 等待确认的兑换券的订单笔数 */
	DigitalWaitConfirm int64 `json:"digital_wait_confirm"`

	/* 店铺营业状态，歇业：0，营业：1 */
	IsOpen int64 `json:"is_open"`

	/* 外卖店铺名称 */
	Name string `json:"name"`

	/* 电话号码 */
	Phone string `json:"phone"`

	/* 外卖店铺id */
	Shopid int64 `json:"shopid"`

	/* 店铺与ISV的关联ID */
	Shopoutid string `json:"shopoutid"`

	/* 等待确认配送的订单笔数 */
	WaitConfirm int64 `json:"wait_confirm"`

	/* 等待退款的订单笔数 */
	WaitRefund int64 `json:"wait_refund"`
}

/* 外卖分页 */
type TakeoutShopPage struct {
	/* 下一页页码 */
	NextPage int64 `json:"next_page"`

	/* 当前页码 */
	Page int64 `json:"page"`

	/* 每页条数 */
	PageSize int64 `json:"page_size"`

	/* 上一页页码 */
	PrevPage int64 `json:"prev_page"`

	/* 店铺信息列表 */
	TakeoutSummaryInfos []*TakeoutShopSummaryInfo `json:"takeout_summary_infos>takeout_shop_summary_info"`

	/* 总条数 */
	TotalCount int64 `json:"total_count"`

	/* 总页数 */
	TotalPage int64 `json:"total_page"`
}

/* 酒店的标准房型信息 */
type SRoomType struct {
	/* 面积 */
	Area string `json:"area"`

	/* 床型。json格式：[{"bedType":"大床","bedSize":"1.5m"},{"bedType":"双床","bedSize":"1.2m"}] */
	Bed string `json:"bed"`

	/* 创建时间 */
	CreatedTime string `json:"created_time"`

	/* 扩展字段 */
	Extend string `json:"extend"`

	/* facility */
	Facility string `json:"facility"`

	/* 楼层 */
	Floor string `json:"floor"`

	/* 宽带服务
	"0","有线上网(免费),
	"1","有线上网(无)",
	"2","有线上网(收费)",
	"3","有线上网(部分有且免费)",
	"4","有线上网(部分有且收费)" */
	Internet string `json:"internet"`

	/* 最大入住人数 */
	MaxOccupancy int64 `json:"max_occupancy"`

	/* 修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 房型名 */
	Name string `json:"name"`

	/* pic_url */
	PicUrl string `json:"pic_url"`

	/* shid */
	Shid int64 `json:"shid"`

	/* 匹配的标准房型 */
	Srid int64 `json:"srid"`

	/* 状态。0:正常;-1:删除 */
	Status int64 `json:"status"`

	/* 窗型，枚举类型
	0, 无窗,
	1, 有窗; */
	WindowType string `json:"window_type"`
}

/* 查询feed列表里，返回简单的feed数据：标题和id */
type SimpleFeed struct {
	/* feedId */
	Id int64 `json:"id"`

	/* feed的标题 */
	Title string `json:"title"`
}

/* feed的详细内容 */
type FeedDetail struct {
	/* 评论的数量 */
	CommentCount int64 `json:"comment_count"`

	/* 如果是插件feed，指插件id */
	ComponentId int64 `json:"component_id"`

	/* 如果是插件feed，指插件名 */
	ComponentName string `json:"component_name"`

	/* feed的封面区域 feedTile里的type=cover */
	CoverTile *FeedTile `json:"cover_tile"`

	/* 是否已删除 */
	Deleted bool `json:"deleted"`

	/* 如果是插件Feed,对应的详情地址 */
	DetailUrl string `json:"detail_url"`

	/* 赞的数量 */
	FeedfavourCount int64 `json:"feedfavour_count"`

	/* feed的Id */
	Id int64 `json:"id"`

	/* 如果是插件Feed,对应插件的信息 */
	Message string `json:"message"`

	/* feed的内容区域，type=text 或者type=pic ,type=picItem的目前不提供 */
	Tiles []*FeedTile `json:"tiles>feed_tile"`

	/* feed的发布时间 */
	Time int64 `json:"time"`

	/* feed的标题 */
	Title string `json:"title"`
}

/* 透视结果 */
type AnalyzeDO struct {
	/* 返回透视结果的二维数组 */
	DataList []*AnalyzeData `json:"data_list>analyze_data"`

	/* 列的名字 */
	FieldNamesList []string `json:"field_names_list"`

	/* 返回类型 */
	FieldTypesList []string `json:"field_types_list"`
}

/* 分析数据 */
type AnalyzeData struct {
	/* 返回结果 */
	ResultList []string `json:"result_list"`
}

/* feed的内容区域，可以是封面，也可以是内容 */
type FeedTile struct {
	/* type=pic或cover时，返回的图片地址 */
	Path string `json:"path"`

	/* type=cover或type=pic时有效，指图片高度 */
	PicHeight int64 `json:"pic_height"`

	/* type=cover或type=pic时有效，指图片宽度 */
	PicWidth int64 `json:"pic_width"`

	/* type=cover时有效，0时，feed的title不压封面 1时feed的title压封面 */
	Template int64 `json:"template"`

	/* type=text时，此内容有值 */
	Text string `json:"text"`

	/* feed tile的类型，可以为：cover, pic, text, picItem */
	Type string `json:"type"`
}

/* feed评论 */
type FeedComment struct {
	/* 评论内容 */
	Content string `json:"content"`

	/* 评论的扩展数据，json格式，目前支持图片与宝贝,type=1时格式：["http://gw3.alicdn.com/tfscom/tuitui/i2/11659032089367711/T1mhfOFiJiXXb1upjX.jpg"]，type=2时格式见示例。 */
	ExtSymbol string `json:"ext_symbol"`

	/* 评论所属的feed的Id */
	FeedId int64 `json:"feed_id"`

	/* 评论楼层 */
	Floor int64 `json:"floor"`

	/* 评论ID */
	Id int64 `json:"id"`

	/* 评论发布的时间 */
	Time int64 `json:"time"`

	/* 评论类型,0纯文本，1含有图片，2含有宝贝 */
	Type int64 `json:"type"`
}

/* 微淘粉丝分组云标签 */
type CloudsTag struct {
	/* 1:bool,2:short,3:int,4:long,5:float,6:double,7:string */
	DataType string `json:"data_type"`

	/* 标签id */
	Id string `json:"id"`

	/* 1：数值；2：radio；3：checkbox；4：精确文本匹配 ; 5 模糊文本匹配 */
	InputType string `json:"input_type"`

	/* 标签中文名字 */
	NameCh string `json:"name_ch"`

	/* 入参校验 */
	Validator string `json:"validator"`

	/* validator中的valueSet */
	Values string `json:"values"`
}

/* 微淘粉丝分组信息 */
type CloudGroup struct {
	/* 分组描述 */
	Desc string `json:"desc"`

	/* 分组表达式 */
	Expression string `json:"expression"`

	/* 分组id */
	GroupId string `json:"group_id"`

	/* 分组名字 */
	Name string `json:"name"`

	/* 分组状态 */
	Status string `json:"status"`
}

/* 机票订单的详情 */
type TripOrder struct {
	/* 订单基础信息 */
	BaseInfo *TripBaseInfo `json:"base_info"`

	/* 订单行政购票信息 */
	CorpInfo *CorpInfo `json:"corp_info"`

	/* 扩展字段 */
	Extra string `json:"extra"`

	/* 订单航班信息（包含航班乘机人） */
	FlightInfos []*TripFlightInfo `json:"flight_infos>trip_flight_info"`

	/* 订单行程单信息 */
	Itinerary *Itinerary `json:"itinerary"`
}

/* 订单基础信息 */
type TripBaseInfo struct {
	/* 支付宝交易号 */
	AlipayTradeNo string `json:"alipay_trade_no"`

	/* 佣金，单位：分 */
	Commission string `json:"commission"`

	/* 订单创建时间 */
	CreateTime string `json:"create_time"`

	/* 扩展信息 */
	Extra string `json:"extra"`

	/* 是否强制保险订单，有一张票为强制保险即为true */
	ForceInsure bool `json:"force_insure"`

	/* 是否保险分润订单，有一个乘机人支持分润即为 True */
	InsurePromotion bool `json:"insure_promotion"`

	/* 订单表最近一次修改时间 */
	ModifyTime string `json:"modify_time"`

	/* 淘宝机票订单id */
	OrderId int64 `json:"order_id"`

	/* 订单最晚支付时间 */
	PayLatestTime string `json:"pay_latest_time"`

	/* 订单支付状态==> 0:未付款;1:已付款，冻结买家定金;2:付款给卖家;3:解冻定金给买家;4:已扣佣;5:交易关闭;6:确认可支付;7:确认不可支付 */
	PayStatus int64 `json:"pay_status"`

	/* 联系人邮箱 */
	RelationEmail string `json:"relation_email"`

	/* 联系人手机号 */
	RelationMobile string `json:"relation_mobile"`

	/* 联系人姓名 */
	RelationName string `json:"relation_name"`

	/* 联系人备用电话 */
	RelationPhoneBak string `json:"relation_phone_bak"`

	/* 订单状态定义==> 0:未付款;(注：支持保险分润时，订单已付款，保险未付款也为0)1:处理中;2:确定出票;3:预定成功;4:预定失败;5:处理中超时失效;6:支付超时失效;7:买家取消 */
	Status int64 `json:"status"`

	/* 总金额，所有乘机人加机建燃油，单位：分 */
	TotalPrice int64 `json:"total_price"`

	/* 航程类型：0，单程；1，往返； */
	TripType int64 `json:"trip_type"`
}

/* 乘机人信息 */
type TripFlightPassenger struct {
	/* 乘机人生日：yyyy-mm-dd */
	Birthday string `json:"birthday"`

	/* 舱位等级：0，头等舱(F)；1，商务舱(C)；2，经济舱(Y) */
	CabinClass int64 `json:"cabin_class"`

	/* 航班舱位代码 */
	CabinCode string `json:"cabin_code"`

	/* 乘机人证件号码 */
	CertNo string `json:"cert_no"`

	/* 乘机人证件类型：0，身份证；1，护照；3，军人证；4，回乡证；5，台胞证；6，港澳台胞；10，警官证；11，士兵证件 */
	CertType int64 `json:"cert_type"`

	/* ei项 */
	Ei string `json:"ei"`

	/* 扩展字段 */
	Extra string `json:"extra"`

	/* 航班机建费，单位：分 */
	Fee int64 `json:"fee"`

	/* 强制保险金额，单位：分 */
	ForceInsurePrice int64 `json:"force_insure_price"`

	/* 当前乘机人的保险分润金额，单位：分 */
	InsurePromotionPrice int64 `json:"insure_promotion_price"`

	/* 备注信息，政策中的备注信息 */
	Memo string `json:"memo"`

	/* 乘机人姓名 */
	Name string `json:"name"`

	/* 乘机人类型：0，成人；1，儿童； */
	PassengerType int64 `json:"passenger_type"`

	/* PNR信息 */
	Pnr string `json:"pnr"`

	/* 政策id，淘宝系统政策唯一键 */
	PolicyId int64 `json:"policy_id"`

	/* 机票政策类型：0，默认；1，自定义 */
	PolicyType int64 `json:"policy_type"`

	/* 销售价格，单位：分 */
	Price int64 `json:"price"`

	/* 航班燃油税，单位：分 */
	Tax int64 `json:"tax"`

	/* 票号 */
	TicketNo string `json:"ticket_no"`

	/* 常旅客卡号 */
	TripCardNo string `json:"trip_card_no"`

	/* 退改签 */
	Tuigaiqian string `json:"tuigaiqian"`
}

/* 订单航班信息（包含航班乘机人） */
type TripFlightInfo struct {
	/* 航班航空公司二字码 */
	AirlineCode string `json:"airline_code"`

	/* 航班到达机场三字码 */
	ArrAirportCode string `json:"arr_airport_code"`

	/* 航班到达城市三字码 */
	ArrCityCode string `json:"arr_city_code"`

	/* 航班到达时间，格式yyyy-mm-dd hh:mm:ss */
	ArrTime string `json:"arr_time"`

	/* 航班实际承运航班号 */
	Carrier string `json:"carrier"`

	/* 航班出发机场三字码 */
	DepAirportCode string `json:"dep_airport_code"`

	/* 航班出发城市三字码 */
	DepCityCode string `json:"dep_city_code"`

	/* 航班起飞时间，格式yyyy-mm-dd hh:mm:ss */
	DepTime string `json:"dep_time"`

	/* 扩展信息 */
	Extra string `json:"extra"`

	/* 淘宝机票平台航班id */
	FlightId int64 `json:"flight_id"`

	/* 航班号 */
	FlightNo string `json:"flight_no"`

	/* 航班机型 */
	FlightType string `json:"flight_type"`

	/* 乘机人信息列表 */
	Passengers []*TripFlightPassenger `json:"passengers>trip_flight_passenger"`

	/* 去程或回程第几段航班，0，第1段；1，第2段航班 */
	SegmentNumber int64 `json:"segment_number"`

	/* 航段类型：0，去程；1，回程 */
	SegmentType int64 `json:"segment_type"`

	/* 特殊说明 */
	SpecialRule string `json:"special_rule"`

	/* 当前航段票面价格，单位：分 */
	TicketPrice int64 `json:"ticket_price"`
}

/* 来往公众账号菜单 */
type LaiwangPPMenu struct {
	/* 来往公众账号菜单按钮 */
	Button []*LaiwangPPButton `json:"button>laiwang_p_p_button"`
}

/* 来往公众账号菜单按钮 */
type LaiwangPPButton struct {
	/* 按钮的key. */
	Key string `json:"key"`

	/* 公众账号的菜单名称 */
	Name string `json:"name"`

	/* 二级按钮列表 */
	SubButton []*LaiwangPPSubButton `json:"sub_button>laiwang_p_p_sub_button"`

	/* 按钮点击后跳转的目的地址. */
	Target string `json:"target"`

	/* 按钮的类型 */
	Type string `json:"type"`

	/* 按钮跳转的url */
	Url string `json:"url"`
}

/* 登陆日志 */
type UserLoginlog struct {
	/* 用户登录日志的条数 */
	Count int64 `json:"count"`

	/* 用户登录日志信息 */
	Loginlogs []*LoginLog `json:"loginlogs>login_log"`

	/* 用户id */
	Uid string `json:"uid"`
}

/* 来往公众账号菜单子按钮 */
type LaiwangPPSubButton struct {
	/* 按钮的key. */
	Key string `json:"key"`

	/* 公众账号的菜单名称 */
	Name string `json:"name"`

	/* 按钮点击后跳转的目的地址. */
	Target string `json:"target"`

	/* 按钮的类型 */
	Type string `json:"type"`

	/* 按钮跳转的url */
	Url string `json:"url"`
}

/* 建站内容详情DO */
type SpContentDOForDetail struct {
	/* 类型为文章的内容摘要 */
	Articleabstract string `json:"articleabstract"`

	/* 分类名称 */
	Classname string `json:"classname"`

	/* 评论数 */
	Commentnum int64 `json:"commentnum"`

	/* 推荐理 */
	Comments string `json:"comments"`

	/* 文章内容 */
	Content string `json:"content"`

	/* 内容的detail页面地址，数值为html链接，主要用于展现内容的detail信息的 */
	Detailurl string `json:"detailurl"`

	/* 创建时间 */
	Gmtcreate string `json:"gmtcreate"`

	/* 修改时间 */
	Gmtmodified string `json:"gmtmodified"`

	/* 内容主键ID */
	Id int64 `json:"id"`

	/* 内容关联的商品详细信息列表，Json格式的字符串，每个对象包含的信息如下:
	1:auctionId 宝贝ID;
	2:title 宝贝标题
	3:categoryId 宝贝的类目ID
	4:price 宝贝价格
	5:commission 宝贝淘客价格
	6:picUrl 宝贝主图地址
	7:picUrls 宝贝所有的普通商品图片
	8:detailUrl 宝贝的detail地址 */
	Items string `json:"items"`

	/* 喜欢数 */
	Likenum int64 `json:"likenum"`

	/* 主图 */
	Mainpic string `json:"mainpic"`

	/* 图片URL,多个图片中间以,分割 */
	Picurl string `json:"picurl"`

	/* 价格 */
	Price string `json:"price"`

	/* 内容平台的内容id */
	Referid int64 `json:"referid"`

	/* 内容关联到的商品。如果有多个商品，用,分割 */
	Referitems string `json:"referitems"`

	/* 内容类型:
	uz.item:宝贝
	uz.image:图片
	uz.article:自定义
	uz.graphic:图文 */
	Schemaname string `json:"schemaname"`

	/* 分享数 */
	Sharenum int64 `json:"sharenum"`

	/* 物种ID */
	Sitecategoryid int64 `json:"sitecategoryid"`

	/* 站点ID */
	Taesiteid int64 `json:"taesiteid"`

	/* 标签名称。多个标签以,分割 */
	Tags string `json:"tags"`

	/* 附着目标的目标id */
	Targetid int64 `json:"targetid"`

	/* 内容标题 */
	Title string `json:"title"`

	/* 是否置顶 */
	Topenable int64 `json:"topenable"`

	/* 用户ID */
	Userid int64 `json:"userid"`

	/* 浏览数 */
	Viewnum int64 `json:"viewnum"`
}

/* 内容DO */
type SpContentDOForList struct {
	/* 类型为文章的内容摘要 */
	Articleabstract string `json:"articleabstract"`

	/* 分类名称 */
	Classname string `json:"classname"`

	/* 评论数 */
	Commentnum int64 `json:"commentnum"`

	/* 推荐理 */
	Comments string `json:"comments"`

	/* 内容的detail页面地址，数值为html链接，主要用于展现内容的detail信息的 */
	Detailurl string `json:"detailurl"`

	/* 创建时间 */
	Gmtcreate string `json:"gmtcreate"`

	/* 修改时间 */
	Gmtmodified string `json:"gmtmodified"`

	/* 内容主键ID */
	Id int64 `json:"id"`

	/* 喜欢数 */
	Likenum int64 `json:"likenum"`

	/* 主图 */
	Mainpic string `json:"mainpic"`

	/* 图片URL,多个图片中间以,分割 */
	Picurl string `json:"picurl"`

	/* 价格 */
	Price string `json:"price"`

	/* 内容平台的内容id */
	Referid int64 `json:"referid"`

	/* 内容关联到的商品。如果有多个商品，用,分割 */
	Referitems string `json:"referitems"`

	/* 内容类型:
	uz.item:宝贝
	uz.image:图片
	uz.article:自定义
	uz.graphic:图文 */
	Schemaname string `json:"schemaname"`

	/* 分享数 */
	Sharenum int64 `json:"sharenum"`

	/* 物种ID */
	Sitecategoryid int64 `json:"sitecategoryid"`

	/* 站点ID */
	Taesiteid int64 `json:"taesiteid"`

	/* 标签名称。多个标签以,分割 */
	Tags string `json:"tags"`

	/* 附着目标的目标id */
	Targetid int64 `json:"targetid"`

	/* 内容标题 */
	Title string `json:"title"`

	/* 是否置顶 */
	Topenable int64 `json:"topenable"`

	/* 用户ID */
	Userid int64 `json:"userid"`

	/* 浏览数 */
	Viewnum int64 `json:"viewnum"`
}

/* 云盘token信息 */
type EbookYunpanToken struct {
	/* 云盘访问的token信息 */
	AccessToken string `json:"access_token"`

	/* access_token的失效时间 */
	ExpiresIn int64 `json:"expires_in"`

	/* 刷新云盘access_token信息 */
	RefreshToken string `json:"refresh_token"`
}

/* 电子书资源信息 */
type EbookMediaResource struct {
	/* 文件资源状态（0:审核中 1：审核通过 2：审核不通过） */
	FileStatus int64 `json:"file_status"`

	/* 文件资源后缀名 */
	FileSuffix string `json:"file_suffix"`

	/* 资源文件的类型（1：正文，0：试读） */
	FileType int64 `json:"file_type"`

	/* 文件审核不通过原因 */
	Reason string `json:"reason"`
}

/* 交易回流信息 */
type TradeTrace struct {
	/* 动作发生的时间 */
	ActionTime string `json:"action_time"`

	/* 应用标题 */
	AppTitle string `json:"app_title"`

	/* 子订单的id列表,以逗号分割 */
	OrderIds string `json:"order_ids"`

	/* 备注字段 */
	Remark string `json:"remark"`

	/* 卖家的淘宝nick */
	SellerNick string `json:"seller_nick"`

	/* 回流的订单状态 */
	Status string `json:"status"`

	/* 交易tid */
	Tid int64 `json:"tid"`
}

/* 订单全链路中的订单状态统计 */
type TradeStat struct {
	/* 数量 */
	Count int64 `json:"count"`

	/* 状态名称 */
	Status string `json:"status"`
}

/* 单条交易子订单语义标签对象 */
type ImprFeedIdDO struct {
	/* 存放主评和追评的评价标签信息
	biz_type(1:主评 2:追评) */
	FeedInfoList []*ImprFeedInfoDO `json:"feed_info_list>impr_feed_info_d_o"`

	/* 被评价者昵称 */
	Nick string `json:"nick"`

	/* 评价结果（1好评 0中评 -1差评） */
	Rate int64 `json:"rate"`
}

/* 满就送参与范围 */
type PromotionRange struct {
	/* 活动id。 */
	ActivityId int64 `json:"activity_id"`

	/* 活动名称。 */
	ActivityName string `json:"activity_name"`

	/* 参与活动的商品id。 */
	ItemId int64 `json:"item_id"`
}

/* 无条件单品优惠数据对象 */
type ItemPromotion struct {
	/* 活动id */
	ActivityId int64 `json:"activity_id"`

	/* 减多少钱。当is_decrease_money为true时，该值才有意义。注意：该值单位为分，即100表示1元。 */
	DecreaseAmount int64 `json:"decrease_amount"`

	/* 活动的有效条件、人群和行为描述。 */
	Description string `json:"description"`

	/* 折扣值。当is_discount为true时，该值才有意义。注意：800表示8折。 */
	DiscountRate int64 `json:"discount_rate"`

	/* 活动结束时间。 */
	EndTime string `json:"end_time"`

	/* 是否有减钱行为。 */
	IsDecreaseMoney bool `json:"is_decrease_money"`

	/* 是否有打折行为。 */
	IsDiscount bool `json:"is_discount"`

	/* 是否指定用户标签。 */
	IsUserTag bool `json:"is_user_tag"`

	/* 活动名称。 */
	Name string `json:"name"`

	/* 活动范围：0表示全部参与； 1表示部分商品参与。 */
	ParticipateRange int64 `json:"participate_range"`

	/* 活动开始时间。 */
	StartTime string `json:"start_time"`

	/* 用户标签。当is_user_tag为true时，该值才有意义。 */
	UserTag string `json:"user_tag"`
}

/* 属性输入特征DO */
type PropertyInputDO struct {
	/* property_id对应的属性是否可输入 */
	IsAllowInput bool `json:"is_allow_input"`

	/* 如果property_id对应的属性是子属性，is_root_allow_input标识该子属性的顶级父属性是否可输入。否则is_root_allow_input和is_allow_input
	值是一样的。目前只有品牌会出现父属性不可输入，子属性可输入的情况 */
	IsRootAllowInput bool `json:"is_root_allow_input"`

	/* property_id对应的属性是不是子属性 */
	IsSubProperty bool `json:"is_sub_property"`

	/* 属性ID */
	PropertyId int64 `json:"property_id"`
}

/* 物流宝订单，并且包含订单详情 */
type WlbOrderDetail struct {
	/* 如果是交易单，则显示交易中买家昵称 */
	BuyerNick string `json:"buyer_nick"`

	/* 订单创建时间 */
	CreateTime string `json:"create_time"`

	/* 是否已全部完成 */
	IsCompleted bool `json:"is_completed"`

	/* 订单最后一次修改时间 */
	ModifyTime string `json:"modify_time"`

	/* 出库或者入库，IN表示入库，OUT表示出库 */
	OperateType string `json:"operate_type"`

	/* 订单编码 */
	OrderCode string `json:"order_code"`

	/* 物流宝订单对应的商品详情 */
	OrderItemList []*WlbOrderItem `json:"order_item_list>wlb_order_item"`

	/* 订单来源:
	产生物流订单的原因，比如:

	订单来源:1:TAOBAO;2:EXT;3:ERP;4:WMS */
	OrderSource string `json:"order_source"`

	/* 对应创建物流宝订单top接口中的的out_biz_code字段，主要是用来去重用 */
	OrderSourceCode string `json:"order_source_code"`

	/* 物流状态，
	订单已创建：0
	订单已取消: -1
	订单关闭:-3
	下发中: 10
	已下发: 11
	接收方拒签 :-100
	已发货:100
	签收成功:200 */
	OrderStatus string `json:"order_status"`

	/* (1)其它:    OTHER
	(2)淘宝交易: TAOBAO
	(3)301:调拨: ALLOCATION
	(4)401:盘点:CHECK
	(5)501:销售采购:PRUCHASE */
	OrderSubType string `json:"order_sub_type"`

	/* 1:正常订单: NARMAL
	2:退货订单: RETURN
	3:换货订单: CHANGE */
	OrderType string `json:"order_type"`

	/* 订单备注 */
	Remark string `json:"remark"`

	/* 仓库编码 */
	StoreCode string `json:"store_code"`

	/* 卖家ID */
	UserId int64 `json:"user_id"`

	/* 卖家NICK */
	UserNick string `json:"user_nick"`
}

/* 同意退款返回结果 */
type RefundAgreeResponse struct {
	/* 退款结果消息 */
	Message string `json:"message"`

	/* 消息编码 */
	MsgCode string `json:"msg_code"`

	/* 退款中每个退款操作的结果信息 */
	Results []*RefundMappingResult `json:"results>refund_mapping_result"`

	/* 退款整体是否成功 */
	Success bool `json:"success"`
}

/* 同意退款返回值中一部分，退款编号与结果信息映射类 */
type RefundMappingResult struct {
	/* 结果信息 */
	Message string `json:"message"`

	/* 退款ID */
	RefundId int64 `json:"refund_id"`

	/* 是否成功 */
	Succ bool `json:"succ"`
}

/* 退款平台基础返回对象 */
type RefundBaseResponse struct {
	/* 返回的信息，包括成功和失败的具体信息 */
	Message string `json:"message"`

	/* 返回的信息编号 */
	MsgCode int64 `json:"msg_code"`

	/* 指示操作是否成功 */
	Success bool `json:"success"`
}

/* 满就送对象数据结构 */
type MjsPromotion struct {
	/* 活动id */
	ActivityId int64 `json:"activity_id"`

	/* 减多少钱。当is_decrease_money为true时，该值才有意义。注意：该值单位为分，即100表示1元。 */
	DecreaseAmount int64 `json:"decrease_amount"`

	/* 活动的有效条件、人群和行为描述。 */
	Description string `json:"description"`

	/* 折扣值。当is_discount为true时，该值才有意义。注意：800表示8折。 */
	DiscountRate int64 `json:"discount_rate"`

	/* 活动结束时间。 */
	EndTime string `json:"end_time"`

	/* 免邮的排除地区，即，除指定地区外，其他地区包邮。当is_free_post为true时，该值才有意义。代码使用*链接，代码为行政区划代码。 */
	ExcludeArea string `json:"exclude_area"`

	/* 礼品id，当is_send_gift为true时，该值才有意义。
	1）只有填写真实的淘宝商品id时，才能生成物流单，并且在确定订单的页面上可以点击该商品名称跳转到商品详情页面。2）当礼物为实物商品时(有宝贝id),礼物必须为上架商品,不能为虚拟商品,不能为拍卖商品,不能有sku,不符合条件的,不做为礼物。 */
	GiftId int64 `json:"gift_id"`

	/* 礼品名称。当is_send_gift为true时，该值才有意义。 */
	GiftName string `json:"gift_name"`

	/* 商品详情的url，当is_send_gift为true时，该值才有效。 */
	GiftUrl string `json:"gift_url"`

	/* 满元是否上不封顶。当is_amount_over为true时，该值才有意义。当该值为true时，表示满元上不封顶，例如满100元减10元，当满200时，则减20元。。。 */
	IsAmountMultiple bool `json:"is_amount_multiple"`

	/* 是否有满元条件。 */
	IsAmountOver bool `json:"is_amount_over"`

	/* 是否有减钱行为。 */
	IsDecreaseMoney bool `json:"is_decrease_money"`

	/* 是否有打折行为。 */
	IsDiscount bool `json:"is_discount"`

	/* 是否有免邮行为。 */
	IsFreePost bool `json:"is_free_post"`

	/* 是否有满件条件。 */
	IsItemCountOver bool `json:"is_item_count_over"`

	/* 满件是否上不封顶。当is_amount_multiple为true时，该值才有意义。当该值为true时，表示满件上不封顶，例如满10件减2元，当满20件时，则减4元。。。 */
	IsItemMultiple bool `json:"is_item_multiple"`

	/* 是否有送礼品行为。 */
	IsSendGift bool `json:"is_send_gift"`

	/* 是否有店铺会员等级条件。 */
	IsShopMember bool `json:"is_shop_member"`

	/* 是否指定用户标签。 */
	IsUserTag bool `json:"is_user_tag"`

	/* 满多少件。当is_item_count_over为true时，该值才有意义。 */
	ItemCount int64 `json:"item_count"`

	/* 活动名称。 */
	Name string `json:"name"`

	/* 活动范围：0表示全部参与； 1表示部分商品参与。 */
	ParticipateRange int64 `json:"participate_range"`

	/* 店铺会员等级，当is_shop_member为true时，该值才有意义。0：店铺客户；1：普通客户；2：高级会员；3：VIP会员； 4：至尊VIP会员。 */
	ShopMemberLevel int64 `json:"shop_member_level"`

	/* 活动开始时间。 */
	StartTime string `json:"start_time"`

	/* 满多少元。当is_amount_over为true时，该才字段有意义。注意：单位是分，即10000表示100元。 */
	TotalPrice int64 `json:"total_price"`

	/* 活动类型： 1表示商品级别的活动；2表示店铺级别的活动。 */
	Type int64 `json:"type"`

	/* 用户标签。当is_user_tag为true时，该值才有意义。 */
	UserTag string `json:"user_tag"`
}

/* 服务平台评价流水对象 */
type ScoreResult struct {
	/* 服务态度评分 */
	AttitudeScore string `json:"attitude_score"`

	/* 平均分 */
	AvgScore string `json:"avg_score"`

	/* 易用性评分 */
	EasyuseScore string `json:"easyuse_score"`

	/* 评价时间 */
	GmtCreate string `json:"gmt_create"`

	/* 评价id */
	Id int64 `json:"id"`

	/* 是否实际付费 1-实际付费 2-实际未付费 */
	IsPay int64 `json:"is_pay"`

	/* 是否为有效评分 1-有效评分 2-无效评分 */
	IsValid int64 `json:"is_valid"`

	/* 服务规格code */
	ItemCode string `json:"item_code"`

	/* 服务规格名称 */
	ItemName string `json:"item_name"`

	/* 描述相符 */
	MatchedScore string `json:"matched_score"`

	/* 专业性评分 */
	ProfScore string `json:"prof_score"`

	/* 交片速度 */
	RapidScore string `json:"rapid_score"`

	/* 服务code */
	ServiceCode string `json:"service_code"`

	/* 稳定性评分 */
	StabilityScore string `json:"stability_score"`

	/* 评论内容 */
	Suggestion string `json:"suggestion"`

	/* 评价人用户昵称 */
	UserNick string `json:"user_nick"`
}

/* 多媒体平台文件，包括文件的一些基本信息 */
type File struct {
	/* 申请cdn资源的分配的userId */
	CdnUserId int64 `json:"cdn_user_id"`

	/* 文件是否删除 */
	Deleted string `json:"deleted"`

	/* 该文件所属目录的目录编号 */
	DirId int64 `json:"dir_id"`

	/* 文件在多媒体平台的编号 */
	FileId int64 `json:"file_id"`

	/* 返回的是绝对路径如：http://img07.taobaocdn.com/imgextra/i7/22670458/T2dD0kXb4cXXXXXXXX_!!22670458.jpg */
	FilePath string `json:"file_path"`

	/* 创建时间 */
	GmtCreate string `json:"gmt_create"`

	/* 修改时间 */
	GmtModified string `json:"gmt_modified"`

	/* 文件内容修改时间 */
	Modified string `json:"modified"`

	/* 文件在多媒体平台的文件名称 */
	Name string `json:"name"`

	/* 图片像素，如果非图片，该值为空 */
	PicturePix string `json:"picture_pix"`

	/* 文件的大小 */
	Size int64 `json:"size"`

	/* 图片状态,unfroze代表没有被冻结，froze代表被冻结,pass代表排查通过 */
	Status string `json:"status"`
}

/* 子账号角色 */
type Role struct {
	/* 创建时间 */
	CreateTime string `json:"create_time"`

	/* 角色描述 */
	Description string `json:"description"`

	/* 修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 所拥有权限 */
	Permissions []*Permission `json:"permissions>permission"`

	/* 角色id */
	RoleId int64 `json:"role_id"`

	/* 角色名 */
	RoleName string `json:"role_name"`

	/* 卖家Id */
	SellerId int64 `json:"seller_id"`
}

/* 子账号所拥有的权限对象(直接赋予的权限和通过角色赋予的权限的总和对象) */
type SubUserPermission struct {
	/* 子账号被直接赋予的权限点列表 */
	Permissions []*Permission `json:"permissions>permission"`

	/* 子账号被赋予的角色信息(Role)列表。列表中的角色对象只有role_id，role_name，permissions信息 */
	Roles []*Role `json:"roles>role"`
}

/* 店铺级优惠信息 */
type PromotionInShop struct {
	/* 优惠活动名称 */
	Name string `json:"name"`

	/* 优惠详情描述。 */
	PromotionDetailDesc string `json:"promotion_detail_desc"`

	/* idValue值 */
	PromotionId string `json:"promotion_id"`
}

/* 优惠信息对象 */
type PromotionDisplayTop struct {
	/* 单品级优惠信息 */
	PromotionInItem []*PromotionInItem `json:"promotion_in_item>promotion_in_item"`

	/* 店铺级优惠信息 */
	PromotionInShop []*PromotionInShop `json:"promotion_in_shop>promotion_in_shop"`
}

/* 单品级优惠信息 */
type PromotionInItem struct {
	/* 优惠描述 */
	Desc string `json:"desc"`

	/* 优惠结束时间 */
	EndTime string `json:"end_time"`

	/* 优惠折后价格 */
	ItemPromoPrice float64 `json:"item_promo_price,string"`

	/* 优惠展示名称 */
	Name string `json:"name"`

	/* 需要支付附加物，显示为+xxx。如：+20淘金币 */
	OtherNeed string `json:"other_need"`

	/* 赠送东西。如：送10商城积分 */
	OtherSend string `json:"other_send"`

	/* idValue的值 */
	PromotionId string `json:"promotion_id"`

	/* sku价格对应的id（保证二者顺序相同） */
	SkuIdList []string `json:"sku_id_list"`

	/* sku价格列表 */
	SkuPriceList []float64 `json:"sku_price_list,string"`

	/* 优惠开始时间 */
	StartTime string `json:"start_time"`
}

/* 推荐的关联商品 */
type FavoriteItem struct {
	/* 商品名称 */
	ItemName string `json:"item_name"`

	/* 商品图片地址 */
	ItemPictrue string `json:"item_pictrue"`

	/* 商品价格 */
	ItemPrice float64 `json:"item_price,string"`

	/* 商品的详情页面地址 */
	ItemUrl string `json:"item_url"`

	/* 促销价格 */
	PromotionPrice float64 `json:"promotion_price,string"`

	/* 商品销售次数 */
	SellCount int64 `json:"sell_count"`

	/* 商品id（具有跟踪效果）代替原来的item_id  <a href="http://dev.open.taobao.com/bbs/read.php?tid=24323">详细说明</a> */
	TrackIid string `json:"track_iid"`
}

/* 推荐关联店铺信息 */
type FavoriteShop struct {
	/* 店铺卖家信用 */
	Rate int64 `json:"rate"`

	/* 卖家ID */
	SellerId int64 `json:"seller_id"`

	/* 卖家昵称 */
	SellerNick string `json:"seller_nick"`

	/* 店铺ID */
	ShopId int64 `json:"shop_id"`

	/* 店铺ID */
	ShopName string `json:"shop_name"`

	/* 店铺LOGO图片 */
	ShopPic string `json:"shop_pic"`

	/* 店铺首页链接 */
	ShopUrl string `json:"shop_url"`
}

/* 酒店图片 */
type HotelImage struct {
	/* 酒店id */
	Hid int64 `json:"hid"`

	/* 图片地址链接 */
	Pic string `json:"pic"`
}

/* 词预估信息 */
type KeywordForecast struct {
	/* 词ID */
	KeywordId int64 `json:"keyword_id"`

	/* 主人昵称 */
	Nick string `json:"nick"`

	/* 点击预估；根据出价预估点击量
	40:784,50:1007表示出价40分点击量为783；出价50分点击量为1007 */
	PriceClick string `json:"price_click"`

	/* 消耗预估；根据出价预估消耗。40:20,50:21表示出价40元分，消耗20分；出价50分消耗21分 */
	PriceCust string `json:"price_cust"`

	/* 排名预估;根据出价预估排名。
	40:101,41:101表示出价40分排名101位；出价41分排名101位 */
	PriceRank string `json:"price_rank"`

	/* 词名称 */
	Word string `json:"word"`
}

/* 类目出价预估信息 */
type ADGroupCatMatchForecast struct {
	/* 推广组ID */
	AdgroupId int64 `json:"adgroup_id"`

	/* 类目出价ID */
	CatmatchId int64 `json:"catmatch_id"`

	/* 昵称 */
	Nick string `json:"nick"`

	/* 点击预估；根据出价预估点击量 40:784,50:1007表示出价40分点击量为783；出价50分点击量为1007 */
	PriceClick string `json:"price_click"`

	/* 消耗预估；根据出价预估消耗。40:20,50:21表示出价40元分，消耗20分；出价50分消耗21分 */
	PriceCust string `json:"price_cust"`

	/* 排名预估;根据出价预估排名。 40:101,41:101表示出价40分排名101位；出价41分排名101位 */
	PriceRank string `json:"price_rank"`
}

/* 关键词质量得分 */
type KeywordQscore struct {
	/* 推广组id */
	AdgroupId int64 `json:"adgroup_id"`

	/* 推广计划id */
	CampaignId int64 `json:"campaign_id"`

	/* 创意得分 */
	CreativeScore string `json:"creative_score"`

	/* 基础分 */
	CustScore string `json:"cust_score"`

	/* 买家体验分 */
	CvrScore string `json:"cvr_score"`

	/* 关键词id */
	KeywordId int64 `json:"keyword_id"`

	/* 主人昵称 */
	Nick string `json:"nick"`

	/* 质量总分 */
	Qscore string `json:"qscore"`

	/* 相关性 */
	ReleScore string `json:"rele_score"`

	/* 关键词 */
	Word string `json:"word"`
}

/* 支付宝用户账户信息 */
type AlipayAccount struct {
	/* 支付宝用户ID */
	AlipayUserId string `json:"alipay_user_id"`

	/* 可用余额 */
	AvailableAmount float64 `json:"available_amount,string"`

	/* 不可用余额 */
	FreezeAmount float64 `json:"freeze_amount,string"`

	/* 余额总额 */
	TotalAmount float64 `json:"total_amount,string"`
}

/* 评价信息包括标签信息 */
type TmallRateInfo struct {
	/* 追加评价内容 */
	AppendContent string `json:"append_content"`

	/* 追评中是否含有负向标签 */
	AppendHasNegtv bool `json:"append_has_negtv"`

	/* 追加评价中带有的语义标签列表 */
	AppendTags []*TmallRateTag `json:"append_tags>tmall_rate_tag"`

	/* 追加评价时间 */
	AppendTime string `json:"append_time"`

	/* 评价时间 */
	CommentTime string `json:"comment_time"`

	/* 评价内容 */
	Content string `json:"content"`

	/* 原始评价是否含有负向标签 */
	HasNegtv bool `json:"has_negtv"`

	/* 原始评价对应的标签列表 */
	Tags []*TmallRateTag `json:"tags>tmall_rate_tag"`

	/* 表示评价者的昵称 */
	UserNick string `json:"user_nick"`
}

/* 用户订购信息 */
type AlipayContract struct {
	/* 支付宝用户ID */
	AlipayUserId string `json:"alipay_user_id"`

	/* 订购的应用名称，有效时间。 */
	ContractContent string `json:"contract_content"`

	/* 订购的失效时间 */
	EndTime string `json:"end_time"`

	/* 订购URL。在sign返回false时返回应用的订购地址，可以引导用户订购。 */
	PageUrl string `json:"page_url"`

	/* 订购的生效时间 */
	StartTime string `json:"start_time"`

	/* 是否订购的标识。true：代表已订购。 */
	Subscribe bool `json:"subscribe"`
}

/* 一页ADGroupCatMatch列表 */
type ADGroupCatMatchPage struct {
	/* 类目出价列表 */
	AdgroupCatmatchList []*ADGroupCatmatch `json:"adgroup_catmatch_list>a_d_group_catmatch"`

	/* 返回第几页的数据从1开始 */
	PageNo int64 `json:"page_no"`

	/* 每页数据大小 */
	PageSize int64 `json:"page_size"`

	/* 所查询的数据总数，只有当返回第一页数据时有值，当要求返回的数据非第一页时，此返回值无效 */
	TotalItem int64 `json:"total_item"`
}

/* 天猫评价标签对象 */
type TmallRateTag struct {
	/* 表示标签的极性，正极true，负极false */
	Posi bool `json:"posi"`

	/* 表示标签的名称 */
	TagName string `json:"tag_name"`
}

/* 天猫评价标签详细信息 */
type TmallRateTagDetail struct {
	/* 反应该标签的评价数量 */
	Count int64 `json:"count"`

	/* 标签的极性：1正极 -1负极 */
	Posi bool `json:"posi"`

	/* 标签名称 */
	TagName string `json:"tag_name"`
}

/* 支付宝用户冻结明细信息 */
type AccountFreeze struct {
	/* 冻结金额 */
	FreezeAmount float64 `json:"freeze_amount,string"`

	/* 冻结类型名称 */
	FreezeName string `json:"freeze_name"`

	/* 冻结类型值 */
	FreezeType string `json:"freeze_type"`
}

/* 支付宝交易明细 */
type TradeRecord struct {
	/* 支付宝订单号 */
	AlipayOrderNo string `json:"alipay_order_no"`

	/* 订单创建时间 */
	CreateTime string `json:"create_time"`

	/* 资金流入流程类型,in表示收入,out表示支出 */
	InOutType string `json:"in_out_type"`

	/* 商户订单号 */
	MerchantOrderNo string `json:"merchant_order_no"`

	/* 订单最后修改时间 */
	ModifiedTime string `json:"modified_time"`

	/* 对方支付宝登录号，需要隐藏 */
	OppositeLogonId string `json:"opposite_logon_id"`

	/* 对方姓名，需要隐藏 */
	OppositeName string `json:"opposite_name"`

	/* 对方支付宝账号 */
	OppositeUserId string `json:"opposite_user_id"`

	/* 订单来源，为空查询所有来源。淘宝(taobao)，支付宝(alipay)，其它(other) */
	OrderFrom string `json:"order_from"`

	/* 订单状态 */
	OrderStatus string `json:"order_status"`

	/* 订单的名称，描述订单的摘要信息，如交易的商品名称 */
	OrderTitle string `json:"order_title"`

	/* 订单类型 */
	OrderType string `json:"order_type"`

	/* 本方支付宝登录号，需要隐藏 */
	OwnerLogonId string `json:"owner_logon_id"`

	/* 本方姓名，需要隐藏 */
	OwnerName string `json:"owner_name"`

	/* 本方支付宝账号 */
	OwnerUserId string `json:"owner_user_id"`

	/* 订单服务费 */
	ServiceCharge float64 `json:"service_charge,string"`

	/* 订单总金额 */
	TotalAmount float64 `json:"total_amount,string"`
}

/* 批量同意退款结果对象 */
type RefundAgreeResult struct {
	/* 消息码 */
	Code int64 `json:"code"`

	/* 退款结果 */
	IsSuccess bool `json:"is_success"`

	/* 退款 */
	Message string `json:"message"`

	/* 退款id号 */
	RefundId int64 `json:"refund_id"`
}

/* 天猫搜索类目信息 */
type TmallCat struct {
	/* 搜索前台类目id */
	CatId int64 `json:"cat_id"`

	/* 搜索前台类目名字 */
	CatName string `json:"cat_name"`
}

/* 天猫搜索结果数据结构 */
type TmallSearchItem struct {
	/* 邮费 */
	FastPostFee float64 `json:"fast_post_fee,string"`

	/* 是否货到付款 */
	IsCod int64 `json:"is_cod"`

	/* 是否折扣 */
	IsPromotion bool `json:"is_promotion"`

	/* 搜索宝贝的数字id */
	ItemId int64 `json:"item_id"`

	/* 搜索宝贝的宝贝所在地 */
	Location string `json:"location"`

	/* 搜索宝贝的卖家昵称 */
	Nick string `json:"nick"`

	/* 搜索宝贝的图片url */
	PicPath string `json:"pic_path"`

	/* 搜索宝贝的一口价 */
	Price float64 `json:"price,string"`

	/* 搜索宝贝的一口价折扣价 */
	PriceWithRate float64 `json:"price_with_rate,string"`

	/* 搜索宝贝的卖家所在地 */
	SellerLoc string `json:"seller_loc"`

	/* 是否免邮 */
	Shipping int64 `json:"shipping"`

	/* 搜索宝贝的已售数量 */
	Sold string `json:"sold"`

	/* 搜索宝贝的spuid */
	SpuId int64 `json:"spu_id"`

	/* 搜索宝贝的标题 */
	Title string `json:"title"`

	/* 搜索宝贝url */
	Url string `json:"url"`

	/* 搜索宝贝的卖家数字id */
	UserId int64 `json:"user_id"`
}

/* 淘宝客商品 */
type TbkItem struct {
	/* 推广点击url */
	ClickUrl string `json:"click_url"`

	/* 商品url */
	ItemUrl string `json:"item_url"`

	/* 卖家昵称 */
	Nick string `json:"nick"`

	/* 淘宝客商品数字id */
	NumIid int64 `json:"num_iid"`

	/* 图片url */
	PicUrl string `json:"pic_url"`

	/* 商品价格 */
	Price float64 `json:"price,string"`

	/* 卖家id */
	SellerId int64 `json:"seller_id"`

	/* 店铺url */
	ShopUrl string `json:"shop_url"`

	/* 商品title 宝贝名称 */
	Title string `json:"title"`

	/* 30天内交易量 */
	Volume int64 `json:"volume"`
}

/* 产品分销商属性 */
type FenxiaoPdu struct {
	/* 分销商ID */
	DistributorId int64 `json:"distributor_id"`

	/* 分销商用户名 */
	DistributorName string `json:"distributor_name"`

	/* 产品ID */
	ProductId int64 `json:"product_id"`

	/* 产品代销配额库存 */
	QuantityAgent int64 `json:"quantity_agent"`

	/* 产品销售属性值 */
	SkuProperties string `json:"sku_properties"`
}

/* 淘宝客店铺 */
type TbkShop struct {
	/* 店铺推广URL */
	ClickUrl string `json:"click_url"`

	/* 店铺logo */
	PicUrl string `json:"pic_url"`

	/* 卖家昵称 */
	SellerNick string `json:"seller_nick"`

	/* 店铺名称 */
	ShopTitle string `json:"shop_title"`

	/* 店铺地址 */
	ShopUrl string `json:"shop_url"`

	/* 店铺用户id */
	UserId int64 `json:"user_id"`
}

/* rds创建、查询、删除返回结果数据结构 */
type RdsDbInfo struct {
	/* 数据库编码 */
	Charset string `json:"charset"`

	/* 备注 */
	Comment string `json:"comment"`

	/* 数据库id */
	DbId string `json:"db_id"`

	/* 数据库名称 */
	DbName string `json:"db_name"`

	/* 数据库状态 0：创建中 ；1：激活；3：正在删除 */
	DbStatus string `json:"db_status"`

	/* 数据库类型，mysql或者mssql */
	DbType string `json:"db_type"`

	/* rds实例id */
	InstanceId string `json:"instance_id"`

	/* rds实例名 */
	InstanceName string `json:"instance_name"`

	/* rds实例类型,s:共享型，x:专享型 */
	InstanceType string `json:"instance_type"`

	/* 最大帐号数，1个数据库最多可以创建的账户数目 */
	MaxAccount string `json:"max_account"`

	/* 数据库登录密码 */
	Password string `json:"password"`

	/* 用户id */
	Uid string `json:"uid"`

	/* 登录数据库的帐号 */
	UserName string `json:"user_name"`
}

/* 天猫搜索Minisite信息 */
type TmallMinisite struct {
	/* 店铺id */
	Id int64 `json:"id"`

	/* 店铺优惠信息 */
	Promotions string `json:"promotions"`

	/* 店铺名字 */
	Title string `json:"title"`

	/* 店铺类型 */
	Type int64 `json:"type"`
}

/* 天猫搜索品牌信息 */
type TmallBrand struct {
	/* 搜索品牌id */
	BrandId int64 `json:"brand_id"`

	/* 搜索品牌名字 */
	BrandName string `json:"brand_name"`
}

/* 天猫搜索特卖类目信息（查询二级类目用） */
type TmallTmCat struct {
	/* 特卖二级类目ID */
	SubCatId int64 `json:"sub_cat_id"`

	/* 特卖二级类目名称 */
	SubCatName string `json:"sub_cat_name"`
}

/* 天猫品牌特卖搜索结果数据结构 */
type TmallSearchTmItem struct {
	/* 宝贝所属品牌ID */
	BrandId int64 `json:"brand_id"`

	/* 宝贝所属品牌名称 */
	BrandName string `json:"brand_name"`

	/* 宝贝评论数 */
	CommentNum string `json:"comment_num"`

	/* 宝贝佣金比（%） */
	CommissionRate string `json:"commission_rate"`

	/* 搜索宝贝url */
	DetailUrl string `json:"detail_url"`

	/* 搜索宝贝的图片url */
	PicUrl string `json:"pic_url"`

	/* 搜索宝贝原价 */
	Price float64 `json:"price,string"`

	/* 搜索宝贝特卖价 */
	PromotionPrice float64 `json:"promotion_price,string"`

	/* 宝贝热门标签名称 */
	TagHot string `json:"tag_hot"`

	/* 宝贝限量标签名称 */
	TagLq string `json:"tag_lq"`

	/* 宝贝新品标签名称 */
	TagNew string `json:"tag_new"`

	/* 搜索宝贝的标题 */
	Title string `json:"title"`

	/* 商品id（具有跟踪效果）代替原来的num_iid  <a href="http://dev.open.taobao.com/bbs/read.php?tid=24323">详细说明</a> */
	TrackIid string `json:"track_iid"`

	/* 搜索宝贝的已售数量 （月销量） */
	Volume int64 `json:"volume"`
}

/* Appkey的站点导购数据 */
type SpmResult struct {
	/* appkey */
	AppKey string `json:"app_key"`

	/* 日期 */
	Date string `json:"date"`

	/* 该APP所使用的SPM第四位的报表数据 */
	SpmModules []*TopSpm `json:"spm_modules>top_spm"`

	/* 该APP所使用的SPM第三位的报表数据 */
	SpmPages []*TopSpm `json:"spm_pages>top_spm"`

	/* 该APP的整体报表数据 */
	SpmSite *TopSpm `json:"spm_site"`
}

/* 提供查询APPKey为淘宝带来成交以及流量 */
type TopSpm struct {
	/* 为淘宝带来的支付宝成交金额 */
	AlipayDealAmount string `json:"alipay_deal_amount"`

	/* 为淘宝带来的支付宝成交笔数 */
	AlipayDealCount int64 `json:"alipay_deal_count"`

	/* 为淘宝带来的支付宝成交人数 */
	AlipayUv int64 `json:"alipay_uv"`

	/* SPM第四位编码（默认为TOP系统自动生成的0-9数字，ISV可以自行更改编码，但建议使用数字） */
	Module string `json:"module"`

	/* SPM第三位编码（默认为TOP系统自动生成的0-9数字，ISV可以自行更改编码，但建议使用数字） */
	Page string `json:"page"`

	/* 为淘宝带来的PV */
	Pv int64 `json:"pv"`

	/* 为淘宝带来的UV */
	Uv int64 `json:"uv"`
}

/* 门票商品操作结果 */
type TicketItemProcessResult struct {
	/* 商品操作流程是否被迫终止。
	如果broken==false则表示成功发布商品，则通过item_id字段获取新生成商品id；
	如果broken==true则表示发布商品遇到问题，则通过broken_reasons字段获取到失败原因。 */
	Broken bool `json:"broken"`

	/* 操作商品遇到的错误原因 */
	BrokenReasons []string `json:"broken_reasons"`

	/* 成功操作的商品标识 */
	ItemId int64 `json:"item_id"`
}

/* 门票商品电子凭证信息 */
type TicketEtc struct {
	/* 商品电子凭证是否关联本地商户-在门票商品为电子凭证时必选 */
	AssociationStatus bool `json:"association_status"`

	/* 商品电子凭证的自动退款比例-在门票商品为电子凭证时必选 */
	AutoRefund int64 `json:"auto_refund"`

	/* 商品电子凭证的码商-在门票商品为电子凭证时必选 */
	MerchantId string `json:"merchant_id"`

	/* 商品电子凭证的码商名-在门票商品为电子凭证时必选 */
	MerchantNick string `json:"merchant_nick"`

	/* 商品电子凭证的码商-在门票商品为电子凭证时必选 */
	NetworkId string `json:"network_id"`

	/* 商品电子凭证的过期退款比例-在门票商品为电子凭证时必选 */
	OverduePay int64 `json:"overdue_pay"`

	/* 商品电子凭证是否核销打款-在门票商品为电子凭证时必选 */
	VerificationPay bool `json:"verification_pay"`
}

/* 新门票类目商品信息 */
type TicketItem struct {
	/* 商品返点比例（只对B卖家开放，单位为%） */
	AuctionPoint float64 `json:"auction_point,string"`

	/* 商品状态（onsale：上架，instock：仓库） */
	AuctionStatus string `json:"auction_status"`

	/* 类目标识 */
	CatId int64 `json:"cat_id"`

	/* 商品所在地-城市 */
	City string `json:"city"`

	/* 商品描述 */
	Description string `json:"description"`

	/* 商品对应的错误信息。针对get接口使用。 */
	ErrMsg string `json:"err_msg"`

	/* 商品电子凭证信息-在门票商品为电子凭证时必选 */
	Etc *TicketEtc `json:"etc"`

	/* 商品是否有发票（有发票为true，没有发票为false） */
	HaveInvoice bool `json:"have_invoice"`

	/* 商品主图 */
	Image1 string `json:"image_1"`

	/* 商品第一张多图 */
	Image2 string `json:"image_2"`

	/* 商品第二张多图 */
	Image3 string `json:"image_3"`

	/* 商品第三张多图 */
	Image4 string `json:"image_4"`

	/* 商品第四张多图 */
	Image5 string `json:"image_5"`

	/* 商品的标识 */
	ItemId int64 `json:"item_id"`

	/* 商品的上架时间（精确到分，格式为：yyyy-MM-dd HH:mm） */
	ListTime string `json:"list_time"`

	/* 商品的物流运费模板-在产品规格使用到物流时必选 */
	PostageId int64 `json:"postage_id"`

	/* 产品（具有产品规格的）标识 */
	ProductId int64 `json:"product_id"`

	/* 商品是否橱窗推荐（橱窗推荐；true，不推荐：false） */
	PromotedStatus bool `json:"promoted_status"`

	/* 商品所在地-省份 */
	Prov string `json:"prov"`

	/* 宝贝所属的店铺分类列表-店铺分类标识请使用店铺相关接口获取获取，多个店铺分类标识之间通过逗号进行分隔，最多包含10个分类标识 */
	ShopCats string `json:"shop_cats"`

	/* 参见taobao.ticket.item.add文档描述 */
	Skus string `json:"skus"`

	/* 商品是否为拍下减库存（拍下减库存为true，付款减库存为false） */
	SubStockAtBuy bool `json:"sub_stock_at_buy"`

	/* 商品标题 */
	Title string `json:"title"`

	/* 商品视频-视频标识由多媒体中相关接口获取 */
	VideoId int64 `json:"video_id"`

	/* 商品是否参与店铺会员打折 */
	VipPromoted bool `json:"vip_promoted"`
}

/*taobao.uic.weiboprofile.update*/
type UicWeiboprofileUpdateRequest struct {
	values url.Values
}

func (this *UicWeiboprofileUpdateRequest) GetApiMethodName() string {
	return "taobao.uic.weiboprofile.update"
}
func (this *UicWeiboprofileUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UicWeiboprofileUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 以map结构批量返回微博用户变更的属性。key:为新浪微博用户id,value:为该用户发生Profile变更的属性名，多个属性之间用逗号分隔，该接口一次最大接收条数不能超过100条。 */
func (this *UicWeiboprofileUpdateRequest) SetMap(value string) {
	this.Set("map", value)
}

type UicWeiboprofileUpdateResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	UicWeiboprofileUpdateResponseResult `json:"uic_weiboprofile_update_response"`
}
type UicWeiboprofileUpdateResponseResult struct {
	/* 1表示正常，2表示参数错误，3表示系统异常 */
	Result int64 `json:"result"`
}

/*taobao.user.buyer.get*/
type UserBuyerGetRequest struct {
	values url.Values
}

func (this *UserBuyerGetRequest) GetApiMethodName() string {
	return "taobao.user.buyer.get"
}
func (this *UserBuyerGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UserBuyerGetRequest) GetValues() url.Values {
	return this.values
}

/* 只返回nick, avatar参数 */
func (this *UserBuyerGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

type UserBuyerGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	UserBuyerGetResponseResult `json:"user_buyer_get_response"`
}
type UserBuyerGetResponseResult struct {
	/* 只返回nick,avatar参数 */
	User *User `json:"user"`
}

/*taobao.user.get*/
type UserGetRequest struct {
	values url.Values
}

func (this *UserGetRequest) GetApiMethodName() string {
	return "taobao.user.get"
}
func (this *UserGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UserGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表。可选值：User结构体中的所有字段；以半角逗号(,)分隔。需要用户授权才能获取用户对应的uid和user_id。 */
func (this *UserGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 用户昵称，如果昵称为中文，请使用UTF-8字符集对昵称进行URL编码。
<br><font color="red">注：在传入session的情况下,可以不传nick，表示取当前用户信息；否则nick必须传.<br>
自用型应用不需要传入nick
</font> */
func (this *UserGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type UserGetResponse struct {
	*ErrorResponse        `json:"error_response,omitempty"`
	UserGetResponseResult `json:"user_get_response"`
}
type UserGetResponseResult struct {
	/* 用户信息 */
	User *User `json:"user"`
}

/*taobao.user.seller.get*/
type UserSellerGetRequest struct {
	values url.Values
}

func (this *UserSellerGetRequest) GetApiMethodName() string {
	return "taobao.user.seller.get"
}
func (this *UserSellerGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UserSellerGetRequest) GetValues() url.Values {
	return this.values
}

/* 只返回user_id,nick,sex,seller_credit,type,has_more_pic,item_img_num,item_img_size,prop_img_num,prop_img_size,auto_repost,promoted_type,status,alipay_bind,consumer_protection,avatar,liangpin,sign_food_seller_promise,has_shop,is_lightning_consignment,has_sub_stock,is_golden_seller,vip_info,magazine_subscribe,vertical_market,online_gaming参数 */
func (this *UserSellerGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

type UserSellerGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	UserSellerGetResponseResult `json:"user_seller_get_response"`
}
type UserSellerGetResponseResult struct {
	/* 只返回user_id,nick,sex,seller_credit,type,has_more_pic,item_img_num,item_img_size,prop_img_num,prop_img_size,auto_repost,promoted_type,status,alipay_bind,consumer_protection,avatar,liangpin,sign_food_seller_promise,has_shop,is_lightning_consignment,has_sub_stock,is_golden_seller,vip_info,magazine_subscribe,vertical_market,online_gaming */
	User *User `json:"user"`
}

/*taobao.itemcats.authorize.get*/
type ItemcatsAuthorizeGetRequest struct {
	values url.Values
}

func (this *ItemcatsAuthorizeGetRequest) GetApiMethodName() string {
	return "taobao.itemcats.authorize.get"
}
func (this *ItemcatsAuthorizeGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemcatsAuthorizeGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要返回的字段。目前支持有：
brand.vid, brand.name,
item_cat.cid, item_cat.name, item_cat.status,item_cat.sort_order,item_cat.parent_cid,item_cat.is_parent,
xinpin_item_cat.cid,
xinpin_item_cat.name,
xinpin_item_cat.status,
xinpin_item_cat.sort_order,
xinpin_item_cat.parent_cid,
xinpin_item_cat.is_parent */
func (this *ItemcatsAuthorizeGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

type ItemcatsAuthorizeGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	ItemcatsAuthorizeGetResponseResult `json:"itemcats_authorize_get_response"`
}
type ItemcatsAuthorizeGetResponseResult struct {
	/* 里面有3个数组：
	Brand[]品牌列表,
	ItemCat[] 类目列表
	XinpinItemCat[] 针对于C卖家新品类目列表 */
	SellerAuthorize *SellerAuthorize `json:"seller_authorize"`
}

/*taobao.itemcats.get*/
type ItemcatsGetRequest struct {
	values url.Values
}

func (this *ItemcatsGetRequest) GetApiMethodName() string {
	return "taobao.itemcats.get"
}
func (this *ItemcatsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemcatsGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品所属类目ID列表，用半角逗号(,)分隔 例如:(18957,19562,) (cids、parent_cid至少传一个)<br /> 支持最大值为：9223372036854775807<br /> 支持最小值为：0 */
func (this *ItemcatsGetRequest) SetCids(value string) {
	this.Set("cids", value)
}

/* 需要返回的字段列表，见ItemCat，默认返回：cid,parent_cid,name,is_parent；增量类目信息,根据fields传入的参数返回相应的结果。 features字段： 1、如果存在attr_key=freeze表示该类目被冻结了，attr_value=0,5，value可能存在2个值（也可能只有1个），用逗号分割，0表示禁编辑，5表示禁止发布 */
func (this *ItemcatsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 父商品类目 id，0表示根节点, 传输该参数返回所有子类目。 (cids、parent_cid至少传一个)<br /> 支持最大值为：9223372036854775807<br /> 支持最小值为：0 */
func (this *ItemcatsGetRequest) SetParentCid(value string) {
	this.Set("parent_cid", value)
}

type ItemcatsGetResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	ItemcatsGetResponseResult `json:"itemcats_get_response"`
}
type ItemcatsGetResponseResult struct {
	/* 增量类目信息,根据fields传入的参数返回相应的结果；增量类目信息,根据fields传入的参数返回相应的结果。 features字段： 1、如果存在attr_key=freeze表示该类目被冻结了，attr_value=0,5，value可能存在2个值（也可能只有1个），用逗号分割，0表示禁编辑，5表示禁止发布 */
	ItemCats []*ItemCat `json:"item_cats"`
	/* 最近修改时间(如果取增量，会返回该字段)。格式:yyyy-MM-dd HH:mm:ss */
	LastModified string `json:"last_modified"`
}

/*taobao.itemprops.get*/
type ItempropsGetRequest struct {
	values url.Values
}

func (this *ItempropsGetRequest) GetApiMethodName() string {
	return "taobao.itemprops.get"
}
func (this *ItempropsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItempropsGetRequest) GetValues() url.Values {
	return this.values
}

/* 属性的Key，支持多条，以“,”分隔 */
func (this *ItempropsGetRequest) SetAttrKeys(value string) {
	this.Set("attr_keys", value)
}

/* 类目子属性路径,由该子属性上层的类目属性和类目属性值组成,格式pid:vid;pid:vid.取类目子属性需要传child_path,cid */
func (this *ItempropsGetRequest) SetChildPath(value string) {
	this.Set("child_path", value)
}

/* 叶子类目ID，如果只传cid，则只返回一级属性,通过taobao.itemcats.get获得叶子类目ID */
func (this *ItempropsGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 需要返回的字段列表，见：ItemProp，默认返回：pid, name, must, multi, prop_values */
func (this *ItempropsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 是否颜色属性。可选值:true(是),false(否) (删除的属性不会匹配和返回这个条件) */
func (this *ItempropsGetRequest) SetIsColorProp(value string) {
	this.Set("is_color_prop", value)
}

/* 是否枚举属性。可选值:true(是),false(否) (删除的属性不会匹配和返回这个条件)。如果返回true，属性值是下拉框选择输入，如果返回false，属性值是用户自行手工输入。 */
func (this *ItempropsGetRequest) SetIsEnumProp(value string) {
	this.Set("is_enum_prop", value)
}

/* 在is_enum_prop是true的前提下，是否是卖家可以自行输入的属性（注：如果is_enum_prop返回false，该参数统一返回false）。可选值:true(是),false(否) (删除的属性不会匹配和返回这个条件) */
func (this *ItempropsGetRequest) SetIsInputProp(value string) {
	this.Set("is_input_prop", value)
}

/* 是否商品属性，这个属性只能放于发布商品时使用。可选值:true(是),false(否) */
func (this *ItempropsGetRequest) SetIsItemProp(value string) {
	this.Set("is_item_prop", value)
}

/* 是否关键属性。可选值:true(是),false(否) */
func (this *ItempropsGetRequest) SetIsKeyProp(value string) {
	this.Set("is_key_prop", value)
}

/* 是否销售属性。可选值:true(是),false(否) */
func (this *ItempropsGetRequest) SetIsSaleProp(value string) {
	this.Set("is_sale_prop", value)
}

/* 父属性ID */
func (this *ItempropsGetRequest) SetParentPid(value string) {
	this.Set("parent_pid", value)
}

/* 属性id (取类目属性时，传pid，不用同时传PID和parent_pid) */
func (this *ItempropsGetRequest) SetPid(value string) {
	this.Set("pid", value)
}

/* 获取类目的类型：1代表集市、2代表天猫<br /> 支持最大值为：2<br /> 支持最小值为：1 */
func (this *ItempropsGetRequest) SetType(value string) {
	this.Set("type", value)
}

type ItempropsGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	ItempropsGetResponseResult `json:"itemprops_get_response"`
}
type ItempropsGetResponseResult struct {
	/* 类目属性信息(如果是取全量或者增量，不包括属性值),根据fields传入的参数返回相应的结果 */
	ItemProps []*ItemProp `json:"item_props"`
	/* 最近修改时间(只有取全量或增量的时候会返回该字段)。格式:yyyy-MM-dd HH:mm:ss */
	LastModified string `json:"last_modified"`
}

/*taobao.itempropvalues.get*/
type ItempropvaluesGetRequest struct {
	values url.Values
}

func (this *ItempropvaluesGetRequest) GetApiMethodName() string {
	return "taobao.itempropvalues.get"
}
func (this *ItempropvaluesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItempropvaluesGetRequest) GetValues() url.Values {
	return this.values
}

/* 属性的Key，支持多条，以“,”分隔 */
func (this *ItempropvaluesGetRequest) SetAttrKeys(value string) {
	this.Set("attr_keys", value)
}

/* 叶子类目ID ,通过taobao.itemcats.get获得叶子类目ID */
func (this *ItempropvaluesGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 需要返回的字段。目前支持有：cid,pid,prop_name,vid,name,name_alias,status,sort_order */
func (this *ItempropvaluesGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 属性和属性值 id串，格式例如(pid1;pid2)或(pid1:vid1;pid2:vid2)或(pid1;pid2:vid2) */
func (this *ItempropvaluesGetRequest) SetPvs(value string) {
	this.Set("pvs", value)
}

/* 获取类目的类型：1代表集市、2代表天猫<br /> 支持最大值为：2<br /> 支持最小值为：1 */
func (this *ItempropvaluesGetRequest) SetType(value string) {
	this.Set("type", value)
}

type ItempropvaluesGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	ItempropvaluesGetResponseResult `json:"itempropvalues_get_response"`
}
type ItempropvaluesGetResponseResult struct {
	/* 最近修改时间。格式:yyyy-MM-dd HH:mm:ss */
	LastModified string `json:"last_modified"`
	/* 属性值,根据fields传入的参数返回相应的结果 */
	PropValues []*PropValue `json:"prop_values"`
}

/*taobao.aftersale.get*/
type AftersaleGetRequest struct {
	values url.Values
}

func (this *AftersaleGetRequest) GetApiMethodName() string {
	return "taobao.aftersale.get"
}
func (this *AftersaleGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AftersaleGetRequest) GetValues() url.Values {
	return this.values
}

type AftersaleGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	AftersaleGetResponseResult `json:"aftersale_get_response"`
}
type AftersaleGetResponseResult struct {
	/* 售后服务返回对象 */
	AfterSales []*AfterSale `json:"after_sales"`
}

/*taobao.item.add*/
type ItemAddRequest struct {
	values url.Values
}

func (this *ItemAddRequest) GetApiMethodName() string {
	return "taobao.item.add"
}
func (this *ItemAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemAddRequest) GetValues() url.Values {
	return this.values
}

/* 售后说明模板id */
func (this *ItemAddRequest) SetAfterSaleId(value string) {
	this.Set("after_sale_id", value)
}

/* 商品上传后的状态。可选值:onsale(出售中),instock(仓库中);默认值:onsale */
func (this *ItemAddRequest) SetApproveStatus(value string) {
	this.Set("approve_status", value)
}

/* 商品的积分返点比例。如:5,表示:返点比例0.5%. 注意：返点比例必须是>0的整数，而且最大是90,即为9%.B商家在发布非虚拟商品时，返点必须是 5的倍数，即0.5%的倍数。其它是1的倍数，即0.1%的倍数。无名良品商家发布商品时，复用该字段记录积分宝返点比例，返点必须是对应类目的返点步长的整数倍，默认是5，即0.5%。注意此时该字段值依旧必须是>0的整数，最高值不超过500，即50% */
func (this *ItemAddRequest) SetAuctionPoint(value string) {
	this.Set("auction_point", value)
}

/* 代充商品类型。在代充商品的类目下，不传表示不标记商品类型（交易搜索中就不能通过标记搜到相关的交易了）。可选类型：
no_mark(不做类型标记)
time_card(点卡软件代充)
fee_card(话费软件代充) */
func (this *ItemAddRequest) SetAutoFill(value string) {
	this.Set("auto_fill", value)
}

/* 商品条形码 */
func (this *ItemAddRequest) SetBarcode(value string) {
	this.Set("barcode", value)
}

/* 商品基础色，数据格式为：pid:vid:rvid1,rvid2,rvid3;pid:vid:rvid1;
基础色只支持以下14种颜色：28335//绿色
28338//蓝色
90554//桔色
28324//黄色
28341//黑色
28320//白色
28326//红色
28329//紫色
3232480//粉红色
107121//透明
132069//褐色
28332//浅灰色
3232478//深灰色
130164//花色 */
func (this *ItemAddRequest) SetChangeProp(value string) {
	this.Set("change_prop", value)
}

/* 叶子类目id<br /> 支持最小值为：0 */
func (this *ItemAddRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 此为货到付款运费模板的ID，对应的JAVA类型是long,如果COD卖家应用了货到付款运费模板，此值要进行设置。
该字段已经废弃 */
func (this *ItemAddRequest) SetCodPostageId(value string) {
	this.Set("cod_postage_id", value)
}

/* 宝贝描述。字数要大于5个字符，小于25000个字符，受违禁词控制<br /> 支持最大长度为：200000<br /> 支持的最大列表长度为：200000 */
func (this *ItemAddRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 商品描述模块化，模块列表，具体数据结构参见Item_Desc_Module。详细的使用方法可参考下面FAQ中说明。 */
func (this *ItemAddRequest) SetDescModules(value string) {
	this.Set("desc_modules", value)
}

/* ems费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:25.07，表示:25元7分 */
func (this *ItemAddRequest) SetEmsFee(value string) {
	this.Set("ems_fee", value)
}

/* 快递费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:15.07，表示:15元7分 */
func (this *ItemAddRequest) SetExpressFee(value string) {
	this.Set("express_fee", value)
}

/* 厂家联系方式 */
func (this *ItemAddRequest) SetFoodSecurityContact(value string) {
	this.Set("food_security.contact", value)
}

/* 产品标准号 */
func (this *ItemAddRequest) SetFoodSecurityDesignCode(value string) {
	this.Set("food_security.design_code", value)
}

/* 厂名 */
func (this *ItemAddRequest) SetFoodSecurityFactory(value string) {
	this.Set("food_security.factory", value)
}

/* 厂址 */
func (this *ItemAddRequest) SetFoodSecurityFactorySite(value string) {
	this.Set("food_security.factory_site", value)
}

/* 食品添加剂 */
func (this *ItemAddRequest) SetFoodSecurityFoodAdditive(value string) {
	this.Set("food_security.food_additive", value)
}

/* 健字号，保健品/膳食营养补充剂 这个类目下特有的信息，此类目下无需填写生产许可证编号（QS），如果填写了生产许可证编号（QS）将被忽略不保存；保存宝贝时，标题前会自动加上健字号产品名称一起作为宝贝标题； */
func (this *ItemAddRequest) SetFoodSecurityHealthProductNo(value string) {
	this.Set("food_security.health_product_no", value)
}

/* 配料表 */
func (this *ItemAddRequest) SetFoodSecurityMix(value string) {
	this.Set("food_security.mix", value)
}

/* 保质期 */
func (this *ItemAddRequest) SetFoodSecurityPeriod(value string) {
	this.Set("food_security.period", value)
}

/* 储藏方法 */
func (this *ItemAddRequest) SetFoodSecurityPlanStorage(value string) {
	this.Set("food_security.plan_storage", value)
}

/* 生产许可证号 */
func (this *ItemAddRequest) SetFoodSecurityPrdLicenseNo(value string) {
	this.Set("food_security.prd_license_no", value)
}

/* 生产结束日期,格式必须为yyyy-MM-dd */
func (this *ItemAddRequest) SetFoodSecurityProductDateEnd(value string) {
	this.Set("food_security.product_date_end", value)
}

/* 生产开始日期，格式必须为yyyy-MM-dd */
func (this *ItemAddRequest) SetFoodSecurityProductDateStart(value string) {
	this.Set("food_security.product_date_start", value)
}

/* 进货结束日期，要在生产日期之后，格式必须为yyyy-MM-dd */
func (this *ItemAddRequest) SetFoodSecurityStockDateEnd(value string) {
	this.Set("food_security.stock_date_end", value)
}

/* 进货开始日期，要在生产日期之后，格式必须为yyyy-MM-dd */
func (this *ItemAddRequest) SetFoodSecurityStockDateStart(value string) {
	this.Set("food_security.stock_date_start", value)
}

/* 供货商 */
func (this *ItemAddRequest) SetFoodSecuritySupplier(value string) {
	this.Set("food_security.supplier", value)
}

/* 运费承担方式。可选值:seller（卖家承担）,buyer(买家承担);默认值:seller。卖家承担不用设置邮费和postage_id.买家承担的时候，必填邮费和postage_id
如果用户设置了运费模板会优先使用运费模板，否则要同步设置邮费（post_fee,express_fee,ems_fee） */
func (this *ItemAddRequest) SetFreightPayer(value string) {
	this.Set("freight_payer", value)
}

/* 全球购商品采购地（地区/国家）,默认值只在全球购商品采购地（库存类型选择情况生效），地区国家值为（美国, 香港, 日本, 英国, 新西兰, 德国, 韩国, 荷兰, 澳洲, 法国, 意大利, 台湾, 澳门, 加拿大, 瑞士, 西班牙, 泰国, 新加坡, 马来西亚, 菲律宾, 其他）<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *ItemAddRequest) SetGlobalStockCountry(value string) {
	this.Set("global_stock_country", value)
}

/* 全球购商品采购地（库存类型），
有两种库存类型：现货和代购
参数值为1时代表现货，值为2时代表代购。注意：使用时请与 全球购商品采购地（地区/国家）配合使用 */
func (this *ItemAddRequest) SetGlobalStockType(value string) {
	this.Set("global_stock_type", value)
}

/* 支持会员打折。可选值:true,false;默认值:false(不打折) */
func (this *ItemAddRequest) SetHasDiscount(value string) {
	this.Set("has_discount", value)
}

/* 是否有发票。可选值:true,false (商城卖家此字段必须为true);默认值:false(无发票) */
func (this *ItemAddRequest) SetHasInvoice(value string) {
	this.Set("has_invoice", value)
}

/* 橱窗推荐。可选值:true,false;默认值:false(不推荐) */
func (this *ItemAddRequest) SetHasShowcase(value string) {
	this.Set("has_showcase", value)
}

/* 是否有保修。可选值:true,false;默认值:false(不保修) */
func (this *ItemAddRequest) SetHasWarranty(value string) {
	this.Set("has_warranty", value)
}

/* 商品主图片。类型:JPG,GIF;最大长度:500K<br /> 支持的文件类型为：gif,jpg,jpeg,png<br /> 支持的最大列表长度为：524288 */
func (this *ItemAddRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 加价(降价)幅度。如果为0，代表系统代理幅度。对于增价拍和荷兰拍来说是加价幅度，对于降价拍来说是降价幅度。 */
func (this *ItemAddRequest) SetIncrement(value string) {
	this.Set("increment", value)
}

/* 用户自行输入的类目属性ID串。结构："pid1,pid2,pid3"，如："20000"（表示品牌） 注：通常一个类目下用户可输入的关键属性不超过1个。 */
func (this *ItemAddRequest) SetInputPids(value string) {
	this.Set("input_pids", value)
}

/* 用户自行输入的子属性名和属性值，结构:"父属性值;一级子属性名;一级子属性值;二级子属性名;自定义输入值,....",如：“耐克;耐克系列;科比系列;科比系列;2K5,Nike乔丹鞋;乔丹系列;乔丹鞋系列;乔丹鞋系列;json5”，多个自定义属性用','分割，input_str需要与input_pids一一对应，注：通常一个类目下用户可输入的关键属性不超过1个。所有属性别名加起来不能超过3999字节 */
func (this *ItemAddRequest) SetInputStr(value string) {
	this.Set("input_str", value)
}

/* 是否是3D */
func (this *ItemAddRequest) SetIs3D(value string) {
	this.Set("is_3D", value)
}

/* 是否在外店显示 */
func (this *ItemAddRequest) SetIsEx(value string) {
	this.Set("is_ex", value)
}

/* 实物闪电发货 */
func (this *ItemAddRequest) SetIsLightningConsignment(value string) {
	this.Set("is_lightning_consignment", value)
}

/* 是否是线下商品。 1：线上商品（默认值）； 2：线上或线下商品； 3：线下商品。 */
func (this *ItemAddRequest) SetIsOffline(value string) {
	this.Set("is_offline", value)
}

/* 是否在淘宝上显示（如果传FALSE，则在淘宝主站无法显示该商品） */
func (this *ItemAddRequest) SetIsTaobao(value string) {
	this.Set("is_taobao", value)
}

/* 商品是否为新品。只有在当前类目开通新品,并且当前用户拥有该类目下发布新品权限时才能设置is_xinpin为true，否则设置true后会返回错误码:isv.invalid-permission:add-xinpin。同时只有一口价全新的宝贝才能设置为新品，否则会返回错误码：isv.invalid-parameter:xinpin。不设置该参数值或设置为false效果一致。 */
func (this *ItemAddRequest) SetIsXinpin(value string) {
	this.Set("is_xinpin", value)
}

/* 表示商品的体积，如果需要使用按体积计费的运费模板，一定要设置这个值。该值的单位为立方米（m3），如果是其他单位，请转换成成立方米。
该值支持两种格式的设置：格式1：bulk:3,单位为立方米(m3),表示直接设置为商品的体积。格式2：length:10;breadth:10;height:10，单位为米（m）。体积和长宽高都支持小数类型。
在传入体积或长宽高时候，不能带单位。体积的单位默认为立方米（m3），长宽高的单位默认为米(m)
该值支持两种格式的设置：格式1：bulk:3,单位为立方米(m3),表示直接设置为商品的体积。格式2：length:10;breadth:10;height:10，单位为米（m） */
func (this *ItemAddRequest) SetItemSize(value string) {
	this.Set("item_size", value)
}

/* 商品的重量，用于按重量计费的运费模板。注意：单位为kg。
只能传入数值类型（包含小数），不能带单位，单位默认为kg。 */
func (this *ItemAddRequest) SetItemWeight(value string) {
	this.Set("item_weight", value)
}

/* 商品文字的字符集。繁体传入"zh_HK"，简体传入"zh_CN"，不传默认为简体 */
func (this *ItemAddRequest) SetLang(value string) {
	this.Set("lang", value)
}

/* 定时上架时间。(时间格式：yyyy-MM-dd HH:mm:ss) */
func (this *ItemAddRequest) SetListTime(value string) {
	this.Set("list_time", value)
}

/* 发布电子凭证宝贝时候表示是否使用邮寄 0: 代表不使用邮寄； 1：代表使用邮寄；如果不设置这个值，代表不使用邮寄 */
func (this *ItemAddRequest) SetLocalityLifeChooseLogis(value string) {
	this.Set("locality_life.choose_logis", value)
}

/* 本地生活电子交易凭证业务，目前此字段只涉及到的信息为有效期;
如果有效期为起止日期类型，此值为2012-08-06,2012-08-16
如果有效期为【购买成功日 至】类型则格式为2012-08-16
如果有效期为天数类型则格式为15 */
func (this *ItemAddRequest) SetLocalityLifeExpirydate(value string) {
	this.Set("locality_life.expirydate", value)
}

/* 码商信息，格式为 码商id:nick */
func (this *ItemAddRequest) SetLocalityLifeMerchant(value string) {
	this.Set("locality_life.merchant", value)
}

/* 网点ID */
func (this *ItemAddRequest) SetLocalityLifeNetworkId(value string) {
	this.Set("locality_life.network_id", value)
}

/* 电子凭证售中自动退款比例，百分比%前的数字，介于1-100之间的整数 */
func (this *ItemAddRequest) SetLocalityLifeOnsaleAutoRefundRatio(value string) {
	this.Set("locality_life.onsale_auto_refund_ratio", value)
}

/* 退款比例，
百分比%前的数字,1-100的正整数值 */
func (this *ItemAddRequest) SetLocalityLifeRefundRatio(value string) {
	this.Set("locality_life.refund_ratio", value)
}

/* 退款码费承担方。发布电子凭证宝贝的时候会增加“退款码费承担方”配置项，可选填：(1)s（卖家承担） (2)b(买家承担) */
func (this *ItemAddRequest) SetLocalityLifeRefundmafee(value string) {
	this.Set("locality_life.refundmafee", value)
}

/* 核销打款
1代表核销打款 0代表非核销打款 */
func (this *ItemAddRequest) SetLocalityLifeVerification(value string) {
	this.Set("locality_life.verification", value)
}

/* 所在地城市。如杭州 。 */
func (this *ItemAddRequest) SetLocationCity(value string) {
	this.Set("location.city", value)
}

/* 所在地省份。如浙江 */
func (this *ItemAddRequest) SetLocationState(value string) {
	this.Set("location.state", value)
}

/* 该宝贝是否支持【7天无理由退货】，卖家选择的值只是一个因素，最终以类目和选择的属性条件来确定是否支持7天。填入字符0，表示不支持；未填写或填人字符1，表示支持7天无理由退货； */
func (this *ItemAddRequest) SetNewprepay(value string) {
	this.Set("newprepay", value)
}

/* 商品数量。取值范围:0-900000000的整数。且需要等于Sku所有数量的和。
拍卖商品中增加拍只能为1，荷兰拍要在[2,500)范围内。<br /> 支持最大值为：900000000<br /> 支持最小值为：0 */
func (this *ItemAddRequest) SetNum(value string) {
	this.Set("num", value)
}

/* 商品外部编码，该字段的最大长度是64个字节 */
func (this *ItemAddRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 拍卖宝贝的保证金。对于增价拍和荷兰拍来说保证金有两种模式：淘宝默认模式（首次出价金额的10%），自定义固定保证金（固定冻结金额只能输入不超过30万的正整数），并且保证金只冻结1次。对于降价拍来说保证金只有淘宝默认的（竞拍价格的10% * 竞拍数量），并且每次出价都需要冻结保证金。
对于拍卖宝贝来说，保证金是必须的，但是默认使用淘宝默认保证金模式，只有用户需要使用自定义固定保证金的时候才需要使用到这个参数，如果该参数不传或传入0则代表使用默认。 */
func (this *ItemAddRequest) SetPaimaiInfoDeposit(value string) {
	this.Set("paimai_info.deposit", value)
}

/* 降价拍宝贝的降价周期(分钟)。降价拍宝贝的价格每隔paimai_info.interval时间会下降一次increment。<br /> 支持最大值为：60<br /> 支持最小值为：1 */
func (this *ItemAddRequest) SetPaimaiInfoInterval(value string) {
	this.Set("paimai_info.interval", value)
}

/* 拍卖商品选择的拍卖类型，拍卖类型包括三种：增价拍(1)，荷兰拍(2)和降价拍(3)。<br /> 支持最大值为：3<br /> 支持最小值为：1 */
func (this *ItemAddRequest) SetPaimaiInfoMode(value string) {
	this.Set("paimai_info.mode", value)
}

/* 降价拍宝贝的保留价。对于降价拍来说，paimai_info.reserve必须大于0，且小于price-increment，而且（price-paimai_info.reserve）/increment的计算结果必须为整数 */
func (this *ItemAddRequest) SetPaimaiInfoReserve(value string) {
	this.Set("paimai_info.reserve", value)
}

/* 自定义销售周期的小时数。拍卖宝贝可以自定义销售周期，这里指定销售周期的小时数。注意，该参数只作为输入参数，不能通过taobao.item.get接口获取。<br /> 支持最大值为：48<br /> 支持最小值为：1 */
func (this *ItemAddRequest) SetPaimaiInfoValidHour(value string) {
	this.Set("paimai_info.valid_hour", value)
}

/* 自定义销售周期的分钟数。拍卖宝贝可以自定义销售周期，这里是指定销售周期的分钟数。自定义销售周期的小时数。拍卖宝贝可以自定义销售周期，这里指定销售周期的小时数。注意，该参数只作为输入参数，不能通过taobao.item.get接口获取。<br /> 支持最大值为：59<br /> 支持最小值为：0 */
func (this *ItemAddRequest) SetPaimaiInfoValidMinute(value string) {
	this.Set("paimai_info.valid_minute", value)
}

/* 商品主图需要关联的图片空间的相对url。这个url所对应的图片必须要属于当前用户。pic_path和image只需要传入一个,如果两个都传，默认选择pic_path */
func (this *ItemAddRequest) SetPicPath(value string) {
	this.Set("pic_path", value)
}

/* 平邮费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:5.07，表示:5元7分. 注:post_fee,express_fee,ems_fee需要一起填写 */
func (this *ItemAddRequest) SetPostFee(value string) {
	this.Set("post_fee", value)
}

/* 宝贝所属的运费模板ID。取值范围：整数且必须是该卖家的运费模板的ID（可通过taobao.delivery.template.get获得当前会话用户的所有邮费模板） */
func (this *ItemAddRequest) SetPostageId(value string) {
	this.Set("postage_id", value)
}

/* 商品价格。取值范围:0-100000000;精确到2位小数;单位:元。如:200.07，表示:200元7分。需要在正确的价格区间内。
拍卖商品对应的起拍价。 */
func (this *ItemAddRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 商品所属的产品ID(B商家发布商品需要用) */
func (this *ItemAddRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 属性值别名。如pid:vid:别名;pid1:vid1:别名1 ，其中：pid是属性id vid是属性值id。总长度不超过800字节<br /> 支持最大长度为：800<br /> 支持的最大列表长度为：800 */
func (this *ItemAddRequest) SetPropertyAlias(value string) {
	this.Set("property_alias", value)
}

/* 商品属性列表。格式:pid:vid;pid:vid。属性的pid调用taobao.itemprops.get取得，属性值的vid用taobao.itempropvalues.get取得vid。 如果该类目下面没有属性，可以不用填写。如果有属性，必选属性必填，其他非必选属性可以选择不填写.属性不能超过35对。所有属性加起来包括分割符不能超过549字节，单个属性没有限制。 如果有属性是可输入的话，则用字段input_str填入属性的值 */
func (this *ItemAddRequest) SetProps(value string) {
	this.Set("props", value)
}

/* 景区门票在选择订金支付时候，需要交的预订费。传入的值是1到20之间的数值，小数点后最多可以保留两位（多余的部分将做四舍五入的处理）。这个数值表示的是预订费的比例，最终的预订费为 scenic_ticket_book_cost乘一口价除以100 */
func (this *ItemAddRequest) SetScenicTicketBookCost(value string) {
	this.Set("scenic_ticket_book_cost", value)
}

/* 景区门票类宝贝发布时候，当卖家签订了支付宝代扣协议时候，需要选择支付方式：全额支付和订金支付。当scenic_ticket_pay_way为1时表示全额支付，为2时表示订金支付 */
func (this *ItemAddRequest) SetScenicTicketPayWay(value string) {
	this.Set("scenic_ticket_pay_way", value)
}

/* 商品卖点信息，最长150个字符。天猫商家和集市卖家都可用。<br /> 支持最大长度为：150<br /> 支持的最大列表长度为：150 */
func (this *ItemAddRequest) SetSellPoint(value string) {
	this.Set("sell_point", value)
}

/* 是否承诺退换货服务!虚拟商品无须设置此项! */
func (this *ItemAddRequest) SetSellPromise(value string) {
	this.Set("sell_promise", value)
}

/* 商品所属的店铺类目列表。按逗号分隔。结构:",cid1,cid2,...,"，如果店铺类目存在二级类目，必须传入子类目cids。 */
func (this *ItemAddRequest) SetSellerCids(value string) {
	this.Set("seller_cids", value)
}

/* sku层面的条形码，多个SKU情况，与SKU价格库存格式类似，用逗号分隔 */
func (this *ItemAddRequest) SetSkuBarcode(value string) {
	this.Set("sku_barcode", value)
}

/* Sku的外部id串，结构如：1234,1342,…
sku_properties, sku_quantities, sku_prices, sku_outer_ids在输入数据时要一一对应，如果没有sku_outer_ids也要写上这个参数，入参是","(这个是两个sku的示列，逗号数应该是sku个数减1)；该参数最大长度是512个字节 */
func (this *ItemAddRequest) SetSkuOuterIds(value string) {
	this.Set("sku_outer_ids", value)
}

/* Sku的价格串，结构如：10.00,5.00,… 精确到2位小数;单位:元。如:200.07，表示:200元7分 */
func (this *ItemAddRequest) SetSkuPrices(value string) {
	this.Set("sku_prices", value)
}

/* 更新的Sku的属性串，调用taobao.itemprops.get获取类目属性，如果属性是销售属性，再用taobao.itempropvalues.get取得vid。格式:一个SKU的pid1:vid;pid2:vid,多个sku之间属性用逗号分隔。该字段内的销售属性（自定义的除外）也需要在props字段填写。sku的销售属性需要一同选取，如:颜色，尺寸。如果新增商品包含了sku，则此字段一定要传入。这个字段的长度要控制在512个字节以内。
如果有自定义销售属性，则格式为pid:vid;pid2:vid2;$pText:vText , 其中$pText:vText为自定义属性。限制：其中$pText的’$’前缀不能少，且pText和vText文本中不可以存在冒号:和分号;以及逗号， */
func (this *ItemAddRequest) SetSkuProperties(value string) {
	this.Set("sku_properties", value)
}

/* Sku的数量串，结构如：num1,num2,num3 如：2,3 */
func (this *ItemAddRequest) SetSkuQuantities(value string) {
	this.Set("sku_quantities", value)
}

/* 此参数暂时不起作用 */
func (this *ItemAddRequest) SetSkuSpecIds(value string) {
	this.Set("sku_spec_ids", value)
}

/* 新旧程度。可选值：new(新)，second(二手)，unused(闲置)。B商家不能发布二手商品。
如果是二手商品，特定类目下属性里面必填新旧成色属性 */
func (this *ItemAddRequest) SetStuffStatus(value string) {
	this.Set("stuff_status", value)
}

/* 商品是否支持拍下减库存:1支持;2取消支持(付款减库存);0(默认)不更改
集市卖家默认拍下减库存;
商城卖家默认付款减库存 */
func (this *ItemAddRequest) SetSubStock(value string) {
	this.Set("sub_stock", value)
}

/* 宝贝标题。不能超过30字符，受违禁词控制。天猫图书管控类目最大允许120字符；<br /> 支持最大长度为：120<br /> 支持的最大列表长度为：120 */
func (this *ItemAddRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 发布类型。可选值:fixed(一口价),auction(拍卖)。B商家不能发布拍卖商品，而且拍卖商品是没有SKU的。
拍卖商品发布时需要附加拍卖商品信息：拍卖类型(paimai_info.mode，拍卖类型包括三种：增价拍[1]，荷兰拍[2]以及降价拍[3])，商品数量(num)，起拍价(price)，价格幅度(increament)，保证金(paimai_info.deposit)。另外拍卖商品支持自定义销售周期，通过paimai_info.valid_hour和paimai_info.valid_minute来指定。对于降价拍来说需要设置降价周期(paimai_info.interval)和拍卖保留价(paimai_info.reserve)。
注意：通过taobao.item.get接口获取拍卖信息时，会返回除了valid_hour和valid_minute之外的所有拍卖信息。 */
func (this *ItemAddRequest) SetType(value string) {
	this.Set("type", value)
}

/* 有效期。可选值:7,14;单位:天;默认值:14 */
func (this *ItemAddRequest) SetValidThru(value string) {
	this.Set("valid_thru", value)
}

/* 商品的重量(商超卖家专用字段) */
func (this *ItemAddRequest) SetWeight(value string) {
	this.Set("weight", value)
}

type ItemAddResponse struct {
	*ErrorResponse        `json:"error_response,omitempty"`
	ItemAddResponseResult `json:"item_add_response"`
}
type ItemAddResponseResult struct {
	/* 商品结构,仅有numIid和created返回 */
	Item *Item `json:"item"`
}

/*taobao.item.anchor.get*/
type ItemAnchorGetRequest struct {
	values url.Values
}

func (this *ItemAnchorGetRequest) GetApiMethodName() string {
	return "taobao.item.anchor.get"
}
func (this *ItemAnchorGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemAnchorGetRequest) GetValues() url.Values {
	return this.values
}

/* 对应类目编号 */
func (this *ItemAnchorGetRequest) SetCatId(value string) {
	this.Set("cat_id", value)
}

/* 宝贝模板类型是人工打标还是自动打标：人工打标为1，自动打标为0.人工和自动打标为-1.<br /> 支持最大值为：1<br /> 支持最小值为：-1 */
func (this *ItemAnchorGetRequest) SetType(value string) {
	this.Set("type", value)
}

type ItemAnchorGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	ItemAnchorGetResponseResult `json:"item_anchor_get_response"`
}
type ItemAnchorGetResponseResult struct {
	/* 宝贝描述规范化可使用打标模块的锚点信息 */
	AnchorModules []*IdsModule `json:"anchor_modules"`
	/* 返回的宝贝描述模板结果数目 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.item.barcode.update*/
type ItemBarcodeUpdateRequest struct {
	values url.Values
}

func (this *ItemBarcodeUpdateRequest) GetApiMethodName() string {
	return "taobao.item.barcode.update"
}
func (this *ItemBarcodeUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemBarcodeUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 是否强制保存商品条码。
true：强制保存
false ：需要执行条码库校验 */
func (this *ItemBarcodeUpdateRequest) SetIsforce(value string) {
	this.Set("isforce", value)
}

/* 商品条形码，如果不用更新，可选择不填 */
func (this *ItemBarcodeUpdateRequest) SetItemBarcode(value string) {
	this.Set("item_barcode", value)
}

/* 被更新商品的ID */
func (this *ItemBarcodeUpdateRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* SKU维度的条形码，和sku_ids字段一一对应，中间以英文逗号分隔 */
func (this *ItemBarcodeUpdateRequest) SetSkuBarcodes(value string) {
	this.Set("sku_barcodes", value)
}

/* 被更新SKU的ID列表，中间以英文逗号进行分隔。如果没有SKU或者不需要更新SKU的条形码，不需要设置 */
func (this *ItemBarcodeUpdateRequest) SetSkuIds(value string) {
	this.Set("sku_ids", value)
}

/* 访问来源，这字段提供给千牛扫码枪用，
其他调用方，不需要填写 */
func (this *ItemBarcodeUpdateRequest) SetSrc(value string) {
	this.Set("src", value)
}

type ItemBarcodeUpdateResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	ItemBarcodeUpdateResponseResult `json:"item_barcode_update_response"`
}
type ItemBarcodeUpdateResponseResult struct {
	/* 商品结构里的num_iid，modified */
	Item *Item `json:"item"`
}

/*taobao.item.cspu.move*/
type ItemCspuMoveRequest struct {
	values url.Values
}

func (this *ItemCspuMoveRequest) GetApiMethodName() string {
	return "taobao.item.cspu.move"
}
func (this *ItemCspuMoveRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemCspuMoveRequest) GetValues() url.Values {
	return this.values
}

/* 商品id，必填 */
func (this *ItemCspuMoveRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 如果商品存在sku信息，必须输入sku和cspu的映射关系，可以支持多个skuID对应一个cspuID。“-1”代替删除sku。反之不能填写 */
func (this *ItemCspuMoveRequest) SetSkuCspuMapping(value string) {
	this.Set("sku_cspu_mapping", value)
}

/* 商品有SKU信息并且类目配置了营销属性（如套餐），则必须填写sku和套餐的映射关系。并且sku套餐信息和sku_cspu_mapping传入的sku_id信息保持一致。反之，不需要填写， */
func (this *ItemCspuMoveRequest) SetSkuMealpropertyMapping(value string) {
	this.Set("sku_mealproperty_mapping", value)
}

/* 商品需要挂接的目产品ID，如果不填默认不修改产品ID,即商品本身对应的产品ID */
func (this *ItemCspuMoveRequest) SetSpuId(value string) {
	this.Set("spu_id", value)
}

type ItemCspuMoveResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	ItemCspuMoveResponseResult `json:"item_cspu_move_response"`
}
type ItemCspuMoveResponseResult struct {
	/* 商品结构里的num_iid，modified */
	Item *Item `json:"item"`
}

/*taobao.item.delete*/
type ItemDeleteRequest struct {
	values url.Values
}

func (this *ItemDeleteRequest) GetApiMethodName() string {
	return "taobao.item.delete"
}
func (this *ItemDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 商品数字ID，该参数必须<br /> 支持最小值为：0 */
func (this *ItemDeleteRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

type ItemDeleteResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	ItemDeleteResponseResult `json:"item_delete_response"`
}
type ItemDeleteResponseResult struct {
	/* 被删除商品的相关信息 */
	Item *Item `json:"item"`
}

/*taobao.item.ebook.serial.add*/
type ItemEbookSerialAddRequest struct {
	values url.Values
}

func (this *ItemEbookSerialAddRequest) GetApiMethodName() string {
	return "taobao.item.ebook.serial.add"
}
func (this *ItemEbookSerialAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemEbookSerialAddRequest) GetValues() url.Values {
	return this.values
}

/* 作者。长度不能超过60个字符<br /> 支持最大长度为：60<br /> 支持的最大列表长度为：60 */
func (this *ItemEbookSerialAddRequest) SetAuthor(value string) {
	this.Set("author", value)
}

/* 叶子类目id<br /> 支持最小值为：0 */
func (this *ItemEbookSerialAddRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 版权到期时间，如2013-08-06 */
func (this *ItemEbookSerialAddRequest) SetCopyrightEnd(value string) {
	this.Set("copyright_end", value)
}

/* 版权文件。不得小于350*500；类型:jpg,png；大小不能超过2M<br /> 支持的文件类型为：jpg,png<br /> 支持的最大列表长度为：2097152 */
func (this *ItemEbookSerialAddRequest) SetCopyrightFiles(value string) {
	this.Set("copyright_files", value)
}

/* 商品主图片。类型:JPG,PNG;最大:2M<br /> 支持的文件类型为：gif,jpg,jpeg,png<br /> 支持的最大列表长度为：2097152 */
func (this *ItemEbookSerialAddRequest) SetCover(value string) {
	this.Set("cover", value)
}

/* 宝贝描述。字数要大于5个字符，小于25000个字符，受违禁词控制<br /> 支持最大长度为：200000<br /> 支持的最大列表长度为：200000 */
func (this *ItemEbookSerialAddRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 书名。长度不能超过60个字符<br /> 支持最大长度为：60<br /> 支持的最大列表长度为：60 */
func (this *ItemEbookSerialAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 商品外部编码，该字段的最大长度是512个字节 */
func (this *ItemEbookSerialAddRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 不能为0；如：0.50元/章 或者 0.50元/千字；取值范围:0.01-9999.99;精确到2位小数;单位:元。如:5.07，表示:5元7分. */
func (this *ItemEbookSerialAddRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 相关链接。不超过128个字符 */
func (this *ItemEbookSerialAddRequest) SetRelationLink(value string) {
	this.Set("relation_link", value)
}

/* 售卖方式。目前取值范围0、1；
0：按章节售卖 1：按千字售卖 */
func (this *ItemEbookSerialAddRequest) SetSellWay(value string) {
	this.Set("sell_way", value)
}

/* 宝贝标题。不能超过60字符，受违禁词控制<br /> 支持最大长度为：120<br /> 支持的最大列表长度为：120 */
func (this *ItemEbookSerialAddRequest) SetTitle(value string) {
	this.Set("title", value)
}

type ItemEbookSerialAddResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	ItemEbookSerialAddResponseResult `json:"item_ebook_serial_add_response"`
}
type ItemEbookSerialAddResponseResult struct {
	/* 商品结构,仅有numIid和created返回 */
	Item *Item `json:"item"`
}

/*taobao.item.ebook.serial.update*/
type ItemEbookSerialUpdateRequest struct {
	values url.Values
}

func (this *ItemEbookSerialUpdateRequest) GetApiMethodName() string {
	return "taobao.item.ebook.serial.update"
}
func (this *ItemEbookSerialUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemEbookSerialUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 作者。长度不能超过60个字符<br /> 支持最大长度为：60<br /> 支持的最大列表长度为：60 */
func (this *ItemEbookSerialUpdateRequest) SetAuthor(value string) {
	this.Set("author", value)
}

/* 叶子类目id<br /> 支持最小值为：0 */
func (this *ItemEbookSerialUpdateRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 商品主图片。类型:JPG,PNG;最大:2M<br /> 支持的文件类型为：gif,jpg,jpeg,png<br /> 支持的最大列表长度为：524288 */
func (this *ItemEbookSerialUpdateRequest) SetCover(value string) {
	this.Set("cover", value)
}

/* 宝贝描述。字数要大于5个字符，小于25000个字符，受违禁词控制<br /> 支持最大长度为：200000<br /> 支持的最大列表长度为：200000 */
func (this *ItemEbookSerialUpdateRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 宝贝数字id */
func (this *ItemEbookSerialUpdateRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 书名。长度不能超过60个字符<br /> 支持最大长度为：60<br /> 支持的最大列表长度为：60 */
func (this *ItemEbookSerialUpdateRequest) SetName(value string) {
	this.Set("name", value)
}

/* 商品外部编码，该字段的最大长度是512个字节 */
func (this *ItemEbookSerialUpdateRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 不能为0；如：0.50元/章 或者 0.50元/千字；取值范围:0.01-9999.99;精确到2位小数;单位:元。如:5.07，表示:5元7分. */
func (this *ItemEbookSerialUpdateRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 相关链接。不超过128个字符 */
func (this *ItemEbookSerialUpdateRequest) SetRelationLink(value string) {
	this.Set("relation_link", value)
}

/* 宝贝标题。不能超过60字符，受违禁词控制<br /> 支持最大长度为：120<br /> 支持的最大列表长度为：120 */
func (this *ItemEbookSerialUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

type ItemEbookSerialUpdateResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	ItemEbookSerialUpdateResponseResult `json:"item_ebook_serial_update_response"`
}
type ItemEbookSerialUpdateResponseResult struct {
	/* 商品结构里的num_iid，modified */
	Item *Item `json:"item"`
}

/*taobao.item.get*/
type ItemGetRequest struct {
	values url.Values
}

func (this *ItemGetRequest) GetApiMethodName() string {
	return "taobao.item.get"
}
func (this *ItemGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要返回的商品对象字段，如title,price,desc_modules等。可选值：Item商品结构体中所有字段均可返回；多个字段用“,”分隔。<br>新增返回字段：item_weight(商品的重量，格式为数字，包含小数)、item_size(商品的体积，格式为数字，包含小数)、change_prop（商品基础色数据） */
func (this *ItemGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 商品数字ID<br /> 支持最小值为：1 */
func (this *ItemGetRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* 商品数字ID(带有跟踪效果) */
func (this *ItemGetRequest) SetTrackIid(value string) {
	this.Set("track_iid", value)
}

type ItemGetResponse struct {
	*ErrorResponse        `json:"error_response,omitempty"`
	ItemGetResponseResult `json:"item_get_response"`
}
type ItemGetResponseResult struct {
	/* 获取的商品 具体字段根据权限和设定的fields决定 */
	Item *Item `json:"item"`
}

/*taobao.item.img.delete*/
type ItemImgDeleteRequest struct {
	values url.Values
}

func (this *ItemImgDeleteRequest) GetApiMethodName() string {
	return "taobao.item.img.delete"
}
func (this *ItemImgDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemImgDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 商品图片ID */
func (this *ItemImgDeleteRequest) SetId(value string) {
	this.Set("id", value)
}

/* 商品数字ID，必选<br /> 支持最小值为：0 */
func (this *ItemImgDeleteRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

type ItemImgDeleteResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	ItemImgDeleteResponseResult `json:"item_img_delete_response"`
}
type ItemImgDeleteResponseResult struct {
	/* 商品图片结构 */
	ItemImg *ItemImg `json:"item_img"`
}

/*taobao.item.img.upload*/
type ItemImgUploadRequest struct {
	values url.Values
}

func (this *ItemImgUploadRequest) GetApiMethodName() string {
	return "taobao.item.img.upload"
}
func (this *ItemImgUploadRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemImgUploadRequest) GetValues() url.Values {
	return this.values
}

/* 商品图片id(如果是更新图片，则需要传该参数) */
func (this *ItemImgUploadRequest) SetId(value string) {
	this.Set("id", value)
}

/* 商品图片内容类型:JPG,GIF;最大:500KB 。支持的文件类型：gif,jpg,jpeg,png<br /> 支持的文件类型为：gif,jpg,jpeg,png,bmp<br /> 支持的最大列表长度为：1048576 */
func (this *ItemImgUploadRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 是否将该图片设为主图,可选值:true,false;默认值:false(非主图) */
func (this *ItemImgUploadRequest) SetIsMajor(value string) {
	this.Set("is_major", value)
}

/* 商品数字ID，该参数必须<br /> 支持最小值为：0 */
func (this *ItemImgUploadRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* 图片序号 */
func (this *ItemImgUploadRequest) SetPosition(value string) {
	this.Set("position", value)
}

type ItemImgUploadResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	ItemImgUploadResponseResult `json:"item_img_upload_response"`
}
type ItemImgUploadResponseResult struct {
	/* 商品图片结构 */
	ItemImg *ItemImg `json:"item_img"`
}

/*taobao.item.joint.img*/
type ItemJointImgRequest struct {
	values url.Values
}

func (this *ItemJointImgRequest) GetApiMethodName() string {
	return "taobao.item.joint.img"
}
func (this *ItemJointImgRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemJointImgRequest) GetValues() url.Values {
	return this.values
}

/* 商品图片id(如果是更新图片，则需要传该参数) */
func (this *ItemJointImgRequest) SetId(value string) {
	this.Set("id", value)
}

/* 上传的图片是否关联为商品主图（如果需更新主图，则需要传人true） */
func (this *ItemJointImgRequest) SetIsMajor(value string) {
	this.Set("is_major", value)
}

/* 商品数字ID，必选<br /> 支持最小值为：0 */
func (this *ItemJointImgRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* 图片URL,图片空间图片的相对地址 */
func (this *ItemJointImgRequest) SetPicPath(value string) {
	this.Set("pic_path", value)
}

/* 图片序号 */
func (this *ItemJointImgRequest) SetPosition(value string) {
	this.Set("position", value)
}

type ItemJointImgResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	ItemJointImgResponseResult `json:"item_joint_img_response"`
}
type ItemJointImgResponseResult struct {
	/* 商品图片信息 */
	ItemImg *ItemImg `json:"item_img"`
}

/*taobao.item.joint.propimg*/
type ItemJointPropimgRequest struct {
	values url.Values
}

func (this *ItemJointPropimgRequest) GetApiMethodName() string {
	return "taobao.item.joint.propimg"
}
func (this *ItemJointPropimgRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemJointPropimgRequest) GetValues() url.Values {
	return this.values
}

/* 属性图片ID。如果是新增不需要填写 */
func (this *ItemJointPropimgRequest) SetId(value string) {
	this.Set("id", value)
}

/* 商品数字ID，必选<br /> 支持最小值为：0 */
func (this *ItemJointPropimgRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* 图片地址(传入图片相对地址即可,即不需包含 http://img02.taobao.net/bao/uploaded ) */
func (this *ItemJointPropimgRequest) SetPicPath(value string) {
	this.Set("pic_path", value)
}

/* 图片序号 */
func (this *ItemJointPropimgRequest) SetPosition(value string) {
	this.Set("position", value)
}

/* 属性列表。调用taobao.itemprops.get获取，属性必须是颜色属性，格式:pid:vid。 */
func (this *ItemJointPropimgRequest) SetProperties(value string) {
	this.Set("properties", value)
}

type ItemJointPropimgResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	ItemJointPropimgResponseResult `json:"item_joint_propimg_response"`
}
type ItemJointPropimgResponseResult struct {
	/* 属性图片对象信息 */
	PropImg *PropImg `json:"prop_img"`
}

/*taobao.item.price.update*/
type ItemPriceUpdateRequest struct {
	values url.Values
}

func (this *ItemPriceUpdateRequest) GetApiMethodName() string {
	return "taobao.item.price.update"
}
func (this *ItemPriceUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemPriceUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 售后服务说明模板id */
func (this *ItemPriceUpdateRequest) SetAfterSaleId(value string) {
	this.Set("after_sale_id", value)
}

/* 商品上传后的状态。可选值:onsale（出售中）,instock（库中），如果同时更新商品状态为出售中及list_time为将来的时间，则商品还是处于定时上架的状态, 此时item.is_timing为true */
func (this *ItemPriceUpdateRequest) SetApproveStatus(value string) {
	this.Set("approve_status", value)
}

/* 商品的积分返点比例。如：5 表示返点比例0.5%. 注意：返点比例必须是>0的整数，而且最大是90,即为9%.B商家在发布非虚拟商品时，返点必须是 5的倍数，即0.5%的倍数。其它是1的倍数，即0.1%的倍数。无名良品商家发布商品时，复用该字段记录积分宝返点比例，返点必须是对应类目的返点步长的整数倍，默认是5，即0.5%。注意此时该字段值依旧必须是>0的整数，注意此时该字段值依旧必须是>0的整数，最高值不超过500，即50% */
func (this *ItemPriceUpdateRequest) SetAuctionPoint(value string) {
	this.Set("auction_point", value)
}

/* 代充商品类型。只有少数类目下的商品可以标记上此字段，具体哪些类目可以上传可以通过taobao.itemcat.features.get获得。在代充商品的类目下，不传表示不标记商品类型（交易搜索中就不能通过标记搜到相关的交易了）。可选类型：
no_mark(不做类型标记)
time_card(点卡软件代充)
fee_card(话费软件代充) */
func (this *ItemPriceUpdateRequest) SetAutoFill(value string) {
	this.Set("auto_fill", value)
}

/* 叶子类目id<br /> 支持最小值为：0 */
func (this *ItemPriceUpdateRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 货到付款运费模板ID */
func (this *ItemPriceUpdateRequest) SetCodPostageId(value string) {
	this.Set("cod_postage_id", value)
}

/* 商品描述. 字数要大于5个字符，小于25000个字符 ，受违禁词控制<br /> 支持最大长度为：200000<br /> 支持的最大列表长度为：200000 */
func (this *ItemPriceUpdateRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* ems费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:25.07，表示:25元7分 */
func (this *ItemPriceUpdateRequest) SetEmsFee(value string) {
	this.Set("ems_fee", value)
}

/* 快递费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:15.07，表示:15元7分 */
func (this *ItemPriceUpdateRequest) SetExpressFee(value string) {
	this.Set("express_fee", value)
}

/* 运费承担方式。运费承担方式。可选值:seller（卖家承担）,buyer(买家承担); */
func (this *ItemPriceUpdateRequest) SetFreightPayer(value string) {
	this.Set("freight_payer", value)
}

/* 支持会员打折。可选值:true,false; */
func (this *ItemPriceUpdateRequest) SetHasDiscount(value string) {
	this.Set("has_discount", value)
}

/* 是否有发票。可选值:true,false (商城卖家此字段必须为true) */
func (this *ItemPriceUpdateRequest) SetHasInvoice(value string) {
	this.Set("has_invoice", value)
}

/* 橱窗推荐。可选值:true,false; */
func (this *ItemPriceUpdateRequest) SetHasShowcase(value string) {
	this.Set("has_showcase", value)
}

/* 是否有保修。可选值:true,false; */
func (this *ItemPriceUpdateRequest) SetHasWarranty(value string) {
	this.Set("has_warranty", value)
}

/* 商品图片。类型:JPG,GIF;最大长度:500k<br /> 支持的文件类型为：gif,jpg,jpeg,png<br /> 支持的最大列表长度为：524288 */
func (this *ItemPriceUpdateRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 加价幅度 如果为0，代表系统代理幅度 */
func (this *ItemPriceUpdateRequest) SetIncrement(value string) {
	this.Set("increment", value)
}

/* 用户自行输入的类目属性ID串，结构："pid1,pid2,pid3"，如："20000"（表示品牌） 注：通常一个类目下用户可输入的关键属性不超过1个。 */
func (this *ItemPriceUpdateRequest) SetInputPids(value string) {
	this.Set("input_pids", value)
}

/* 用户自行输入的子属性名和属性值，结构:"父属性值;一级子属性名;一级子属性值;二级子属性名;自定义输入值,....",如：“耐克;耐克系列;科比系列;科比系列;2K5,Nike乔丹鞋;乔丹系列;乔丹鞋系列;乔丹鞋系列;json5”，多个自定义属性用','分割，input_str需要与input_pids一一对应，注：通常一个类目下用户可输入的关键属性不超过1个。所有属性别名加起来不能超过3999字节。此处不可以使用“其他”、“其它”和“其她”这三个词。 */
func (this *ItemPriceUpdateRequest) SetInputStr(value string) {
	this.Set("input_str", value)
}

/* 是否是3D */
func (this *ItemPriceUpdateRequest) SetIs3D(value string) {
	this.Set("is_3D", value)
}

/* 是否在外店显示 */
func (this *ItemPriceUpdateRequest) SetIsEx(value string) {
	this.Set("is_ex", value)
}

/* 实物闪电发货。注意：在售的闪电发货产品不允许取消闪电发货，需要先下架商品才能取消闪电发货标记 */
func (this *ItemPriceUpdateRequest) SetIsLightningConsignment(value string) {
	this.Set("is_lightning_consignment", value)
}

/* 是否替换sku */
func (this *ItemPriceUpdateRequest) SetIsReplaceSku(value string) {
	this.Set("is_replace_sku", value)
}

/* 是否在淘宝上显示 */
func (this *ItemPriceUpdateRequest) SetIsTaobao(value string) {
	this.Set("is_taobao", value)
}

/* 商品是否为新品。只有在当前类目开通新品,并且当前用户拥有该类目下发布新品权限时才能设置is_xinpin为true，否则设置true后会返回错误码:isv.invalid-permission:xinpin。同时只有一口价全新的宝贝才能设置为新品，否则会返回错误码：isv.invalid-parameter:xinpin。不设置参数就保持原有值。 */
func (this *ItemPriceUpdateRequest) SetIsXinpin(value string) {
	this.Set("is_xinpin", value)
}

/* 商品文字的版本，繁体传入”zh_HK”，简体传入”zh_CN” */
func (this *ItemPriceUpdateRequest) SetLang(value string) {
	this.Set("lang", value)
}

/* 上架时间。不论是更新架下的商品还是出售中的商品，如果这个字段小于当前时间则直接上架商品，并且上架的时间为更新商品的时间，此时item.is_timing为false，如果大于当前时间则宝贝会下架进入定时上架的宝贝中。 */
func (this *ItemPriceUpdateRequest) SetListTime(value string) {
	this.Set("list_time", value)
}

/* 所在地城市。如杭州 具体可以下载http://dl.open.taobao.com/sdk/商品城市列表.rar 取到 */
func (this *ItemPriceUpdateRequest) SetLocationCity(value string) {
	this.Set("location.city", value)
}

/* 所在地省份。如浙江 具体可以下载http://dl.open.taobao.com/sdk/商品城市列表.rar 取到 */
func (this *ItemPriceUpdateRequest) SetLocationState(value string) {
	this.Set("location.state", value)
}

/* 商品数量，取值范围:0-999999的整数。且需要等于Sku所有数量的和<br /> 支持最大值为：999999<br /> 支持最小值为：0 */
func (this *ItemPriceUpdateRequest) SetNum(value string) {
	this.Set("num", value)
}

/* 商品数字ID，该参数必须<br /> 支持最小值为：1 */
func (this *ItemPriceUpdateRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* 商家编码 */
func (this *ItemPriceUpdateRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 商品主图需要关联的图片空间的相对url。这个url所对应的图片必须要属于当前用户。pic_path和image只需要传入一个,如果两个都传，默认选择pic_path */
func (this *ItemPriceUpdateRequest) SetPicPath(value string) {
	this.Set("pic_path", value)
}

/* 平邮费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:5.07，表示:5元7分, 注:post_fee,express_fee,ems_fee需一起填写 */
func (this *ItemPriceUpdateRequest) SetPostFee(value string) {
	this.Set("post_fee", value)
}

/* 宝贝所属的运费模板ID。取值范围：整数且必须是该卖家的运费模板的ID（可通过taobao.postages.get获得当前会话用户的所有邮费模板） */
func (this *ItemPriceUpdateRequest) SetPostageId(value string) {
	this.Set("postage_id", value)
}

/* 商品价格。取值范围:0-100000000;精确到2位小数;单位:元。如:200.07，表示:200元7分。需要在正确的价格区间内。 */
func (this *ItemPriceUpdateRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 商品所属的产品ID(B商家发布商品需要用) */
func (this *ItemPriceUpdateRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 属性值别名。如pid:vid:别名;pid1:vid1:别名1， pid:属性id vid:值id。总长度不超过512字节 */
func (this *ItemPriceUpdateRequest) SetPropertyAlias(value string) {
	this.Set("property_alias", value)
}

/* 商品属性列表。格式:pid:vid;pid:vid。属性的pid调用taobao.itemprops.get取得，属性值的vid用taobao.itempropvalues.get取得vid。 如果该类目下面没有属性，可以不用填写。如果有属性，必选属性必填，其他非必选属性可以选择不填写.属性不能超过35对。所有属性加起来包括分割符不能超过549字节，单个属性没有限制。 如果有属性是可输入的话，则用字段input_str填入属性的值。 */
func (this *ItemPriceUpdateRequest) SetProps(value string) {
	this.Set("props", value)
}

/* 是否承诺退换货服务!虚拟商品无须设置此项! */
func (this *ItemPriceUpdateRequest) SetSellPromise(value string) {
	this.Set("sell_promise", value)
}

/* 重新关联商品与店铺类目，结构:",cid1,cid2,...,"，如果店铺类目存在二级类目，必须传入子类目cids。 */
func (this *ItemPriceUpdateRequest) SetSellerCids(value string) {
	this.Set("seller_cids", value)
}

/* Sku的外部id串，结构如：1234,1342,… sku_properties, sku_quantities, sku_prices, sku_outer_ids在输入数据时要一一对应，如果没有sku_outer_ids也要写上这个参数，入参是","(这个是两个sku的示列，逗号数应该是sku个数减1)；该参数最大长度是512个字节 */
func (this *ItemPriceUpdateRequest) SetSkuOuterIds(value string) {
	this.Set("sku_outer_ids", value)
}

/* 更新的Sku的价格串，结构如：10.00,5.00,… 精确到2位小数;单位:元。如:200.07，表示:200元7分 */
func (this *ItemPriceUpdateRequest) SetSkuPrices(value string) {
	this.Set("sku_prices", value)
}

/* 更新的Sku的属性串，调用taobao.itemprops.get获取类目属性，如果属性是销售属性，再用taobao.itempropvalues.get取得vid。格式:pid:vid;pid:vid。该字段内的销售属性也需要在props字段填写 。如果更新时有对Sku进行操作，则Sku的properties一定要传入。 */
func (this *ItemPriceUpdateRequest) SetSkuProperties(value string) {
	this.Set("sku_properties", value)
}

/* 更新的Sku的数量串，结构如：num1,num2,num3 如:2,3,4 */
func (this *ItemPriceUpdateRequest) SetSkuQuantities(value string) {
	this.Set("sku_quantities", value)
}

/* 商品新旧程度。可选值:new（全新）,unused（闲置）,second（二手）。 */
func (this *ItemPriceUpdateRequest) SetStuffStatus(value string) {
	this.Set("stuff_status", value)
}

/* 商品是否支持拍下减库存:1支持;2取消支持(付款减库存);0(默认)不更改 集市卖家默认拍下减库存; 商城卖家默认付款减库存 */
func (this *ItemPriceUpdateRequest) SetSubStock(value string) {
	this.Set("sub_stock", value)
}

/* 宝贝标题. 不能超过60字符,受违禁词控制<br /> 支持最大长度为：60<br /> 支持的最大列表长度为：60 */
func (this *ItemPriceUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 有效期。可选值:7,14;单位:天; */
func (this *ItemPriceUpdateRequest) SetValidThru(value string) {
	this.Set("valid_thru", value)
}

/* 商品的重量(商超卖家专用字段) */
func (this *ItemPriceUpdateRequest) SetWeight(value string) {
	this.Set("weight", value)
}

type ItemPriceUpdateResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	ItemPriceUpdateResponseResult `json:"item_price_update_response"`
}
type ItemPriceUpdateResponseResult struct {
	/* 商品结构里的num_iid，modified */
	Item *Item `json:"item"`
}

/*taobao.item.propimg.delete*/
type ItemPropimgDeleteRequest struct {
	values url.Values
}

func (this *ItemPropimgDeleteRequest) GetApiMethodName() string {
	return "taobao.item.propimg.delete"
}
func (this *ItemPropimgDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemPropimgDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 商品属性图片ID */
func (this *ItemPropimgDeleteRequest) SetId(value string) {
	this.Set("id", value)
}

/* 商品数字ID，必选<br /> 支持最小值为：0 */
func (this *ItemPropimgDeleteRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

type ItemPropimgDeleteResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	ItemPropimgDeleteResponseResult `json:"item_propimg_delete_response"`
}
type ItemPropimgDeleteResponseResult struct {
	/* 属性图片结构 */
	PropImg *PropImg `json:"prop_img"`
}

/*taobao.item.propimg.upload*/
type ItemPropimgUploadRequest struct {
	values url.Values
}

func (this *ItemPropimgUploadRequest) GetApiMethodName() string {
	return "taobao.item.propimg.upload"
}
func (this *ItemPropimgUploadRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemPropimgUploadRequest) GetValues() url.Values {
	return this.values
}

/* 属性图片ID。如果是新增不需要填写 */
func (this *ItemPropimgUploadRequest) SetId(value string) {
	this.Set("id", value)
}

/* 属性图片内容。类型:JPG,GIF;最大长度:500K;图片大小不超过:1M<br /> 支持的文件类型为：gif,jpg,jpeg,png,bmp<br /> 支持的最大列表长度为：1048576 */
func (this *ItemPropimgUploadRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 商品数字ID，必选<br /> 支持最小值为：0 */
func (this *ItemPropimgUploadRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* 图片位置 */
func (this *ItemPropimgUploadRequest) SetPosition(value string) {
	this.Set("position", value)
}

/* 属性列表。调用taobao.itemprops.get获取类目属性，属性必须是颜色属性，再用taobao.itempropvalues.get取得vid。格式:pid:vid。 */
func (this *ItemPropimgUploadRequest) SetProperties(value string) {
	this.Set("properties", value)
}

type ItemPropimgUploadResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	ItemPropimgUploadResponseResult `json:"item_propimg_upload_response"`
}
type ItemPropimgUploadResponseResult struct {
	/* PropImg属性图片结构 */
	PropImg *PropImg `json:"prop_img"`
}

/*taobao.item.quantity.update*/
type ItemQuantityUpdateRequest struct {
	values url.Values
}

func (this *ItemQuantityUpdateRequest) GetApiMethodName() string {
	return "taobao.item.quantity.update"
}
func (this *ItemQuantityUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemQuantityUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 商品数字ID，必填参数 */
func (this *ItemQuantityUpdateRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* SKU的商家编码，可选参数。如果不填则默认修改宝贝的库存，如果填了则按照商家编码搜索出对应的SKU并修改库存。当sku_id和本字段都填写时以sku_id为准搜索对应SKU */
func (this *ItemQuantityUpdateRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 库存修改值，必选。当全量更新库存时，quantity必须为大于等于0的正整数；当增量更新库存时，quantity为整数，可小于等于0。若增量更新时传入的库存为负数，则负数与实际库存之和不能小于0。比如当前实际库存为1，传入增量更新quantity=-1，库存改为0 */
func (this *ItemQuantityUpdateRequest) SetQuantity(value string) {
	this.Set("quantity", value)
}

/* 要操作的SKU的数字ID，可选。如果不填默认修改宝贝的库存，如果填上则修改该SKU的库存 */
func (this *ItemQuantityUpdateRequest) SetSkuId(value string) {
	this.Set("sku_id", value)
}

/* 库存更新方式，可选。1为全量更新，2为增量更新。如果不填，默认为全量更新 */
func (this *ItemQuantityUpdateRequest) SetType(value string) {
	this.Set("type", value)
}

type ItemQuantityUpdateResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	ItemQuantityUpdateResponseResult `json:"item_quantity_update_response"`
}
type ItemQuantityUpdateResponseResult struct {
	/* iid、numIid、num和modified，skus中每个sku的skuId、quantity和modified */
	Item *Item `json:"item"`
}

/*taobao.item.recommend.add*/
type ItemRecommendAddRequest struct {
	values url.Values
}

func (this *ItemRecommendAddRequest) GetApiMethodName() string {
	return "taobao.item.recommend.add"
}
func (this *ItemRecommendAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemRecommendAddRequest) GetValues() url.Values {
	return this.values
}

/* 商品数字ID，该参数必须<br /> 支持最小值为：0 */
func (this *ItemRecommendAddRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

type ItemRecommendAddResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	ItemRecommendAddResponseResult `json:"item_recommend_add_response"`
}
type ItemRecommendAddResponseResult struct {
	/* 被推荐的商品的信息 */
	Item *Item `json:"item"`
}

/*taobao.item.recommend.delete*/
type ItemRecommendDeleteRequest struct {
	values url.Values
}

func (this *ItemRecommendDeleteRequest) GetApiMethodName() string {
	return "taobao.item.recommend.delete"
}
func (this *ItemRecommendDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemRecommendDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 商品数字ID，该参数必须<br /> 支持最小值为：0 */
func (this *ItemRecommendDeleteRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

type ItemRecommendDeleteResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	ItemRecommendDeleteResponseResult `json:"item_recommend_delete_response"`
}
type ItemRecommendDeleteResponseResult struct {
	/* 被取消橱窗推荐的商品信息 */
	Item *Item `json:"item"`
}

/*taobao.item.sku.add*/
type ItemSkuAddRequest struct {
	values url.Values
}

func (this *ItemSkuAddRequest) GetApiMethodName() string {
	return "taobao.item.sku.add"
}
func (this *ItemSkuAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemSkuAddRequest) GetValues() url.Values {
	return this.values
}

/* sku所属商品的价格。当用户新增sku，使商品价格不属于sku价格之间的时候，用于修改商品的价格，使sku能够添加成功 */
func (this *ItemSkuAddRequest) SetItemPrice(value string) {
	this.Set("item_price", value)
}

/* Sku文字的版本。可选值:zh_HK(繁体),zh_CN(简体);默认值:zh_CN */
func (this *ItemSkuAddRequest) SetLang(value string) {
	this.Set("lang", value)
}

/* Sku所属商品数字id，可通过 taobao.item.get 获取。必选<br /> 支持最小值为：0 */
func (this *ItemSkuAddRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* Sku的商家外部id */
func (this *ItemSkuAddRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* Sku的销售价格。商品的价格要在商品所有的sku的价格之间。精确到2位小数;单位:元。如:200.07，表示:200元7分 */
func (this *ItemSkuAddRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* Sku属性串。格式:pid:vid;pid:vid,如:1627207:3232483;1630696:3284570,表示:机身颜色:军绿色;手机套餐:一电一充。
如果包含自定义属性则格式为pid:vid;pid2:vid2;$pText:vText , 其中$pText:vText为自定义属性。限制：其中$pText的‘$’前缀不能少，且pText和vText文本中不可以存在 冒号:和分号;以及逗号， */
func (this *ItemSkuAddRequest) SetProperties(value string) {
	this.Set("properties", value)
}

/* Sku的库存数量。sku的总数量应该小于等于商品总数量(Item的NUM)。取值范围:大于零的整数<br /> 支持最小值为：0 */
func (this *ItemSkuAddRequest) SetQuantity(value string) {
	this.Set("quantity", value)
}

/* 产品的规格信息 */
func (this *ItemSkuAddRequest) SetSpecId(value string) {
	this.Set("spec_id", value)
}

type ItemSkuAddResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	ItemSkuAddResponseResult `json:"item_sku_add_response"`
}
type ItemSkuAddResponseResult struct {
	/* sku */
	Sku *Sku `json:"sku"`
}

/*taobao.item.sku.delete*/
type ItemSkuDeleteRequest struct {
	values url.Values
}

func (this *ItemSkuDeleteRequest) GetApiMethodName() string {
	return "taobao.item.sku.delete"
}
func (this *ItemSkuDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemSkuDeleteRequest) GetValues() url.Values {
	return this.values
}

/* sku所属商品的数量,大于0的整数。当用户删除sku，使商品数量不等于sku数量之和时候，用于修改商品的数量，使sku能够删除成功。特别是删除最后一个sku的时候，一定要设置商品数量到正常的值，否则删除失败 */
func (this *ItemSkuDeleteRequest) SetItemNum(value string) {
	this.Set("item_num", value)
}

/* sku所属商品的价格。当用户删除sku，使商品价格不属于sku价格之间的时候，用于修改商品的价格，使sku能够删除成功 */
func (this *ItemSkuDeleteRequest) SetItemPrice(value string) {
	this.Set("item_price", value)
}

/* Sku文字的版本。可选值:zh_HK(繁体),zh_CN(简体);默认值:zh_CN */
func (this *ItemSkuDeleteRequest) SetLang(value string) {
	this.Set("lang", value)
}

/* Sku所属商品数字id，可通过 taobao.item.get 获取。必选 */
func (this *ItemSkuDeleteRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* Sku属性串。格式:pid:vid;pid:vid,如: 1627207:3232483;1630696:3284570,表示机身颜色:军绿色;手机套餐:一电一充 */
func (this *ItemSkuDeleteRequest) SetProperties(value string) {
	this.Set("properties", value)
}

type ItemSkuDeleteResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	ItemSkuDeleteResponseResult `json:"item_sku_delete_response"`
}
type ItemSkuDeleteResponseResult struct {
	/* Sku结构 */
	Sku *Sku `json:"sku"`
}

/*taobao.item.sku.get*/
type ItemSkuGetRequest struct {
	values url.Values
}

func (this *ItemSkuGetRequest) GetApiMethodName() string {
	return "taobao.item.sku.get"
}
func (this *ItemSkuGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemSkuGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表。可选值：Sku结构体中的所有字段；字段之间用“,”分隔。 */
func (this *ItemSkuGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 卖家nick(num_iid和nick必传一个)，只传卖家nick时候，该api返回的结果不包含cspu（SKu上的产品规格信息）。 */
func (this *ItemSkuGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 商品的数字IID（num_iid和nick必传一个，推荐用num_iid），传商品的数字id返回的结果里包含cspu（SKu上的产品规格信息）。<br /> 支持最小值为：0 */
func (this *ItemSkuGetRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* Sku的id。可以通过taobao.item.get得到 */
func (this *ItemSkuGetRequest) SetSkuId(value string) {
	this.Set("sku_id", value)
}

type ItemSkuGetResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	ItemSkuGetResponseResult `json:"item_sku_get_response"`
}
type ItemSkuGetResponseResult struct {
	/* Sku */
	Sku *Sku `json:"sku"`
}

/*taobao.item.sku.price.update*/
type ItemSkuPriceUpdateRequest struct {
	values url.Values
}

func (this *ItemSkuPriceUpdateRequest) GetApiMethodName() string {
	return "taobao.item.sku.price.update"
}
func (this *ItemSkuPriceUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemSkuPriceUpdateRequest) GetValues() url.Values {
	return this.values
}

/* sku所属商品的价格。当用户更新sku，使商品价格不属于sku价格之间的时候，用于修改商品的价格，使sku能够更新成功 */
func (this *ItemSkuPriceUpdateRequest) SetItemPrice(value string) {
	this.Set("item_price", value)
}

/* Sku文字的版本。可选值:zh_HK(繁体),zh_CN(简体);默认值:zh_CN */
func (this *ItemSkuPriceUpdateRequest) SetLang(value string) {
	this.Set("lang", value)
}

/* Sku所属商品数字id，可通过 taobao.item.get 获取<br /> 支持最小值为：0 */
func (this *ItemSkuPriceUpdateRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* Sku的商家外部id */
func (this *ItemSkuPriceUpdateRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* Sku的销售价格。精确到2位小数;单位:元。如:200.07，表示:200元7分。修改后的sku价格要保证商品的价格在所有sku价格所形成的价格区间内（例如：商品价格为6元，sku价格有5元、10元两种，如果要修改5元sku的价格，那么修改的范围只能是0-6元之间；如果要修改10元的sku，那么修改的范围只能是6到无穷大的区间中） */
func (this *ItemSkuPriceUpdateRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* Sku属性串。格式:pid:vid;pid:vid,如: 1627207:3232483;1630696:3284570,表示机身颜色:军绿色;手机套餐:一电一充 */
func (this *ItemSkuPriceUpdateRequest) SetProperties(value string) {
	this.Set("properties", value)
}

/* Sku的库存数量。sku的总数量应该小于等于商品总数量(Item的NUM)，sku数量变化后item的总数量也会随着变化。取值范围:大于等于零的整数<br /> 支持最小值为：0 */
func (this *ItemSkuPriceUpdateRequest) SetQuantity(value string) {
	this.Set("quantity", value)
}

type ItemSkuPriceUpdateResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	ItemSkuPriceUpdateResponseResult `json:"item_sku_price_update_response"`
}
type ItemSkuPriceUpdateResponseResult struct {
	/* 商品SKU信息（只包含num_iid和modified） */
	Sku *Sku `json:"sku"`
}

/*taobao.item.sku.update*/
type ItemSkuUpdateRequest struct {
	values url.Values
}

func (this *ItemSkuUpdateRequest) GetApiMethodName() string {
	return "taobao.item.sku.update"
}
func (this *ItemSkuUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemSkuUpdateRequest) GetValues() url.Values {
	return this.values
}

/* sku所属商品的价格。当用户更新sku，使商品价格不属于sku价格之间的时候，用于修改商品的价格，使sku能够更新成功 */
func (this *ItemSkuUpdateRequest) SetItemPrice(value string) {
	this.Set("item_price", value)
}

/* Sku文字的版本。可选值:zh_HK(繁体),zh_CN(简体);默认值:zh_CN */
func (this *ItemSkuUpdateRequest) SetLang(value string) {
	this.Set("lang", value)
}

/* Sku所属商品数字id，可通过 taobao.item.get 获取<br /> 支持最小值为：0 */
func (this *ItemSkuUpdateRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* Sku的商家外部id */
func (this *ItemSkuUpdateRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* Sku的销售价格。精确到2位小数;单位:元。如:200.07，表示:200元7分。修改后的sku价格要保证商品的价格在所有sku价格所形成的价格区间内（例如：商品价格为6元，sku价格有5元、10元两种，如果要修改5元sku的价格，那么修改的范围只能是0-6元之间；如果要修改10元的sku，那么修改的范围只能是6到无穷大的区间中） */
func (this *ItemSkuUpdateRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* Sku属性串。格式:pid:vid;pid:vid,如: 1627207:3232483;1630696:3284570,表示机身颜色:军绿色;手机套餐:一电一充。
如果包含自定义属性，则格式为pid:vid;pid2:vid2;$pText:vText , 其中$pText:vText为自定义属性。限制：其中$pText的’$’前缀不能少，且pText和vText文本中不可以存在 冒号:和分号;以及逗号， */
func (this *ItemSkuUpdateRequest) SetProperties(value string) {
	this.Set("properties", value)
}

/* Sku的库存数量。sku的总数量应该小于等于商品总数量(Item的NUM)，sku数量变化后item的总数量也会随着变化。取值范围:大于等于零的整数<br /> 支持最小值为：0 */
func (this *ItemSkuUpdateRequest) SetQuantity(value string) {
	this.Set("quantity", value)
}

/* 产品的规格信息。 */
func (this *ItemSkuUpdateRequest) SetSpecId(value string) {
	this.Set("spec_id", value)
}

type ItemSkuUpdateResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	ItemSkuUpdateResponseResult `json:"item_sku_update_response"`
}
type ItemSkuUpdateResponseResult struct {
	/* 商品Sku */
	Sku *Sku `json:"sku"`
}

/*taobao.item.skus.get*/
type ItemSkusGetRequest struct {
	values url.Values
}

func (this *ItemSkusGetRequest) GetApiMethodName() string {
	return "taobao.item.skus.get"
}
func (this *ItemSkusGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemSkusGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表。可选值：Sku结构体中的所有字段；字段之间用“,”分隔。 */
func (this *ItemSkusGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* sku所属商品数字id，必选。num_iid个数不能超过40个 */
func (this *ItemSkusGetRequest) SetNumIids(value string) {
	this.Set("num_iids", value)
}

type ItemSkusGetResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	ItemSkusGetResponseResult `json:"item_skus_get_response"`
}
type ItemSkusGetResponseResult struct {
	/* Sku列表 */
	Skus []*Sku `json:"skus"`
}

/*taobao.item.templates.get*/
type ItemTemplatesGetRequest struct {
	values url.Values
}

func (this *ItemTemplatesGetRequest) GetApiMethodName() string {
	return "taobao.item.templates.get"
}
func (this *ItemTemplatesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemTemplatesGetRequest) GetValues() url.Values {
	return this.values
}

type ItemTemplatesGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	ItemTemplatesGetResponseResult `json:"item_templates_get_response"`
}
type ItemTemplatesGetResponseResult struct {
	/* 返回宝贝模板对象。包含模板id，模板name，还有模板的类别（0表示外店，1表示内店） */
	ItemTemplateList []*ItemTemplate `json:"item_template_list"`
}

/*taobao.item.update*/
type ItemUpdateRequest struct {
	values url.Values
}

func (this *ItemUpdateRequest) GetApiMethodName() string {
	return "taobao.item.update"
}
func (this *ItemUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 售后服务说明模板id */
func (this *ItemUpdateRequest) SetAfterSaleId(value string) {
	this.Set("after_sale_id", value)
}

/* 商品上传后的状态。可选值:onsale（出售中）,instock（库中），如果同时更新商品状态为出售中及list_time为将来的时间，则商品还是处于定时上架的状态, 此时item.is_timing为true */
func (this *ItemUpdateRequest) SetApproveStatus(value string) {
	this.Set("approve_status", value)
}

/* 商品的积分返点比例。如：5 表示返点比例0.5%. 注意：返点比例必须是>0的整数，而且最大是90,即为9%.B商家在发布非虚拟商品时，返点必须是 5的倍数，即0.5%的倍数。其它是1的倍数，即0.1%的倍数。无名良品商家发布商品时，复用该字段记录积分宝返点比例，返点必须是对应类目的返点步长的整数倍，默认是5，即0.5%。注意此时该字段值依旧必须是>0的整数，注意此时该字段值依旧必须是>0的整数，最高值不超过500，即50% */
func (this *ItemUpdateRequest) SetAuctionPoint(value string) {
	this.Set("auction_point", value)
}

/* 代充商品类型。只有少数类目下的商品可以标记上此字段，具体哪些类目可以上传可以通过taobao.itemcat.features.get获得。在代充商品的类目下，不传表示不标记商品类型（交易搜索中就不能通过标记搜到相关的交易了）。可选类型：
no_mark(不做类型标记)
time_card(点卡软件代充)
fee_card(话费软件代充) */
func (this *ItemUpdateRequest) SetAutoFill(value string) {
	this.Set("auto_fill", value)
}

/* 商品条形码 */
func (this *ItemUpdateRequest) SetBarcode(value string) {
	this.Set("barcode", value)
}

/* 商品基础色，数据格式为：pid:vid:rvid1,rvid2,rvid3;pid:vid:rvid1 */
func (this *ItemUpdateRequest) SetChangeProp(value string) {
	this.Set("change_prop", value)
}

/* 天猫超市扩展字段，天猫超市专用 */
func (this *ItemUpdateRequest) SetChaoshiExtendsInfo(value string) {
	this.Set("chaoshi_extends_info", value)
}

/* 叶子类目id<br /> 支持最小值为：0 */
func (this *ItemUpdateRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 货到付款运费模板ID
该字段已经废弃，货到付款模板已经集成到运费模板中。 */
func (this *ItemUpdateRequest) SetCodPostageId(value string) {
	this.Set("cod_postage_id", value)
}

/* 商品描述. 字数要大于5个字符，小于25000个字符 ，受违禁词控制<br /> 支持最大长度为：200000<br /> 支持的最大列表长度为：200000 */
func (this *ItemUpdateRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 商品描述模块化，模块列表；数据结构可参考Item_Desc_Module 。详细使用说明：http://open.taobao.com/support/question_detail.htm?spm=0.0.0.0.cRcj3S&id=147498 ； */
func (this *ItemUpdateRequest) SetDescModules(value string) {
	this.Set("desc_modules", value)
}

/* 支持宝贝信息的删除,如需删除对应的食品安全信息中的储藏方法、保质期， 则应该设置此参数的值为：food_security.plan_storage,food_security.period; 各个参数的名称之间用【,】分割, 如果对应的参数有设置过值，即使在这个列表中，也不会被删除; 目前支持此功能的宝贝信息如下：食品安全信息所有字段、电子交易凭证字段（locality_life，locality_life.verification，locality_life.refund_ratio，locality_life.network_id ，locality_life.onsale_auto_refund_ratio）。支持对全球购宝贝信息的清除（字符串中包含global_stock） */
func (this *ItemUpdateRequest) SetEmptyFields(value string) {
	this.Set("empty_fields", value)
}

/* ems费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:25.07，表示:25元7分 */
func (this *ItemUpdateRequest) SetEmsFee(value string) {
	this.Set("ems_fee", value)
}

/* 快递费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:15.07，表示:15元7分 */
func (this *ItemUpdateRequest) SetExpressFee(value string) {
	this.Set("express_fee", value)
}

/* 厂家联系方式 */
func (this *ItemUpdateRequest) SetFoodSecurityContact(value string) {
	this.Set("food_security.contact", value)
}

/* 产品标准号 */
func (this *ItemUpdateRequest) SetFoodSecurityDesignCode(value string) {
	this.Set("food_security.design_code", value)
}

/* 厂名 */
func (this *ItemUpdateRequest) SetFoodSecurityFactory(value string) {
	this.Set("food_security.factory", value)
}

/* 厂址 */
func (this *ItemUpdateRequest) SetFoodSecurityFactorySite(value string) {
	this.Set("food_security.factory_site", value)
}

/* 食品添加剂 */
func (this *ItemUpdateRequest) SetFoodSecurityFoodAdditive(value string) {
	this.Set("food_security.food_additive", value)
}

/* 健字号，保健品/膳食营养补充剂 这个类目下特有的信息，此类目下无需填写生产许可证编号（QS），如果填写了生产许可证编号（QS）将被忽略不保存；保存宝贝时，标题前会自动加上健字号产品名称一起作为宝贝标题； */
func (this *ItemUpdateRequest) SetFoodSecurityHealthProductNo(value string) {
	this.Set("food_security.health_product_no", value)
}

/* 配料表 */
func (this *ItemUpdateRequest) SetFoodSecurityMix(value string) {
	this.Set("food_security.mix", value)
}

/* 保质期 */
func (this *ItemUpdateRequest) SetFoodSecurityPeriod(value string) {
	this.Set("food_security.period", value)
}

/* 储藏方法 */
func (this *ItemUpdateRequest) SetFoodSecurityPlanStorage(value string) {
	this.Set("food_security.plan_storage", value)
}

/* 生产许可证号 */
func (this *ItemUpdateRequest) SetFoodSecurityPrdLicenseNo(value string) {
	this.Set("food_security.prd_license_no", value)
}

/* 生产结束日期,格式必须为yyyy-MM-dd */
func (this *ItemUpdateRequest) SetFoodSecurityProductDateEnd(value string) {
	this.Set("food_security.product_date_end", value)
}

/* 生产开始日期，格式必须为yyyy-MM-dd */
func (this *ItemUpdateRequest) SetFoodSecurityProductDateStart(value string) {
	this.Set("food_security.product_date_start", value)
}

/* 进货结束日期，要在生产日期之后，格式必须为yyyy-MM-dd */
func (this *ItemUpdateRequest) SetFoodSecurityStockDateEnd(value string) {
	this.Set("food_security.stock_date_end", value)
}

/* 进货开始日期，要在生产日期之后，格式必须为yyyy-MM-dd */
func (this *ItemUpdateRequest) SetFoodSecurityStockDateStart(value string) {
	this.Set("food_security.stock_date_start", value)
}

/* 供货商 */
func (this *ItemUpdateRequest) SetFoodSecuritySupplier(value string) {
	this.Set("food_security.supplier", value)
}

/* 运费承担方式。运费承担方式。可选值:seller（卖家承担）,buyer(买家承担); */
func (this *ItemUpdateRequest) SetFreightPayer(value string) {
	this.Set("freight_payer", value)
}

/* 全球购商品采购地（地区/国家）,默认值只在全球购商品采购地（库存类型选择情况生效），地区国家值为（美国, 香港, 日本, 英国, 新西兰, 德国, 韩国, 荷兰, 澳洲, 法国, 意大利, 台湾, 澳门, 加拿大, 瑞士, 西班牙, 泰国, 新加坡, 马来西亚, 菲律宾, 其他）<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *ItemUpdateRequest) SetGlobalStockCountry(value string) {
	this.Set("global_stock_country", value)
}

/* 全球购商品采购地（库存类型）
全球购商品有两种库存类型：现货和代购 参数值为1时代表现货，值为2时代表代购。注意：使用时请与 全球购商品采购地（地区/国家）配合使用 */
func (this *ItemUpdateRequest) SetGlobalStockType(value string) {
	this.Set("global_stock_type", value)
}

/* 支持会员打折。可选值:true,false; */
func (this *ItemUpdateRequest) SetHasDiscount(value string) {
	this.Set("has_discount", value)
}

/* 是否有发票。可选值:true,false (商城卖家此字段必须为true) */
func (this *ItemUpdateRequest) SetHasInvoice(value string) {
	this.Set("has_invoice", value)
}

/* 橱窗推荐。可选值:true,false; */
func (this *ItemUpdateRequest) SetHasShowcase(value string) {
	this.Set("has_showcase", value)
}

/* 是否有保修。可选值:true,false; */
func (this *ItemUpdateRequest) SetHasWarranty(value string) {
	this.Set("has_warranty", value)
}

/* 商品图片。类型:JPG,GIF;最大长度:500k<br /> 支持的文件类型为：gif,jpg,jpeg,png<br /> 支持的最大列表长度为：524288 */
func (this *ItemUpdateRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 加价(降价)幅度。如果为0，代表系统代理幅度。对于增价拍和荷兰拍来说是加价幅度，对于降价拍来说是降价幅度。 */
func (this *ItemUpdateRequest) SetIncrement(value string) {
	this.Set("increment", value)
}

/* 用户自行输入的类目属性ID串，结构："pid1,pid2,pid3"，如："20000"（表示品牌） 注：通常一个类目下用户可输入的关键属性不超过1个。 */
func (this *ItemUpdateRequest) SetInputPids(value string) {
	this.Set("input_pids", value)
}

/* 用户自行输入的子属性名和属性值，结构:"父属性值;一级子属性名;一级子属性值;二级子属性名;自定义输入值,....",如：“耐克;耐克系列;科比系列;科比系列;2K5,Nike乔丹鞋;乔丹系列;乔丹鞋系列;乔丹鞋系列;json5”，多个自定义属性用','分割，input_str需要与input_pids一一对应，注：通常一个类目下用户可输入的关键属性不超过1个。所有属性别名加起来不能超过3999字节。此处不可以使用“其他”、“其它”和“其她”这三个词。 */
func (this *ItemUpdateRequest) SetInputStr(value string) {
	this.Set("input_str", value)
}

/* 是否是3D */
func (this *ItemUpdateRequest) SetIs3D(value string) {
	this.Set("is_3D", value)
}

/* 是否在外店显示 */
func (this *ItemUpdateRequest) SetIsEx(value string) {
	this.Set("is_ex", value)
}

/* 实物闪电发货。注意：在售的闪电发货产品不允许取消闪电发货，需要先下架商品才能取消闪电发货标记 */
func (this *ItemUpdateRequest) SetIsLightningConsignment(value string) {
	this.Set("is_lightning_consignment", value)
}

/* 是否是线下商品。 1：线上商品（默认值）； 2：线上或线下商品； 3：线下商品。 */
func (this *ItemUpdateRequest) SetIsOffline(value string) {
	this.Set("is_offline", value)
}

/* 是否替换sku */
func (this *ItemUpdateRequest) SetIsReplaceSku(value string) {
	this.Set("is_replace_sku", value)
}

/* 是否在淘宝上显示（如果传FALSE，则在淘宝主站无法显示该商品） */
func (this *ItemUpdateRequest) SetIsTaobao(value string) {
	this.Set("is_taobao", value)
}

/* 商品是否为新品。只有在当前类目开通新品,并且当前用户拥有该类目下发布新品权限时才能设置is_xinpin为true，否则设置true后会返回错误码:isv.invalid-permission:xinpin。同时只有一口价全新的宝贝才能设置为新品，否则会返回错误码：isv.invalid-parameter:xinpin。不设置参数就保持原有值。 */
func (this *ItemUpdateRequest) SetIsXinpin(value string) {
	this.Set("is_xinpin", value)
}

/* 表示商品的体积，如果需要使用按体积计费的运费模板，一定要设置这个值。该值的单位为立方米（m3），如果是其他单位，请转换成成立方米。
该值支持两种格式的设置：格式1：bulk:3,单位为立方米(m3),表示直接设置为商品的体积。格式2：length:10;breadth:10;height:10，单位为米（m）。体积和长宽高都支持小数类型。
在传入体积或长宽高时候，不能带单位。体积的单位默认为立方米（m3），长宽高的单位默认为米(m)
在编辑的时候，如果需要删除体积属性，请设置该值为0，如bulk:0 */
func (this *ItemUpdateRequest) SetItemSize(value string) {
	this.Set("item_size", value)
}

/* 商品的重量，用于按重量计费的运费模板。注意：单位为kg。 只能传入数值类型（包含小数），不能带单位，单位默认为kg。 在编辑时候，如果需要在商品里删除重量的信息，就需要将值设置为0 */
func (this *ItemUpdateRequest) SetItemWeight(value string) {
	this.Set("item_weight", value)
}

/* 商品文字的版本，繁体传入”zh_HK”，简体传入”zh_CN” */
func (this *ItemUpdateRequest) SetLang(value string) {
	this.Set("lang", value)
}

/* 上架时间。大于当前时间则宝贝会下架进入定时上架的宝贝中。 */
func (this *ItemUpdateRequest) SetListTime(value string) {
	this.Set("list_time", value)
}

/* 编辑电子凭证宝贝时候表示是否使用邮寄
0: 代表不使用邮寄；
1：代表使用邮寄；
如果不设置这个值，代表不使用邮寄 */
func (this *ItemUpdateRequest) SetLocalityLifeChooseLogis(value string) {
	this.Set("locality_life.choose_logis", value)
}

/* 本地生活电子交易凭证业务，目前此字段只涉及到的信息为有效期;
如果有效期为起止日期类型，此值为2012-08-06,2012-08-16
如果有效期为【购买成功日 至】类型则格式为2012-08-16
如果有效期为天数类型则格式为15 */
func (this *ItemUpdateRequest) SetLocalityLifeExpirydate(value string) {
	this.Set("locality_life.expirydate", value)
}

/* 码商信息，格式为 码商id:nick */
func (this *ItemUpdateRequest) SetLocalityLifeMerchant(value string) {
	this.Set("locality_life.merchant", value)
}

/* 网点ID,在参数empty_fields里设置locality_life.network_id可删除网点ID */
func (this *ItemUpdateRequest) SetLocalityLifeNetworkId(value string) {
	this.Set("locality_life.network_id", value)
}

/* 电子凭证售中自动退款比例，百分比%前的数字，介于1-100之间的整数 */
func (this *ItemUpdateRequest) SetLocalityLifeOnsaleAutoRefundRatio(value string) {
	this.Set("locality_life.onsale_auto_refund_ratio", value)
}

/* 退款比例，百分比%前的数字,1-100的正整数值; 在参数empty_fields里设置locality_life.refund_ratio可删除退款比例 */
func (this *ItemUpdateRequest) SetLocalityLifeRefundRatio(value string) {
	this.Set("locality_life.refund_ratio", value)
}

/* 退款码费承担方。发布电子凭证宝贝的时候会增加“退款码费承担方”配置项，可选填：(1)s（卖家承担） (2)b(买家承担) */
func (this *ItemUpdateRequest) SetLocalityLifeRefundmafee(value string) {
	this.Set("locality_life.refundmafee", value)
}

/* 核销打款,1代表核销打款 0代表非核销打款; 在参数empty_fields里设置locality_life.verification可删除核销打款 */
func (this *ItemUpdateRequest) SetLocalityLifeVerification(value string) {
	this.Set("locality_life.verification", value)
}

/* 所在地城市。如杭州 */
func (this *ItemUpdateRequest) SetLocationCity(value string) {
	this.Set("location.city", value)
}

/* 所在地省份。如浙江 */
func (this *ItemUpdateRequest) SetLocationState(value string) {
	this.Set("location.state", value)
}

/* 该宝贝是否支持【7天无理由退货】，卖家选择的值只是一个因素，最终以类目和选择的属性条件来确定是否支持7天。填入字符0，表示不支持；未填写或填人字符1，表示支持7天无理由退货；<br>注意：使用该API修改商品其它属性如标题title时，如需保持商品不支持7天无理由退货状态，该字段需传入0 。 */
func (this *ItemUpdateRequest) SetNewprepay(value string) {
	this.Set("newprepay", value)
}

/* 商品数量，取值范围:0-900000000的整数。且需要等于Sku所有数量的和 拍卖商品中增加拍只能为1，荷兰拍要在[2,500)范围内。<br /> 支持最大值为：900000000<br /> 支持最小值为：0 */
func (this *ItemUpdateRequest) SetNum(value string) {
	this.Set("num", value)
}

/* 商品数字ID，该参数必须<br /> 支持最小值为：1 */
func (this *ItemUpdateRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* 商家编码 */
func (this *ItemUpdateRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 拍卖宝贝的保证金。对于增价拍和荷兰拍来说保证金有两种模式：淘宝默认模式（首次出价金额的10%），自定义固定保证金（固定冻结金额只能输入不超过30万的正整数），并且保证金只冻结1次。对于降价拍来说保证金只有淘宝默认的（竞拍价格的10% * 竞拍数量），并且每次出价都需要冻结保证金。
对于拍卖宝贝来说，保证金是必须的，但是默认使用淘宝默认保证金模式，只有用户需要使用自定义固定保证金的时候才需要使用到这个参数。如果该参数不传或传入0则代表使用默认。 */
func (this *ItemUpdateRequest) SetPaimaiInfoDeposit(value string) {
	this.Set("paimai_info.deposit", value)
}

/* 降价拍宝贝的降价周期(分钟)。降价拍宝贝的价格每隔paimai_info.interval时间会下降一次increment。<br /> 支持最大值为：60<br /> 支持最小值为：1 */
func (this *ItemUpdateRequest) SetPaimaiInfoInterval(value string) {
	this.Set("paimai_info.interval", value)
}

/* 拍卖商品选择的拍卖类型，拍卖类型包括三种：增价拍(1)，荷兰拍(2)和降价拍(3)。<br /> 支持最大值为：3<br /> 支持最小值为：1 */
func (this *ItemUpdateRequest) SetPaimaiInfoMode(value string) {
	this.Set("paimai_info.mode", value)
}

/* 降价拍宝贝的保留价。对于降价拍来说，paimai_info.reserve必须大于0，且小于price-increment，而且（price-paimai_info.reserve）/increment的计算结果必须为整数 */
func (this *ItemUpdateRequest) SetPaimaiInfoReserve(value string) {
	this.Set("paimai_info.reserve", value)
}

/* 自定义销售周期的小时数。拍卖宝贝可以自定义销售周期，这里指定销售周期的小时数。自定义销售周期的小时数。拍卖宝贝可以自定义销售周期，这里指定销售周期的小时数。注意，该参数只作为输入参数，不能通过taobao.item.get接口获取。<br /> 支持最大值为：48<br /> 支持最小值为：1 */
func (this *ItemUpdateRequest) SetPaimaiInfoValidHour(value string) {
	this.Set("paimai_info.valid_hour", value)
}

/* 自定义销售周期的分钟数。拍卖宝贝可以自定义销售周期，这里是指定销售周期的分钟数。自定义销售周期的小时数。拍卖宝贝可以自定义销售周期，这里指定销售周期的小时数。注意，该参数只作为输入参数，不能通过taobao.item.get接口获取。<br /> 支持最大值为：59<br /> 支持最小值为：0 */
func (this *ItemUpdateRequest) SetPaimaiInfoValidMinute(value string) {
	this.Set("paimai_info.valid_minute", value)
}

/* 商品主图需要关联的图片空间的相对url。这个url所对应的图片必须要属于当前用户。pic_path和image只需要传入一个,如果两个都传，默认选择pic_path */
func (this *ItemUpdateRequest) SetPicPath(value string) {
	this.Set("pic_path", value)
}

/* 平邮费用。取值范围:0.01-999.00;精确到2位小数;单位:元。如:5.07，表示:5元7分, 注:post_fee,express_fee,ems_fee需一起填写 */
func (this *ItemUpdateRequest) SetPostFee(value string) {
	this.Set("post_fee", value)
}

/* 宝贝所属的运费模板ID。取值范围：整数且必须是该卖家的运费模板的ID（可通过taobao.delivery.templates.get获得当前会话用户的所有邮费模板） */
func (this *ItemUpdateRequest) SetPostageId(value string) {
	this.Set("postage_id", value)
}

/* 商品价格。取值范围:0-100000000;精确到2位小数;单位:元。如:200.07，表示:200元7分。需要在正确的价格区间内。 拍卖商品对应的起拍价。 */
func (this *ItemUpdateRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 商品所属的产品ID(B商家发布商品需要用) */
func (this *ItemUpdateRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 属性值别名。如pid:vid:别名;pid1:vid1:别名1， pid:属性id vid:值id。总长度不超过800字节<br /> 支持最大长度为：800<br /> 支持的最大列表长度为：800 */
func (this *ItemUpdateRequest) SetPropertyAlias(value string) {
	this.Set("property_alias", value)
}

/* 商品属性列表。格式:pid:vid;pid:vid。属性的pid调用taobao.itemprops.get取得，属性值的vid用taobao.itempropvalues.get取得vid。 如果该类目下面没有属性，可以不用填写。如果有属性，必选属性必填，其他非必选属性可以选择不填写.属性不能超过35对。所有属性加起来包括分割符不能超过549字节，单个属性没有限制。 如果有属性是可输入的话，则用字段input_str填入属性的值。 */
func (this *ItemUpdateRequest) SetProps(value string) {
	this.Set("props", value)
}

/* 景区门票在选择订金支付时候，需要交的预订费。传入的值是1到20之间的数值，小数点后最多可以保留两位（多余的部分将做四舍五入的处理）。这个数值表示的是预订费的比例，最终的预订费为 scenic_ticket_book_cost乘一口价除以100 */
func (this *ItemUpdateRequest) SetScenicTicketBookCost(value string) {
	this.Set("scenic_ticket_book_cost", value)
}

/* 景区门票类宝贝编辑时候，当卖家签订了支付宝代扣协议时候，需要选择支付方式：全额支付和订金支付。当scenic_ticket_pay_way为1时表示全额支付，为2时表示订金支付 */
func (this *ItemUpdateRequest) SetScenicTicketPayWay(value string) {
	this.Set("scenic_ticket_pay_way", value)
}

/* 商品卖点信息，最长150个字符。天猫和集市都可用<br /> 支持最大长度为：150<br /> 支持的最大列表长度为：150 */
func (this *ItemUpdateRequest) SetSellPoint(value string) {
	this.Set("sell_point", value)
}

/* 是否承诺退换货服务!虚拟商品无须设置此项! */
func (this *ItemUpdateRequest) SetSellPromise(value string) {
	this.Set("sell_promise", value)
}

/* 重新关联商品与店铺类目，结构:",cid1,cid2,...,"，如果店铺类目存在二级类目，必须传入子类目cids。 */
func (this *ItemUpdateRequest) SetSellerCids(value string) {
	this.Set("seller_cids", value)
}

/* sku层面的条形码，多个SKU情况，与SKU价格库存格式类似，用逗号分隔 */
func (this *ItemUpdateRequest) SetSkuBarcode(value string) {
	this.Set("sku_barcode", value)
}

/* Sku的外部id串，结构如：1234,1342,… sku_properties, sku_quantities, sku_prices, sku_outer_ids在输入数据时要一一对应，如果没有sku_outer_ids也要写上这个参数，入参是","(这个是两个sku的示列，逗号数应该是sku个数减1)；该参数最大长度是512个字节 */
func (this *ItemUpdateRequest) SetSkuOuterIds(value string) {
	this.Set("sku_outer_ids", value)
}

/* 更新的Sku的价格串，结构如：10.00,5.00,… 精确到2位小数;单位:元。如:200.07，表示:200元7分 */
func (this *ItemUpdateRequest) SetSkuPrices(value string) {
	this.Set("sku_prices", value)
}

/* 更新的Sku的属性串，调用taobao.itemprops.get获取类目属性，如果属性是销售属性，再用taobao.itempropvalues.get取得vid。格式:pid:vid;pid:vid,多个sku之间用逗号分隔。该字段内的销售属性(自定义的除外)也需要在props字段填写 . 规则：如果该SKU存在旧商品，则修改；否则新增Sku。如果更新时有对Sku进行操作，则Sku的properties一定要传入。如果存在自定义销售属性，则格式为pid:vid;pid2:vid2;$pText:vText，其中$pText:vText为自定义属性。限制：其中$pText的’$’前缀不能少，且pText和vText文本中不可以存在 冒号:和分号;以及逗号 */
func (this *ItemUpdateRequest) SetSkuProperties(value string) {
	this.Set("sku_properties", value)
}

/* 更新的Sku的数量串，结构如：num1,num2,num3 如:2,3,4 */
func (this *ItemUpdateRequest) SetSkuQuantities(value string) {
	this.Set("sku_quantities", value)
}

/* 暂时不可用 */
func (this *ItemUpdateRequest) SetSkuSpecIds(value string) {
	this.Set("sku_spec_ids", value)
}

/* 商品新旧程度。可选值:new（全新）,unused（闲置）,second（二手）。 */
func (this *ItemUpdateRequest) SetStuffStatus(value string) {
	this.Set("stuff_status", value)
}

/* 商品是否支持拍下减库存:1支持;2取消支持(付款减库存);0(默认)不更改
集市卖家默认拍下减库存;
商城卖家默认付款减库存 */
func (this *ItemUpdateRequest) SetSubStock(value string) {
	this.Set("sub_stock", value)
}

/* 宝贝标题. 不能超过30字符,受违禁词控制<br /> 支持最大长度为：120<br /> 支持的最大列表长度为：120 */
func (this *ItemUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 有效期。可选值:7,14;单位:天; */
func (this *ItemUpdateRequest) SetValidThru(value string) {
	this.Set("valid_thru", value)
}

/* 商品的重量(商超卖家专用字段) */
func (this *ItemUpdateRequest) SetWeight(value string) {
	this.Set("weight", value)
}

type ItemUpdateResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	ItemUpdateResponseResult `json:"item_update_response"`
}
type ItemUpdateResponseResult struct {
	/* 商品结构里的num_iid，modified */
	Item *Item `json:"item"`
}

/*taobao.item.update.delisting*/
type ItemUpdateDelistingRequest struct {
	values url.Values
}

func (this *ItemUpdateDelistingRequest) GetApiMethodName() string {
	return "taobao.item.update.delisting"
}
func (this *ItemUpdateDelistingRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemUpdateDelistingRequest) GetValues() url.Values {
	return this.values
}

/* 商品数字ID，该参数必须<br /> 支持最小值为：0 */
func (this *ItemUpdateDelistingRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

type ItemUpdateDelistingResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	ItemUpdateDelistingResponseResult `json:"item_update_delisting_response"`
}
type ItemUpdateDelistingResponseResult struct {
	/* 返回商品更新信息：返回的结果是:num_iid和modified */
	Item *Item `json:"item"`
}

/*taobao.item.update.listing*/
type ItemUpdateListingRequest struct {
	values url.Values
}

func (this *ItemUpdateListingRequest) GetApiMethodName() string {
	return "taobao.item.update.listing"
}
func (this *ItemUpdateListingRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemUpdateListingRequest) GetValues() url.Values {
	return this.values
}

/* 需要上架的商品的数量。取值范围:大于零的整数。如果商品有sku，则上架数量默认为所有sku数量总和，不可修改。否则商品数量根据设置数量调整为num<br /> 支持最小值为：0 */
func (this *ItemUpdateListingRequest) SetNum(value string) {
	this.Set("num", value)
}

/* 商品数字ID，该参数必须<br /> 支持最小值为：0 */
func (this *ItemUpdateListingRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

type ItemUpdateListingResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	ItemUpdateListingResponseResult `json:"item_update_listing_response"`
}
type ItemUpdateListingResponseResult struct {
	/* 上架后返回的商品信息：返回的结果就是:num_iid和modified */
	Item *Item `json:"item"`
}

/*taobao.items.custom.get*/
type ItemsCustomGetRequest struct {
	values url.Values
}

func (this *ItemsCustomGetRequest) GetApiMethodName() string {
	return "taobao.items.custom.get"
}
func (this *ItemsCustomGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemsCustomGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表。可选值：Item商品结构体中的所有字段；多个字段之间用“,”分隔。如果想返回整个子对象，那字段为item_img，如果是想返回子对象里面的字段，那字段为item_img.url。新增返回字段：one_station标记商品是否淘1站商品 */
func (this *ItemsCustomGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 商品的外部商品ID，支持批量，最多不超过40个。 */
func (this *ItemsCustomGetRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

type ItemsCustomGetResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	ItemsCustomGetResponseResult `json:"items_custom_get_response"`
}
type ItemsCustomGetResponseResult struct {
	/* 商品列表，具体返回字段以fields决定 */
	Items []*Item `json:"items"`
}

/*taobao.items.inventory.get*/
type ItemsInventoryGetRequest struct {
	values url.Values
}

func (this *ItemsInventoryGetRequest) GetApiMethodName() string {
	return "taobao.items.inventory.get"
}
func (this *ItemsInventoryGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemsInventoryGetRequest) GetValues() url.Values {
	return this.values
}

/* 分类字段。可选值:<br>
regular_shelved(定时上架)<br>
never_on_shelf(从未上架)<br>
off_shelf(我下架的)<br>
for_shelved(等待所有上架)<br>

sold_out(全部卖完)<br>
violation_off_shelf(违规下架的)<br>
默认查询for_shelved(等待所有上架)这个状态的商品<br>
<font color='red'>注：for_shelved(等待所有上架)=regular_shelved(定时上架)+never_on_shelf(从未上架)+off_shelf(我下架的)</font> */
func (this *ItemsInventoryGetRequest) SetBanner(value string) {
	this.Set("banner", value)
}

/* 商品类目ID。ItemCat中的cid字段。可以通过taobao.itemcats.get取到<br /> 支持最小值为：0 */
func (this *ItemsInventoryGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 商品结束修改时间 */
func (this *ItemsInventoryGetRequest) SetEndModified(value string) {
	this.Set("end_modified", value)
}

/* 需返回的字段列表。可选值为 Item 商品结构体中的以下字段：
approve_status,num_iid,title,nick,type,cid,pic_url,num,props,valid_thru, list_time,price,has_discount,has_invoice,has_warranty,has_showcase, modified,delist_time,postage_id,seller_cids,outer_id；字段之间用“,”分隔。<br>
不支持其他字段，如果需要获取其他字段数据，调用taobao.item.get。 */
func (this *ItemsInventoryGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 是否参与会员折扣。可选值：true，false。默认不过滤该条件 */
func (this *ItemsInventoryGetRequest) SetHasDiscount(value string) {
	this.Set("has_discount", value)
}

/* 是否挂接了达尔文标准产品体系。 */
func (this *ItemsInventoryGetRequest) SetIsCspu(value string) {
	this.Set("is_cspu", value)
}

/* 商品是否在外部网店显示 */
func (this *ItemsInventoryGetRequest) SetIsEx(value string) {
	this.Set("is_ex", value)
}

/* 商品是否在淘宝显示 */
func (this *ItemsInventoryGetRequest) SetIsTaobao(value string) {
	this.Set("is_taobao", value)
}

/* 排序方式。格式为column:asc/desc ，column可选值:list_time(上架时间),delist_time(下架时间),num(商品数量)，modified(最近修改时间);默认上架时间降序(即最新上架排在前面)。如按照上架时间降序排序方式为list_time:desc */
func (this *ItemsInventoryGetRequest) SetOrderBy(value string) {
	this.Set("order_by", value)
}

/* 页码。取值范围:大于零小于等于101的整数;默认值为1，即返回第一页数据。当页码超过101页时系统就会报错，故请大家在用此接口获取数据时尽可能的细化自己的搜索条件，例如根据修改时间分段获取商品。<br /> 支持最大值为：101 */
func (this *ItemsInventoryGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数。取值范围:大于零的整数;最大值：200；默认值：40。 */
func (this *ItemsInventoryGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 搜索字段。搜索商品的title。 */
func (this *ItemsInventoryGetRequest) SetQ(value string) {
	this.Set("q", value)
}

/* 卖家店铺内自定义类目ID。多个之间用“,”分隔。可以根据taobao.sellercats.list.get获得.(<font color="red">注：目前最多支持32个ID号传入</font>) */
func (this *ItemsInventoryGetRequest) SetSellerCids(value string) {
	this.Set("seller_cids", value)
}

/* 商品起始修改时间 */
func (this *ItemsInventoryGetRequest) SetStartModified(value string) {
	this.Set("start_modified", value)
}

type ItemsInventoryGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	ItemsInventoryGetResponseResult `json:"items_inventory_get_response"`
}
type ItemsInventoryGetResponseResult struct {
	/* 搜索到底商品列表，具体字段根据设定的fields决定，不包括desc,stuff_status字段 */
	Items []*Item `json:"items"`
	/* 搜索到符合条件的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.items.list.get*/
type ItemsListGetRequest struct {
	values url.Values
}

func (this *ItemsListGetRequest) GetApiMethodName() string {
	return "taobao.items.list.get"
}
func (this *ItemsListGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemsListGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要返回的商品对象字段。可选值：Item商品结构体中字段均可返回(除item_weight,item_size)；多个字段用“,”分隔。如果想返回整个子对象，那字段为itemimg，如果是想返回子对象里面的字段，那字段为itemimg.url。 */
func (this *ItemsListGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 商品数字id列表，多个num_iid用逗号隔开，一次不超过20个。 */
func (this *ItemsListGetRequest) SetNumIids(value string) {
	this.Set("num_iids", value)
}

/* 商品数字id列表，多个track_iid用逗号隔开，一次不超过20个。 */
func (this *ItemsListGetRequest) SetTrackIids(value string) {
	this.Set("track_iids", value)
}

type ItemsListGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	ItemsListGetResponseResult `json:"items_list_get_response"`
}
type ItemsListGetResponseResult struct {
	/* 获取的商品 具体字段根据权限和设定的fields决定 */
	Items []*Item `json:"items"`
}

/*taobao.items.onsale.get*/
type ItemsOnsaleGetRequest struct {
	values url.Values
}

func (this *ItemsOnsaleGetRequest) GetApiMethodName() string {
	return "taobao.items.onsale.get"
}
func (this *ItemsOnsaleGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemsOnsaleGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品类目ID。ItemCat中的cid字段。可以通过taobao.itemcats.get取到<br /> 支持最小值为：0 */
func (this *ItemsOnsaleGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 结束的修改时间 */
func (this *ItemsOnsaleGetRequest) SetEndModified(value string) {
	this.Set("end_modified", value)
}

/* 需返回的字段列表。可选值：Item商品结构体中的以下字段：
approve_status,num_iid,title,nick,type,cid,pic_url,num,props,valid_thru,list_time,price,has_discount,has_invoice,has_warranty,has_showcase,modified,delist_time,postage_id,seller_cids,outer_id；字段之间用“,”分隔。
不支持其他字段，如果需要获取其他字段数据，调用taobao.item.get。 */
func (this *ItemsOnsaleGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 是否参与会员折扣。可选值：true，false。默认不过滤该条件 */
func (this *ItemsOnsaleGetRequest) SetHasDiscount(value string) {
	this.Set("has_discount", value)
}

/* 是否橱窗推荐。 可选值：true，false。默认不过滤该条件 */
func (this *ItemsOnsaleGetRequest) SetHasShowcase(value string) {
	this.Set("has_showcase", value)
}

/* 是否挂接了达尔文标准产品体系。 */
func (this *ItemsOnsaleGetRequest) SetIsCspu(value string) {
	this.Set("is_cspu", value)
}

/* 商品是否在外部网店显示 */
func (this *ItemsOnsaleGetRequest) SetIsEx(value string) {
	this.Set("is_ex", value)
}

/* 商品是否在淘宝显示 */
func (this *ItemsOnsaleGetRequest) SetIsTaobao(value string) {
	this.Set("is_taobao", value)
}

/* 排序方式。格式为column:asc/desc ，column可选值:list_time(上架时间),delist_time(下架时间),num(商品数量)，modified(最近修改时间)，sold_quantity（商品销量）,;默认上架时间降序(即最新上架排在前面)。如按照上架时间降序排序方式为list_time:desc */
func (this *ItemsOnsaleGetRequest) SetOrderBy(value string) {
	this.Set("order_by", value)
}

/* 页码。取值范围:大于零的整数。默认值为1,即默认返回第一页数据。用此接口获取数据时，当翻页获取的条数（page_no*page_size）超过10万,为了保护后台搜索引擎，接口将报错。所以请大家尽可能的细化自己的搜索条件，例如根据修改时间分段获取商品 */
func (this *ItemsOnsaleGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数。取值范围:大于零的整数;最大值：200；默认值：40。用此接口获取数据时，当翻页获取的条数（page_no*page_size）超过2万,为了保护后台搜索引擎，接口将报错。所以请大家尽可能的细化自己的搜索条件，例如根据修改时间分段获取商品 */
func (this *ItemsOnsaleGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 搜索字段。搜索商品的title。 */
func (this *ItemsOnsaleGetRequest) SetQ(value string) {
	this.Set("q", value)
}

/* 卖家店铺内自定义类目ID。多个之间用“,”分隔。可以根据taobao.sellercats.list.get获得.(<font color="red">注：目前最多支持32个ID号传入</font>) */
func (this *ItemsOnsaleGetRequest) SetSellerCids(value string) {
	this.Set("seller_cids", value)
}

/* 起始的修改时间 */
func (this *ItemsOnsaleGetRequest) SetStartModified(value string) {
	this.Set("start_modified", value)
}

type ItemsOnsaleGetResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	ItemsOnsaleGetResponseResult `json:"items_onsale_get_response"`
}
type ItemsOnsaleGetResponseResult struct {
	/* 搜索到的商品列表，具体字段根据设定的fields决定，不包括desc字段 */
	Items []*Item `json:"items"`
	/* 搜索到符合条件的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.product.add*/
type ProductAddRequest struct {
	values url.Values
}

func (this *ProductAddRequest) GetApiMethodName() string {
	return "taobao.product.add"
}
func (this *ProductAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ProductAddRequest) GetValues() url.Values {
	return this.values
}

/* 非关键属性结构:pid:vid;pid:vid.<br>
非关键属性<font color=red>不包含</font>关键属性、销售属性、用户自定义属性、商品属性;
<br>调用taobao.itemprops.get获取pid,调用taobao.itempropvalues.get获取vid.<br><font color=red>注:支持最大长度为512字节</font><br /> 支持最大长度为：512<br /> 支持的最大列表长度为：512 */
func (this *ProductAddRequest) SetBinds(value string) {
	this.Set("binds", value)
}

/* 商品类目ID.调用taobao.itemcats.get获取;注意:必须是叶子类目 id. */
func (this *ProductAddRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 用户自定义属性,结构：pid1:value1;pid2:value2，如果有型号，系列等子属性用: 隔开 例如：“20000:优衣库:型号:001;632501:1234”，表示“品牌:优衣库:型号:001;货号:1234”
<br><font color=red>注：包含所有自定义属性的传入</font> */
func (this *ProductAddRequest) SetCustomerProps(value string) {
	this.Set("customer_props", value)
}

/* 产品描述.最大不超过25000个字符 */
func (this *ProductAddRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 存放产品扩展信息，由List(ProductExtraInfo)转化成jsonArray存入.<br /> 支持最大长度为：25000<br /> 支持的最大列表长度为：25000 */
func (this *ProductAddRequest) SetExtraInfo(value string) {
	this.Set("extra_info", value)
}

/* 产品主图片.最大1M,目前仅支持GIF,JPG.<br /> 支持的文件类型为：gif,jpg,png,jpeg<br /> 支持的最大列表长度为：1048576 */
func (this *ProductAddRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 是否发布套装产品，和suite_items_str配合使用，is_pub_suite=true走套装SPU发布逻辑，达尔文体系下不需要再走tmall.product.spec.add发布产品规格 */
func (this *ProductAddRequest) SetIsPubSuite(value string) {
	this.Set("is_pub_suite", value)
}

/* 是不是主图 */
func (this *ProductAddRequest) SetMajor(value string) {
	this.Set("major", value)
}

/* 市场ID，1为新增C2C市场的产品信息， 2为新增B2C市场的产品信息。
不填写此值则C用户新增B2C市场的产品信息，B用户新增B2C市场的产品信息。 */
func (this *ProductAddRequest) SetMarketId(value string) {
	this.Set("market_id", value)
}

/* 上市时间。目前只支持鞋城类目传入此参数 */
func (this *ProductAddRequest) SetMarketTime(value string) {
	this.Set("market_time", value)
}

/* 产品名称,最大30个字符. */
func (this *ProductAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 外部产品ID */
func (this *ProductAddRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 包装清单。注意，在管控类目下，包装清单不能为空，同时保证清单的格式为：
名称:数字;名称:数字;
其中，名称不能违禁、不能超过60字符，数字不能超过999 */
func (this *ProductAddRequest) SetPackingList(value string) {
	this.Set("packing_list", value)
}

/* 产品市场价.精确到2位小数;单位为元.如：200.07 */
func (this *ProductAddRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 销售属性值别名。格式为pid1:vid1:alias1;pid1:vid2:alia2。只有少数销售属性值支持传入别名，比如颜色和尺寸 */
func (this *ProductAddRequest) SetPropertyAlias(value string) {
	this.Set("property_alias", value)
}

/* 关键属性 结构:pid:vid;pid:vid.调用taobao.itemprops.get获取pid,调用taobao.itempropvalues.get获取vid;如果碰到用户自定义属性,请用customer_props. */
func (this *ProductAddRequest) SetProps(value string) {
	this.Set("props", value)
}

/* 销售属性结构:pid:vid;pid:vid.调用taobao.itemprops.get获取is_sale_prop＝true的pid,调用taobao.itempropvalues.get获取vid. */
func (this *ProductAddRequest) SetSaleProps(value string) {
	this.Set("sale_props", value)
}

/* 商品卖点描述，长度限制为20个汉字 */
func (this *ProductAddRequest) SetSellPt(value string) {
	this.Set("sell_pt", value)
}

/* 发布套装产品时，套装关联的产品规格+数量的字符串，格式：specsId:number。 */
func (this *ProductAddRequest) SetSuiteItemsStr(value string) {
	this.Set("suite_items_str", value)
}

/* 在天猫，无关键属性发布产品，必须指定模板ID,模板ID通过tmall.product.template.get获取 */
func (this *ProductAddRequest) SetTemplateId(value string) {
	this.Set("template_id", value)
}

type ProductAddResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	ProductAddResponseResult `json:"product_add_response"`
}
type ProductAddResponseResult struct {
	/* 产品结构 */
	Product *Product `json:"product"`
}

/*taobao.product.get*/
type ProductGetRequest struct {
	values url.Values
}

func (this *ProductGetRequest) GetApiMethodName() string {
	return "taobao.product.get"
}
func (this *ProductGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ProductGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品类目id.调用taobao.itemcats.get获取;必须是叶子类目id,如果没有传product_id,那么cid和props必须要传. */
func (this *ProductGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 用户自定义关键属性,结构：pid1:value1;pid2:value2，如果有型号，系列等子属性用: 隔开 例如：“20000:优衣库:型号:001;632501:1234”，表示“品牌:优衣库:型号:001;货号:1234” */
func (this *ProductGetRequest) SetCustomerProps(value string) {
	this.Set("customer_props", value)
}

/* 需返回的字段列表.可选值:Product数据结构中的所有字段;多个字段之间用","分隔. */
func (this *ProductGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 市场ID，1为取C2C市场的产品信息， 2为取B2C市场的产品信息。
不填写此值则默认取C2C的产品信息。 */
func (this *ProductGetRequest) SetMarketId(value string) {
	this.Set("market_id", value)
}

/* Product的id.两种方式来查看一个产品:1.传入product_id来查询 2.传入cid和props来查询 */
func (this *ProductGetRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 比如:诺基亚N73这个产品的关键属性列表就是:品牌:诺基亚;型号:N73,对应的PV值就是10005:10027;10006:29729. */
func (this *ProductGetRequest) SetProps(value string) {
	this.Set("props", value)
}

type ProductGetResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	ProductGetResponseResult `json:"product_get_response"`
}
type ProductGetResponseResult struct {
	/* 返回具体信息为入参fields请求的字段信息 */
	Product *Product `json:"product"`
}

/*taobao.product.img.delete*/
type ProductImgDeleteRequest struct {
	values url.Values
}

func (this *ProductImgDeleteRequest) GetApiMethodName() string {
	return "taobao.product.img.delete"
}
func (this *ProductImgDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ProductImgDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 非主图ID */
func (this *ProductImgDeleteRequest) SetId(value string) {
	this.Set("id", value)
}

/* 产品ID.Product的id,通过taobao.product.add接口新增产品的时候会返回id. */
func (this *ProductImgDeleteRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

type ProductImgDeleteResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	ProductImgDeleteResponseResult `json:"product_img_delete_response"`
}
type ProductImgDeleteResponseResult struct {
	/* 返回productimg中的：id,product_id */
	ProductImg *ProductImg `json:"product_img"`
}

/*taobao.product.img.upload*/
type ProductImgUploadRequest struct {
	values url.Values
}

func (this *ProductImgUploadRequest) GetApiMethodName() string {
	return "taobao.product.img.upload"
}
func (this *ProductImgUploadRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ProductImgUploadRequest) GetValues() url.Values {
	return this.values
}

/* 产品图片ID.修改图片时需要传入 */
func (this *ProductImgUploadRequest) SetId(value string) {
	this.Set("id", value)
}

/* 图片内容.图片最大为500K,只支持JPG,GIF格式.<br /> 支持的文件类型为：gif,jpg,png,jpeg<br /> 支持的最大列表长度为：1048576 */
func (this *ProductImgUploadRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 是否将该图片设为主图.可选值:true,false;默认值:false. */
func (this *ProductImgUploadRequest) SetIsMajor(value string) {
	this.Set("is_major", value)
}

/* 图片序号 */
func (this *ProductImgUploadRequest) SetPosition(value string) {
	this.Set("position", value)
}

/* 产品ID.Product的id */
func (this *ProductImgUploadRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

type ProductImgUploadResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	ProductImgUploadResponseResult `json:"product_img_upload_response"`
}
type ProductImgUploadResponseResult struct {
	/* 返回产品图片结构中的：url,id,created,modified */
	ProductImg *ProductImg `json:"product_img"`
}

/*taobao.product.propimg.delete*/
type ProductPropimgDeleteRequest struct {
	values url.Values
}

func (this *ProductPropimgDeleteRequest) GetApiMethodName() string {
	return "taobao.product.propimg.delete"
}
func (this *ProductPropimgDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ProductPropimgDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 属性图片ID */
func (this *ProductPropimgDeleteRequest) SetId(value string) {
	this.Set("id", value)
}

/* 产品ID.Product的id. */
func (this *ProductPropimgDeleteRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

type ProductPropimgDeleteResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	ProductPropimgDeleteResponseResult `json:"product_propimg_delete_response"`
}
type ProductPropimgDeleteResponseResult struct {
	/* 返回product_prop_img数据结构中的：product_id,id */
	ProductPropImg *ProductPropImg `json:"product_prop_img"`
}

/*taobao.product.propimg.upload*/
type ProductPropimgUploadRequest struct {
	values url.Values
}

func (this *ProductPropimgUploadRequest) GetApiMethodName() string {
	return "taobao.product.propimg.upload"
}
func (this *ProductPropimgUploadRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ProductPropimgUploadRequest) GetValues() url.Values {
	return this.values
}

/* 产品属性图片ID */
func (this *ProductPropimgUploadRequest) SetId(value string) {
	this.Set("id", value)
}

/* 图片内容.图片最大为2M,只支持JPG,GIF.<br /> 支持的文件类型为：gif,jpg,png,jpeg<br /> 支持的最大列表长度为：1048576 */
func (this *ProductPropimgUploadRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 图片序号 */
func (this *ProductPropimgUploadRequest) SetPosition(value string) {
	this.Set("position", value)
}

/* 产品ID.Product的id */
func (this *ProductPropimgUploadRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 属性串.目前仅支持颜色属性.调用taobao.itemprops.get获取类目属性,取得颜色属性pid,再用taobao.itempropvalues.get取得vid;格式:pid:vid,只能传入一个颜色pid:vid串; */
func (this *ProductPropimgUploadRequest) SetProps(value string) {
	this.Set("props", value)
}

type ProductPropimgUploadResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	ProductPropimgUploadResponseResult `json:"product_propimg_upload_response"`
}
type ProductPropimgUploadResponseResult struct {
	/* 支持返回产品属性图片中的：url,id,created,modified */
	ProductPropImg *ProductPropImg `json:"product_prop_img"`
}

/*taobao.product.update*/
type ProductUpdateRequest struct {
	values url.Values
}

func (this *ProductUpdateRequest) GetApiMethodName() string {
	return "taobao.product.update"
}
func (this *ProductUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ProductUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 非关键属性.调用taobao.itemprops.get获取pid,调用taobao.itempropvalues.get获取vid;格式:pid:vid;pid:vid */
func (this *ProductUpdateRequest) SetBinds(value string) {
	this.Set("binds", value)
}

/* 产品描述.最大不超过25000个字符 */
func (this *ProductUpdateRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 存放产品扩展信息，由List(ProductExtraInfo)转化成jsonArray存入.<br /> 支持最大长度为：25000<br /> 支持的最大列表长度为：25000 */
func (this *ProductUpdateRequest) SetExtraInfo(value string) {
	this.Set("extra_info", value)
}

/* 产品主图.最大500K,目前仅支持GIF,JPG<br /> 支持的文件类型为：gif,jpg,png,jpeg<br /> 支持的最大列表长度为：1048576 */
func (this *ProductUpdateRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 是否是主图 */
func (this *ProductUpdateRequest) SetMajor(value string) {
	this.Set("major", value)
}

/* 市场ID，1为更新C2C市场的产品信息， 2为更新B2C市场的产品信息。
不填写此值则C用户更新B2C市场的产品信息，B用户更新B2C市场的产品信息。 */
func (this *ProductUpdateRequest) SetMarketId(value string) {
	this.Set("market_id", value)
}

/* 产品名称.最大不超过30个字符 */
func (this *ProductUpdateRequest) SetName(value string) {
	this.Set("name", value)
}

/* 自定义非关键属性 */
func (this *ProductUpdateRequest) SetNativeUnkeyprops(value string) {
	this.Set("native_unkeyprops", value)
}

/* 外部产品ID */
func (this *ProductUpdateRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 保证清单。 */
func (this *ProductUpdateRequest) SetPackingList(value string) {
	this.Set("packing_list", value)
}

/* 产品市场价.精确到2位小数;单位为元.如:200.07 */
func (this *ProductUpdateRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 产品ID */
func (this *ProductUpdateRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 销售属性.调用taobao.itemprops.get获取pid,调用taobao.itempropvalues.get获取vid;格式:pid:vid;pid:vid */
func (this *ProductUpdateRequest) SetSaleProps(value string) {
	this.Set("sale_props", value)
}

/* 产品卖点描述，最长40个字节 */
func (this *ProductUpdateRequest) SetSellPt(value string) {
	this.Set("sell_pt", value)
}

type ProductUpdateResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	ProductUpdateResponseResult `json:"product_update_response"`
}
type ProductUpdateResponseResult struct {
	/* 返回product数据结构中的：product_id,modified */
	Product *Product `json:"product"`
}

/*taobao.products.search*/
type ProductsSearchRequest struct {
	values url.Values
}

func (this *ProductsSearchRequest) GetApiMethodName() string {
	return "taobao.products.search"
}
func (this *ProductsSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ProductsSearchRequest) GetValues() url.Values {
	return this.values
}

/* 按条码搜索产品信息,多个逗号隔开，不支持条码为全零的方式 */
func (this *ProductsSearchRequest) SetBarcodeStr(value string) {
	this.Set("barcode_str", value)
}

/* 商品类目ID.调用taobao.itemcats.get获取. */
func (this *ProductsSearchRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 用户自定义关键属性,结构：pid1:value1;pid2:value2，如果有型号，系列等子属性用: 隔开 例如：“20000:优衣库:型号:001;632501:1234”，表示“品牌:优衣库:型号:001;货号:1234” */
func (this *ProductsSearchRequest) SetCustomerProps(value string) {
	this.Set("customer_props", value)
}

/* 需返回的字段列表.可选值:Product数据结构中的以下字段:product_id,name,pic_url,cid,props,price,tsc;多个字段之间用","分隔.新增字段status(product的当前状态) */
func (this *ProductsSearchRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 市场ID，1为取C2C市场的产品信息， 2为取B2C市场的产品信息。
不填写此值则默认取C2C的产品信息。 */
func (this *ProductsSearchRequest) SetMarketId(value string) {
	this.Set("market_id", value)
}

/* 页码.传入值为1代表第一页,传入值为2代表第二页,依此类推.默认返回的数据是从第一页开始. */
func (this *ProductsSearchRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数.每页返回最多返回100条,默认值为40. */
func (this *ProductsSearchRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 属性,属性值的组合.格式:pid:vid;pid:vid;调用taobao.itemprops.get获取类目属性pid
,再用taobao.itempropvalues.get取得vid. */
func (this *ProductsSearchRequest) SetProps(value string) {
	this.Set("props", value)
}

/* 搜索的关键词是用来搜索产品的title.　注:q,cid和props至少传入一个 */
func (this *ProductsSearchRequest) SetQ(value string) {
	this.Set("q", value)
}

/* 想要获取的产品的状态列表，支持多个状态并列获取，多个状态之间用","分隔，最多同时指定5种状态。例如，只获取小二确认的spu传入"3",只要商家确认的传入"0"，既要小二确认又要商家确认的传入"0,3"。目前只支持者两种类型的状态搜索，输入其他状态无效。<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *ProductsSearchRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 按关联产品规格specs搜索套装产品 */
func (this *ProductsSearchRequest) SetSuiteItemsStr(value string) {
	this.Set("suite_items_str", value)
}

/* 传入值为：3表示3C表示3C垂直市场产品，4表示鞋城垂直市场产品，8表示网游垂直市场产品。一次只能指定一种垂直市场类型<br /> 支持最小值为：0 */
func (this *ProductsSearchRequest) SetVerticalMarket(value string) {
	this.Set("vertical_market", value)
}

type ProductsSearchResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	ProductsSearchResponseResult `json:"products_search_response"`
}
type ProductsSearchResponseResult struct {
	/* 返回具体信息为入参fields请求的字段信息 */
	Products []*Product `json:"products"`
	/* 结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.skus.custom.get*/
type SkusCustomGetRequest struct {
	values url.Values
}

func (this *SkusCustomGetRequest) GetApiMethodName() string {
	return "taobao.skus.custom.get"
}
func (this *SkusCustomGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SkusCustomGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表。可选值：Sku结构体中的所有字段；字段之间用“,”隔开 */
func (this *SkusCustomGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* Sku的外部商家ID */
func (this *SkusCustomGetRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

type SkusCustomGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	SkusCustomGetResponseResult `json:"skus_custom_get_response"`
}
type SkusCustomGetResponseResult struct {
	/* Sku对象，具体字段以fields决定 */
	Skus []*Sku `json:"skus"`
}

/*taobao.skus.quantity.update*/
type SkusQuantityUpdateRequest struct {
	values url.Values
}

func (this *SkusQuantityUpdateRequest) GetApiMethodName() string {
	return "taobao.skus.quantity.update"
}
func (this *SkusQuantityUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SkusQuantityUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 商品数字ID，必填参数 */
func (this *SkusQuantityUpdateRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* 特殊可选，skuIdQuantities为空的时候用该字段通过outerId来指定sku和其库存修改值。格式为outerId:库存修改值;outerId:库存修改值。当skuIdQuantities不为空的时候该字段失效。当一个outerId对应多个sku时，所有匹配到的sku都会被修改库存。最多支持20个SKU同时修改。 */
func (this *SkusQuantityUpdateRequest) SetOuteridQuantities(value string) {
	this.Set("outerid_quantities", value)
}

/* sku库存批量修改入参，用于指定一批sku和每个sku的库存修改值，特殊可填。格式为skuId:库存修改值;skuId:库存修改值。最多支持20个SKU同时修改。 */
func (this *SkusQuantityUpdateRequest) SetSkuidQuantities(value string) {
	this.Set("skuid_quantities", value)
}

/* 库存更新方式，可选。1为全量更新，2为增量更新。如果不填，默认为全量更新。当选择全量更新时，如果库存更新值传入的是负数，会出错并返回错误码；当选择增量更新时，如果库存更新值为负数且绝对值大于当前库存，则sku库存会设置为0. */
func (this *SkusQuantityUpdateRequest) SetType(value string) {
	this.Set("type", value)
}

type SkusQuantityUpdateResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	SkusQuantityUpdateResponseResult `json:"skus_quantity_update_response"`
}
type SkusQuantityUpdateResponseResult struct {
	/* iid、numIid、num和modified，skus中每个sku的skuId、quantity和modified */
	Item *Item `json:"item"`
}

/*taobao.ticket.item.add*/
type TicketItemAddRequest struct {
	values url.Values
}

func (this *TicketItemAddRequest) GetApiMethodName() string {
	return "taobao.ticket.item.add"
}
func (this *TicketItemAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TicketItemAddRequest) GetValues() url.Values {
	return this.values
}

/* 门票商品返点比例（只对B卖家开放，单位为%） */
func (this *TicketItemAddRequest) SetAuctionPoint(value string) {
	this.Set("auction_point", value)
}

/* 门票商品状态（onsale：上架，instock：仓库）<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *TicketItemAddRequest) SetAuctionStatus(value string) {
	this.Set("auction_status", value)
}

/* 门票商品所在地-城市<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *TicketItemAddRequest) SetCity(value string) {
	this.Set("city", value)
}

/* 门票宝贝描述<br /> 支持最大长度为：25000<br /> 支持的最大列表长度为：25000 */
func (this *TicketItemAddRequest) SetDescription(value string) {
	this.Set("description", value)
}

/* 门票商品电子凭证是否关联本地商户-在门票商品为电子凭证时必选 */
func (this *TicketItemAddRequest) SetEtcAssociationStatus(value string) {
	this.Set("etc.association_status", value)
}

/* 门票商品电子凭证的自动退款比例-在门票商品为电子凭证时必选<br /> 支持最大值为：100<br /> 支持最小值为：0 */
func (this *TicketItemAddRequest) SetEtcAutoRefund(value string) {
	this.Set("etc.auto_refund", value)
}

/* 门票商品电子凭证的码商-在门票商品为电子凭证时必选 */
func (this *TicketItemAddRequest) SetEtcMerchantId(value string) {
	this.Set("etc.merchant_id", value)
}

/* 门票商品电子凭证的码商名-在门票商品为电子凭证时必选 */
func (this *TicketItemAddRequest) SetEtcMerchantNick(value string) {
	this.Set("etc.merchant_nick", value)
}

/* 门票商品电子凭证网店ID-在门票商品为电子凭证时必选 */
func (this *TicketItemAddRequest) SetEtcNetworkId(value string) {
	this.Set("etc.network_id", value)
}

/* 门票商品电子凭证的过期退款比例-在门票商品为电子凭证时必选<br /> 支持最大值为：100<br /> 支持最小值为：0 */
func (this *TicketItemAddRequest) SetEtcOverduePay(value string) {
	this.Set("etc.overdue_pay", value)
}

/* 门票商品电子凭证是否核销打款-在门票商品为电子凭证时必选 */
func (this *TicketItemAddRequest) SetEtcVerificationPay(value string) {
	this.Set("etc.verification_pay", value)
}

/* 门票商品是否有发票（有发票：true，没有发票：false）.
对于B卖家来说只能选择有发票。 */
func (this *TicketItemAddRequest) SetHaveInvoice(value string) {
	this.Set("have_invoice", value)
}

/* 商品主图-该值来自图片空间接口返回的图片链接（不包含域名和前缀） */
func (this *TicketItemAddRequest) SetImage1(value string) {
	this.Set("image_1", value)
}

/* 第一张多图-该值来自图片空间接口返回的图片链接（不包含域名和前缀） */
func (this *TicketItemAddRequest) SetImage2(value string) {
	this.Set("image_2", value)
}

/* 第二张多图-该值来自图片空间接口返回的图片链接（不包含域名和前缀） */
func (this *TicketItemAddRequest) SetImage3(value string) {
	this.Set("image_3", value)
}

/* 第三张多图-该值来自图片空间接口返回的图片链接（不包含域名和前缀） */
func (this *TicketItemAddRequest) SetImage4(value string) {
	this.Set("image_4", value)
}

/* 第四张多图-该值来自图片空间接口返回的图片链接（不包含域名和前缀） */
func (this *TicketItemAddRequest) SetImage5(value string) {
	this.Set("image_5", value)
}

/* 门票商品的上架时间（精确到分，格式为：yyyy-MM-dd HH:mm）<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *TicketItemAddRequest) SetListTime(value string) {
	this.Set("list_time", value)
}

/* 门票商品的物流运费模板-在产品规格使用到物流时必选 */
func (this *TicketItemAddRequest) SetPostageId(value string) {
	this.Set("postage_id", value)
}

/* 门票对应产品标识<br>
门票商品只能使用达尔文体系下的产品。该参数可通过taobao.products.search接口获取，注意返回产品的cspu_feature属性，该属性表明是否为达尔文体系下产品。 */
func (this *TicketItemAddRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 门票商品是否橱窗推荐（橱窗推荐；true，不推荐则可不用设置该值） */
func (this *TicketItemAddRequest) SetPromotedStatus(value string) {
	this.Set("promoted_status", value)
}

/* 门票商品所在地-省份<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *TicketItemAddRequest) SetProv(value string) {
	this.Set("prov", value)
}

/* 门票宝贝所属的店铺分类列表-店铺分类标识请使用店铺相关接口获取获取，多个店铺分类标识之间通过逗号进行分隔，最多包含10个分类标识 */
func (this *TicketItemAddRequest) SetShopCats(value string) {
	this.Set("shop_cats", value)
}

/* 门票商品产品规格信息，包括门票的库存价格等信息（产品规格可通过tmall.product.specs.get接口获取）。<br>请通过门票商品使用的产品所对应的产品规格信息进行设置，注意由于产品规格信息比较复杂，所以直接使用json作为传输，请按照约定传入正确的json格式）<br>
格式定义：<br>
<pre>
{
  "SKU":
	{
		"20890017-121840019_20394-121290067":{// 产品下的某个产品规格的属性属性值信息（pid-vid_pid-vid）
			"effDates":{
				"1":{
					"type":"0",// 有效期类型，0-非指定日票，1-指定日票，2-年卡
					"effDate" :{ // 有效期，如下几块，type已经去掉
						"startDate":"2013-01-01",// 有效期时间段开始时间,null代表未设置
						"endDate":"2013-12-31",// 有效期时间段结束时间,null代表未设置
						"weeks":["1","4"],// 有效期周,1~7代表周一到周日，null代表未设置
						"startHour":"12",// 有效期开始时间小时,null代表未设置
						"startMinute":"59",// 有效期开始时间分钟,null代表未设置
						"endHour":"18"// 有效期结束时间小时,null代表未设置
						"endMinute":"30"// 有效期结束时间分钟,null代表未设置
						"effDays":"1",// xx后n天内有效的天数，购买后、出票后、开卡后n天内有效,null代表未设置
					},
					"timeLimit":{// 入园时间限制数据
						"limit":{
							"type":"0",// 入园时间限制类型,0-不限，1-提前n天的n点n分，2-提前n小时n分钟
							"aheadDays":"3",// 入园时间限制类型为提前n天的n点n分时才使用，入园时间提前n天的天数
							"aheadAtHour":"12",// 入园时间限制类型为提前n天的n点n分时才使用，入园时间在n点n分之前的小时
							"aheadAtMinute":"30",// 入园时间限制类型为提前n天的n点n分时才使用，入园时间在n点n分之前的分钟
							"aheadHours":"48",// 入园时间限制类型为提前n小时n分时才使用，入园时间提前n小时的小时
							"aheadMinutes":"30",// 入园时间限制类型为提前n小时n分时才使用，入园时间提前n分钟的分钟
						}
						"autoActivate":{ // 有效期类型为年卡时才使用
							"type":"0",// 是否有最晚自动开卡时间,0-无，1-有最晚自动开卡
							"time":"30" // 天数,无最晚自动开发时间时为null
						}
					}

					"price" : 10000,
					"inventory" : 100,
					"outerId" : "商家编码"
				},
				"222":{}
			},
			"save":true, // 必须，代表是保存的有效数据

				"returnRule":{
					"type":"0",      // 0,1,2
					"value":""      // type 0:""，1:""，2:"卖家输入的文本"
				},
				"changeRule":{
					"type":"1",      // 0,1,2
					"value":""      // type 0:""，1:""，2:"卖家输入的文本"
				},
				"guide": "卖家输入的文本"
		}
	}
}
</pre><br> */
func (this *TicketItemAddRequest) SetSkus(value string) {
	this.Set("skus", value)
}

/* 门票商品库存技术方式（拍下减库存：true，付款减库存：false） */
func (this *TicketItemAddRequest) SetSubStockAtBuy(value string) {
	this.Set("sub_stock_at_buy", value)
}

/* 门票商品标题<br /> 支持最大长度为：60<br /> 支持的最大列表长度为：60 */
func (this *TicketItemAddRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 门票商品视频-视频标识由多媒体中相关接口获取 */
func (this *TicketItemAddRequest) SetVideoId(value string) {
	this.Set("video_id", value)
}

/* 门票商品是否参与店铺会员打折 */
func (this *TicketItemAddRequest) SetVipPromoted(value string) {
	this.Set("vip_promoted", value)
}

type TicketItemAddResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	TicketItemAddResponseResult `json:"ticket_item_add_response"`
}
type TicketItemAddResponseResult struct {
	/* 门票商品操作结果，具体请参见TicketItemProcessResult数据结构 */
	TicketItemProcessResult *TicketItemProcessResult `json:"ticket_item_process_result"`
}

/*taobao.ticket.item.get*/
type TicketItemGetRequest struct {
	values url.Values
}

func (this *TicketItemGetRequest) GetApiMethodName() string {
	return "taobao.ticket.item.get"
}
func (this *TicketItemGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TicketItemGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要返回的门票商品（TicketItem）对象字段，如title,price,skus等。<br>可选值：TicketItem商品结构体中所有字段均可返回；多个字段用“,”分隔。 */
func (this *TicketItemGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 新门票类目商品的标识（非日历价格库存商品） */
func (this *TicketItemGetRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

type TicketItemGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	TicketItemGetResponseResult `json:"ticket_item_get_response"`
}
type TicketItemGetResponseResult struct {
	/* 参见TicketItem数据结构文档 */
	TicketItem *TicketItem `json:"ticket_item"`
}

/*taobao.ticket.item.update*/
type TicketItemUpdateRequest struct {
	values url.Values
}

func (this *TicketItemUpdateRequest) GetApiMethodName() string {
	return "taobao.ticket.item.update"
}
func (this *TicketItemUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TicketItemUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 门票商品返点比例（只对B卖家开放，单位为%） */
func (this *TicketItemUpdateRequest) SetAuctionPoint(value string) {
	this.Set("auction_point", value)
}

/* 门票商品状态（onsale：上架，instock：仓库）<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *TicketItemUpdateRequest) SetAuctionStatus(value string) {
	this.Set("auction_status", value)
}

/* 门票商品所在地-城市<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *TicketItemUpdateRequest) SetCity(value string) {
	this.Set("city", value)
}

/* 门票宝贝描述<br /> 支持最大长度为：25000<br /> 支持的最大列表长度为：25000 */
func (this *TicketItemUpdateRequest) SetDescription(value string) {
	this.Set("description", value)
}

/* 门票商品电子凭证是否关联本地商户-在门票商品为电子凭证时必选 */
func (this *TicketItemUpdateRequest) SetEtcAssociationStatus(value string) {
	this.Set("etc.association_status", value)
}

/* 门票商品电子凭证的自动退款比例-在门票商品为电子凭证时必选<br /> 支持最大值为：100<br /> 支持最小值为：0 */
func (this *TicketItemUpdateRequest) SetEtcAutoRefund(value string) {
	this.Set("etc.auto_refund", value)
}

/* 门票商品电子凭证的码商-在门票商品为电子凭证时必选 */
func (this *TicketItemUpdateRequest) SetEtcMerchantId(value string) {
	this.Set("etc.merchant_id", value)
}

/* 门票商品电子凭证的码商名-在门票商品为电子凭证时必选 */
func (this *TicketItemUpdateRequest) SetEtcMerchantNick(value string) {
	this.Set("etc.merchant_nick", value)
}

/* 门票商品电子凭证网店ID-在门票商品为电子凭证时必选 */
func (this *TicketItemUpdateRequest) SetEtcNetworkId(value string) {
	this.Set("etc.network_id", value)
}

/* 门票商品电子凭证的过期退款比例-在门票商品为电子凭证时必选<br /> 支持最大值为：100<br /> 支持最小值为：0 */
func (this *TicketItemUpdateRequest) SetEtcOverduePay(value string) {
	this.Set("etc.overdue_pay", value)
}

/* 门票商品电子凭证是否核销打款-在门票商品为电子凭证时必选 */
func (this *TicketItemUpdateRequest) SetEtcVerificationPay(value string) {
	this.Set("etc.verification_pay", value)
}

/* 门票商品是否有发票（有发票：true，没有发票：false）.
对于B卖家来说只能选择有发票。 */
func (this *TicketItemUpdateRequest) SetHaveInvoice(value string) {
	this.Set("have_invoice", value)
}

/* 商品主图-该值来自图片空间接口返回的图片链接（不包含域名和前缀） */
func (this *TicketItemUpdateRequest) SetImage1(value string) {
	this.Set("image_1", value)
}

/* 第一张多图-该值来自图片空间接口返回的图片链接（不包含域名和前缀） */
func (this *TicketItemUpdateRequest) SetImage2(value string) {
	this.Set("image_2", value)
}

/* 第二张多图-该值来自图片空间接口返回的图片链接（不包含域名和前缀） */
func (this *TicketItemUpdateRequest) SetImage3(value string) {
	this.Set("image_3", value)
}

/* 第三张多图-该值来自图片空间接口返回的图片链接（不包含域名和前缀） */
func (this *TicketItemUpdateRequest) SetImage4(value string) {
	this.Set("image_4", value)
}

/* 第四张多图-该值来自图片空间接口返回的图片链接（不包含域名和前缀） */
func (this *TicketItemUpdateRequest) SetImage5(value string) {
	this.Set("image_5", value)
}

/* 需要更新的门票商品标识（只支持门票二期商品） */
func (this *TicketItemUpdateRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 门票商品的上架时间（精确到分，格式为：yyyy-MM-dd HH:mm）<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *TicketItemUpdateRequest) SetListTime(value string) {
	this.Set("list_time", value)
}

/* 门票商品的物流运费模板-在产品规格使用到物流时必选 */
func (this *TicketItemUpdateRequest) SetPostageId(value string) {
	this.Set("postage_id", value)
}

/* 门票商品挂载到的产品<br>
通过taobao.products.search获取产品信息，并且对应产品必须是小二确认的达尔文体系产品。 */
func (this *TicketItemUpdateRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 门票商品是否橱窗推荐（橱窗推荐；true，不推荐则可不用设置该值） */
func (this *TicketItemUpdateRequest) SetPromotedStatus(value string) {
	this.Set("promoted_status", value)
}

/* 门票商品所在地-省份<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *TicketItemUpdateRequest) SetProv(value string) {
	this.Set("prov", value)
}

/* 需要删除的字段列表 */
func (this *TicketItemUpdateRequest) SetRemoveFields(value string) {
	this.Set("remove_fields", value)
}

/* 门票宝贝所属的店铺分类列表-店铺分类标识请使用店铺相关接口获取获取，多个店铺分类标识之间通过逗号进行分隔，最多包含10个分类标识 */
func (this *TicketItemUpdateRequest) SetShopCats(value string) {
	this.Set("shop_cats", value)
}

/* 门票商品产品规格信息（门票的产品规格信息可以通过tmall.product.specs.get接口获取）<br>。请通过门票商品使用的产品所对应的产品规格信息进行设置，注意由于产品规格信息比较复杂，所以直接使用json作为传输，请按照约定传入正确的json格式）<br>
格式定义：<br>
<pre>
{
  "SKU":
	{
		"20890017-121840019_20394-121290067":{// 产品下的某个产品规格的属性属性值信息（pid-vid_pid-vid）
			"effDates":{
				"1":{
					"type":"0",// 有效期类型，0-非指定日票，1-指定日票，2-年卡
					"effDate" :{ // 有效期，如下几块，type已经去掉
						"startDate":"2013-01-01",// 有效期时间段开始时间,null代表未设置
						"endDate":"2013-12-31",// 有效期时间段结束时间,null代表未设置
						"weeks":["1","4"],// 有效期周,1~7代表周一到周日，null代表未设置
						"startHour":"12",// 有效期开始时间小时,null代表未设置
						"startMinute":"59",// 有效期开始时间分钟,null代表未设置
						"endHour":"18"// 有效期结束时间小时,null代表未设置
						"endMinute":"30"// 有效期结束时间分钟,null代表未设置
						"effDays":"1",// xx后n天内有效的天数，购买后、出票后、开卡后n天内有效,null代表未设置
					},
					"timeLimit":{// 入园时间限制数据
						"limit":{
							"type":"0",// 入园时间限制类型,0-不限，1-提前n天的n点n分，2-提前n小时n分钟
							"aheadDays":"3",// 入园时间限制类型为提前n天的n点n分时才使用，入园时间提前n天的天数
							"aheadAtHour":"12",// 入园时间限制类型为提前n天的n点n分时才使用，入园时间在n点n分之前的小时
							"aheadAtMinute":"30",// 入园时间限制类型为提前n天的n点n分时才使用，入园时间在n点n分之前的分钟
							"aheadHours":"48",// 入园时间限制类型为提前n小时n分时才使用，入园时间提前n小时的小时
							"aheadMinutes":"30",// 入园时间限制类型为提前n小时n分时才使用，入园时间提前n分钟的分钟
						}
						"autoActivate":{ // 有效期类型为年卡时才使用
							"type":"0",// 是否有最晚自动开卡时间,0-无，1-有最晚自动开卡
							"time":"30" // 天数,无最晚自动开发时间时为null
						}
					}

					"price" : 10000,
					"inventory" : 100,
					"outerId" : "商家编码"
				},
				"222":{}
			},
			"save":true, // 必须，代表是保存的有效数据

				"returnRule":{
					"type":"0",      // 0,1,2
					"value":""      // type 0:""，1:""，2:"卖家输入的文本"
				},
				"changeRule":{
					"type":"1",      // 0,1,2
					"value":""      // type 0:""，1:""，2:"卖家输入的文本"
				},
				"guide": "卖家输入的文本"
		}
	}
}
</pre><br> */
func (this *TicketItemUpdateRequest) SetSkus(value string) {
	this.Set("skus", value)
}

/* 门票商品库存技术方式（拍下减库存：true，付款减库存：false） */
func (this *TicketItemUpdateRequest) SetSubStockAtBuy(value string) {
	this.Set("sub_stock_at_buy", value)
}

/* 门票商品标题<br /> 支持最大长度为：60<br /> 支持的最大列表长度为：60 */
func (this *TicketItemUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 门票商品视频-视频标识由多媒体中相关接口获取 */
func (this *TicketItemUpdateRequest) SetVideoId(value string) {
	this.Set("video_id", value)
}

/* 门票商品是否参与店铺会员打折 */
func (this *TicketItemUpdateRequest) SetVipPromoted(value string) {
	this.Set("vip_promoted", value)
}

type TicketItemUpdateResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	TicketItemUpdateResponseResult `json:"ticket_item_update_response"`
}
type TicketItemUpdateResponseResult struct {
	/* 门票商品操作结果，具体请参见TicketItemProcessResult数据结构 */
	TicketItemProcessResult *TicketItemProcessResult `json:"ticket_item_process_result"`
}

/*taobao.ticket.items.get*/
type TicketItemsGetRequest struct {
	values url.Values
}

func (this *TicketItemsGetRequest) GetApiMethodName() string {
	return "taobao.ticket.items.get"
}
func (this *TicketItemsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TicketItemsGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要返回的门票商品（TicketItem）对象字段，如title,price,skus等。<br>可选值：TicketItem商品结构体中所有字段均可返回；多个字段用“,”分隔。 */
func (this *TicketItemsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 批量获取信息的商品标识。最多不能超过20个。 */
func (this *TicketItemsGetRequest) SetItemIds(value string) {
	this.Set("item_ids", value)
}

type TicketItemsGetResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	TicketItemsGetResponseResult `json:"ticket_items_get_response"`
}
type TicketItemsGetResponseResult struct {
	/* 商品信息 */
	TicketItems []*TicketItem `json:"ticket_items"`
}

/*taobao.ump.promotion.get*/
type UmpPromotionGetRequest struct {
	values url.Values
}

func (this *UmpPromotionGetRequest) GetApiMethodName() string {
	return "taobao.ump.promotion.get"
}
func (this *UmpPromotionGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpPromotionGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品id */
func (this *UmpPromotionGetRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

type UmpPromotionGetResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	UmpPromotionGetResponseResult `json:"ump_promotion_get_response"`
}
type UmpPromotionGetResponseResult struct {
	/* 优惠详细信息 */
	Promotions *PromotionDisplayTop `json:"promotions"`
}

/*tmall.brandcat.control.get*/
type TmallBrandcatControlGetRequest struct {
	values url.Values
}

func (this *TmallBrandcatControlGetRequest) GetApiMethodName() string {
	return "tmall.brandcat.control.get"
}
func (this *TmallBrandcatControlGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallBrandcatControlGetRequest) GetValues() url.Values {
	return this.values
}

type TmallBrandcatControlGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	TmallBrandcatControlGetResponseResult `json:"tmall_brandcat_control_get_response"`
}
type TmallBrandcatControlGetResponseResult struct {
	/* 被管控的类目和品牌信息。如何判断一个产品是否被管控，是去品牌的信息和类目信息做一个交集。 */
	BrandCatControlInfo *BrandCatControlInfo `json:"brand_cat_control_info"`
}

/*tmall.brandcat.propinput.get*/
type TmallBrandcatPropinputGetRequest struct {
	values url.Values
}

func (this *TmallBrandcatPropinputGetRequest) GetApiMethodName() string {
	return "tmall.brandcat.propinput.get"
}
func (this *TmallBrandcatPropinputGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallBrandcatPropinputGetRequest) GetValues() url.Values {
	return this.values
}

/* 品牌ID，如果类目没有品牌，指定null */
func (this *TmallBrandcatPropinputGetRequest) SetBrandId(value string) {
	this.Set("brand_id", value)
}

/* 类目ID */
func (this *TmallBrandcatPropinputGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 属性ID，如果属性有子属性，请指定最后一级子属性ID，tmall.brandcat.propinput.get返回的即为的该属性ID对应的输入特征，对于有子属性模板的情况指定顶级属性ID即可 */
func (this *TmallBrandcatPropinputGetRequest) SetPid(value string) {
	this.Set("pid", value)
}

type TmallBrandcatPropinputGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	TmallBrandcatPropinputGetResponseResult `json:"tmall_brandcat_propinput_get_response"`
}
type TmallBrandcatPropinputGetResponseResult struct {
	/* 属性输入特征 */
	PropertyInput *PropertyInputDO `json:"property_input"`
}

/*tmall.brandcat.salespro.get*/
type TmallBrandcatSalesproGetRequest struct {
	values url.Values
}

func (this *TmallBrandcatSalesproGetRequest) GetApiMethodName() string {
	return "tmall.brandcat.salespro.get"
}
func (this *TmallBrandcatSalesproGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallBrandcatSalesproGetRequest) GetValues() url.Values {
	return this.values
}

/* 被管控的品牌Id */
func (this *TmallBrandcatSalesproGetRequest) SetBrandId(value string) {
	this.Set("brand_id", value)
}

/* 被管控的类目Id */
func (this *TmallBrandcatSalesproGetRequest) SetCatId(value string) {
	this.Set("cat_id", value)
}

type TmallBrandcatSalesproGetResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	TmallBrandcatSalesproGetResponseResult `json:"tmall_brandcat_salespro_get_response"`
}
type TmallBrandcatSalesproGetResponseResult struct {
	/* 获取被管控品牌和类目下的销售属性，注意，一个管控品牌和类目下可能有多个销售属性。 */
	CatBrandSaleProps []*CatBrandSaleProp `json:"cat_brand_sale_props"`
}

/*tmall.brandcat.suiteconf.get*/
type TmallBrandcatSuiteconfGetRequest struct {
	values url.Values
}

func (this *TmallBrandcatSuiteconfGetRequest) GetApiMethodName() string {
	return "tmall.brandcat.suiteconf.get"
}
func (this *TmallBrandcatSuiteconfGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallBrandcatSuiteconfGetRequest) GetValues() url.Values {
	return this.values
}

type TmallBrandcatSuiteconfGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	TmallBrandcatSuiteconfGetResponseResult `json:"tmall_brandcat_suiteconf_get_response"`
}
type TmallBrandcatSuiteconfGetResponseResult struct {
	/* 套装的配置信息 */
	SuiteConfList []*SuiteConfDO `json:"suite_conf_list"`
}

/*tmall.item.desc.modules.get*/
type TmallItemDescModulesGetRequest struct {
	values url.Values
}

func (this *TmallItemDescModulesGetRequest) GetApiMethodName() string {
	return "tmall.item.desc.modules.get"
}
func (this *TmallItemDescModulesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallItemDescModulesGetRequest) GetValues() url.Values {
	return this.values
}

/* 淘宝后台发布商品的叶子类目id，可通过taobao.itemcats.get查到。api 访问地址http://api.taobao.com/apidoc/api.htm?spm=0.0.0.0.CFhhk4&path=cid:3-apiId:122 */
func (this *TmallItemDescModulesGetRequest) SetCatId(value string) {
	this.Set("cat_id", value)
}

/* 商家主帐号id */
func (this *TmallItemDescModulesGetRequest) SetUsrId(value string) {
	this.Set("usr_id", value)
}

type TmallItemDescModulesGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	TmallItemDescModulesGetResponseResult `json:"tmall_item_desc_modules_get_response"`
}
type TmallItemDescModulesGetResponseResult struct {
	/* 返回描述模块信息 */
	ModularDescInfo *ModularDescInfo `json:"modular_desc_info"`
}

/*tmall.product.books.add*/
type TmallProductBooksAddRequest struct {
	values url.Values
}

func (this *TmallProductBooksAddRequest) GetApiMethodName() string {
	return "tmall.product.books.add"
}
func (this *TmallProductBooksAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallProductBooksAddRequest) GetValues() url.Values {
	return this.values
}

/* 摘要信息，不支持HTML代码，长度限制5000 */
func (this *TmallProductBooksAddRequest) SetAbstractMsg(value string) {
	this.Set("abstract_msg", value)
}

/* 用户的Id,需要确定自己id的可以联系接口负责人<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *TmallProductBooksAddRequest) SetAppInfo(value string) {
	this.Set("app_info", value)
}

/* 作者/著者，最多填写三个人名，超出三个人的以“等”结束<br /> 支持最大长度为：80<br /> 支持的最大列表长度为：80 */
func (this *TmallProductBooksAddRequest) SetAuthor(value string) {
	this.Set("author", value)
}

/* 作者国别/地区，到国家级别<br /> 支持最大长度为：80<br /> 支持的最大列表长度为：80 */
func (this *TmallProductBooksAddRequest) SetAuthorArea(value string) {
	this.Set("author_area", value)
}

/* 条形码，数字，共13位，9787开头<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *TmallProductBooksAddRequest) SetBarCode(value string) {
	this.Set("bar_code", value)
}

/* 装帧<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *TmallProductBooksAddRequest) SetBookBind(value string) {
	this.Set("book_bind", value)
}

/* 开本，如：16  表示16开本 */
func (this *TmallProductBooksAddRequest) SetBookSize(value string) {
	this.Set("book_size", value)
}

/* 版本<br /> 支持的最大列表长度为：10 */
func (this *TmallProductBooksAddRequest) SetBookVersion(value string) {
	this.Set("book_version", value)
}

/* 目录，不支持HTML代码，长度限制为8000<br /> 支持最大长度为：8000<br /> 支持的最大列表长度为：8000 */
func (this *TmallProductBooksAddRequest) SetCatalog(value string) {
	this.Set("catalog", value)
}

/* 类目id */
func (this *TmallProductBooksAddRequest) SetCategoryId(value string) {
	this.Set("category_id", value)
}

/* 中图分类号，英文字母加数字组成<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *TmallProductBooksAddRequest) SetChinaClassifyNo(value string) {
	this.Set("china_classify_no", value)
}

/* cip数据编号，真实格式：（XXX）第***号，
导入时，格式为XXX-***<br /> 支持最大长度为：50<br /> 支持的最大列表长度为：50 */
func (this *TmallProductBooksAddRequest) SetCip(value string) {
	this.Set("cip", value)
}

/* 点评者，只写一个人的名字，超出的以“等”结束<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *TmallProductBooksAddRequest) SetCommentator(value string) {
	this.Set("commentator", value)
}

/* 用户自己的Id号 */
func (this *TmallProductBooksAddRequest) SetCustomId(value string) {
	this.Set("custom_id", value)
}

/* 图书名称(正副书名)<br /> 支持最大长度为：150<br /> 支持的最大列表长度为：150 */
func (this *TmallProductBooksAddRequest) SetDeputyName(value string) {
	this.Set("deputy_name", value)
}

/* 绘图者，只写一个人的名字，超出的以“等”结束<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *TmallProductBooksAddRequest) SetDrawor(value string) {
	this.Set("drawor", value)
}

/* 编者，只写一个人的名字，超出的以“等”结束<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *TmallProductBooksAddRequest) SetEditor(value string) {
	this.Set("editor", value)
}

/* 摄影者，只写一个人的名字，超出的以“等”结束<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *TmallProductBooksAddRequest) SetGraphor(value string) {
	this.Set("graphor", value)
}

/* 上传图片，图片上传使用byte[]类型 */
func (this *TmallProductBooksAddRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 不带‘-’的图书ISBN号
1. 位数限定：10位 末尾校验,7开头
2. 位数限定：13位、开头数字限定： 9787开头<br /> 支持最大长度为：13<br /> 支持的最大列表长度为：13 */
func (this *TmallProductBooksAddRequest) SetIsbn(value string) {
	this.Set("isbn", value)
}

/* 这条记录对应的淘宝的Ids */
func (this *TmallProductBooksAddRequest) SetItemIds(value string) {
	this.Set("item_ids", value)
}

/* 口述者，只写一个人的名字，超出的以“等”结束<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *TmallProductBooksAddRequest) SetNarrator(value string) {
	this.Set("narrator", value)
}

/* 分册名<br /> 支持最大长度为：150<br /> 支持的最大列表长度为：150 */
func (this *TmallProductBooksAddRequest) SetPartName(value string) {
	this.Set("part_name", value)
}

/* 分册号<br /> 支持的最大列表长度为：10 */
func (this *TmallProductBooksAddRequest) SetPartNo(value string) {
	this.Set("part_no", value)
}

/* 策划者，只写一个人的名字，超出的以“等”结束<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *TmallProductBooksAddRequest) SetPlottor(value string) {
	this.Set("plottor", value)
}

/* 价格支持整数和小数，小数保留小数点后两位，若有多个价格，价格之间通过','号分隔<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *TmallProductBooksAddRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 出版社名称<br /> 支持最大长度为：80<br /> 支持的最大列表长度为：80 */
func (this *TmallProductBooksAddRequest) SetPublishCompany(value string) {
	this.Set("publish_company", value)
}

/* 出版时间，格式必须注意：年份/月份 */
func (this *TmallProductBooksAddRequest) SetPublishYm(value string) {
	this.Set("publish_ym", value)
}

/* 年号，必须是完整的年份，如：2013，当输入的值不是四位或者首位大于2时，调接口失败<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *TmallProductBooksAddRequest) SetReginYear(value string) {
	this.Set("regin_year", value)
}

/* 注释者，只写一个人的名字，超出的以“等”结束<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *TmallProductBooksAddRequest) SetScholisat(value string) {
	this.Set("scholisat", value)
}

/* 丛书名<br /> 支持最大长度为：150<br /> 支持的最大列表长度为：150 */
func (this *TmallProductBooksAddRequest) SetSeriesBooksName(value string) {
	this.Set("series_books_name", value)
}

/* 此字段废弃<br /> 支持最大长度为：150<br /> 支持的最大列表长度为：150 */
func (this *TmallProductBooksAddRequest) SetSpuImg(value string) {
	this.Set("spu_img", value)
}

/* 简介，不支持HTML代码，长度不能超过5000<br /> 支持最大长度为：5000<br /> 支持的最大列表长度为：5000 */
func (this *TmallProductBooksAddRequest) SetSummary(value string) {
	this.Set("summary", value)
}

/* 译者，只写一个人的名字，超出的以“等”结束<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *TmallProductBooksAddRequest) SetTranslator(value string) {
	this.Set("translator", value)
}

type TmallProductBooksAddResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	TmallProductBooksAddResponseResult `json:"tmall_product_books_add_response"`
}
type TmallProductBooksAddResponseResult struct {
	/* 请求相应结构 */
	ProductBooks *ProductBooks `json:"product_books"`
}

/*tmall.product.spec.add*/
type TmallProductSpecAddRequest struct {
	values url.Values
}

func (this *TmallProductSpecAddRequest) GetApiMethodName() string {
	return "tmall.product.spec.add"
}
func (this *TmallProductSpecAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallProductSpecAddRequest) GetValues() url.Values {
	return this.values
}

/* 产品二维码 */
func (this *TmallProductSpecAddRequest) SetBarcode(value string) {
	this.Set("barcode", value)
}

/* 存放产品规格认证类型-认证图片url映射信息，格式为k:v;k:v;，其中key为认证类型数字id，value为调用tmall.product.spec.pic.upload返回的认证图片url文本 */
func (this *TmallProductSpecAddRequest) SetCertifiedPicStr(value string) {
	this.Set("certified_pic_str", value)
}

/* 存放产品规格认证类型-认证文本映射信息，格式为k:v;k:v;，其中key为认证类型数字id，value为认证文本值 */
func (this *TmallProductSpecAddRequest) SetCertifiedTxtStr(value string) {
	this.Set("certified_txt_str", value)
}

/* 产品基础色，数据格式为：pid:vid:rvid1,rvid2,rvid3;pid:vid:rvid1 */
func (this *TmallProductSpecAddRequest) SetChangeProp(value string) {
	this.Set("change_prop", value)
}

/* 用户自定义销售属性，结构：pid1:value1;pid2:value2。在 */
func (this *TmallProductSpecAddRequest) SetCustomerSpecProps(value string) {
	this.Set("customer_spec_props", value)
}

/* 产品图片 */
func (this *TmallProductSpecAddRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 产品规格吊牌价，以分为单位，无默认值，上限999999999<br /> 支持最大值为：999999999<br /> 支持最小值为：0 */
func (this *TmallProductSpecAddRequest) SetLabelPrice(value string) {
	this.Set("label_price", value)
}

/* 产品上市时间 */
func (this *TmallProductSpecAddRequest) SetMarketTime(value string) {
	this.Set("market_time", value)
}

/* 产品货号 */
func (this *TmallProductSpecAddRequest) SetProductCode(value string) {
	this.Set("product_code", value)
}

/* 产品ID */
func (this *TmallProductSpecAddRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 产品的规格属性 */
func (this *TmallProductSpecAddRequest) SetSpecProps(value string) {
	this.Set("spec_props", value)
}

/* 规格属性别名,只允许传颜色别名<br /> 支持最大长度为：60<br /> 支持的最大列表长度为：60 */
func (this *TmallProductSpecAddRequest) SetSpecPropsAlias(value string) {
	this.Set("spec_props_alias", value)
}

type TmallProductSpecAddResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	TmallProductSpecAddResponseResult `json:"tmall_product_spec_add_response"`
}
type TmallProductSpecAddResponseResult struct {
	/* 产品规格对象 */
	ProductSpec *ProductSpec `json:"product_spec"`
}

/*tmall.product.spec.get*/
type TmallProductSpecGetRequest struct {
	values url.Values
}

func (this *TmallProductSpecGetRequest) GetApiMethodName() string {
	return "tmall.product.spec.get"
}
func (this *TmallProductSpecGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallProductSpecGetRequest) GetValues() url.Values {
	return this.values
}

/* 要获取信息的产品规格信息。 */
func (this *TmallProductSpecGetRequest) SetSpecId(value string) {
	this.Set("spec_id", value)
}

type TmallProductSpecGetResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	TmallProductSpecGetResponseResult `json:"tmall_product_spec_get_response"`
}
type TmallProductSpecGetResponseResult struct {
	/* 返回的产品规格信息，注意，这个产品规格信息可能是等待审核的，不一定可用。根据状态判断1：表示审核通过
	3：表示等待审核。 */
	ProductSpec *ProductSpec `json:"product_spec"`
}

/*tmall.product.spec.pic.upload*/
type TmallProductSpecPicUploadRequest struct {
	values url.Values
}

func (this *TmallProductSpecPicUploadRequest) GetApiMethodName() string {
	return "tmall.product.spec.pic.upload"
}
func (this *TmallProductSpecPicUploadRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallProductSpecPicUploadRequest) GetValues() url.Values {
	return this.values
}

/* 上传的认证图片文件 */
func (this *TmallProductSpecPicUploadRequest) SetCertifyPic(value string) {
	this.Set("certify_pic", value)
}

/* 上传的认证图片的认证类型<br>
1：代表产品包装正面图<br>
2：代表完整产品资质<br>
3：代表产品包装反面图<br>
4：代表产品包装侧面图<br>
5：代表产品包装条形码特写<br>
6：代表特殊用途化妆品批准文号<br>
7：代表3C认证图标<br> */
func (this *TmallProductSpecPicUploadRequest) SetCertifyType(value string) {
	this.Set("certify_type", value)
}

type TmallProductSpecPicUploadResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	TmallProductSpecPicUploadResponseResult `json:"tmall_product_spec_pic_upload_response"`
}
type TmallProductSpecPicUploadResponseResult struct {
	/* 上传成功的产品规格认证图片url */
	SpecPicUrl string `json:"spec_pic_url"`
}

/*tmall.product.specs.get*/
type TmallProductSpecsGetRequest struct {
	values url.Values
}

func (this *TmallProductSpecsGetRequest) GetApiMethodName() string {
	return "tmall.product.specs.get"
}
func (this *TmallProductSpecsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallProductSpecsGetRequest) GetValues() url.Values {
	return this.values
}

/* 类目的ID号，该id必须和properties同时传入。
而且只有当product_id不传入的时候才起效果。 */
func (this *TmallProductSpecsGetRequest) SetCatId(value string) {
	this.Set("cat_id", value)
}

/* 产品的ID。这个不能和properties和cat_id同时起效果 */
func (this *TmallProductSpecsGetRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 关键属性的字符串，pid:vid;pid:vid
该字段必须和cat_id同时传入才起效果。 而且只有当product_id不传入的时候才起效果。 */
func (this *TmallProductSpecsGetRequest) SetProperties(value string) {
	this.Set("properties", value)
}

type TmallProductSpecsGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	TmallProductSpecsGetResponseResult `json:"tmall_product_specs_get_response"`
}
type TmallProductSpecsGetResponseResult struct {
	/* 返回一组产品规格信息。 */
	ProductSpecs []*ProductSpec `json:"product_specs"`
}

/*tmall.product.specs.ticket.get*/
type TmallProductSpecsTicketGetRequest struct {
	values url.Values
}

func (this *TmallProductSpecsTicketGetRequest) GetApiMethodName() string {
	return "tmall.product.specs.ticket.get"
}
func (this *TmallProductSpecsTicketGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallProductSpecsTicketGetRequest) GetValues() url.Values {
	return this.values
}

/* 产品规格ID，多个用逗号分隔 */
func (this *TmallProductSpecsTicketGetRequest) SetSpecIds(value string) {
	this.Set("spec_ids", value)
}

type TmallProductSpecsTicketGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	TmallProductSpecsTicketGetResponseResult `json:"tmall_product_specs_ticket_get_response"`
}
type TmallProductSpecsTicketGetResponseResult struct {
	/* 产品规格审核单信息 */
	Tickets []*Ticket `json:"tickets"`
}

/*tmall.product.suitespecs.get*/
type TmallProductSuitespecsGetRequest struct {
	values url.Values
}

func (this *TmallProductSuitespecsGetRequest) GetApiMethodName() string {
	return "tmall.product.suitespecs.get"
}
func (this *TmallProductSuitespecsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallProductSuitespecsGetRequest) GetValues() url.Values {
	return this.values
}

/* 类目的ID号，该id必须和properties同时传入。
而且只有当product_id不传入的时候才起效果。 */
func (this *TmallProductSuitespecsGetRequest) SetCatId(value string) {
	this.Set("cat_id", value)
}

/* 产品的ID。这个不能和properties和cat_id同时起效果 */
func (this *TmallProductSuitespecsGetRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 关键属性的字符串，pid:vid;pid:vid
该字段必须和cat_id同时传入才起效果。 而且只有当product_id不传入的时候才起效果。 */
func (this *TmallProductSuitespecsGetRequest) SetProperties(value string) {
	this.Set("properties", value)
}

type TmallProductSuitespecsGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	TmallProductSuitespecsGetResponseResult `json:"tmall_product_suitespecs_get_response"`
}
type TmallProductSuitespecsGetResponseResult struct {
	/* 返回一组产品规格信息。 */
	ProductSpecs []*ProductSpec `json:"product_specs"`
}

/*tmall.product.template.get*/
type TmallProductTemplateGetRequest struct {
	values url.Values
}

func (this *TmallProductTemplateGetRequest) GetApiMethodName() string {
	return "tmall.product.template.get"
}
func (this *TmallProductTemplateGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallProductTemplateGetRequest) GetValues() url.Values {
	return this.values
}

/* 类目ID */
func (this *TmallProductTemplateGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

type TmallProductTemplateGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	TmallProductTemplateGetResponseResult `json:"tmall_product_template_get_response"`
}
type TmallProductTemplateGetResponseResult struct {
	/* 见SpuTemplateDO说明 */
	Template *SpuTemplateDO `json:"template"`
}

/*taobao.trade.amount.get*/
type TradeAmountGetRequest struct {
	values url.Values
}

func (this *TradeAmountGetRequest) GetApiMethodName() string {
	return "taobao.trade.amount.get"
}
func (this *TradeAmountGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeAmountGetRequest) GetValues() url.Values {
	return this.values
}

/* 订单帐务详情需要返回的字段信息，可选值如下：
1. TradeAmount中可指定的fields：
tid,alipay_no,created,pay_time,end_time,total_fee,payment,post_fee,cod_fee,commission_fee,buyer_obtain_point_fee
2. OrderAmount中可指定的fields：order_amounts.oid,order_amounts.title,order_amounts.num_iid,
order_amounts.sku_properties_name,order_amounts.sku_id,order_amounts.num,order_amounts.price,order_amounts.discount_fee,order_amounts.adjust_fee,order_amounts.payment,order_amounts.promotion_name
3. order_amounts(返回OrderAmount的所有内容)
4. promotion_details(指定该值会返回主订单的promotion_details中除id之外的所有字段) */
func (this *TradeAmountGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 订单交易编号<br /> 支持最大值为：9223372036854775807<br /> 支持最小值为：-9223372036854775808 */
func (this *TradeAmountGetRequest) SetTid(value string) {
	this.Set("tid", value)
}

type TradeAmountGetResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	TradeAmountGetResponseResult `json:"trade_amount_get_response"`
}
type TradeAmountGetResponseResult struct {
	/* 主订单的财务信息详情 */
	TradeAmount *TradeAmount `json:"trade_amount"`
}

/*taobao.trade.close*/
type TradeCloseRequest struct {
	values url.Values
}

func (this *TradeCloseRequest) GetApiMethodName() string {
	return "taobao.trade.close"
}
func (this *TradeCloseRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeCloseRequest) GetValues() url.Values {
	return this.values
}

/* 交易关闭原因。可以选择的理由有：
1.未及时付款
2.买家联系不上
3.谢绝还价
4.商品瑕疵
5.协商不一致
6.买家不想买
7.与买家协商一致 */
func (this *TradeCloseRequest) SetCloseReason(value string) {
	this.Set("close_reason", value)
}

/* 主订单或子订单编号。 */
func (this *TradeCloseRequest) SetTid(value string) {
	this.Set("tid", value)
}

type TradeCloseResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	TradeCloseResponseResult `json:"trade_close_response"`
}
type TradeCloseResponseResult struct {
	/* 关闭交易时返回的Trade信息，可用字段有tid和modified */
	Trade *Trade `json:"trade"`
}

/*taobao.trade.confirmfee.get*/
type TradeConfirmfeeGetRequest struct {
	values url.Values
}

func (this *TradeConfirmfeeGetRequest) GetApiMethodName() string {
	return "taobao.trade.confirmfee.get"
}
func (this *TradeConfirmfeeGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeConfirmfeeGetRequest) GetValues() url.Values {
	return this.values
}

/* 是否是子订单。可选值:IS_FATHER(父订单),IS_CHILD(子订单) */
func (this *TradeConfirmfeeGetRequest) SetIsDetail(value string) {
	this.Set("is_detail", value)
}

/* 交易编号，或子订单编号 */
func (this *TradeConfirmfeeGetRequest) SetTid(value string) {
	this.Set("tid", value)
}

type TradeConfirmfeeGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	TradeConfirmfeeGetResponseResult `json:"trade_confirmfee_get_response"`
}
type TradeConfirmfeeGetResponseResult struct {
	/* 获取到的交易确认收货费用 */
	TradeConfirmFee *TradeConfirmFee `json:"trade_confirm_fee"`
}

/*taobao.trade.fullinfo.get*/
type TradeFullinfoGetRequest struct {
	values url.Values
}

func (this *TradeFullinfoGetRequest) GetApiMethodName() string {
	return "taobao.trade.fullinfo.get"
}
func (this *TradeFullinfoGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeFullinfoGetRequest) GetValues() url.Values {
	return this.values
}

/* 1.Trade中可以指定返回的fields：seller_nick, buyer_nick, title, type, created, tid, seller_rate,buyer_flag, buyer_rate, status, payment, adjust_fee, post_fee, total_fee, pay_time, end_time, modified, consign_time, buyer_obtain_point_fee, point_fee, real_point_fee, received_payment, commission_fee, buyer_memo, seller_memo, alipay_no,alipay_id,buyer_message, pic_path, num_iid, num, price, buyer_alipay_no, receiver_name, receiver_state, receiver_city, receiver_district, receiver_address, receiver_zip, receiver_mobile, receiver_phone,seller_flag, seller_alipay_no, seller_mobile, seller_phone, seller_name, seller_email, available_confirm_fee, has_post_fee, timeout_action_time, snapshot_url, cod_fee, cod_status, shipping_type, trade_memo, is_3D,buyer_email,buyer_area, trade_from,is_lgtype,is_force_wlb,is_brand_sale,buyer_cod_fee,discount_fee,seller_cod_fee,express_agency_fee,invoice_name,service_orders,credit_cardfee,step_trade_status,step_paid_fee,mark_desc,has_yfx,yfx_fee,yfx_id,yfx_type,trade_source(注：当该授权用户为卖家时不能查看买家buyer_memo,buyer_flag),eticket_ext,send_time, is_daixiao,is_part_consign, arrive_interval, arrive_cut_time, consign_interval,zero_purchase,alipay_point,pcc_af,2.Order中可以指定返回fields：orders.title, orders.pic_path, orders.price, orders.num, orders.num_iid, orders.sku_id, orders.refund_status, orders.status, orders.oid, orders.total_fee, orders.payment, orders.discount_fee, orders.adjust_fee, orders.snapshot_url, orders.timeout_action_time，orders.sku_properties_name, orders.item_meal_name, orders.item_meal_id,orders.buyer_rate, orders.seller_rate, orders.outer_iid, orders.outer_sku_id, orders.refund_id, orders.seller_type, orders.is_oversold,orders.end_time,orders.order_from,orders.consign_time,orders.shipping_type,orders.logistics_company,orders.invoice_no, orders.is_daixiao
3.fields：orders（返回Order的所有内容）
4.flelds：promotion_details(返回promotion_details所有内容，优惠详情),invoice_name(发票抬头),orders.is_www(子订单是否是www订单,orders.store_code(发货的仓库编码)<br>
5. field:service_tags(返回物流标签) */
func (this *TradeFullinfoGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 交易编号<br /> 支持最大值为：9223372036854775807<br /> 支持最小值为：1 */
func (this *TradeFullinfoGetRequest) SetTid(value string) {
	this.Set("tid", value)
}

type TradeFullinfoGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	TradeFullinfoGetResponseResult `json:"trade_fullinfo_get_response"`
}
type TradeFullinfoGetResponseResult struct {
	/* 搜索到的交易信息列表，返回的Trade和Order中包含的具体信息为入参fields请求的字段信息 */
	Trade *Trade `json:"trade"`
}

/*taobao.trade.get*/
type TradeGetRequest struct {
	values url.Values
}

func (this *TradeGetRequest) GetApiMethodName() string {
	return "taobao.trade.get"
}
func (this *TradeGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要返回的字段。目前支持有：<br>

1. Trade中可以指定返回的fields:seller_nick, buyer_nick, title, type, created, tid, seller_rate, buyer_rate, status, payment, discount_fee, adjust_fee, post_fee, total_fee, pay_time, end_time, modified, consign_time, buyer_obtain_point_fee, point_fee, real_point_fee, received_payment, commission_fee, buyer_memo, seller_memo, alipay_no, buyer_message, pic_path, num_iid, num, price, cod_fee, cod_status, shipping_type， is_daixiao，consign_interval，arrive_interval，arrive_cut_time <br>
2. Order中可以指定返回fields:orders.title, orders.pic_path, orders.price, orders.num, orders.num_iid, orders.sku_id, orders.refund_status, orders.status, orders.oid, orders.total_fee, orders.payment, orders.discount_fee, orders.adjust_fee, orders.sku_properties_name, orders.item_meal_name, orders.outer_sku_id, orders.outer_iid, orders.buyer_rate, orders.seller_rate， orders.is_daixiao <br>
3. fields：orders（返回Order中的所有允许返回的字段）,orders.is_wwww(是否是www订单),orders.store_code(仓库代码）<br>
4. field:service_tags(返回物流标签) */
func (this *TradeGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 交易编号 */
func (this *TradeGetRequest) SetTid(value string) {
	this.Set("tid", value)
}

type TradeGetResponse struct {
	*ErrorResponse         `json:"error_response,omitempty"`
	TradeGetResponseResult `json:"trade_get_response"`
}
type TradeGetResponseResult struct {
	/* 搜索到的交易信息列表，返回的Trade和Order中包含的具体信息为入参fields请求的字段信息 */
	Trade *Trade `json:"trade"`
}

/*taobao.trade.memo.add*/
type TradeMemoAddRequest struct {
	values url.Values
}

func (this *TradeMemoAddRequest) GetApiMethodName() string {
	return "taobao.trade.memo.add"
}
func (this *TradeMemoAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeMemoAddRequest) GetValues() url.Values {
	return this.values
}

/* 交易备注旗帜，可选值为：0(灰色), 1(红色), 2(黄色), 3(绿色), 4(蓝色), 5(粉红色)，默认值为0<br /> 支持最大值为：5<br /> 支持最小值为：0 */
func (this *TradeMemoAddRequest) SetFlag(value string) {
	this.Set("flag", value)
}

/* 交易备注。最大长度: 1000个字节 */
func (this *TradeMemoAddRequest) SetMemo(value string) {
	this.Set("memo", value)
}

/* 交易编号 */
func (this *TradeMemoAddRequest) SetTid(value string) {
	this.Set("tid", value)
}

type TradeMemoAddResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	TradeMemoAddResponseResult `json:"trade_memo_add_response"`
}
type TradeMemoAddResponseResult struct {
	/* 对一笔交易添加备注后返回其对应的Trade，Trade中可用的返回字段有tid和created */
	Trade *Trade `json:"trade"`
}

/*taobao.trade.memo.update*/
type TradeMemoUpdateRequest struct {
	values url.Values
}

func (this *TradeMemoUpdateRequest) GetApiMethodName() string {
	return "taobao.trade.memo.update"
}
func (this *TradeMemoUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeMemoUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 卖家交易备注旗帜，可选值为：0(灰色), 1(红色), 2(黄色), 3(绿色), 4(蓝色), 5(粉红色)，默认值为0<br /> 支持最大值为：5<br /> 支持最小值为：0 */
func (this *TradeMemoUpdateRequest) SetFlag(value string) {
	this.Set("flag", value)
}

/* 卖家交易备注。最大长度: 1000个字节 */
func (this *TradeMemoUpdateRequest) SetMemo(value string) {
	this.Set("memo", value)
}

/* 是否对memo的值置空
若为true，则不管传入的memo字段的值是否为空，都将会对已有的memo值清空，慎用；
若用false，则会根据memo是否为空来修改memo的值：若memo为空则忽略对已有memo字段的修改，若memo非空，则使用新传入的memo覆盖已有的memo的值 */
func (this *TradeMemoUpdateRequest) SetReset(value string) {
	this.Set("reset", value)
}

/* 交易编号 */
func (this *TradeMemoUpdateRequest) SetTid(value string) {
	this.Set("tid", value)
}

type TradeMemoUpdateResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	TradeMemoUpdateResponseResult `json:"trade_memo_update_response"`
}
type TradeMemoUpdateResponseResult struct {
	/* 更新交易的备注信息后返回的Trade，其中可用字段为tid和modified */
	Trade *Trade `json:"trade"`
}

/*taobao.trade.ordersku.update*/
type TradeOrderskuUpdateRequest struct {
	values url.Values
}

func (this *TradeOrderskuUpdateRequest) GetApiMethodName() string {
	return "taobao.trade.ordersku.update"
}
func (this *TradeOrderskuUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeOrderskuUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 子订单编号（对于单笔订单的交易可以传交易编号）。 */
func (this *TradeOrderskuUpdateRequest) SetOid(value string) {
	this.Set("oid", value)
}

/* 销售属性编号，可以通过taobao.item.skus.get获取订单对应的商品的所有销售属性。 */
func (this *TradeOrderskuUpdateRequest) SetSkuId(value string) {
	this.Set("sku_id", value)
}

/* 销售属性组合串，格式：p1:v1;p2:v2，如：1627207:28329;20509:28314。可以通过taobao.item.skus.get获取订单对应的商品的所有销售属性。 */
func (this *TradeOrderskuUpdateRequest) SetSkuProps(value string) {
	this.Set("sku_props", value)
}

type TradeOrderskuUpdateResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	TradeOrderskuUpdateResponseResult `json:"trade_ordersku_update_response"`
}
type TradeOrderskuUpdateResponseResult struct {
	/* 只返回oid和modified */
	Order *Order `json:"order"`
}

/*taobao.trade.postage.update*/
type TradePostageUpdateRequest struct {
	values url.Values
}

func (this *TradePostageUpdateRequest) GetApiMethodName() string {
	return "taobao.trade.postage.update"
}
func (this *TradePostageUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradePostageUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 邮费价格(邮费单位是元） */
func (this *TradePostageUpdateRequest) SetPostFee(value string) {
	this.Set("post_fee", value)
}

/* 主订单编号 */
func (this *TradePostageUpdateRequest) SetTid(value string) {
	this.Set("tid", value)
}

type TradePostageUpdateResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	TradePostageUpdateResponseResult `json:"trade_postage_update_response"`
}
type TradePostageUpdateResponseResult struct {
	/* 返回trade类型，其中包含修改时间modified，修改邮费post_fee，修改后的总费用total_fee和买家实付款payment */
	Trade *Trade `json:"trade"`
}

/*taobao.trade.receivetime.delay*/
type TradeReceivetimeDelayRequest struct {
	values url.Values
}

func (this *TradeReceivetimeDelayRequest) GetApiMethodName() string {
	return "taobao.trade.receivetime.delay"
}
func (this *TradeReceivetimeDelayRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeReceivetimeDelayRequest) GetValues() url.Values {
	return this.values
}

/* 延长收货的天数，可选值为：3, 5, 7, 10。<br /> 支持最大值为：10<br /> 支持最小值为：3 */
func (this *TradeReceivetimeDelayRequest) SetDays(value string) {
	this.Set("days", value)
}

/* 主订单号 */
func (this *TradeReceivetimeDelayRequest) SetTid(value string) {
	this.Set("tid", value)
}

type TradeReceivetimeDelayResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	TradeReceivetimeDelayResponseResult `json:"trade_receivetime_delay_response"`
}
type TradeReceivetimeDelayResponseResult struct {
	/* 更新后的交易数据，只包括tid和modified两个字段。 */
	Trade *Trade `json:"trade"`
}

/*taobao.trade.shippingaddress.update*/
type TradeShippingaddressUpdateRequest struct {
	values url.Values
}

func (this *TradeShippingaddressUpdateRequest) GetApiMethodName() string {
	return "taobao.trade.shippingaddress.update"
}
func (this *TradeShippingaddressUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeShippingaddressUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 收货地址。最大长度为228个字节。<br /> 支持最大长度为：228<br /> 支持的最大列表长度为：228 */
func (this *TradeShippingaddressUpdateRequest) SetReceiverAddress(value string) {
	this.Set("receiver_address", value)
}

/* 城市。最大长度为32个字节。如：杭州<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *TradeShippingaddressUpdateRequest) SetReceiverCity(value string) {
	this.Set("receiver_city", value)
}

/* 区/县。最大长度为32个字节。如：西湖区<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *TradeShippingaddressUpdateRequest) SetReceiverDistrict(value string) {
	this.Set("receiver_district", value)
}

/* 移动电话。最大长度为30个字节。<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *TradeShippingaddressUpdateRequest) SetReceiverMobile(value string) {
	this.Set("receiver_mobile", value)
}

/* 收货人全名。最大长度为50个字节。<br /> 支持最大长度为：50<br /> 支持的最大列表长度为：50 */
func (this *TradeShippingaddressUpdateRequest) SetReceiverName(value string) {
	this.Set("receiver_name", value)
}

/* 固定电话。最大长度为30个字节。<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *TradeShippingaddressUpdateRequest) SetReceiverPhone(value string) {
	this.Set("receiver_phone", value)
}

/* 省份。最大长度为32个字节。如：浙江<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *TradeShippingaddressUpdateRequest) SetReceiverState(value string) {
	this.Set("receiver_state", value)
}

/* 邮政编码。必须由6个数字组成。<br /> 支持最大长度为：6<br /> 支持的最大列表长度为：6 */
func (this *TradeShippingaddressUpdateRequest) SetReceiverZip(value string) {
	this.Set("receiver_zip", value)
}

/* 交易编号。 */
func (this *TradeShippingaddressUpdateRequest) SetTid(value string) {
	this.Set("tid", value)
}

type TradeShippingaddressUpdateResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	TradeShippingaddressUpdateResponseResult `json:"trade_shippingaddress_update_response"`
}
type TradeShippingaddressUpdateResponseResult struct {
	/* 交易结构 */
	Trade *Trade `json:"trade"`
}

/*taobao.trade.snapshot.get*/
type TradeSnapshotGetRequest struct {
	values url.Values
}

func (this *TradeSnapshotGetRequest) GetApiMethodName() string {
	return "taobao.trade.snapshot.get"
}
func (this *TradeSnapshotGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeSnapshotGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要返回的字段列表。现只支持："snapshot"字段 */
func (this *TradeSnapshotGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 交易编号 */
func (this *TradeSnapshotGetRequest) SetTid(value string) {
	this.Set("tid", value)
}

type TradeSnapshotGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	TradeSnapshotGetResponseResult `json:"trade_snapshot_get_response"`
}
type TradeSnapshotGetResponseResult struct {
	/* 只包含Trade中的tid和snapshot、子订单Order中的oid和snapshot */
	Trade *Trade `json:"trade"`
}

/*taobao.trades.sold.get*/
type TradesSoldGetRequest struct {
	values url.Values
}

func (this *TradesSoldGetRequest) GetApiMethodName() string {
	return "taobao.trades.sold.get"
}
func (this *TradesSoldGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradesSoldGetRequest) GetValues() url.Values {
	return this.values
}

/* 买家昵称 */
func (this *TradesSoldGetRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 查询交易创建时间结束。格式:yyyy-MM-dd HH:mm:ss */
func (this *TradesSoldGetRequest) SetEndCreated(value string) {
	this.Set("end_created", value)
}

/* 可选值有ershou(二手市场的订单）,service（商城服务子订单）mark（双十一大促活动异常订单）作为扩展类型筛选只能做单个ext_type查询，不能全部查询所有的ext_type类型 */
func (this *TradesSoldGetRequest) SetExtType(value string) {
	this.Set("ext_type", value)
}

/* 需要返回的字段。目前支持有：<br>
1. Trade中可以指定返回的fields:<br>
seller_nick, buyer_nick, title, type, created,  tid, seller_rate,seller_can_rate, buyer_rate,can_rate, status, payment, discount_fee, adjust_fee, post_fee, total_fee, pay_time, end_time, modified, consign_time, buyer_obtain_point_fee, point_fee, real_point_fee, received_payment,  pic_path, num_iid, num, price, cod_fee, cod_status, shipping_type, receiver_name, receiver_state, receiver_city, receiver_district, receiver_address, receiver_zip, receiver_mobile, receiver_phone,seller_flag,alipay_id,alipay_no,is_lgtype,is_force_wlb,is_brand_sale,buyer_area,has_buyer_message, credit_card_fee, lg_aging_type, lg_aging, step_trade_status,step_paid_fee,mark_desc,has_yfx,yfx_fee,yfx_id,yfx_type,trade_source,send_time,is_daixiao,is_wt,is_part_consign,zero_purchase
<br>
2. Order中可以指定返回fields：orders.title, orders.pic_path, orders.price, orders.num, orders.num_iid, orders.sku_id, orders.refund_status, orders.status, orders.oid, orders.total_fee, orders.payment, orders.discount_fee, orders.adjust_fee, orders.sku_properties_name, orders.item_meal_name, orders.buyer_rate, orders.seller_rate, orders.outer_iid, orders.outer_sku_id, orders.refund_id, orders.seller_type, orders.end_time,orders.order_from,orders.consign_time,orders.shipping_type,orders.logistics_company,orders.invoice_no,orders.is_daixiao<br>
3. fields：orders（返回2中Order的所有内容）
4.fields:service_orders(返回service_order中所有内容) */
func (this *TradesSoldGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 页码。取值范围:大于零的整数; 默认值:1 */
func (this *TradesSoldGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数。取值范围:大于零的整数; 默认值:40;最大值:100 */
func (this *TradesSoldGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 评价状态，默认查询所有评价状态的数据，除了默认值外每次只能查询一种状态。<br>
可选值：
RATE_UNBUYER(买家未评)
RATE_UNSELLER(卖家未评)
RATE_BUYER_UNSELLER(买家已评，卖家未评)
RATE_UNBUYER_SELLER(买家未评，卖家已评)
RATE_BUYER_SELLER(买家已评,卖家已评) */
func (this *TradesSoldGetRequest) SetRateStatus(value string) {
	this.Set("rate_status", value)
}

/* 查询三个月内交易创建时间开始。格式:yyyy-MM-dd HH:mm:ss */
func (this *TradesSoldGetRequest) SetStartCreated(value string) {
	this.Set("start_created", value)
}

/* 交易状态，默认查询所有交易状态的数据，除了默认值外每次只能查询一种状态。
可选值：
TRADE_NO_CREATE_PAY(没有创建支付宝交易)
WAIT_BUYER_PAY(等待买家付款)
WAIT_SELLER_SEND_GOODS(等待卖家发货,即:买家已付款)
SELLER_CONSIGNED_PART（卖家部分发货）
WAIT_BUYER_CONFIRM_GOODS(等待买家确认收货,即:卖家已发货)
TRADE_BUYER_SIGNED(买家已签收,货到付款专用)
TRADE_FINISHED(交易成功)
TRADE_CLOSED(交易关闭)
TRADE_CLOSED_BY_TAOBAO(交易被淘宝关闭)
ALL_WAIT_PAY(包含：WAIT_BUYER_PAY、TRADE_NO_CREATE_PAY)
ALL_CLOSED(包含：TRADE_CLOSED、TRADE_CLOSED_BY_TAOBAO)
WAIT_PRE_AUTH_CONFIRM(余额宝0元购合约中) */
func (this *TradesSoldGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 卖家对交易的自定义分组标签，目前可选值为：time_card（点卡软件代充），fee_card（话费软件代充） */
func (this *TradesSoldGetRequest) SetTag(value string) {
	this.Set("tag", value)
}

/* 交易类型列表，同时查询多种交易类型可用逗号分隔。<span style="color:red;font-weight: bold;">默认同时查询guarantee_trade, auto_delivery, ec, cod,step的5种交易类型的数据；查询所有交易类型的数据，需要设置下面全部可选值。</span>
可选值：
fixed(一口价)
auction(拍卖)
guarantee_trade(一口价、拍卖)
step(分阶段付款，万人团，阶梯团订单）
independent_simple_trade(旺店入门版交易)
independent_shop_trade(旺店标准版交易)
auto_delivery(自动发货)
ec(直冲)
cod(货到付款)
game_equipment(游戏装备)
shopex_trade(ShopEX交易)
netcn_trade(万网交易)
external_trade(统一外部交易)
instant_trade (即时到账)
b2c_cod(大商家货到付款)
hotel_trade(酒店类型交易)
super_market_trade(商超交易)
super_market_cod_trade(商超货到付款交易)
taohua(淘花网交易类型）
waimai(外卖交易类型）
nopaid（即时到帐/趣味猜交易类型）
step (万人团) eticket(电子凭证)
tmall_i18n（天猫国际）;nopaid （无付款交易）insurance_plus（保险）finance（基金）
注：guarantee_trade是一个组合查询条件，并不是一种交易类型，获取批量或单个订单中不会返回此种类型的订单。
pre_auth_type(预授权0元购) */
func (this *TradesSoldGetRequest) SetType(value string) {
	this.Set("type", value)
}

/* 是否启用has_next的分页方式，如果指定true,则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的的字段，通过此种方式获取增量交易，接口调用成功率在原有的基础上有所提升。 */
func (this *TradesSoldGetRequest) SetUseHasNext(value string) {
	this.Set("use_has_next", value)
}

type TradesSoldGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	TradesSoldGetResponseResult `json:"trades_sold_get_response"`
}
type TradesSoldGetResponseResult struct {
	/* 是否存在下一页 */
	HasNext bool `json:"has_next"`
	/* 搜索到的交易信息总数 */
	TotalResults int64 `json:"total_results"`
	/* 搜索到的交易信息列表，返回的Trade和Order中包含的具体信息为入参fields请求的字段信息 */
	Trades []*Trade `json:"trades"`
}

/*taobao.trades.sold.increment.get*/
type TradesSoldIncrementGetRequest struct {
	values url.Values
}

func (this *TradesSoldIncrementGetRequest) GetApiMethodName() string {
	return "taobao.trades.sold.increment.get"
}
func (this *TradesSoldIncrementGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradesSoldIncrementGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询修改结束时间，必须大于修改开始时间(修改时间跨度不能大于一天)，格式:yyyy-MM-dd HH:mm:ss。<span style="color:red;font-weight: bold;">建议使用30分钟以内的时间跨度，能大大提高响应速度和成功率</span>。 */
func (this *TradesSoldIncrementGetRequest) SetEndModified(value string) {
	this.Set("end_modified", value)
}

/* 可选值有ershou(二手市场的订单）,service（商城服务子订单）mark（双十一大促活动异常订单）作为扩展类型筛选只能做单个ext_type查询，不能全部查询所有的ext_type类型 */
func (this *TradesSoldIncrementGetRequest) SetExtType(value string) {
	this.Set("ext_type", value)
}

/* 需要返回的字段。目前支持有：
1.Trade中可以指定返回的fields:seller_nick, buyer_nick, title, type, created, tid, seller_rate,seller_can_rate, buyer_rate,can_rate,status, payment, discount_fee, adjust_fee, post_fee, total_fee, pay_time, end_time, modified, consign_time, buyer_obtain_point_fee, point_fee, real_point_fee, received_payment,pic_path, num_iid, num, price, cod_fee, cod_status, shipping_type, receiver_name, receiver_state, receiver_city, receiver_district, receiver_address, receiver_zip, receiver_mobile, receiver_phone,alipay_id,alipay_no,is_lgtype,is_force_wlb,is_brand_sale,has_buyer_message,credit_card_fee,step_trade_status,step_paid_fee,mark_desc,send_time,,has_yfx,yfx_fee,yfx_id,yfx_type,trade_source,seller_flag,is_daixiao,is_part_consign,zero_purchase
2.Order中可以指定返回fields：
orders.title, orders.pic_path, orders.price, orders.num, orders.num_iid, orders.sku_id, orders.refund_status, orders.status, orders.oid, orders.total_fee, orders.payment, orders.discount_fee, orders.adjust_fee, orders.sku_properties_name, orders.item_meal_name, orders.buyer_rate, orders.seller_rate, orders.outer_iid, orders.outer_sku_id, orders.refund_id, orders.seller_type，orders.end_time,,orders.consign_time,orders.shipping_type,orders.logistics_company,orders.invoice_no,orders.is_daixiao
3.fields：orders（返回Order的所有内容）
4.fields:service_orders(返回service_order中所有内容) */
func (this *TradesSoldIncrementGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 页码。取值范围:大于零的整数;默认值:1。<span style="color:red;font-weight: bold;">注：必须采用倒序的分页方式（从最后一页往回取）才能避免漏单问题。</span> */
func (this *TradesSoldIncrementGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数。取值范围：1~100，默认值：40。<span style="color:red;font-weight: bold;">建议使用40~50，可以提高成功率，减少超时数量</span>。 */
func (this *TradesSoldIncrementGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 查询修改开始时间(修改时间跨度不能大于一天)。格式:yyyy-MM-dd HH:mm:ss */
func (this *TradesSoldIncrementGetRequest) SetStartModified(value string) {
	this.Set("start_modified", value)
}

/* 交易状态，默认查询所有交易状态的数据，除了默认值外每次只能查询一种状态。 可选值 TRADE_NO_CREATE_PAY(没有创建支付宝交易) WAIT_BUYER_PAY(等待买家付款)
SELLER_CONSIGNED_PART（卖家部分发货）
WAIT_SELLER_SEND_GOODS(等待卖家发货,即:买家已付款) WAIT_BUYER_CONFIRM_GOODS(等待买家确认收货,即:卖家已发货) TRADE_BUYER_SIGNED(买家已签收,货到付款专用) TRADE_FINISHED(交易成功) TRADE_CLOSED(交易关闭) TRADE_CLOSED_BY_TAOBAO(交易被淘宝关闭) ALL_WAIT_PAY(包含：WAIT_BUYER_PAY、TRADE_NO_CREATE_PAY) ALL_CLOSED(包含：TRADE_CLOSED、TRADE_CLOSED_BY_TAOBAO)
WAIT_PRE_AUTH_CONFIRM(余额宝0元购合约中) */
func (this *TradesSoldIncrementGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 卖家对交易的自定义分组标签，目前可选值为：time_card（点卡软件代充），fee_card（话费软件代充） */
func (this *TradesSoldIncrementGetRequest) SetTag(value string) {
	this.Set("tag", value)
}

/* 交易类型列表，同时查询多种交易类型可用逗号分隔。<span style="color:red;font-weight: bold;">默认同时查询guarantee_trade, auto_delivery, ec, cod,step的5种交易类型的数据；查询所有交易类型的数据，需要设置下面全部可选值。</span>
可选值：
fixed(一口价)
auction(拍卖)
step（分阶段付款，万人团，阶梯团订单）
guarantee_trade(一口价、拍卖)
independent_simple_trade(旺店入门版交易)
independent_shop_trade(旺店标准版交易)
auto_delivery(自动发货)
ec(直冲) cod(货到付款)
fenxiao(分销)
game_equipment(游戏装备)
shopex_trade(ShopEX交易)
netcn_trade(万网交易)
external_trade(统一外部交易)
instant_trade (即时到账)
b2c_cod(大商家货到付款)
hotel_trade(酒店类型交易)
super_market_trade(商超交易),
super_market_cod_trade(商超货到付款交易)
taohua(桃花网交易类型）
waimai(外卖交易类型）
nopaid（即时到帐/趣味猜交易类型）
 eticket(电子凭证)
tmall_i18n（天猫国际）;nopaid（无付款交易）insurance_plus（保险）finance（基金）
注：guarantee_trade是一个组合查询条件，并不是一种交易类型，获取批量或单个订单中不会返回此种类型的订单。
pre_auth_type(预授权0元购) */
func (this *TradesSoldIncrementGetRequest) SetType(value string) {
	this.Set("type", value)
}

/* 是否启用has_next的分页方式，如果指定true,则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的的字段，<span style="color:red;font-weight: bold;">通过此种方式获取增量交易，效率在原有的基础上有80%的提升</span>。 */
func (this *TradesSoldIncrementGetRequest) SetUseHasNext(value string) {
	this.Set("use_has_next", value)
}

type TradesSoldIncrementGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	TradesSoldIncrementGetResponseResult `json:"trades_sold_increment_get_response"`
}
type TradesSoldIncrementGetResponseResult struct {
	/* 是否存在下一页 */
	HasNext bool `json:"has_next"`
	/* 搜索到的交易信息总数 */
	TotalResults int64 `json:"total_results"`
	/* 搜索到的交易信息列表，返回的Trade和Order中包含的具体信息为入参fields请求的字段信息 */
	Trades []*Trade `json:"trades"`
}

/*taobao.trades.sold.incrementv.get*/
type TradesSoldIncrementvGetRequest struct {
	values url.Values
}

func (this *TradesSoldIncrementvGetRequest) GetApiMethodName() string {
	return "taobao.trades.sold.incrementv.get"
}
func (this *TradesSoldIncrementvGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradesSoldIncrementvGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询入库结束时间，必须大于入库开始时间(修改时间跨度不能大于一天)，格式:yyyy-MM-dd HH:mm:ss。<span style="color:red;font-weight: bold;">建议使用30分钟以内的时间跨度，能大大提高响应速度和成功率</span>。 */
func (this *TradesSoldIncrementvGetRequest) SetEndCreate(value string) {
	this.Set("end_create", value)
}

/* 可选值有ershou(二手市场的订单）,service（商城服务子订单）mark（双十一大促活动异常订单）作为扩展类型筛选只能做单个ext_type查询，不能全部查询所有的ext_type类型 */
func (this *TradesSoldIncrementvGetRequest) SetExtType(value string) {
	this.Set("ext_type", value)
}

/* 需要返回的字段。目前支持有：
1.Trade中可以指定返回的fields:seller_nick, buyer_nick, title, type, created, tid, seller_rate, buyer_rate, status, payment, discount_fee, adjust_fee, post_fee, total_fee, pay_time, end_time, modified, consign_time, buyer_obtain_point_fee, point_fee, real_point_fee, received_payment,pic_path, num_iid, num, price, cod_fee, cod_status, shipping_type, receiver_name, receiver_state, receiver_city, receiver_district, receiver_address, receiver_zip, receiver_mobile, receiver_phone,alipay_id,alipay_no,is_lgtype,is_force_wlb,is_brand_sale,has_buyer_message,credit_card_fee,step_trade_status,step_paid_fee,mark_desc，is_daixiao,is_part_consign
2.Order中可以指定返回fields：
orders.title, orders.pic_path, orders.price, orders.num, orders.num_iid, orders.sku_id, orders.refund_status, orders.status, orders.oid, orders.total_fee, orders.payment, orders.discount_fee, orders.adjust_fee, orders.sku_properties_name, orders.item_meal_name, orders.buyer_rate, orders.seller_rate, orders.outer_iid, orders.outer_sku_id, orders.refund_id, orders.seller_type，orders.end_time, orders.order_from,orders.consign_time,orders.shipping_type,orders.logistics_company,orders.invoice_no，orders.is_daixiao
3.fields：orders（返回Order的所有内容）
4.fields:service_orders(返回service_order中所有内容) */
func (this *TradesSoldIncrementvGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 页码。取值范围:大于零的整数;默认值:1。<span style="color:red;font-weight: bold;">注：必须采用倒序的分页方式（从最后一页往回取）才能避免漏单问题。</span> */
func (this *TradesSoldIncrementvGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数。取值范围：1~100，默认值：40。<span style="color:red;font-weight: bold;">建议使用40~50，可以提高成功率，减少超时数量</span>。 */
func (this *TradesSoldIncrementvGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 查询入库开始时间(修改时间跨度不能大于一天)。格式:yyyy-MM-dd HH:mm:ss */
func (this *TradesSoldIncrementvGetRequest) SetStartCreate(value string) {
	this.Set("start_create", value)
}

/* 交易状态，默认查询所有交易状态的数据，除了默认值外每次只能查询一种状态。 可选值 TRADE_NO_CREATE_PAY(没有创建支付宝交易) WAIT_BUYER_PAY(等待买家付款) WAIT_SELLER_SEND_GOODS(等待卖家发货,即:买家已付款)
SELLER_CONSIGNED_PART（卖家部分发货）
WAIT_BUYER_CONFIRM_GOODS(等待买家确认收货,即:卖家已发货) TRADE_BUYER_SIGNED(买家已签收,货到付款专用) TRADE_FINISHED(交易成功) TRADE_CLOSED(交易关闭) TRADE_CLOSED_BY_TAOBAO(交易被淘宝关闭) ALL_WAIT_PAY(包含：WAIT_BUYER_PAY、TRADE_NO_CREATE_PAY) ALL_CLOSED(包含：TRADE_CLOSED、TRADE_CLOSED_BY_TAOBAO) */
func (this *TradesSoldIncrementvGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 卖家对交易的自定义分组标签，目前可选值为：time_card（点卡软件代充），fee_card（话费软件代充） */
func (this *TradesSoldIncrementvGetRequest) SetTag(value string) {
	this.Set("tag", value)
}

/* 交易类型列表，同时查询多种交易类型可用逗号分隔。<span style="color:red;font-weight: bold;">默认同时查询guarantee_trade, auto_delivery, ec, cod,step的5种交易类型的数据；查询所有交易类型的数据，需要设置下面全部可选值。</span>
可选值：
fixed(一口价)
auction(拍卖)
step（分阶段付款，万人团，阶梯团订单）
guarantee_trade(一口价、拍卖)
independent_simple_trade(旺店入门版交易)
independent_shop_trade(旺店标准版交易)
auto_delivery(自动发货)
ec(直冲) cod(货到付款)
fenxiao(分销)
game_equipment(游戏装备)
shopex_trade(ShopEX交易)
netcn_trade(万网交易)
external_trade(统一外部交易)
instant_trade (即时到账)
b2c_cod(大商家货到付款)
hotel_trade(酒店类型交易)
super_market_trade(商超交易),
super_market_cod_trade(商超货到付款交易)
taohua(桃花网交易类型）
waimai(外卖交易类型）
nopaid（无付款订单）
eticket(电子凭证)
tmall_i18n（天猫国际）
注：guarantee_trade是一个组合查询条件，并不是一种交易类型，获取批量或单个订单中不会返回此种类型的订单。 */
func (this *TradesSoldIncrementvGetRequest) SetType(value string) {
	this.Set("type", value)
}

/* 是否启用has_next的分页方式，如果指定true,则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的的字段，<span style="color:red;font-weight: bold;">通过此种方式获取增量交易，效率在原有的基础上有80%的提升</span>。 */
func (this *TradesSoldIncrementvGetRequest) SetUseHasNext(value string) {
	this.Set("use_has_next", value)
}

type TradesSoldIncrementvGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	TradesSoldIncrementvGetResponseResult `json:"trades_sold_incrementv_get_response"`
}
type TradesSoldIncrementvGetResponseResult struct {
	/* 是否存在下一页 */
	HasNext bool `json:"has_next"`
	/* 搜索到的交易信息总数 */
	TotalResults int64 `json:"total_results"`
	/* 搜索到的交易信息列表，返回的Trade和Order中包含的具体信息为入参fields请求的字段信息 */
	Trades []*Trade `json:"trades"`
}

/*taobao.traderate.add*/
type TraderateAddRequest struct {
	values url.Values
}

func (this *TraderateAddRequest) GetApiMethodName() string {
	return "taobao.traderate.add"
}
func (this *TraderateAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TraderateAddRequest) GetValues() url.Values {
	return this.values
}

/* 是否匿名,卖家评不能匿名。可选值:true(匿名),false(非匿名)。注意：如果交易订单匿名，则评价也匿名 */
func (this *TraderateAddRequest) SetAnony(value string) {
	this.Set("anony", value)
}

/* 评价内容,最大长度: 500个汉字 .注意：当评价结果为good时就不用输入评价内容.评价内容为neutral/bad的时候需要输入评价内容 */
func (this *TraderateAddRequest) SetContent(value string) {
	this.Set("content", value)
}

/* 子订单ID */
func (this *TraderateAddRequest) SetOid(value string) {
	this.Set("oid", value)
}

/* 评价结果,可选值:good(好评),neutral(中评),bad(差评) */
func (this *TraderateAddRequest) SetResult(value string) {
	this.Set("result", value)
}

/* 评价者角色,可选值:seller(卖家),buyer(买家) */
func (this *TraderateAddRequest) SetRole(value string) {
	this.Set("role", value)
}

/* 交易ID */
func (this *TraderateAddRequest) SetTid(value string) {
	this.Set("tid", value)
}

type TraderateAddResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	TraderateAddResponseResult `json:"traderate_add_response"`
}
type TraderateAddResponseResult struct {
	/* 返回tid、oid、create */
	TradeRate *TradeRate `json:"trade_rate"`
}

/*taobao.traderate.explain.add*/
type TraderateExplainAddRequest struct {
	values url.Values
}

func (this *TraderateExplainAddRequest) GetApiMethodName() string {
	return "taobao.traderate.explain.add"
}
func (this *TraderateExplainAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TraderateExplainAddRequest) GetValues() url.Values {
	return this.values
}

/* 子订单ID */
func (this *TraderateExplainAddRequest) SetOid(value string) {
	this.Set("oid", value)
}

/* 评价解释内容,最大长度: 500个汉字 */
func (this *TraderateExplainAddRequest) SetReply(value string) {
	this.Set("reply", value)
}

type TraderateExplainAddResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	TraderateExplainAddResponseResult `json:"traderate_explain_add_response"`
}
type TraderateExplainAddResponseResult struct {
	/* 商城卖家给评价解释是否成功。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.traderate.impr.imprword.byaucid.get*/
type TraderateImprImprwordByaucidGetRequest struct {
	values url.Values
}

func (this *TraderateImprImprwordByaucidGetRequest) GetApiMethodName() string {
	return "taobao.traderate.impr.imprword.byaucid.get"
}
func (this *TraderateImprImprwordByaucidGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TraderateImprImprwordByaucidGetRequest) GetValues() url.Values {
	return this.values
}

/* 淘宝的商品id */
func (this *TraderateImprImprwordByaucidGetRequest) SetAuctionId(value string) {
	this.Set("auction_id", value)
}

type TraderateImprImprwordByaucidGetResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	TraderateImprImprwordByaucidGetResponseResult `json:"traderate_impr_imprword_byaucid_get_response"`
}
type TraderateImprImprwordByaucidGetResponseResult struct {
	/* 返回的大家印象的结构体 */
	ImprWordList []*ImprItemDO `json:"impr_word_list"`
}

/*taobao.traderate.impr.imprword.byfeedid.get*/
type TraderateImprImprwordByfeedidGetRequest struct {
	values url.Values
}

func (this *TraderateImprImprwordByfeedidGetRequest) GetApiMethodName() string {
	return "taobao.traderate.impr.imprword.byfeedid.get"
}
func (this *TraderateImprImprwordByfeedidGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TraderateImprImprwordByfeedidGetRequest) GetValues() url.Values {
	return this.values
}

/* 交易订单id号（如果包含子订单，请使用子订单id号） */
func (this *TraderateImprImprwordByfeedidGetRequest) SetChildTradeId(value string) {
	this.Set("child_trade_id", value)
}

type TraderateImprImprwordByfeedidGetResponse struct {
	*ErrorResponse                                 `json:"error_response,omitempty"`
	TraderateImprImprwordByfeedidGetResponseResult `json:"traderate_impr_imprword_byfeedid_get_response"`
}
type TraderateImprImprwordByfeedidGetResponseResult struct {
	/* 根据子订单和买家昵称找到的评价和印象词结果 */
	ImprFeed *ImprFeedIdDO `json:"impr_feed"`
}

/*taobao.traderate.impr.imprwords.get*/
type TraderateImprImprwordsGetRequest struct {
	values url.Values
}

func (this *TraderateImprImprwordsGetRequest) GetApiMethodName() string {
	return "taobao.traderate.impr.imprwords.get"
}
func (this *TraderateImprImprwordsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TraderateImprImprwordsGetRequest) GetValues() url.Values {
	return this.values
}

/* 淘宝叶子类目id */
func (this *TraderateImprImprwordsGetRequest) SetCatLeafId(value string) {
	this.Set("cat_leaf_id", value)
}

/* 淘宝一级类目id */
func (this *TraderateImprImprwordsGetRequest) SetCatRootId(value string) {
	this.Set("cat_root_id", value)
}

type TraderateImprImprwordsGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	TraderateImprImprwordsGetResponseResult `json:"traderate_impr_imprwords_get_response"`
}
type TraderateImprImprwordsGetResponseResult struct {
	/* 返回类目下所有大家印象的标签 */
	ImprWords []string `json:"impr_words"`
}

/*taobao.traderate.list.add*/
type TraderateListAddRequest struct {
	values url.Values
}

func (this *TraderateListAddRequest) GetApiMethodName() string {
	return "taobao.traderate.list.add"
}
func (this *TraderateListAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TraderateListAddRequest) GetValues() url.Values {
	return this.values
}

/* 是否匿名，卖家评不能匿名。可选值:true(匿名),false(非匿名)。 注意：如果买家匿名购买，那么买家的评价默认匿名 */
func (this *TraderateListAddRequest) SetAnony(value string) {
	this.Set("anony", value)
}

/* 评价内容,最大长度: 500个汉字 .注意：当评价结果为good时就不用输入评价内容.评价内容为neutral/bad的时候需要输入评价内容 */
func (this *TraderateListAddRequest) SetContent(value string) {
	this.Set("content", value)
}

/* 评价结果。可选值:good(好评),neutral(中评),bad(差评) */
func (this *TraderateListAddRequest) SetResult(value string) {
	this.Set("result", value)
}

/* 评价者角色。可选值:seller(卖家),buyer(买家) */
func (this *TraderateListAddRequest) SetRole(value string) {
	this.Set("role", value)
}

/* 交易ID */
func (this *TraderateListAddRequest) SetTid(value string) {
	this.Set("tid", value)
}

type TraderateListAddResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	TraderateListAddResponseResult `json:"traderate_list_add_response"`
}
type TraderateListAddResponseResult struct {
	/* 返回的评论的信息，仅返回tid和created字段 */
	TradeRate *TradeRate `json:"trade_rate"`
}

/*taobao.traderates.get*/
type TraderatesGetRequest struct {
	values url.Values
}

func (this *TraderatesGetRequest) GetApiMethodName() string {
	return "taobao.traderates.get"
}
func (this *TraderatesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TraderatesGetRequest) GetValues() url.Values {
	return this.values
}

/* 评价结束时间。如果只输入结束时间，那么全部返回所有评价数据。 */
func (this *TraderatesGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 需返回的字段列表。可选值：TradeRate 结构中的所有字段，多个字段之间用“,”分隔 */
func (this *TraderatesGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 商品的数字ID */
func (this *TraderatesGetRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* 页码。取值范围:大于零的整数最大限制为200; 默认值:1 */
func (this *TraderatesGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页获取条数。默认值40，最小值1，最大值150。<br /> 支持最大值为：150<br /> 支持最小值为：1 */
func (this *TraderatesGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 评价类型。可选值:get(得到),give(给出) */
func (this *TraderatesGetRequest) SetRateType(value string) {
	this.Set("rate_type", value)
}

/* 评价结果。可选值:good(好评),neutral(中评),bad(差评) */
func (this *TraderatesGetRequest) SetResult(value string) {
	this.Set("result", value)
}

/* 评价者角色即评价的发起方。可选值:seller(卖家),buyer(买家)。 当 give buyer 以买家身份给卖家的评价； 当 get seller 以买家身份得到卖家给的评价； 当 give seller 以卖家身份给买家的评价； 当 get buyer 以卖家身份得到买家给的评价。 */
func (this *TraderatesGetRequest) SetRole(value string) {
	this.Set("role", value)
}

/* 评价开始时。如果只输入开始时间，那么能返回开始时间之后的评价数据。 */
func (this *TraderatesGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

/* 交易订单id，可以是父订单id号，也可以是子订单id号 */
func (this *TraderatesGetRequest) SetTid(value string) {
	this.Set("tid", value)
}

/* 是否启用has_next的分页方式，如果指定true,则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的的字段，通过此种方式获取评价信息，效率在原有的基础上有80%的提升。 */
func (this *TraderatesGetRequest) SetUseHasNext(value string) {
	this.Set("use_has_next", value)
}

type TraderatesGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	TraderatesGetResponseResult `json:"traderates_get_response"`
}
type TraderatesGetResponseResult struct {
	/* 当使用use_has_next时返回信息，如果还有下一页则返回true */
	HasNext bool `json:"has_next"`
	/* 搜索到的评价总数。相同的查询时间段条件下，最大只能获取总共1500条评价记录。所以当评价大于等于1500时 ISV可以通过start_date及end_date来进行拆分，以保证可以查询到全部数据 */
	TotalResults int64 `json:"total_results"`
	/* 评价列表。返回的TradeRate包含的具体信息为入参fields请求的字段信息 */
	TradeRates []*TradeRate `json:"trade_rates"`
}

/*tmall.traderate.cattags.get*/
type TmallTraderateCattagsGetRequest struct {
	values url.Values
}

func (this *TmallTraderateCattagsGetRequest) GetApiMethodName() string {
	return "tmall.traderate.cattags.get"
}
func (this *TmallTraderateCattagsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallTraderateCattagsGetRequest) GetValues() url.Values {
	return this.values
}

/* 类目ID */
func (this *TmallTraderateCattagsGetRequest) SetCatId(value string) {
	this.Set("cat_id", value)
}

type TmallTraderateCattagsGetResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	TmallTraderateCattagsGetResponseResult `json:"tmall_traderate_cattags_get_response"`
}
type TmallTraderateCattagsGetResponseResult struct {
	/* 该类目下的标签列表 */
	Tags []*TmallRateTag `json:"tags"`
}

/*tmall.traderate.feeds.get*/
type TmallTraderateFeedsGetRequest struct {
	values url.Values
}

func (this *TmallTraderateFeedsGetRequest) GetApiMethodName() string {
	return "tmall.traderate.feeds.get"
}
func (this *TmallTraderateFeedsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallTraderateFeedsGetRequest) GetValues() url.Values {
	return this.values
}

/* 交易子订单ID */
func (this *TmallTraderateFeedsGetRequest) SetChildTradeId(value string) {
	this.Set("child_trade_id", value)
}

type TmallTraderateFeedsGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	TmallTraderateFeedsGetResponseResult `json:"tmall_traderate_feeds_get_response"`
}
type TmallTraderateFeedsGetResponseResult struct {
	/* 返回评价信息 */
	TmallRateInfo *TmallRateInfo `json:"tmall_rate_info"`
}

/*tmall.traderate.itemtags.get*/
type TmallTraderateItemtagsGetRequest struct {
	values url.Values
}

func (this *TmallTraderateItemtagsGetRequest) GetApiMethodName() string {
	return "tmall.traderate.itemtags.get"
}
func (this *TmallTraderateItemtagsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallTraderateItemtagsGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品ID */
func (this *TmallTraderateItemtagsGetRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

type TmallTraderateItemtagsGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	TmallTraderateItemtagsGetResponseResult `json:"tmall_traderate_itemtags_get_response"`
}
type TmallTraderateItemtagsGetResponseResult struct {
	/* 标签列表 */
	Tags []*TmallRateTagDetail `json:"tags"`
}

/*taobao.areas.get*/
type AreasGetRequest struct {
	values url.Values
}

func (this *AreasGetRequest) GetApiMethodName() string {
	return "taobao.areas.get"
}
func (this *AreasGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AreasGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表.可选值:Area 结构中的所有字段;多个字段之间用","分隔.如:id,type,name,parent_id,zip. */
func (this *AreasGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

type AreasGetResponse struct {
	*ErrorResponse         `json:"error_response,omitempty"`
	AreasGetResponseResult `json:"areas_get_response"`
}
type AreasGetResponseResult struct {
	/* 地址区域信息列表.返回的Area包含的具体信息为入参fields请求的字段信息. */
	Areas []*Area `json:"areas"`
}

/*taobao.delivery.template.add*/
type DeliveryTemplateAddRequest struct {
	values url.Values
}

func (this *DeliveryTemplateAddRequest) GetApiMethodName() string {
	return "taobao.delivery.template.add"
}
func (this *DeliveryTemplateAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *DeliveryTemplateAddRequest) GetValues() url.Values {
	return this.values
}

/* 可选值：0、1 ，说明如下<br>0:表示买家承担服务费;<br>1:表示卖家承担服务费 */
func (this *DeliveryTemplateAddRequest) SetAssumer(value string) {
	this.Set("assumer", value)
}

/* 卖家发货地址区域ID
<br/><br/><font color=blue>可以不填，如果没有填写取卖家默认发货地址的区域ID，如果需要输入必须用taobao.areas.get接口获取.或者参考：http://www.stats.gov.cn/tjbz/xzqhdm/t20080215_402462675.htm
</font>

<br/><br/><font color=red>注意：填入该值时必须取您的发货地址最小区域级别ID，比如您的发货地址是：某省XX市xx区（县）时需要填入区(县)的ID，当然有些地方没有区或县可以直接填市级别的ID</font> */
func (this *DeliveryTemplateAddRequest) SetConsignAreaId(value string) {
	this.Set("consign_area_id", value)
}

/* 运费模板的名称，长度不能超过50个字节<br /> 支持最大长度为：50<br /> 支持的最大列表长度为：50 */
func (this *DeliveryTemplateAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 增费：输入0.00-999.99（最多包含两位小数）

<br/><br/><font color=blue>增费必须小于等于首费，但是当首费为0时增费可以大于首费</font>


<br/><br/><font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font> */
func (this *DeliveryTemplateAddRequest) SetTemplateAddFees(value string) {
	this.Set("template_add_fees", value)
}

/* 增费标准：当valuation(记价方式)为0时输入1-9999范围内的整数<br/><font color=red>当valuation(记价方式)为1时输入0.1-9999.9范围内的小数只能包含以为小数（单位为千克）<br/><font color=blue>当valuation(记价方式)为3时输入0.1-999.9范围内的数值，数值只能包含一位小数（单位为 立方米）
<br/>
<br><font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font> */
func (this *DeliveryTemplateAddRequest) SetTemplateAddStandards(value string) {
	this.Set("template_add_standards", value)
}

/* 邮费子项涉及的地区.结构: value1;value2;value3,value4
<br>如:1,110000;1,110000;1,310000;1,320000,330000。 aredId解释(1=全国,110000=北京,310000=上海,320000=江苏,330000=浙江)
如果template_types设置为post;ems;exmpress;cod则表示为平邮(post)指定默认地区(全国)和北京地区的运费;其他的类似以分号区分一一对应
<br/>可以用taobao.areas.get接口获取.或者参考：http://www.stats.gov.cn/tjbz/xzqhdm/t20080215_402462675.htm<br/>
<br/><font color=red>每个运费方式设置涉及的地区中必须包含全国地区（areaId=1）表示默认运费,可以只设置默认运费</font>
<br><font color=blue>注意:为多个地区指定指定不同（首费标准、首费、增费标准、增费一项不一样就算不同）的运费以逗号","区分，
template_start_standards(首费标准)、template_start_fees(首费)、
template_add_standards(增费标准)、
template_add_fees(增费)必须与template_types分号数量相同。如果为需要为多个地区指定相同运费则地区之间用“|”隔开即可。</font>
<font color=red>如果卖家没有传入发货地址则默认地址库的发货地址</font> */
func (this *DeliveryTemplateAddRequest) SetTemplateDests(value string) {
	this.Set("template_dests", value)
}

/* 首费：输入0.00-999.99（最多包含两位小数）
<br/><font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font> */
func (this *DeliveryTemplateAddRequest) SetTemplateStartFees(value string) {
	this.Set("template_start_fees", value)
}

/* 首费标准：当valuation(记价方式)为0时输入1-9999范围内的整数<br/><font color=red>当valuation(记价方式)为1时输入0.1-9999.9范围内的小数只能包含以为小数（单位为千克）<br/><font color=blue>当valuation(记价方式)为3时输入0.1-999.9范围内的数值，数值只能包含一位小数（单位为 立方米）
<br/>
<font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font> */
func (this *DeliveryTemplateAddRequest) SetTemplateStartStandards(value string) {
	this.Set("template_start_standards", value)
}

/* 运费方式:平邮 (post),快递公司(express),EMS (ems),货到付款(cod),物流宝保障速递(wlb),家装物流(furniture)结构:value1;value2;value3;value4
如: post;express;ems;cod
<br/><font color=red>
注意:在添加多个运费方式时,字符串中使用 ";" 分号区分
。template_dests(指定地区)
template_start_standards(首费标准)、template_start_fees(首费)、template_add_standards(增费标准)、template_add_fees(增费)必须与template_types的分号数量相同. </font>
<br>
<font color=blue>
注意：<br/>
1、post,ems,express三种运费方式必须填写一个<br/>
2、只有订购了货到付款用户可以填cod;只有家装物流用户可以填写furniture
只有订购了保障速递的用户可以填写bzsd,只有物流宝用户可以填写wlb<br/>
3、如果是货到付款用户当没有填写cod运送方式时，运费模板会默认继承express的费用为cod的费用<br/>
4、如果是保障速递户当没有填写bzsd运送方式时，运费模板会默认继承express的费用为bzsd的费用<br/>
5、由于3和4的原因所以当是货到付款用户或保障速递用户时如果没填写对应的运送方式express是必须填写的
</font> */
func (this *DeliveryTemplateAddRequest) SetTemplateTypes(value string) {
	this.Set("template_types", value)
}

/* 可选值：0、1、3，说明如下。<br>0:表示按宝贝件数计算运费 <br>1:表示按宝贝重量计算运费
<br>3:表示按宝贝体积计算运费 */
func (this *DeliveryTemplateAddRequest) SetValuation(value string) {
	this.Set("valuation", value)
}

type DeliveryTemplateAddResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	DeliveryTemplateAddResponseResult `json:"delivery_template_add_response"`
}
type DeliveryTemplateAddResponseResult struct {
	/* 模板对象 */
	DeliveryTemplate *DeliveryTemplate `json:"delivery_template"`
}

/*taobao.delivery.template.delete*/
type DeliveryTemplateDeleteRequest struct {
	values url.Values
}

func (this *DeliveryTemplateDeleteRequest) GetApiMethodName() string {
	return "taobao.delivery.template.delete"
}
func (this *DeliveryTemplateDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *DeliveryTemplateDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 运费模板ID */
func (this *DeliveryTemplateDeleteRequest) SetTemplateId(value string) {
	this.Set("template_id", value)
}

type DeliveryTemplateDeleteResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	DeliveryTemplateDeleteResponseResult `json:"delivery_template_delete_response"`
}
type DeliveryTemplateDeleteResponseResult struct {
	/* 表示删除成功还是失败 */
	Complete bool `json:"complete"`
}

/*taobao.delivery.template.get*/
type DeliveryTemplateGetRequest struct {
	values url.Values
}

func (this *DeliveryTemplateGetRequest) GetApiMethodName() string {
	return "taobao.delivery.template.get"
}
func (this *DeliveryTemplateGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *DeliveryTemplateGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表。 <br/>
<B>
可选值:示例中的值;各字段之间用","隔开
</B>
<br/><br/>
<font color=blue>
template_id：查询模板ID <br/>
template_name:查询模板名称 <br/>
assumer：查询服务承担放 <br/>
valuation:查询计价规则 <br/>
supports:查询增值服务列表 <br/>
created:查询模板创建时间 <br/>
modified:查询修改时间<br/>
consign_area_id:运费模板上设置的卖家发货地址最小级别ID<br/>
address:卖家地址信息
</font>
<br/><br/>
<font color=bule>
query_cod:查询货到付款运费信息<br/>
query_post:查询平邮运费信息 <br/>
query_express:查询快递公司运费信息 <br/>
query_ems:查询EMS运费信息<br/>
query_bzsd:查询普通保障速递运费信息<br/>
query_wlb:查询物流宝保障速递运费信息<br/>
query_furniture:查询家装物流运费信息
<font color=blue>
<br/><br/>
<font color=red>不能有空格</font> */
func (this *DeliveryTemplateGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 需要查询的运费模板ID列表 */
func (this *DeliveryTemplateGetRequest) SetTemplateIds(value string) {
	this.Set("template_ids", value)
}

/* 在没有登录的情况下根据淘宝用户昵称查询指定的模板 */
func (this *DeliveryTemplateGetRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type DeliveryTemplateGetResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	DeliveryTemplateGetResponseResult `json:"delivery_template_get_response"`
}
type DeliveryTemplateGetResponseResult struct {
	/* 运费模板列表 */
	DeliveryTemplates []*DeliveryTemplate `json:"delivery_templates"`
	/* 获得到符合条件的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.delivery.template.update*/
type DeliveryTemplateUpdateRequest struct {
	values url.Values
}

func (this *DeliveryTemplateUpdateRequest) GetApiMethodName() string {
	return "taobao.delivery.template.update"
}
func (this *DeliveryTemplateUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *DeliveryTemplateUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 可选值：0,1 <br>  说明<br>0:表示买家承担服务费;<br>1:表示卖家承担服务费 */
func (this *DeliveryTemplateUpdateRequest) SetAssumer(value string) {
	this.Set("assumer", value)
}

/* 模板名称，长度不能大于50个字节 */
func (this *DeliveryTemplateUpdateRequest) SetName(value string) {
	this.Set("name", value)
}

/* 增费：输入0.00-999.99（最多包含两位小数）<br/><font color=blue>增费可以为0</font><br/><font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font> */
func (this *DeliveryTemplateUpdateRequest) SetTemplateAddFees(value string) {
	this.Set("template_add_fees", value)
}

/* 增费标准：当valuation(记价方式)为0时输入1-9999范围内的整数<br><font color=blue>增费标准目前只能为1</font>
<br><font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font> */
func (this *DeliveryTemplateUpdateRequest) SetTemplateAddStandards(value string) {
	this.Set("template_add_standards", value)
}

/* 邮费子项涉及的地区.结构: value1;value2;value3,value4
<br>如:1,110000;1,110000;1,310000;1,320000,330000。 aredId解释(1=全国,110000=北京,310000=上海,320000=江苏,330000=浙江)
如果template_types设置为post;ems;exmpress;cod则表示为平邮(post)指定默认地区(全国)和北京地区的运费;其他的类似以分号区分一一对应
<br/>可以用taobao.areas.get接口获取.或者参考：http://www.stats.gov.cn/tjbz/xzqhdm/t20080215_402462675.htm
<br/><font color=red>每个运费方式设置的设涉及地区中必须包含全国地区（areaId=1）表示默认运费,可以只设置默认运费</font>
<br><font color=blue>注意:为多个地区指定指定不同（首费标准、首费、增费标准、增费一项不一样就算不同）的运费以逗号","区分，
template_start_standards(首费标准)、template_start_fees(首费)、
template_add_standards(增费标准)、
template_add_fees(增费)必须与template_types分号数量相同。如果为需要为多个地区指定相同运费则地区之间用“|”隔开即可。</font> */
func (this *DeliveryTemplateUpdateRequest) SetTemplateDests(value string) {
	this.Set("template_dests", value)
}

/* 需要修改的模板对应的模板ID */
func (this *DeliveryTemplateUpdateRequest) SetTemplateId(value string) {
	this.Set("template_id", value)
}

/* 首费：输入0.01-999.99（最多包含两位小数）
<br/><font color=blue> 首费不能为0</font><br><font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font> */
func (this *DeliveryTemplateUpdateRequest) SetTemplateStartFees(value string) {
	this.Set("template_start_fees", value)
}

/* 首费标准：当valuation(记价方式)为0时输入1-9999范围内的整数<br><font color=blue>首费标准目前只能为1</br>
<br><font color=red>输入的格式分号个数和template_types数量一致，逗号个数必须与template_dests以分号隔开之后一一对应的数量一致</font> */
func (this *DeliveryTemplateUpdateRequest) SetTemplateStartStandards(value string) {
	this.Set("template_start_standards", value)
}

/* 运费方式:平邮 (post),快递公司(express),EMS (ems),货到付款(cod)结构:value1;value2;value3;value4
如: post;express;ems;cod
<br/><font color=red>
注意:在添加多个运费方式时,字符串中使用 ";" 分号区分。template_dests(指定地区) template_start_standards(首费标准)、template_start_fees(首费)、template_add_standards(增费标准)、template_add_fees(增费)必须与template_types的分号数量相同.
 </font>
<br/>
<font color=blue>
普通用户：post,ems,express三种运费方式必须填写一个，不能填写cod。
货到付款用户：如果填写了cod运费方式，则post,ems,express三种运费方式也必须填写一个，如果没有填写cod则填写的运费方式中必须存在express</font> */
func (this *DeliveryTemplateUpdateRequest) SetTemplateTypes(value string) {
	this.Set("template_types", value)
}

type DeliveryTemplateUpdateResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	DeliveryTemplateUpdateResponseResult `json:"delivery_template_update_response"`
}
type DeliveryTemplateUpdateResponseResult struct {
	/* 表示修改是否成功 */
	Complete bool `json:"complete"`
}

/*taobao.delivery.templates.get*/
type DeliveryTemplatesGetRequest struct {
	values url.Values
}

func (this *DeliveryTemplatesGetRequest) GetApiMethodName() string {
	return "taobao.delivery.templates.get"
}
func (this *DeliveryTemplatesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *DeliveryTemplatesGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表。 <br/>
<B>
可选值:示例中的值;各字段之间用","隔开
</B>
<br/><br/>
<font color=blue>
template_id：查询模板ID <br/>
template_name:查询模板名称 <br/>
assumer：查询服务承担放 <br/>
valuation:查询计价规则 <br/>
supports:查询增值服务列表 <br/>
created:查询模板创建时间 <br/>
modified:查询修改时间<br/>
consign_area_id:运费模板上设置的卖家发货地址最小级别ID<br/>
address:卖家地址信息
</font>
<br/><br/>
<font color=bule>
query_cod:查询货到付款运费信息<br/>
query_post:查询平邮运费信息 <br/>
query_express:查询快递公司运费信息 <br/>
query_ems:查询EMS运费信息<br/>
query_bzsd:查询普通保障速递运费信息<br/>
query_wlb:查询物流宝保障速递运费信息<br/>
query_furniture:查询家装物流运费信息
<font color=blue>
<br/><br/>
<font color=red>不能有空格</font> */
func (this *DeliveryTemplatesGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

type DeliveryTemplatesGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	DeliveryTemplatesGetResponseResult `json:"delivery_templates_get_response"`
}
type DeliveryTemplatesGetResponseResult struct {
	/* 运费模板列表 */
	DeliveryTemplates []*DeliveryTemplate `json:"delivery_templates"`
	/* 获得到符合条件的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.logistics.address.add*/
type LogisticsAddressAddRequest struct {
	values url.Values
}

func (this *LogisticsAddressAddRequest) GetApiMethodName() string {
	return "taobao.logistics.address.add"
}
func (this *LogisticsAddressAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsAddressAddRequest) GetValues() url.Values {
	return this.values
}

/* 详细街道地址，不需要重复填写省/市/区 */
func (this *LogisticsAddressAddRequest) SetAddr(value string) {
	this.Set("addr", value)
}

/* 默认退货地址。<br>
<font color='red'>选择此项(true)，将当前地址设为默认退货地址，撤消原默认退货地址</font> */
func (this *LogisticsAddressAddRequest) SetCancelDef(value string) {
	this.Set("cancel_def", value)
}

/* 所在市 */
func (this *LogisticsAddressAddRequest) SetCity(value string) {
	this.Set("city", value)
}

/* 联系人姓名 <font color='red'>长度不可超过20个字节</font> */
func (this *LogisticsAddressAddRequest) SetContactName(value string) {
	this.Set("contact_name", value)
}

/* 区、县
<br><font color='red'>如果所在地区是海外的可以为空，否则为必参</font> */
func (this *LogisticsAddressAddRequest) SetCountry(value string) {
	this.Set("country", value)
}

/* 默认取货地址。<br>
<font color='red'>选择此项(true)，将当前地址设为默认取货地址，撤消原默认取货地址</font> */
func (this *LogisticsAddressAddRequest) SetGetDef(value string) {
	this.Set("get_def", value)
}

/* 备注,<br><font color='red'>备注不能超过256字节</font><br /> 支持最大长度为：256<br /> 支持的最大列表长度为：256 */
func (this *LogisticsAddressAddRequest) SetMemo(value string) {
	this.Set("memo", value)
}

/* 手机号码，手机与电话必需有一个
<br><font color='red'>手机号码不能超过20位</font> */
func (this *LogisticsAddressAddRequest) SetMobilePhone(value string) {
	this.Set("mobile_phone", value)
}

/* 电话号码,手机与电话必需有一个 */
func (this *LogisticsAddressAddRequest) SetPhone(value string) {
	this.Set("phone", value)
}

/* 所在省 */
func (this *LogisticsAddressAddRequest) SetProvince(value string) {
	this.Set("province", value)
}

/* 公司名称,<br><font color="red">公司名称长能不能超过20字节</font><br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *LogisticsAddressAddRequest) SetSellerCompany(value string) {
	this.Set("seller_company", value)
}

/* 地区邮政编码
<br><font color='red'>如果所在地区是海外的可以为空，否则为必参</font> */
func (this *LogisticsAddressAddRequest) SetZipCode(value string) {
	this.Set("zip_code", value)
}

type LogisticsAddressAddResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	LogisticsAddressAddResponseResult `json:"logistics_address_add_response"`
}
type LogisticsAddressAddResponseResult struct {
	/* 只返回修改日期modify_date */
	AddressResult *AddressResult `json:"address_result"`
}

/*taobao.logistics.address.modify*/
type LogisticsAddressModifyRequest struct {
	values url.Values
}

func (this *LogisticsAddressModifyRequest) GetApiMethodName() string {
	return "taobao.logistics.address.modify"
}
func (this *LogisticsAddressModifyRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsAddressModifyRequest) GetValues() url.Values {
	return this.values
}

/* 详细街道地址，不需要重复填写省/市/区 */
func (this *LogisticsAddressModifyRequest) SetAddr(value string) {
	this.Set("addr", value)
}

/* 默认退货地址。<br>
<font color='red'>选择此项(true)，将当前地址设为默认退货地址，撤消原默认退货地址</font> */
func (this *LogisticsAddressModifyRequest) SetCancelDef(value string) {
	this.Set("cancel_def", value)
}

/* 所在市 */
func (this *LogisticsAddressModifyRequest) SetCity(value string) {
	this.Set("city", value)
}

/* 地址库ID */
func (this *LogisticsAddressModifyRequest) SetContactId(value string) {
	this.Set("contact_id", value)
}

/* 联系人姓名
<font color='red'>长度不可超过20个字节</font> */
func (this *LogisticsAddressModifyRequest) SetContactName(value string) {
	this.Set("contact_name", value)
}

/* 区、县
<br><font color='red'>如果所在地区是海外的可以为空，否则为必参</font> */
func (this *LogisticsAddressModifyRequest) SetCountry(value string) {
	this.Set("country", value)
}

/* 默认取货地址。<br>
<font color='red'>选择此项(true)，将当前地址设为默认取货地址，撤消原默认取货地址</font> */
func (this *LogisticsAddressModifyRequest) SetGetDef(value string) {
	this.Set("get_def", value)
}

/* 备注,<br><font color='red'>备注不能超过256字节</font> */
func (this *LogisticsAddressModifyRequest) SetMemo(value string) {
	this.Set("memo", value)
}

/* 手机号码，手机与电话必需有一个 <br><font color='red'>手机号码不能超过20位</font> */
func (this *LogisticsAddressModifyRequest) SetMobilePhone(value string) {
	this.Set("mobile_phone", value)
}

/* 电话号码,手机与电话必需有一个 */
func (this *LogisticsAddressModifyRequest) SetPhone(value string) {
	this.Set("phone", value)
}

/* 所在省 */
func (this *LogisticsAddressModifyRequest) SetProvince(value string) {
	this.Set("province", value)
}

/* 公司名称,
<br><font color='red'>公司名称长能不能超过20字节</font> */
func (this *LogisticsAddressModifyRequest) SetSellerCompany(value string) {
	this.Set("seller_company", value)
}

/* 地区邮政编码
<br><font color='red'>如果所在地区是海外的可以为空，否则为必参</font> */
func (this *LogisticsAddressModifyRequest) SetZipCode(value string) {
	this.Set("zip_code", value)
}

type LogisticsAddressModifyResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	LogisticsAddressModifyResponseResult `json:"logistics_address_modify_response"`
}
type LogisticsAddressModifyResponseResult struct {
	/* 只返回修改时间modify_date */
	AddressResult *AddressResult `json:"address_result"`
}

/*taobao.logistics.address.remove*/
type LogisticsAddressRemoveRequest struct {
	values url.Values
}

func (this *LogisticsAddressRemoveRequest) GetApiMethodName() string {
	return "taobao.logistics.address.remove"
}
func (this *LogisticsAddressRemoveRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsAddressRemoveRequest) GetValues() url.Values {
	return this.values
}

/* 地址库ID */
func (this *LogisticsAddressRemoveRequest) SetContactId(value string) {
	this.Set("contact_id", value)
}

type LogisticsAddressRemoveResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	LogisticsAddressRemoveResponseResult `json:"logistics_address_remove_response"`
}
type LogisticsAddressRemoveResponseResult struct {
	/* 只返回修改日期modify_date */
	AddressResult *AddressResult `json:"address_result"`
}

/*taobao.logistics.address.search*/
type LogisticsAddressSearchRequest struct {
	values url.Values
}

func (this *LogisticsAddressSearchRequest) GetApiMethodName() string {
	return "taobao.logistics.address.search"
}
func (this *LogisticsAddressSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsAddressSearchRequest) GetValues() url.Values {
	return this.values
}

/* 可选，参数列表如下：<br><font color='red'>
no_def:查询非默认地址<br>
get_def:查询默认取货地址<br>
cancel_def:查询默认退货地址<br>
缺省此参数时，查询所有当前用户的地址库
</font> */
func (this *LogisticsAddressSearchRequest) SetRdef(value string) {
	this.Set("rdef", value)
}

type LogisticsAddressSearchResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	LogisticsAddressSearchResponseResult `json:"logistics_address_search_response"`
}
type LogisticsAddressSearchResponseResult struct {
	/* 一组地址库数据， */
	Addresses []*AddressResult `json:"addresses"`
}

/*taobao.logistics.companies.get*/
type LogisticsCompaniesGetRequest struct {
	values url.Values
}

func (this *LogisticsCompaniesGetRequest) GetApiMethodName() string {
	return "taobao.logistics.companies.get"
}
func (this *LogisticsCompaniesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsCompaniesGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表。可选值:LogisticCompany 结构中的所有字段;多个字段间用","逗号隔开.
如:id,code,name,reg_mail_no
<br><font color='red'>说明：</font>
<br>id：物流公司ID
<br>code：物流公司code
<br>name：物流公司名称
<br>reg_mail_no：物流公司对应的运单规则 */
func (this *LogisticsCompaniesGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 是否查询推荐物流公司.可选值:true,false.如果不提供此参数,将会返回所有支持电话联系的物流公司. */
func (this *LogisticsCompaniesGetRequest) SetIsRecommended(value string) {
	this.Set("is_recommended", value)
}

/* 推荐物流公司的下单方式.可选值:offline(电话联系/自己联系),online(在线下单),all(即电话联系又在线下单). 此参数仅仅用于is_recommended 为ture时。就是说对于推荐物流公司才可用.如果不选择此参数将会返回推荐物流中支持电话联系的物流公司. */
func (this *LogisticsCompaniesGetRequest) SetOrderMode(value string) {
	this.Set("order_mode", value)
}

type LogisticsCompaniesGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	LogisticsCompaniesGetResponseResult `json:"logistics_companies_get_response"`
}
type LogisticsCompaniesGetResponseResult struct {
	/* 物流公司信息。返回的LogisticCompany包含的具体信息为入参fields请求的字段信息。 */
	LogisticsCompanies []*LogisticsCompany `json:"logistics_companies"`
}

/*taobao.logistics.consign.order.createandsend*/
type LogisticsConsignOrderCreateandsendRequest struct {
	values url.Values
}

func (this *LogisticsConsignOrderCreateandsendRequest) GetApiMethodName() string {
	return "taobao.logistics.consign.order.createandsend"
}
func (this *LogisticsConsignOrderCreateandsendRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsConsignOrderCreateandsendRequest) GetValues() url.Values {
	return this.values
}

/* 物流公司ID */
func (this *LogisticsConsignOrderCreateandsendRequest) SetCompanyId(value string) {
	this.Set("company_id", value)
}

/* 物品的json数据。 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetItemJsonString(value string) {
	this.Set("item_json_string", value)
}

/* 物流订单物流类型，值固定选择：2 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetLogisType(value string) {
	this.Set("logis_type", value)
}

/* 运单号 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetMailNo(value string) {
	this.Set("mail_no", value)
}

/* 订单来源，值选择：30 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetOrderSource(value string) {
	this.Set("order_source", value)
}

/* 订单类型，值固定选择：30 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetOrderType(value string) {
	this.Set("order_type", value)
}

/* 收件人街道地址 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetRAddress(value string) {
	this.Set("r_address", value)
}

/* 收件人区域ID */
func (this *LogisticsConsignOrderCreateandsendRequest) SetRAreaId(value string) {
	this.Set("r_area_id", value)
}

/* 市 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetRCityName(value string) {
	this.Set("r_city_name", value)
}

/* 区 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetRDistName(value string) {
	this.Set("r_dist_name", value)
}

/* 手机号码 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetRMobilePhone(value string) {
	this.Set("r_mobile_phone", value)
}

/* 收件人名称 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetRName(value string) {
	this.Set("r_name", value)
}

/* 省 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetRProvName(value string) {
	this.Set("r_prov_name", value)
}

/* 电话号码 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetRTelephone(value string) {
	this.Set("r_telephone", value)
}

/* 收件人邮编 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetRZipCode(value string) {
	this.Set("r_zip_code", value)
}

/* 发件人街道地址 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetSAddress(value string) {
	this.Set("s_address", value)
}

/* 发件人区域ID */
func (this *LogisticsConsignOrderCreateandsendRequest) SetSAreaId(value string) {
	this.Set("s_area_id", value)
}

/* 市 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetSCityName(value string) {
	this.Set("s_city_name", value)
}

/* 区 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetSDistName(value string) {
	this.Set("s_dist_name", value)
}

/* 手机号码 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetSMobilePhone(value string) {
	this.Set("s_mobile_phone", value)
}

/* 发件人名称 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetSName(value string) {
	this.Set("s_name", value)
}

/* 省 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetSProvName(value string) {
	this.Set("s_prov_name", value)
}

/* 电话号码 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetSTelephone(value string) {
	this.Set("s_telephone", value)
}

/* 发件人出编 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetSZipCode(value string) {
	this.Set("s_zip_code", value)
}

/* 费用承担方式 1买家承担运费 2卖家承担运费 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetShipping(value string) {
	this.Set("shipping", value)
}

/* 交易流水号，淘外订单号或者商家内部交易流水号 */
func (this *LogisticsConsignOrderCreateandsendRequest) SetTradeId(value string) {
	this.Set("trade_id", value)
}

/* 用户ID */
func (this *LogisticsConsignOrderCreateandsendRequest) SetUserId(value string) {
	this.Set("user_id", value)
}

type LogisticsConsignOrderCreateandsendResponse struct {
	*ErrorResponse                                   `json:"error_response,omitempty"`
	LogisticsConsignOrderCreateandsendResponseResult `json:"logistics_consign_order_createandsend_response"`
}
type LogisticsConsignOrderCreateandsendResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
	/* 订单ID */
	OrderId int64 `json:"order_id"`
	/* 结果描述 */
	ResultDesc string `json:"result_desc"`
}

/*taobao.logistics.consign.resend*/
type LogisticsConsignResendRequest struct {
	values url.Values
}

func (this *LogisticsConsignResendRequest) GetApiMethodName() string {
	return "taobao.logistics.consign.resend"
}
func (this *LogisticsConsignResendRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsConsignResendRequest) GetValues() url.Values {
	return this.values
}

/* 物流公司代码.如"POST"代表中国邮政,"ZJS"代表宅急送。调用 taobao.logistics.companies.get 获取。
<br><font color='red'>如果是货到付款订单，选择的物流公司必须支持货到付款发货方式</font> */
func (this *LogisticsConsignResendRequest) SetCompanyCode(value string) {
	this.Set("company_code", value)
}

/* feature参数格式<br>
范例: identCode=tid1:识别码1,识别码2|tid2:识别码3;machineCode=tid3:3C机器号A,3C机器号B<br>
identCode为识别码的KEY,machineCode为3C的KEY,多个key之间用”;”分隔<br>
“tid1:识别码1,识别码2|tid2:识别码3”为identCode对应的value。
"|"不同商品间的分隔符。<br>
例1商品和2商品，之间就用"|"分开。<br>
TID就是商品代表的子订单号，对应taobao.trade.fullinfo.get 接口获得的oid字段。(通过OID可以唯一定位到当前商品上)<br>
":"TID和具体传入参数间的分隔符。冒号前表示TID,之后代表该商品的参数属性。<br>
"," 属性间分隔符。（对应商品数量，当存在一个商品的数量超过1个时，用逗号分开）。<br>
具体:当订单中A商品的数量为2个，其中手机串号分别为"12345","67890"。<br>
参数格式：identCode=TIDA:12345,67890。
TIDA对应了A宝贝，冒号后用逗号分隔的"12345","67890".说明本订单A宝贝的数量为2，值分别为"12345","67890"。<br>
当存在"|"时，就说明订单中存在多个商品，商品间用"|"分隔了开来。|"之后的内容含义同上。 */
func (this *LogisticsConsignResendRequest) SetFeature(value string) {
	this.Set("feature", value)
}

/* 表明是否是拆单，默认值0，1表示拆单 */
func (this *LogisticsConsignResendRequest) SetIsSplit(value string) {
	this.Set("is_split", value)
}

/* 运单号.具体一个物流公司的真实运单号码。淘宝官方物流会校验，请谨慎传入； */
func (this *LogisticsConsignResendRequest) SetOutSid(value string) {
	this.Set("out_sid", value)
}

/* 商家的IP地址 */
func (this *LogisticsConsignResendRequest) SetSellerIp(value string) {
	this.Set("seller_ip", value)
}

/* 拆单子订单列表，对应的数据是：子订单号列表。可以不传，但是如果传了则必须符合传递的规则。子订单必须是操作的物流订单的子订单的真子集！ */
func (this *LogisticsConsignResendRequest) SetSubTid(value string) {
	this.Set("sub_tid", value)
}

/* 淘宝交易ID<br /> 支持最小值为：1000 */
func (this *LogisticsConsignResendRequest) SetTid(value string) {
	this.Set("tid", value)
}

type LogisticsConsignResendResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	LogisticsConsignResendResponseResult `json:"logistics_consign_resend_response"`
}
type LogisticsConsignResendResponseResult struct {
	/* 返回发货是否成功is_success */
	Shipping *Shipping `json:"shipping"`
}

/*taobao.logistics.dummy.send*/
type LogisticsDummySendRequest struct {
	values url.Values
}

func (this *LogisticsDummySendRequest) GetApiMethodName() string {
	return "taobao.logistics.dummy.send"
}
func (this *LogisticsDummySendRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsDummySendRequest) GetValues() url.Values {
	return this.values
}

/* feature参数格式<br>
范例: identCode=tid1:识别码1,识别码2|tid2:识别码3;machineCode=tid3:3C机器号A,3C机器号B<br>
identCode为识别码的KEY,machineCode为3C的KEY,多个key之间用”;”分隔<br>
“tid1:识别码1,识别码2|tid2:识别码3”为identCode对应的value。
"|"不同商品间的分隔符。<br>
例1商品和2商品，之间就用"|"分开。<br>
TID就是商品代表的子订单号，对应taobao.trade.fullinfo.get 接口获得的oid字段。(通过OID可以唯一定位到当前商品上)<br>
":"TID和具体传入参数间的分隔符。冒号前表示TID,之后代表该商品的参数属性。<br>
"," 属性间分隔符。（对应商品数量，当存在一个商品的数量超过1个时，用逗号分开）。<br>
具体:当订单中A商品的数量为2个，其中手机串号分别为"12345","67890"。<br>
参数格式：identCode=TIDA:12345,67890。
TIDA对应了A宝贝，冒号后用逗号分隔的"12345","67890".说明本订单A宝贝的数量为2，值分别为"12345","67890"。<br>
当存在"|"时，就说明订单中存在多个商品，商品间用"|"分隔了开来。|"之后的内容含义同上。 */
func (this *LogisticsDummySendRequest) SetFeature(value string) {
	this.Set("feature", value)
}

/* 商家的IP地址 */
func (this *LogisticsDummySendRequest) SetSellerIp(value string) {
	this.Set("seller_ip", value)
}

/* 淘宝交易ID */
func (this *LogisticsDummySendRequest) SetTid(value string) {
	this.Set("tid", value)
}

type LogisticsDummySendResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	LogisticsDummySendResponseResult `json:"logistics_dummy_send_response"`
}
type LogisticsDummySendResponseResult struct {
	/* 返回发货是否成功is_success */
	Shipping *Shipping `json:"shipping"`
}

/*taobao.logistics.offline.send*/
type LogisticsOfflineSendRequest struct {
	values url.Values
}

func (this *LogisticsOfflineSendRequest) GetApiMethodName() string {
	return "taobao.logistics.offline.send"
}
func (this *LogisticsOfflineSendRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsOfflineSendRequest) GetValues() url.Values {
	return this.values
}

/* 卖家联系人地址库ID，可以通过taobao.logistics.address.search接口查询到地址库ID。<br><font color='red'>如果为空，取的卖家的默认退货地址</font><br> */
func (this *LogisticsOfflineSendRequest) SetCancelId(value string) {
	this.Set("cancel_id", value)
}

/* 物流公司代码.如"POST"就代表中国邮政,"ZJS"就代表宅急送.调用 taobao.logistics.companies.get 获取。非淘宝官方物流合作公司，填写具体的物流公司名称，如“顺丰”。 */
func (this *LogisticsOfflineSendRequest) SetCompanyCode(value string) {
	this.Set("company_code", value)
}

/* feature参数格式<br>
范例: identCode=tid1:识别码1,识别码2|tid2:识别码3;machineCode=tid3:3C机器号A,3C机器号B<br>
identCode为识别码的KEY,machineCode为3C的KEY,多个key之间用”;”分隔<br>
“tid1:识别码1,识别码2|tid2:识别码3”为identCode对应的value。
"|"不同商品间的分隔符。<br>
例1商品和2商品，之间就用"|"分开。<br>
TID就是商品代表的子订单号，对应taobao.trade.fullinfo.get 接口获得的oid字段。(通过OID可以唯一定位到当前商品上)<br>
":"TID和具体传入参数间的分隔符。冒号前表示TID,之后代表该商品的参数属性。<br>
"," 属性间分隔符。（对应商品数量，当存在一个商品的数量超过1个时，用逗号分开）。<br>
具体:当订单中A商品的数量为2个，其中手机串号分别为"12345","67890"。<br>
参数格式：identCode=TIDA:12345,67890。
TIDA对应了A宝贝，冒号后用逗号分隔的"12345","67890".说明本订单A宝贝的数量为2，值分别为"12345","67890"。<br>
当存在"|"时，就说明订单中存在多个商品，商品间用"|"分隔了开来。|"之后的内容含义同上。 */
func (this *LogisticsOfflineSendRequest) SetFeature(value string) {
	this.Set("feature", value)
}

/* 表明是否是拆单
1表示拆单
0表示不拆单，默认值0 */
func (this *LogisticsOfflineSendRequest) SetIsSplit(value string) {
	this.Set("is_split", value)
}

/* 运单号.具体一个物流公司的真实运单号码。淘宝官方物流会校验，请谨慎传入；若company_code中传入的代码非淘宝官方物流合作公司，此处运单号不校验。 */
func (this *LogisticsOfflineSendRequest) SetOutSid(value string) {
	this.Set("out_sid", value)
}

/* 商家的IP地址 */
func (this *LogisticsOfflineSendRequest) SetSellerIp(value string) {
	this.Set("seller_ip", value)
}

/* 卖家联系人地址库ID，可以通过taobao.logistics.address.search接口查询到地址库ID。<font color='red'>如果为空，取的卖家的默认取货地址</font> */
func (this *LogisticsOfflineSendRequest) SetSenderId(value string) {
	this.Set("sender_id", value)
}

/* 需要拆单发货的子订单集合，为空表示不做拆单发货。 */
func (this *LogisticsOfflineSendRequest) SetSubTid(value string) {
	this.Set("sub_tid", value)
}

/* 淘宝交易ID<br /> 支持最小值为：1000 */
func (this *LogisticsOfflineSendRequest) SetTid(value string) {
	this.Set("tid", value)
}

type LogisticsOfflineSendResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	LogisticsOfflineSendResponseResult `json:"logistics_offline_send_response"`
}
type LogisticsOfflineSendResponseResult struct {
	/* 返回发货是否成功is_success */
	Shipping *Shipping `json:"shipping"`
}

/*taobao.logistics.online.cancel*/
type LogisticsOnlineCancelRequest struct {
	values url.Values
}

func (this *LogisticsOnlineCancelRequest) GetApiMethodName() string {
	return "taobao.logistics.online.cancel"
}
func (this *LogisticsOnlineCancelRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsOnlineCancelRequest) GetValues() url.Values {
	return this.values
}

/* 淘宝交易ID */
func (this *LogisticsOnlineCancelRequest) SetTid(value string) {
	this.Set("tid", value)
}

type LogisticsOnlineCancelResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	LogisticsOnlineCancelResponseResult `json:"logistics_online_cancel_response"`
}
type LogisticsOnlineCancelResponseResult struct {
	/* 成功与失败 */
	IsSuccess bool `json:"is_success"`
	/* 修改时间 */
	ModifyTime string `json:"modify_time"`
	/* 重新创建物流订单id */
	RecreatedOrderId int64 `json:"recreated_order_id"`
}

/*taobao.logistics.online.confirm*/
type LogisticsOnlineConfirmRequest struct {
	values url.Values
}

func (this *LogisticsOnlineConfirmRequest) GetApiMethodName() string {
	return "taobao.logistics.online.confirm"
}
func (this *LogisticsOnlineConfirmRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsOnlineConfirmRequest) GetValues() url.Values {
	return this.values
}

/* 表明是否是拆单，默认值0，1表示拆单 */
func (this *LogisticsOnlineConfirmRequest) SetIsSplit(value string) {
	this.Set("is_split", value)
}

/* 运单号.具体一个物流公司的真实运单号码。淘宝官方物流会校验，请谨慎传入；若company_code中传入的代码非淘宝官方物流合作公司，此处运单号不校验。<br> */
func (this *LogisticsOnlineConfirmRequest) SetOutSid(value string) {
	this.Set("out_sid", value)
}

/* 商家的IP地址 */
func (this *LogisticsOnlineConfirmRequest) SetSellerIp(value string) {
	this.Set("seller_ip", value)
}

/* 拆单子订单列表，对应的数据是：子订单号的列表。可以不传，但是如果传了则必须符合传递的规则。子订单必须是操作的物流订单的子订单的真子集！ */
func (this *LogisticsOnlineConfirmRequest) SetSubTid(value string) {
	this.Set("sub_tid", value)
}

/* 淘宝交易ID<br /> 支持最小值为：1000 */
func (this *LogisticsOnlineConfirmRequest) SetTid(value string) {
	this.Set("tid", value)
}

type LogisticsOnlineConfirmResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	LogisticsOnlineConfirmResponseResult `json:"logistics_online_confirm_response"`
}
type LogisticsOnlineConfirmResponseResult struct {
	/* 只返回is_success：是否成功。 */
	Shipping *Shipping `json:"shipping"`
}

/*taobao.logistics.online.send*/
type LogisticsOnlineSendRequest struct {
	values url.Values
}

func (this *LogisticsOnlineSendRequest) GetApiMethodName() string {
	return "taobao.logistics.online.send"
}
func (this *LogisticsOnlineSendRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsOnlineSendRequest) GetValues() url.Values {
	return this.values
}

/* 卖家联系人地址库ID，可以通过taobao.logistics.address.search接口查询到地址库ID。<br><font color='red'>如果为空，取的卖家的默认退货地址</font><br> */
func (this *LogisticsOnlineSendRequest) SetCancelId(value string) {
	this.Set("cancel_id", value)
}

/* 物流公司代码.如"POST"就代表中国邮政,"ZJS"就代表宅急送.调用 taobao.logistics.companies.get 获取。
<br><font color='red'>如果是货到付款订单，选择的物流公司必须支持货到付款发货方式</font> */
func (this *LogisticsOnlineSendRequest) SetCompanyCode(value string) {
	this.Set("company_code", value)
}

/* feature参数格式<br>
范例: identCode=tid1:识别码1,识别码2|tid2:识别码3;machineCode=tid3:3C机器号A,3C机器号B<br>
identCode为识别码的KEY,machineCode为3C的KEY,多个key之间用”;”分隔<br>
“tid1:识别码1,识别码2|tid2:识别码3”为identCode对应的value。
"|"不同商品间的分隔符。<br>
例1商品和2商品，之间就用"|"分开。<br>
TID就是商品代表的子订单号，对应taobao.trade.fullinfo.get 接口获得的oid字段。(通过OID可以唯一定位到当前商品上)<br>
":"TID和具体传入参数间的分隔符。冒号前表示TID,之后代表该商品的参数属性。<br>
"," 属性间分隔符。（对应商品数量，当存在一个商品的数量超过1个时，用逗号分开）。<br>
具体:当订单中A商品的数量为2个，其中手机串号分别为"12345","67890"。<br>
参数格式：identCode=TIDA:12345,67890。
TIDA对应了A宝贝，冒号后用逗号分隔的"12345","67890".说明本订单A宝贝的数量为2，值分别为"12345","67890"。<br>
当存在"|"时，就说明订单中存在多个商品，商品间用"|"分隔了开来。|"之后的内容含义同上。 */
func (this *LogisticsOnlineSendRequest) SetFeature(value string) {
	this.Set("feature", value)
}

/* 表明是否是拆单，默认值0，1表示拆单 */
func (this *LogisticsOnlineSendRequest) SetIsSplit(value string) {
	this.Set("is_split", value)
}

/* 运单号.具体一个物流公司的真实运单号码。淘宝官方物流会校验，请谨慎传入； */
func (this *LogisticsOnlineSendRequest) SetOutSid(value string) {
	this.Set("out_sid", value)
}

/* 商家的IP地址 */
func (this *LogisticsOnlineSendRequest) SetSellerIp(value string) {
	this.Set("seller_ip", value)
}

/* 卖家联系人地址库ID，可以通过taobao.logistics.address.search接口查询到地址库ID。<font color='red'>如果为空，取的卖家的默认取货地址</font> */
func (this *LogisticsOnlineSendRequest) SetSenderId(value string) {
	this.Set("sender_id", value)
}

/* 拆单子订单列表，对应的数据是：子订单号的列表。可以不传，但是如果传了则必须符合传递的规则。子订单必须是操作的物流订单的子订单的真子集！ */
func (this *LogisticsOnlineSendRequest) SetSubTid(value string) {
	this.Set("sub_tid", value)
}

/* 淘宝交易ID<br /> 支持最小值为：1000 */
func (this *LogisticsOnlineSendRequest) SetTid(value string) {
	this.Set("tid", value)
}

type LogisticsOnlineSendResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	LogisticsOnlineSendResponseResult `json:"logistics_online_send_response"`
}
type LogisticsOnlineSendResponseResult struct {
	/* 返回发货是否成功is_success */
	Shipping *Shipping `json:"shipping"`
}

/*taobao.logistics.order.create*/
type LogisticsOrderCreateRequest struct {
	values url.Values
}

func (this *LogisticsOrderCreateRequest) GetApiMethodName() string {
	return "taobao.logistics.order.create"
}
func (this *LogisticsOrderCreateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsOrderCreateRequest) GetValues() url.Values {
	return this.values
}

/* 运送的货物名称列表，用|号隔开 */
func (this *LogisticsOrderCreateRequest) SetGoodsNames(value string) {
	this.Set("goods_names", value)
}

/* 运送货物的数量列表，用|号隔开 */
func (this *LogisticsOrderCreateRequest) SetGoodsQuantities(value string) {
	this.Set("goods_quantities", value)
}

/* 创建订单同时是否进行发货，默认发货。 */
func (this *LogisticsOrderCreateRequest) SetIsConsign(value string) {
	this.Set("is_consign", value)
}

/* 运送货物的单价列表(注意：单位为分），用|号隔开 */
func (this *LogisticsOrderCreateRequest) SetItemValues(value string) {
	this.Set("item_values", value)
}

/* 发货的物流公司代码，如申通=STO，圆通=YTO。is_consign=true时，此项必填。 */
func (this *LogisticsOrderCreateRequest) SetLogisCompanyCode(value string) {
	this.Set("logis_company_code", value)
}

/* 发货方式,默认为自己联系发货。可选值:ONLINE(在线下单)、OFFLINE(自己联系)。 */
func (this *LogisticsOrderCreateRequest) SetLogisType(value string) {
	this.Set("logis_type", value)
}

/* 发货的物流公司运单号。在logis_type=OFFLINE且is_consign=true时，此项必填。 */
func (this *LogisticsOrderCreateRequest) SetMailNo(value string) {
	this.Set("mail_no", value)
}

/* 收货人详细地址，比如”浙江省^^^杭州市^^^下城区^^^文二路“，中间用“^^^”分隔 */
func (this *LogisticsOrderCreateRequest) SetReceiverAddress(value string) {
	this.Set("receiver_address", value)
}

/* 收货人手机号码（若此处为空，则电话必填） */
func (this *LogisticsOrderCreateRequest) SetReceiverMobilePhone(value string) {
	this.Set("receiver_mobile_phone", value)
}

/* 收货人姓名 */
func (this *LogisticsOrderCreateRequest) SetReceiverName(value string) {
	this.Set("receiver_name", value)
}

/* 收货人电话号码（若此处为空，则手机号码必填） */
func (this *LogisticsOrderCreateRequest) SetReceiverTelephone(value string) {
	this.Set("receiver_telephone", value)
}

/* 收货人邮编 */
func (this *LogisticsOrderCreateRequest) SetReceiverZipCode(value string) {
	this.Set("receiver_zip_code", value)
}

/* 卖家旺旺号 */
func (this *LogisticsOrderCreateRequest) SetSellerWangwangId(value string) {
	this.Set("seller_wangwang_id", value)
}

/* 发货人详细地址，比如”浙江省^^^杭州市^^^下城区^^^文二路“，中间用“^^^”分隔 */
func (this *LogisticsOrderCreateRequest) SetSenderAddress(value string) {
	this.Set("sender_address", value)
}

/* 发货人手机号码（若此处为空，则电话必填） */
func (this *LogisticsOrderCreateRequest) SetSenderMobilePhone(value string) {
	this.Set("sender_mobile_phone", value)
}

/* 发货人姓名 */
func (this *LogisticsOrderCreateRequest) SetSenderName(value string) {
	this.Set("sender_name", value)
}

/* 发货人电话号码（如此处为空，则手机号码必填） */
func (this *LogisticsOrderCreateRequest) SetSenderTelephone(value string) {
	this.Set("sender_telephone", value)
}

/* 发货人邮编 */
func (this *LogisticsOrderCreateRequest) SetSenderZipCode(value string) {
	this.Set("sender_zip_code", value)
}

/* 运费承担方式。1为买家承担运费，2为卖家承担运费，其他值为错误参数。 */
func (this *LogisticsOrderCreateRequest) SetShipping(value string) {
	this.Set("shipping", value)
}

/* 订单的交易号码 */
func (this *LogisticsOrderCreateRequest) SetTradeId(value string) {
	this.Set("trade_id", value)
}

type LogisticsOrderCreateResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	LogisticsOrderCreateResponseResult `json:"logistics_order_create_response"`
}
type LogisticsOrderCreateResponseResult struct {
	/* 淘宝物流订单交易号，如返回-1则表示错误。如果在新建订单时传入trade_id,此处会返回此id，如果未传入trade_id，此处会返回淘宝物流分配的交易号码。 */
	TradeId int64 `json:"trade_id"`
}

/*taobao.logistics.order.shengxian.confirm*/
type LogisticsOrderShengxianConfirmRequest struct {
	values url.Values
}

func (this *LogisticsOrderShengxianConfirmRequest) GetApiMethodName() string {
	return "taobao.logistics.order.shengxian.confirm"
}
func (this *LogisticsOrderShengxianConfirmRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsOrderShengxianConfirmRequest) GetValues() url.Values {
	return this.values
}

/* 卖家联系人地址库ID，可以通过taobao.logistics.address.search接口查询到地址库ID。<br><font color='red'>如果为空，取的卖家的默认退货地址</font><br> */
func (this *LogisticsOrderShengxianConfirmRequest) SetCancelId(value string) {
	this.Set("cancel_id", value)
}

/* 1：冷链。0：常温 */
func (this *LogisticsOrderShengxianConfirmRequest) SetDeliveryType(value string) {
	this.Set("delivery_type", value)
}

/* 物流订单ID 。同淘宝交易订单互斥，淘宝交易号存在，，以淘宝交易号为准<br /> 支持最小值为：1000 */
func (this *LogisticsOrderShengxianConfirmRequest) SetLogisId(value string) {
	this.Set("logis_id", value)
}

/* 运单号.具体一个物流公司的真实运单号码。淘宝官方物流会校验，请谨慎传入； */
func (this *LogisticsOrderShengxianConfirmRequest) SetOutSid(value string) {
	this.Set("out_sid", value)
}

/* 商家的IP地址 */
func (this *LogisticsOrderShengxianConfirmRequest) SetSellerIp(value string) {
	this.Set("seller_ip", value)
}

/* 卖家联系人地址库ID，可以通过taobao.logistics.address.search接口查询到地址库ID。<font color='red'>如果为空，取的卖家的默认取货地址</font>

如果service_code不为空，默认使用service_code
如果service_code为空，sender_id不为空，使用sender_id对应的地址发货
如果service_code与sender_id都为空，使用默认地址发货 */
func (this *LogisticsOrderShengxianConfirmRequest) SetSenderId(value string) {
	this.Set("sender_id", value)
}

/* 仓库的服务代码标示，代码一个仓库的实体。(可以通过taobao.wlb.stores.baseinfo.get接口查询)

如果service_code为空，默认通过sender_id来发货 */
func (this *LogisticsOrderShengxianConfirmRequest) SetServiceCode(value string) {
	this.Set("service_code", value)
}

/* 淘宝交易ID<br /> 支持最小值为：1000 */
func (this *LogisticsOrderShengxianConfirmRequest) SetTid(value string) {
	this.Set("tid", value)
}

type LogisticsOrderShengxianConfirmResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	LogisticsOrderShengxianConfirmResponseResult `json:"logistics_order_shengxian_confirm_response"`
}
type LogisticsOrderShengxianConfirmResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
	/* 发货成功后，返回承运商的信息 */
	ShipFresh *ShipFresh `json:"ship_fresh"`
}

/*taobao.logistics.orders.detail.get*/
type LogisticsOrdersDetailGetRequest struct {
	values url.Values
}

func (this *LogisticsOrdersDetailGetRequest) GetApiMethodName() string {
	return "taobao.logistics.orders.detail.get"
}
func (this *LogisticsOrdersDetailGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsOrdersDetailGetRequest) GetValues() url.Values {
	return this.values
}

/* 买家昵称 */
func (this *LogisticsOrdersDetailGetRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 创建时间结束.格式:yyyy-MM-dd HH:mm:ss */
func (this *LogisticsOrdersDetailGetRequest) SetEndCreated(value string) {
	this.Set("end_created", value)
}

/* 需返回的字段列表.可选值:Shipping 物流数据结构中所有字段.fileds中可以指定返回以上任意一个或者多个字段,以","分隔. */
func (this *LogisticsOrdersDetailGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 谁承担运费.可选值:buyer(买家),seller(卖家).如:buyer */
func (this *LogisticsOrdersDetailGetRequest) SetFreightPayer(value string) {
	this.Set("freight_payer", value)
}

/* 页码.该字段没传 或 值<1 ,则默认page_no为1 */
func (this *LogisticsOrdersDetailGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数.该字段没传 或 值<1 ，则默认page_size为40<br /> 支持最大值为：100 */
func (this *LogisticsOrdersDetailGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 收货人姓名 */
func (this *LogisticsOrdersDetailGetRequest) SetReceiverName(value string) {
	this.Set("receiver_name", value)
}

/* 卖家是否发货.可选值:yes(是),no(否).如:yes. */
func (this *LogisticsOrdersDetailGetRequest) SetSellerConfirm(value string) {
	this.Set("seller_confirm", value)
}

/* 创建时间开始.格式:yyyy-MM-dd HH:mm:ss */
func (this *LogisticsOrdersDetailGetRequest) SetStartCreated(value string) {
	this.Set("start_created", value)
}

/* 物流状态.可查看数据结构 Shipping 中的status字段. */
func (this *LogisticsOrdersDetailGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 交易ID.如果加入tid参数的话,不用传其他的参数,但是仅会返回一条物流订单信息. */
func (this *LogisticsOrdersDetailGetRequest) SetTid(value string) {
	this.Set("tid", value)
}

/* 物流方式.可选值:post(平邮),express(快递),ems(EMS).如:post */
func (this *LogisticsOrdersDetailGetRequest) SetType(value string) {
	this.Set("type", value)
}

type LogisticsOrdersDetailGetResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	LogisticsOrdersDetailGetResponseResult `json:"logistics_orders_detail_get_response"`
}
type LogisticsOrdersDetailGetResponseResult struct {
	/* 获取的物流订单详情列表.返回的Shipping包含的具体信息为入参fields请求的字段信息. */
	Shippings []*Shipping `json:"shippings"`
	/* 搜索到的物流订单列表总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.logistics.orders.get*/
type LogisticsOrdersGetRequest struct {
	values url.Values
}

func (this *LogisticsOrdersGetRequest) GetApiMethodName() string {
	return "taobao.logistics.orders.get"
}
func (this *LogisticsOrdersGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsOrdersGetRequest) GetValues() url.Values {
	return this.values
}

/* 买家昵称 */
func (this *LogisticsOrdersGetRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 创建时间结束 */
func (this *LogisticsOrdersGetRequest) SetEndCreated(value string) {
	this.Set("end_created", value)
}

/* 需返回的字段列表.可选值:Shipping 物流数据结构中的以下字段: <br>
tid,order_code,seller_nick,buyer_nick,delivery_start, delivery_end,out_sid,item_title,receiver_name, created,modified,status,type,freight_payer,seller_confirm,company_name,sub_tids,is_spilt；<br>多个字段之间用","分隔。如tid,seller_nick,buyer_nick,delivery_start。 */
func (this *LogisticsOrdersGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 谁承担运费.可选值:buyer(买家),seller(卖家).如:buyer */
func (this *LogisticsOrdersGetRequest) SetFreightPayer(value string) {
	this.Set("freight_payer", value)
}

/* 页码.该字段没传 或 值<1 ,则默认page_no为1 */
func (this *LogisticsOrdersGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数.该字段没传 或 值<1 ,则默认page_size为40<br /> 支持最大值为：100 */
func (this *LogisticsOrdersGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 收货人姓名 */
func (this *LogisticsOrdersGetRequest) SetReceiverName(value string) {
	this.Set("receiver_name", value)
}

/* 卖家是否发货.可选值:yes(是),no(否).如:yes */
func (this *LogisticsOrdersGetRequest) SetSellerConfirm(value string) {
	this.Set("seller_confirm", value)
}

/* 创建时间开始 */
func (this *LogisticsOrdersGetRequest) SetStartCreated(value string) {
	this.Set("start_created", value)
}

/* 物流状态.查看数据结构 Shipping 中的status字段. */
func (this *LogisticsOrdersGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 交易ID.如果加入tid参数的话,不用传其他的参数,若传入tid：非拆单场景，仅会返回一条物流订单信息；拆单场景，会返回多条物流订单信息 */
func (this *LogisticsOrdersGetRequest) SetTid(value string) {
	this.Set("tid", value)
}

/* 物流方式.可选值:post(平邮),express(快递),ems(EMS).如:post */
func (this *LogisticsOrdersGetRequest) SetType(value string) {
	this.Set("type", value)
}

type LogisticsOrdersGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	LogisticsOrdersGetResponseResult `json:"logistics_orders_get_response"`
}
type LogisticsOrdersGetResponseResult struct {
	/* 获取的物流订单详情列表
	返回的Shipping包含的具体信息为入参fields请求的字段信息 */
	Shippings []*Shipping `json:"shippings"`
	/* 搜索到的物流订单列表总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.logistics.orderstore.push*/
type LogisticsOrderstorePushRequest struct {
	values url.Values
}

func (this *LogisticsOrderstorePushRequest) GetApiMethodName() string {
	return "taobao.logistics.orderstore.push"
}
func (this *LogisticsOrderstorePushRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsOrderstorePushRequest) GetValues() url.Values {
	return this.values
}

/* 表明是否是拆单，默认值0，1表示拆单 */
func (this *LogisticsOrderstorePushRequest) SetIsSplit(value string) {
	this.Set("is_split", value)
}

/* 流转状态发生时间 */
func (this *LogisticsOrderstorePushRequest) SetOccureTime(value string) {
	this.Set("occure_time", value)
}

/* 仓内操作描述<br /> 支持最大长度为：200<br /> 支持的最大列表长度为：200 */
func (this *LogisticsOrderstorePushRequest) SetOperateDetail(value string) {
	this.Set("operate_detail", value)
}

/* 快递业务员联系方式<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *LogisticsOrderstorePushRequest) SetOperatorContact(value string) {
	this.Set("operator_contact", value)
}

/* 快递业务员名称<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *LogisticsOrderstorePushRequest) SetOperatorName(value string) {
	this.Set("operator_name", value)
}

/* 拆单子订单列表，对应的数据是：子订单号的列表。可以不传，但是如果传了则必须符合传递的规则。子订单必须是操作的物流订单的子订单的真子集！ */
func (this *LogisticsOrderstorePushRequest) SetSubTid(value string) {
	this.Set("sub_tid", value)
}

/* 淘宝订单交易号 */
func (this *LogisticsOrderstorePushRequest) SetTradeId(value string) {
	this.Set("trade_id", value)
}

type LogisticsOrderstorePushResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	LogisticsOrderstorePushResponseResult `json:"logistics_orderstore_push_response"`
}
type LogisticsOrderstorePushResponseResult struct {
	/* 返回结果是否成功is_success */
	Shipping *Shipping `json:"shipping"`
}

/*taobao.logistics.ordertrace.push*/
type LogisticsOrdertracePushRequest struct {
	values url.Values
}

func (this *LogisticsOrdertracePushRequest) GetApiMethodName() string {
	return "taobao.logistics.ordertrace.push"
}
func (this *LogisticsOrdertracePushRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsOrdertracePushRequest) GetValues() url.Values {
	return this.values
}

/* 物流公司名称<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *LogisticsOrdertracePushRequest) SetCompanyName(value string) {
	this.Set("company_name", value)
}

/* 流转节点的当前城市<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *LogisticsOrdertracePushRequest) SetCurrentCity(value string) {
	this.Set("current_city", value)
}

/* 网点名称<br /> 支持最大长度为：100<br /> 支持的最大列表长度为：100 */
func (this *LogisticsOrdertracePushRequest) SetFacilityName(value string) {
	this.Set("facility_name", value)
}

/* 快递单号。各个快递公司的运单号格式不同。 */
func (this *LogisticsOrdertracePushRequest) SetMailNo(value string) {
	this.Set("mail_no", value)
}

/* 流转节点的下一个城市<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *LogisticsOrdertracePushRequest) SetNextCity(value string) {
	this.Set("next_city", value)
}

/* 描述当前节点的操作，操作是“揽收”、“派送”或“签收”。<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *LogisticsOrdertracePushRequest) SetNodeDescription(value string) {
	this.Set("node_description", value)
}

/* 流转节点发生时间 */
func (this *LogisticsOrdertracePushRequest) SetOccureTime(value string) {
	this.Set("occure_time", value)
}

/* 流转节点的详细地址及操作描述<br /> 支持最大长度为：200<br /> 支持的最大列表长度为：200 */
func (this *LogisticsOrdertracePushRequest) SetOperateDetail(value string) {
	this.Set("operate_detail", value)
}

/* 快递业务员联系方式，手机号码或电话。<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *LogisticsOrdertracePushRequest) SetOperatorContact(value string) {
	this.Set("operator_contact", value)
}

/* 快递业务员名称<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *LogisticsOrdertracePushRequest) SetOperatorName(value string) {
	this.Set("operator_name", value)
}

type LogisticsOrdertracePushResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	LogisticsOrdertracePushResponseResult `json:"logistics_ordertrace_push_response"`
}
type LogisticsOrdertracePushResponseResult struct {
	/* 返回结果是否成功is_success */
	Shipping *Shipping `json:"shipping"`
}

/*taobao.logistics.partners.get*/
type LogisticsPartnersGetRequest struct {
	values url.Values
}

func (this *LogisticsPartnersGetRequest) GetApiMethodName() string {
	return "taobao.logistics.partners.get"
}
func (this *LogisticsPartnersGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsPartnersGetRequest) GetValues() url.Values {
	return this.values
}

/* 货物价格.只有当选择货到付款此参数才会有效 */
func (this *LogisticsPartnersGetRequest) SetGoodsValue(value string) {
	this.Set("goods_value", value)
}

/* 是否需要揽收资费信息，默认false。在此值为false时，返回内容中将无carriage。在未设置source_id或target_id的情况下，无法查询揽收资费信息。自己联系无揽收资费记录。 */
func (this *LogisticsPartnersGetRequest) SetIsNeedCarriage(value string) {
	this.Set("is_need_carriage", value)
}

/* 服务类型，根据此参数可查出提供相应服务类型的物流公司信息(物流公司状态正常)，可选值：cod(货到付款)、online(在线下单)、 offline(自己联系)、limit(限时物流)。然后再根据source_id,target_id,goods_value这三个条件来过滤物流公司. 目前输入自己联系服务类型将会返回空，因为自己联系并没有具体的服务信息，所以不会有记录。 */
func (this *LogisticsPartnersGetRequest) SetServiceType(value string) {
	this.Set("service_type", value)
}

/* 物流公司揽货地地区码（必须是区、县一级的）.参考:<a href="http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/201401/t20140116_501070.html">http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/201401/t20140116_501070.html</a>或者调用 taobao.areas.get 获取 */
func (this *LogisticsPartnersGetRequest) SetSourceId(value string) {
	this.Set("source_id", value)
}

/* 物流公司派送地地区码（必须是区、县一级的）.参考:<a href="http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/201401/t20140116_501070.html">http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/201401/t20140116_501070.html</a>或者调用 taobao.areas.get 获取 */
func (this *LogisticsPartnersGetRequest) SetTargetId(value string) {
	this.Set("target_id", value)
}

type LogisticsPartnersGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	LogisticsPartnersGetResponseResult `json:"logistics_partners_get_response"`
}
type LogisticsPartnersGetResponseResult struct {
	/* 物流公司信息。 */
	LogisticsPartners []*LogisticsPartner `json:"logistics_partners"`
}

/*taobao.logistics.trace.search*/
type LogisticsTraceSearchRequest struct {
	values url.Values
}

func (this *LogisticsTraceSearchRequest) GetApiMethodName() string {
	return "taobao.logistics.trace.search"
}
func (this *LogisticsTraceSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsTraceSearchRequest) GetValues() url.Values {
	return this.values
}

/* 表明是否是拆单，默认值0，1表示拆单 */
func (this *LogisticsTraceSearchRequest) SetIsSplit(value string) {
	this.Set("is_split", value)
}

/* 卖家昵称 */
func (this *LogisticsTraceSearchRequest) SetSellerNick(value string) {
	this.Set("seller_nick", value)
}

/* 拆单子订单列表，对应的数据是：子订单号的列表。可以不传，但是如果传了则必须符合传递的规则。子订单必须是操作的物流订单的子订单的真子集 */
func (this *LogisticsTraceSearchRequest) SetSubTid(value string) {
	this.Set("sub_tid", value)
}

/* 淘宝交易号，请勿传非淘宝交易号 */
func (this *LogisticsTraceSearchRequest) SetTid(value string) {
	this.Set("tid", value)
}

type LogisticsTraceSearchResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	LogisticsTraceSearchResponseResult `json:"logistics_trace_search_response"`
}
type LogisticsTraceSearchResponseResult struct {
	/* 物流公司名称 */
	CompanyName string `json:"company_name"`
	/* 运单号 */
	OutSid string `json:"out_sid"`
	/* 订单的物流状态（仅支持线上发货online订单，线下发货offline发出后直接变为已签收）
	* 等候发送给物流公司
	*已提交给物流公司,等待物流公司接单
	*已经确认消息接收，等待物流公司接单
	*物流公司已接单
	*物流公司不接单
	*物流公司揽收失败
	*物流公司揽收成功
	*签收失败
	*对方已签收
	*对方拒绝签收 */
	Status string `json:"status"`
	/* 交易号 */
	Tid int64 `json:"tid"`
	/* 流转信息列表 */
	TraceList []*TransitStepInfo `json:"trace_list"`
}

/*taobao.wlb.stores.baseinfo.get*/
type WlbStoresBaseinfoGetRequest struct {
	values url.Values
}

func (this *WlbStoresBaseinfoGetRequest) GetApiMethodName() string {
	return "taobao.wlb.stores.baseinfo.get"
}
func (this *WlbStoresBaseinfoGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbStoresBaseinfoGetRequest) GetValues() url.Values {
	return this.values
}

/* 0.商家仓库.1.菜鸟仓库.2全部被划分的仓库 */
func (this *WlbStoresBaseinfoGetRequest) SetType(value string) {
	this.Set("type", value)
}

type WlbStoresBaseinfoGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	WlbStoresBaseinfoGetResponseResult `json:"wlb_stores_baseinfo_get_response"`
}
type WlbStoresBaseinfoGetResponseResult struct {
	/* 仓库列表 */
	StoreInfoList []*StoreInfo `json:"store_info_list"`
	/* 返回的总数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.sellercats.list.add*/
type SellercatsListAddRequest struct {
	values url.Values
}

func (this *SellercatsListAddRequest) GetApiMethodName() string {
	return "taobao.sellercats.list.add"
}
func (this *SellercatsListAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SellercatsListAddRequest) GetValues() url.Values {
	return this.values
}

/* 卖家自定义类目名称。不超过20个字符 */
func (this *SellercatsListAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 父类目编号，如果类目为店铺下的一级类目：值等于0，如果类目为子类目，调用获取taobao.sellercats.list.get父类目编号 */
func (this *SellercatsListAddRequest) SetParentCid(value string) {
	this.Set("parent_cid", value)
}

/* 链接图片URL地址。(绝对地址，格式：http://host/image_path) */
func (this *SellercatsListAddRequest) SetPictUrl(value string) {
	this.Set("pict_url", value)
}

/* 该类目在页面上的排序位置,取值范围:大于零的整数 */
func (this *SellercatsListAddRequest) SetSortOrder(value string) {
	this.Set("sort_order", value)
}

type SellercatsListAddResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	SellercatsListAddResponseResult `json:"sellercats_list_add_response"`
}
type SellercatsListAddResponseResult struct {
	/* 返回seller_cat数据结构中的：cid,created */
	SellerCat *SellerCat `json:"seller_cat"`
}

/*taobao.sellercats.list.get*/
type SellercatsListGetRequest struct {
	values url.Values
}

func (this *SellercatsListGetRequest) GetApiMethodName() string {
	return "taobao.sellercats.list.get"
}
func (this *SellercatsListGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SellercatsListGetRequest) GetValues() url.Values {
	return this.values
}

/* 卖家昵称 */
func (this *SellercatsListGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SellercatsListGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	SellercatsListGetResponseResult `json:"sellercats_list_get_response"`
}
type SellercatsListGetResponseResult struct {
	/* 卖家自定义类目 */
	SellerCats []*SellerCat `json:"seller_cats"`
}

/*taobao.sellercats.list.update*/
type SellercatsListUpdateRequest struct {
	values url.Values
}

func (this *SellercatsListUpdateRequest) GetApiMethodName() string {
	return "taobao.sellercats.list.update"
}
func (this *SellercatsListUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SellercatsListUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 卖家自定义类目编号 */
func (this *SellercatsListUpdateRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 卖家自定义类目名称。不超过20个字符 */
func (this *SellercatsListUpdateRequest) SetName(value string) {
	this.Set("name", value)
}

/* 链接图片URL地址 */
func (this *SellercatsListUpdateRequest) SetPictUrl(value string) {
	this.Set("pict_url", value)
}

/* 该类目在页面上的排序位置,取值范围:大于零的整数 */
func (this *SellercatsListUpdateRequest) SetSortOrder(value string) {
	this.Set("sort_order", value)
}

type SellercatsListUpdateResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	SellercatsListUpdateResponseResult `json:"sellercats_list_update_response"`
}
type SellercatsListUpdateResponseResult struct {
	/* 返回sellercat数据结构中的：cid,modified */
	SellerCat *SellerCat `json:"seller_cat"`
}

/*taobao.shop.get*/
type ShopGetRequest struct {
	values url.Values
}

func (this *ShopGetRequest) GetApiMethodName() string {
	return "taobao.shop.get"
}
func (this *ShopGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ShopGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表。可选值：Shop 结构中的所有字段；多个字段之间用逗号(,)分隔 */
func (this *ShopGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 卖家昵称 */
func (this *ShopGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type ShopGetResponse struct {
	*ErrorResponse        `json:"error_response,omitempty"`
	ShopGetResponseResult `json:"shop_get_response"`
}
type ShopGetResponseResult struct {
	/* 店铺信息 */
	Shop *Shop `json:"shop"`
}

/*taobao.shop.remainshowcase.get*/
type ShopRemainshowcaseGetRequest struct {
	values url.Values
}

func (this *ShopRemainshowcaseGetRequest) GetApiMethodName() string {
	return "taobao.shop.remainshowcase.get"
}
func (this *ShopRemainshowcaseGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ShopRemainshowcaseGetRequest) GetValues() url.Values {
	return this.values
}

type ShopRemainshowcaseGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	ShopRemainshowcaseGetResponseResult `json:"shop_remainshowcase_get_response"`
}
type ShopRemainshowcaseGetResponseResult struct {
	/* 支持返回剩余橱窗数量，已用橱窗数量，总橱窗数量 */
	Shop *Shop `json:"shop"`
}

/*taobao.shop.update*/
type ShopUpdateRequest struct {
	values url.Values
}

func (this *ShopUpdateRequest) GetApiMethodName() string {
	return "taobao.shop.update"
}
func (this *ShopUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ShopUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 店铺公告。不超过1024个字符 */
func (this *ShopUpdateRequest) SetBulletin(value string) {
	this.Set("bulletin", value)
}

/* 店铺描述。10～2000个字符以内 */
func (this *ShopUpdateRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 店铺标题。不超过30个字符；过滤敏感词，如淘咖啡、阿里巴巴等。title, bulletin和desc至少必须传一个 */
func (this *ShopUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

type ShopUpdateResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	ShopUpdateResponseResult `json:"shop_update_response"`
}
type ShopUpdateResponseResult struct {
	/* 店铺信息 */
	Shop *Shop `json:"shop"`
}

/*taobao.shopcats.list.get*/
type ShopcatsListGetRequest struct {
	values url.Values
}

func (this *ShopcatsListGetRequest) GetApiMethodName() string {
	return "taobao.shopcats.list.get"
}
func (this *ShopcatsListGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ShopcatsListGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要返回的字段列表，见ShopCat，默认返回：cid,parent_cid,name,is_parent */
func (this *ShopcatsListGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

type ShopcatsListGetResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	ShopcatsListGetResponseResult `json:"shopcats_list_get_response"`
}
type ShopcatsListGetResponseResult struct {
	/* 店铺类目列表信息 */
	ShopCats []*ShopCat `json:"shop_cats"`
}

/*taobao.fenxiao.cooperation.audit*/
type FenxiaoCooperationAuditRequest struct {
	values url.Values
}

func (this *FenxiaoCooperationAuditRequest) GetApiMethodName() string {
	return "taobao.fenxiao.cooperation.audit"
}
func (this *FenxiaoCooperationAuditRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoCooperationAuditRequest) GetValues() url.Values {
	return this.values
}

/* 1:审批通过，审批通过后要加入授权产品线列表；
2:审批拒绝 */
func (this *FenxiaoCooperationAuditRequest) SetAuditResult(value string) {
	this.Set("audit_result", value)
}

/* 当审批通过时需要指定授权产品线id列表(代销)，如果没传则表示不开通，且经销和代销的授权产品线列表至少传入一种，同时传入则表示都开通。 */
func (this *FenxiaoCooperationAuditRequest) SetProductLineListAgent(value string) {
	this.Set("product_line_list_agent", value)
}

/* 当审批通过时需要指定授权产品线id列表(经销)，如果没传则表示不开通，且经销和代销的授权产品线列表至少传入一种，同时传入则表示都开通。 */
func (this *FenxiaoCooperationAuditRequest) SetProductLineListDealer(value string) {
	this.Set("product_line_list_dealer", value)
}

/* 备注 */
func (this *FenxiaoCooperationAuditRequest) SetRemark(value string) {
	this.Set("remark", value)
}

/* 合作申请Id */
func (this *FenxiaoCooperationAuditRequest) SetRequisitionId(value string) {
	this.Set("requisition_id", value)
}

type FenxiaoCooperationAuditResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	FenxiaoCooperationAuditResponseResult `json:"fenxiao_cooperation_audit_response"`
}
type FenxiaoCooperationAuditResponseResult struct {
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.cooperation.get*/
type FenxiaoCooperationGetRequest struct {
	values url.Values
}

func (this *FenxiaoCooperationGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.cooperation.get"
}
func (this *FenxiaoCooperationGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoCooperationGetRequest) GetValues() url.Values {
	return this.values
}

/* 合作结束时间yyyy-MM-dd HH:mm:ss */
func (this *FenxiaoCooperationGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 页码（大于0的整数，默认1） */
func (this *FenxiaoCooperationGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页记录数（默认20，最大50） */
func (this *FenxiaoCooperationGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 合作开始时间yyyy-MM-dd HH:mm:ss */
func (this *FenxiaoCooperationGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

/* 合作状态： NORMAL(合作中)、 ENDING(终止中) 、END (终止) */
func (this *FenxiaoCooperationGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 分销方式：AGENT(代销) 、DEALER（经销） */
func (this *FenxiaoCooperationGetRequest) SetTradeType(value string) {
	this.Set("trade_type", value)
}

type FenxiaoCooperationGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	FenxiaoCooperationGetResponseResult `json:"fenxiao_cooperation_get_response"`
}
type FenxiaoCooperationGetResponseResult struct {
	/* 合作分销关系 */
	Cooperations []*Cooperation `json:"cooperations"`
	/* 结果记录数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.fenxiao.cooperation.productcat.add*/
type FenxiaoCooperationProductcatAddRequest struct {
	values url.Values
}

func (this *FenxiaoCooperationProductcatAddRequest) GetApiMethodName() string {
	return "taobao.fenxiao.cooperation.productcat.add"
}
func (this *FenxiaoCooperationProductcatAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoCooperationProductcatAddRequest) GetValues() url.Values {
	return this.values
}

/* 合作关系id */
func (this *FenxiaoCooperationProductcatAddRequest) SetCooperateId(value string) {
	this.Set("cooperate_id", value)
}

/* 等级ID（为空则不修改） */
func (this *FenxiaoCooperationProductcatAddRequest) SetGradeId(value string) {
	this.Set("grade_id", value)
}

/* 产品线id列表，若有多个，以逗号分隔 */
func (this *FenxiaoCooperationProductcatAddRequest) SetProductLineList(value string) {
	this.Set("product_line_list", value)
}

type FenxiaoCooperationProductcatAddResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	FenxiaoCooperationProductcatAddResponseResult `json:"fenxiao_cooperation_productcat_add_response"`
}
type FenxiaoCooperationProductcatAddResponseResult struct {
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.cooperation.terminate*/
type FenxiaoCooperationTerminateRequest struct {
	values url.Values
}

func (this *FenxiaoCooperationTerminateRequest) GetApiMethodName() string {
	return "taobao.fenxiao.cooperation.terminate"
}
func (this *FenxiaoCooperationTerminateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoCooperationTerminateRequest) GetValues() url.Values {
	return this.values
}

/* 合作编号 */
func (this *FenxiaoCooperationTerminateRequest) SetCooperateId(value string) {
	this.Set("cooperate_id", value)
}

/* 终止天数，可选1,2,3,5,7,15，在多少天数内终止 */
func (this *FenxiaoCooperationTerminateRequest) SetEndRemainDays(value string) {
	this.Set("end_remain_days", value)
}

/* 终止说明（5-2000字）<br /> 支持最大长度为：2000<br /> 支持的最大列表长度为：2000 */
func (this *FenxiaoCooperationTerminateRequest) SetEndRemark(value string) {
	this.Set("end_remark", value)
}

type FenxiaoCooperationTerminateResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	FenxiaoCooperationTerminateResponseResult `json:"fenxiao_cooperation_terminate_response"`
}
type FenxiaoCooperationTerminateResponseResult struct {
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.cooperation.update*/
type FenxiaoCooperationUpdateRequest struct {
	values url.Values
}

func (this *FenxiaoCooperationUpdateRequest) GetApiMethodName() string {
	return "taobao.fenxiao.cooperation.update"
}
func (this *FenxiaoCooperationUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoCooperationUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 分销商ID */
func (this *FenxiaoCooperationUpdateRequest) SetDistributorId(value string) {
	this.Set("distributor_id", value)
}

/* 等级ID(0代表取消) */
func (this *FenxiaoCooperationUpdateRequest) SetGradeId(value string) {
	this.Set("grade_id", value)
}

/* 分销方式(新增)： AGENT(代销)、DEALER(经销)(默认为代销) */
func (this *FenxiaoCooperationUpdateRequest) SetTradeType(value string) {
	this.Set("trade_type", value)
}

type FenxiaoCooperationUpdateResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	FenxiaoCooperationUpdateResponseResult `json:"fenxiao_cooperation_update_response"`
}
type FenxiaoCooperationUpdateResponseResult struct {
	/* 更新结果成功失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.dealer.requisitionorder.agree*/
type FenxiaoDealerRequisitionorderAgreeRequest struct {
	values url.Values
}

func (this *FenxiaoDealerRequisitionorderAgreeRequest) GetApiMethodName() string {
	return "taobao.fenxiao.dealer.requisitionorder.agree"
}
func (this *FenxiaoDealerRequisitionorderAgreeRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDealerRequisitionorderAgreeRequest) GetValues() url.Values {
	return this.values
}

/* 采购申请/经销采购单编号 */
func (this *FenxiaoDealerRequisitionorderAgreeRequest) SetDealerOrderId(value string) {
	this.Set("dealer_order_id", value)
}

type FenxiaoDealerRequisitionorderAgreeResponse struct {
	*ErrorResponse                                   `json:"error_response,omitempty"`
	FenxiaoDealerRequisitionorderAgreeResponseResult `json:"fenxiao_dealer_requisitionorder_agree_response"`
}
type FenxiaoDealerRequisitionorderAgreeResponseResult struct {
	/* 操作是否成功。true：成功；false：失败。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.dealer.requisitionorder.close*/
type FenxiaoDealerRequisitionorderCloseRequest struct {
	values url.Values
}

func (this *FenxiaoDealerRequisitionorderCloseRequest) GetApiMethodName() string {
	return "taobao.fenxiao.dealer.requisitionorder.close"
}
func (this *FenxiaoDealerRequisitionorderCloseRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDealerRequisitionorderCloseRequest) GetValues() url.Values {
	return this.values
}

/* 经销采购单编号 */
func (this *FenxiaoDealerRequisitionorderCloseRequest) SetDealerOrderId(value string) {
	this.Set("dealer_order_id", value)
}

/* 关闭原因：
1：长时间无法联系到分销商，取消交易。
2：分销商错误提交申请，取消交易。
3：缺货，近段时间都无法发货。
4：分销商恶意提交申请单。
5：其他原因。 */
func (this *FenxiaoDealerRequisitionorderCloseRequest) SetReason(value string) {
	this.Set("reason", value)
}

/* 关闭详细原因，字数5-200字 */
func (this *FenxiaoDealerRequisitionorderCloseRequest) SetReasonDetail(value string) {
	this.Set("reason_detail", value)
}

type FenxiaoDealerRequisitionorderCloseResponse struct {
	*ErrorResponse                                   `json:"error_response,omitempty"`
	FenxiaoDealerRequisitionorderCloseResponseResult `json:"fenxiao_dealer_requisitionorder_close_response"`
}
type FenxiaoDealerRequisitionorderCloseResponseResult struct {
	/* 操作是否成功。true：成功；false：失败。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.dealer.requisitionorder.get*/
type FenxiaoDealerRequisitionorderGetRequest struct {
	values url.Values
}

func (this *FenxiaoDealerRequisitionorderGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.dealer.requisitionorder.get"
}
func (this *FenxiaoDealerRequisitionorderGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDealerRequisitionorderGetRequest) GetValues() url.Values {
	return this.values
}

/* 采购申请/经销采购单最迟修改时间。与start_date字段的最大时间间隔不能超过30天 */
func (this *FenxiaoDealerRequisitionorderGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 多个字段用","分隔。 fields 如果为空：返回所有采购申请/经销采购单对象(dealer_orders)字段。 如果不为空：返回指定采购单对象(dealer_orders)字段。 例1： dealer_order_details.product_id 表示只返回product_id 例2： dealer_order_details 表示只返回明细列表 */
func (this *FenxiaoDealerRequisitionorderGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 查询者自己在所要查询的采购申请/经销采购单中的身份。
1：供应商。
2：分销商。
注：填写其他值当做错误处理。 */
func (this *FenxiaoDealerRequisitionorderGetRequest) SetIdentity(value string) {
	this.Set("identity", value)
}

/* 采购申请/经销采购单状态。
0：全部状态。
1：分销商提交申请，待供应商审核。
2：供应商驳回申请，待分销商确认。
3：供应商修改后，待分销商确认。
4：分销商拒绝修改，待供应商再审核。
5：审核通过下单成功，待分销商付款。
7：付款成功，待供应商发货。
8：供应商发货，待分销商收货。
9：分销商收货，交易成功。
10：采购申请/经销采购单关闭。

注：无值按默认值0计，超出状态范围返回错误信息。 */
func (this *FenxiaoDealerRequisitionorderGetRequest) SetOrderStatus(value string) {
	this.Set("order_status", value)
}

/* 页码（大于0的整数。无值或小于1的值按默认值1计） */
func (this *FenxiaoDealerRequisitionorderGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数（大于0但小于等于50的整数。无值或大于50或小于1的值按默认值50计） */
func (this *FenxiaoDealerRequisitionorderGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 采购申请/经销采购单最早修改时间 */
func (this *FenxiaoDealerRequisitionorderGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type FenxiaoDealerRequisitionorderGetResponse struct {
	*ErrorResponse                                 `json:"error_response,omitempty"`
	FenxiaoDealerRequisitionorderGetResponseResult `json:"fenxiao_dealer_requisitionorder_get_response"`
}
type FenxiaoDealerRequisitionorderGetResponseResult struct {
	/* 采购申请/经销采购单结果列表 */
	DealerOrders []*DealerOrder `json:"dealer_orders"`
	/* 按查询条件查到的记录总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.fenxiao.dealer.requisitionorder.modify*/
type FenxiaoDealerRequisitionorderModifyRequest struct {
	values url.Values
}

func (this *FenxiaoDealerRequisitionorderModifyRequest) GetApiMethodName() string {
	return "taobao.fenxiao.dealer.requisitionorder.modify"
}
func (this *FenxiaoDealerRequisitionorderModifyRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDealerRequisitionorderModifyRequest) GetValues() url.Values {
	return this.values
}

/* 经销采购单编号 */
func (this *FenxiaoDealerRequisitionorderModifyRequest) SetDealerOrderId(value string) {
	this.Set("dealer_order_id", value)
}

/* 要删除的商品明细id列表，多个id使用英文符号的逗号隔开 */
func (this *FenxiaoDealerRequisitionorderModifyRequest) SetDeleteDetailIds(value string) {
	this.Set("delete_detail_ids", value)
}

/* 经销采购单的商品明细的新的采购价格。格式为商品明细id:价格修改值,商品明细id:价格修改值 */
func (this *FenxiaoDealerRequisitionorderModifyRequest) SetDetailIdPrices(value string) {
	this.Set("detail_id_prices", value)
}

/* 修改经销采购单的商品明细的新的库存。格式为商品明细id:库存修改值,商品明细id:库存修改值 */
func (this *FenxiaoDealerRequisitionorderModifyRequest) SetDetailIdQuantities(value string) {
	this.Set("detail_id_quantities", value)
}

/* 新邮费（单位：分，示例值1005表示10.05元）。必须大于等于0。自提方式不可修改邮费。不提交该参数表示不修改邮费。 */
func (this *FenxiaoDealerRequisitionorderModifyRequest) SetNewPostFee(value string) {
	this.Set("new_post_fee", value)
}

type FenxiaoDealerRequisitionorderModifyResponse struct {
	*ErrorResponse                                    `json:"error_response,omitempty"`
	FenxiaoDealerRequisitionorderModifyResponseResult `json:"fenxiao_dealer_requisitionorder_modify_response"`
}
type FenxiaoDealerRequisitionorderModifyResponseResult struct {
	/* 操作是否成功。true：成功；false：失败。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.dealer.requisitionorder.query*/
type FenxiaoDealerRequisitionorderQueryRequest struct {
	values url.Values
}

func (this *FenxiaoDealerRequisitionorderQueryRequest) GetApiMethodName() string {
	return "taobao.fenxiao.dealer.requisitionorder.query"
}
func (this *FenxiaoDealerRequisitionorderQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDealerRequisitionorderQueryRequest) GetValues() url.Values {
	return this.values
}

/* 经销采购单编号。
多个编号用英文符号的逗号隔开。最多支持50个经销采购单编号的查询。 */
func (this *FenxiaoDealerRequisitionorderQueryRequest) SetDealerOrderIds(value string) {
	this.Set("dealer_order_ids", value)
}

/* 多个字段用","分隔。 fields 如果为空：返回所有经销采购单对象(dealer_orders)字段。 如果不为空：返回指定采购单对象(dealer_orders)字段。 例1： dealer_order_details.product_id 表示只返回product_id 例2： dealer_order_details 表示只返回明细列表 */
func (this *FenxiaoDealerRequisitionorderQueryRequest) SetFields(value string) {
	this.Set("fields", value)
}

type FenxiaoDealerRequisitionorderQueryResponse struct {
	*ErrorResponse                                   `json:"error_response,omitempty"`
	FenxiaoDealerRequisitionorderQueryResponseResult `json:"fenxiao_dealer_requisitionorder_query_response"`
}
type FenxiaoDealerRequisitionorderQueryResponseResult struct {
	/* 经销采购单结果列表 */
	DealerOrders []*DealerOrder `json:"dealer_orders"`
}

/*taobao.fenxiao.dealer.requisitionorder.refuse*/
type FenxiaoDealerRequisitionorderRefuseRequest struct {
	values url.Values
}

func (this *FenxiaoDealerRequisitionorderRefuseRequest) GetApiMethodName() string {
	return "taobao.fenxiao.dealer.requisitionorder.refuse"
}
func (this *FenxiaoDealerRequisitionorderRefuseRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDealerRequisitionorderRefuseRequest) GetValues() url.Values {
	return this.values
}

/* 采购申请/经销采购单编号 */
func (this *FenxiaoDealerRequisitionorderRefuseRequest) SetDealerOrderId(value string) {
	this.Set("dealer_order_id", value)
}

/* 驳回原因（1：价格不合理；2：采购数量不合理；3：其他原因） */
func (this *FenxiaoDealerRequisitionorderRefuseRequest) SetReason(value string) {
	this.Set("reason", value)
}

/* 驳回详细原因，字数范围5-200字 */
func (this *FenxiaoDealerRequisitionorderRefuseRequest) SetReasonDetail(value string) {
	this.Set("reason_detail", value)
}

type FenxiaoDealerRequisitionorderRefuseResponse struct {
	*ErrorResponse                                    `json:"error_response,omitempty"`
	FenxiaoDealerRequisitionorderRefuseResponseResult `json:"fenxiao_dealer_requisitionorder_refuse_response"`
}
type FenxiaoDealerRequisitionorderRefuseResponseResult struct {
	/* 操作是否成功。true：成功；false：失败。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.dealer.requisitionorder.remark.update*/
type FenxiaoDealerRequisitionorderRemarkUpdateRequest struct {
	values url.Values
}

func (this *FenxiaoDealerRequisitionorderRemarkUpdateRequest) GetApiMethodName() string {
	return "taobao.fenxiao.dealer.requisitionorder.remark.update"
}
func (this *FenxiaoDealerRequisitionorderRemarkUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDealerRequisitionorderRemarkUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 经销采购单ID */
func (this *FenxiaoDealerRequisitionorderRemarkUpdateRequest) SetDealerOrderId(value string) {
	this.Set("dealer_order_id", value)
}

/* 备注留言，可为空 */
func (this *FenxiaoDealerRequisitionorderRemarkUpdateRequest) SetSupplierMemo(value string) {
	this.Set("supplier_memo", value)
}

/* 旗子的标记，必选。
1-5之间的数字。
非1-5之间，都采用1作为默认。
1:红色
2:黄色
3:绿色
4:蓝色
5:粉红色<br /> 支持最大值为：5<br /> 支持最小值为：1 */
func (this *FenxiaoDealerRequisitionorderRemarkUpdateRequest) SetSupplierMemoFlag(value string) {
	this.Set("supplier_memo_flag", value)
}

type FenxiaoDealerRequisitionorderRemarkUpdateResponse struct {
	*ErrorResponse                                          `json:"error_response,omitempty"`
	FenxiaoDealerRequisitionorderRemarkUpdateResponseResult `json:"fenxiao_dealer_requisitionorder_remark_update_response"`
}
type FenxiaoDealerRequisitionorderRemarkUpdateResponseResult struct {
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.discount.add*/
type FenxiaoDiscountAddRequest struct {
	values url.Values
}

func (this *FenxiaoDiscountAddRequest) GetApiMethodName() string {
	return "taobao.fenxiao.discount.add"
}
func (this *FenxiaoDiscountAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDiscountAddRequest) GetValues() url.Values {
	return this.values
}

/* 折扣名称,长度不能超过25字节 */
func (this *FenxiaoDiscountAddRequest) SetDiscountName(value string) {
	this.Set("discount_name", value)
}

/* PERCENT（按折扣优惠）、PRICE（按减价优惠），例如"PERCENT,PRICE,PERCENT" */
func (this *FenxiaoDiscountAddRequest) SetDiscountTypes(value string) {
	this.Set("discount_types", value)
}

/* 优惠比率或者优惠价格，例如：”8000,-2300,7000”,大小为-100000000到100000000之间（单位：分） */
func (this *FenxiaoDiscountAddRequest) SetDiscountValues(value string) {
	this.Set("discount_values", value)
}

/* 会员等级的id或者分销商id，例如：”1001,2001,1002” */
func (this *FenxiaoDiscountAddRequest) SetTargetIds(value string) {
	this.Set("target_ids", value)
}

/* GRADE（按会员等级优惠）、DISTRIBUTOR（按分销商优惠），例如"GRADE,DISTRIBUTOR" */
func (this *FenxiaoDiscountAddRequest) SetTargetTypes(value string) {
	this.Set("target_types", value)
}

type FenxiaoDiscountAddResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	FenxiaoDiscountAddResponseResult `json:"fenxiao_discount_add_response"`
}
type FenxiaoDiscountAddResponseResult struct {
	/* 折扣ID */
	DiscountId int64 `json:"discount_id"`
}

/*taobao.fenxiao.discount.update*/
type FenxiaoDiscountUpdateRequest struct {
	values url.Values
}

func (this *FenxiaoDiscountUpdateRequest) GetApiMethodName() string {
	return "taobao.fenxiao.discount.update"
}
func (this *FenxiaoDiscountUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDiscountUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 详情ID，例如：”0,1002,1003” */
func (this *FenxiaoDiscountUpdateRequest) SetDetailIds(value string) {
	this.Set("detail_ids", value)
}

/* ADD(新增)、UPDATE（更新）、DEL（删除，对应的target_type等信息填NULL），例如：”UPDATE,DEL,DEL” */
func (this *FenxiaoDiscountUpdateRequest) SetDetailStatuss(value string) {
	this.Set("detail_statuss", value)
}

/* 折扣ID */
func (this *FenxiaoDiscountUpdateRequest) SetDiscountId(value string) {
	this.Set("discount_id", value)
}

/* 折扣名称，长度不能超过25字节 */
func (this *FenxiaoDiscountUpdateRequest) SetDiscountName(value string) {
	this.Set("discount_name", value)
}

/* 状态DEL（删除）UPDATE(更新) */
func (this *FenxiaoDiscountUpdateRequest) SetDiscountStatus(value string) {
	this.Set("discount_status", value)
}

/* PERCENT（按折扣优惠）、PRICE（按减价优惠），例如"PERCENT,PRICE,PERCENT" */
func (this *FenxiaoDiscountUpdateRequest) SetDiscountTypes(value string) {
	this.Set("discount_types", value)
}

/* 优惠比率或者优惠价格，例如：”8000,-2300,7000”,大小为-100000000到100000000之间（单位：分） */
func (this *FenxiaoDiscountUpdateRequest) SetDiscountValues(value string) {
	this.Set("discount_values", value)
}

/* 会员等级的id或者分销商id，例如：”1001,2001,1002” */
func (this *FenxiaoDiscountUpdateRequest) SetTargetIds(value string) {
	this.Set("target_ids", value)
}

/* GRADE（按会员等级优惠）、DISTRIBUTOR（按分销商优惠），例如"GRADE,DISTRIBUTOR" */
func (this *FenxiaoDiscountUpdateRequest) SetTargetTypes(value string) {
	this.Set("target_types", value)
}

type FenxiaoDiscountUpdateResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	FenxiaoDiscountUpdateResponseResult `json:"fenxiao_discount_update_response"`
}
type FenxiaoDiscountUpdateResponseResult struct {
	/* 成功状态 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.discounts.get*/
type FenxiaoDiscountsGetRequest struct {
	values url.Values
}

func (this *FenxiaoDiscountsGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.discounts.get"
}
func (this *FenxiaoDiscountsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDiscountsGetRequest) GetValues() url.Values {
	return this.values
}

/* 折扣ID */
func (this *FenxiaoDiscountsGetRequest) SetDiscountId(value string) {
	this.Set("discount_id", value)
}

/* 指定查询额外的信息，可选值：DETAIL（查询折扣详情），多个可选值用逗号分割。（只允许指定折扣ID情况下使用） */
func (this *FenxiaoDiscountsGetRequest) SetExtFields(value string) {
	this.Set("ext_fields", value)
}

type FenxiaoDiscountsGetResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	FenxiaoDiscountsGetResponseResult `json:"fenxiao_discounts_get_response"`
}
type FenxiaoDiscountsGetResponseResult struct {
	/* 折扣数据结构 */
	Discounts []*Discount `json:"discounts"`
	/* 记录数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.fenxiao.distributor.archives.get*/
type FenxiaoDistributorArchivesGetRequest struct {
	values url.Values
}

func (this *FenxiaoDistributorArchivesGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.distributor.archives.get"
}
func (this *FenxiaoDistributorArchivesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDistributorArchivesGetRequest) GetValues() url.Values {
	return this.values
}

/* 分销商淘宝店主nick */
func (this *FenxiaoDistributorArchivesGetRequest) SetDistributorUserNick(value string) {
	this.Set("distributor_user_nick", value)
}

type FenxiaoDistributorArchivesGetResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	FenxiaoDistributorArchivesGetResponseResult `json:"fenxiao_distributor_archives_get_response"`
}
type FenxiaoDistributorArchivesGetResponseResult struct {
	/* 分销商档案 */
	DistributorArchive *DistributorArchive `json:"distributor_archive"`
	/* 接口执行结果，true表示执行成功；false表示执行失败。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.distributor.items.get*/
type FenxiaoDistributorItemsGetRequest struct {
	values url.Values
}

func (this *FenxiaoDistributorItemsGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.distributor.items.get"
}
func (this *FenxiaoDistributorItemsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDistributorItemsGetRequest) GetValues() url.Values {
	return this.values
}

/* 分销商ID 。 */
func (this *FenxiaoDistributorItemsGetRequest) SetDistributorId(value string) {
	this.Set("distributor_id", value)
}

/* 设置结束时间,空为不设置。 */
func (this *FenxiaoDistributorItemsGetRequest) SetEndModified(value string) {
	this.Set("end_modified", value)
}

/* 页码（大于0的整数，默认1） */
func (this *FenxiaoDistributorItemsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页记录数（默认20，最大50） */
func (this *FenxiaoDistributorItemsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 产品ID */
func (this *FenxiaoDistributorItemsGetRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 设置开始时间。空为不设置。 */
func (this *FenxiaoDistributorItemsGetRequest) SetStartModified(value string) {
	this.Set("start_modified", value)
}

type FenxiaoDistributorItemsGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	FenxiaoDistributorItemsGetResponseResult `json:"fenxiao_distributor_items_get_response"`
}
type FenxiaoDistributorItemsGetResponseResult struct {
	/* 下载记录对象 */
	Records []*FenxiaoItemRecord `json:"records"`
	/* 查询结果记录数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.fenxiao.distributor.procuct.static.get*/
type FenxiaoDistributorProcuctStaticGetRequest struct {
	values url.Values
}

func (this *FenxiaoDistributorProcuctStaticGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.distributor.procuct.static.get"
}
func (this *FenxiaoDistributorProcuctStaticGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDistributorProcuctStaticGetRequest) GetValues() url.Values {
	return this.values
}

/* 分销商淘宝店主nick */
func (this *FenxiaoDistributorProcuctStaticGetRequest) SetDistributorUserNick(value string) {
	this.Set("distributor_user_nick", value)
}

/* 供应商商品id，一次可以传多个，每次最多40个。
以,(英文)作为分隔符。 */
func (this *FenxiaoDistributorProcuctStaticGetRequest) SetProductIdArray(value string) {
	this.Set("product_id_array", value)
}

type FenxiaoDistributorProcuctStaticGetResponse struct {
	*ErrorResponse                                   `json:"error_response,omitempty"`
	FenxiaoDistributorProcuctStaticGetResponseResult `json:"fenxiao_distributor_procuct_static_get_response"`
}
type FenxiaoDistributorProcuctStaticGetResponseResult struct {
	/* 分销商商品流量 */
	DistributorItemFlows []*DistributorItemFlow `json:"distributor_item_flows"`
	/* 执行结果，true表示执行成功；false表示执行失败。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.distributor.products.get*/
type FenxiaoDistributorProductsGetRequest struct {
	values url.Values
}

func (this *FenxiaoDistributorProductsGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.distributor.products.get"
}
func (this *FenxiaoDistributorProductsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDistributorProductsGetRequest) GetValues() url.Values {
	return this.values
}

/* 下载状态，默认未下载。UNDOWNLOAD：未下载，DOWNLOADED：已下载。 */
func (this *FenxiaoDistributorProductsGetRequest) SetDownloadStatus(value string) {
	this.Set("download_status", value)
}

/* 结束时间 */
func (this *FenxiaoDistributorProductsGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 指定查询额外的信息，可选值：skus（sku数据）、images（多图），多个可选值用逗号分割。 */
func (this *FenxiaoDistributorProductsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 根据商品ID列表查询，优先级次于产品ID列表，高于其他分页查询条件。如果商品不是分销商品，自动过滤。最大限制20，用逗号分割，例如：“1001,1002,1003,1004,1005” */
func (this *FenxiaoDistributorProductsGetRequest) SetItemIds(value string) {
	this.Set("item_ids", value)
}

/* 排序。QUANTITY_DESC：库存降序，CREATE_TIME_DESC，创建时间降序。 */
func (this *FenxiaoDistributorProductsGetRequest) SetOrderBy(value string) {
	this.Set("order_by", value)
}

/* 页码（大于0的整数，默认1） */
func (this *FenxiaoDistributorProductsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页记录数（默认20，最大50） */
func (this *FenxiaoDistributorProductsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 产品ID列表，优先级最高，传了忽略其他查询条件。用逗号分割，例如：“1001,1002,1003,1004,1005” */
func (this *FenxiaoDistributorProductsGetRequest) SetPids(value string) {
	this.Set("pids", value)
}

/* 产品线ID */
func (this *FenxiaoDistributorProductsGetRequest) SetProductcatId(value string) {
	this.Set("productcat_id", value)
}

/* 开始时间 */
func (this *FenxiaoDistributorProductsGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 供应商nick，分页查询时，必传 */
func (this *FenxiaoDistributorProductsGetRequest) SetSupplierNick(value string) {
	this.Set("supplier_nick", value)
}

/* 查询时间类型，默认更新时间。MODIFIED:更新时间，CREATE:创建时间 */
func (this *FenxiaoDistributorProductsGetRequest) SetTimeType(value string) {
	this.Set("time_type", value)
}

/* 分销方式，分页查询时，必传。AGENT：代销，DEALER：经销 */
func (this *FenxiaoDistributorProductsGetRequest) SetTradeType(value string) {
	this.Set("trade_type", value)
}

type FenxiaoDistributorProductsGetResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	FenxiaoDistributorProductsGetResponseResult `json:"fenxiao_distributor_products_get_response"`
}
type FenxiaoDistributorProductsGetResponseResult struct {
	/* 是否存在下一页 */
	HasNext bool `json:"has_next"`
	/* 产品对象记录集。返回 FenxiaoProduct 包含的字段信息。 */
	Products []*FenxiaoProduct `json:"products"`
}

/*taobao.fenxiao.distributors.get*/
type FenxiaoDistributorsGetRequest struct {
	values url.Values
}

func (this *FenxiaoDistributorsGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.distributors.get"
}
func (this *FenxiaoDistributorsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoDistributorsGetRequest) GetValues() url.Values {
	return this.values
}

/* 分销商用户名列表。多个之间以“,”分隔;最多支持50个分销商用户名。 */
func (this *FenxiaoDistributorsGetRequest) SetNicks(value string) {
	this.Set("nicks", value)
}

type FenxiaoDistributorsGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	FenxiaoDistributorsGetResponseResult `json:"fenxiao_distributors_get_response"`
}
type FenxiaoDistributorsGetResponseResult struct {
	/* 分销商详细信息 */
	Distributors []*Distributor `json:"distributors"`
}

/*taobao.fenxiao.grade.add*/
type FenxiaoGradeAddRequest struct {
	values url.Values
}

func (this *FenxiaoGradeAddRequest) GetApiMethodName() string {
	return "taobao.fenxiao.grade.add"
}
func (this *FenxiaoGradeAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoGradeAddRequest) GetValues() url.Values {
	return this.values
}

/* 等级名称，等级名称不可重复<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *FenxiaoGradeAddRequest) SetName(value string) {
	this.Set("name", value)
}

type FenxiaoGradeAddResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	FenxiaoGradeAddResponseResult `json:"fenxiao_grade_add_response"`
}
type FenxiaoGradeAddResponseResult struct {
	/* 等级ID */
	GradeId int64 `json:"grade_id"`
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.grade.delete*/
type FenxiaoGradeDeleteRequest struct {
	values url.Values
}

func (this *FenxiaoGradeDeleteRequest) GetApiMethodName() string {
	return "taobao.fenxiao.grade.delete"
}
func (this *FenxiaoGradeDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoGradeDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 等级ID */
func (this *FenxiaoGradeDeleteRequest) SetGradeId(value string) {
	this.Set("grade_id", value)
}

type FenxiaoGradeDeleteResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	FenxiaoGradeDeleteResponseResult `json:"fenxiao_grade_delete_response"`
}
type FenxiaoGradeDeleteResponseResult struct {
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.grade.update*/
type FenxiaoGradeUpdateRequest struct {
	values url.Values
}

func (this *FenxiaoGradeUpdateRequest) GetApiMethodName() string {
	return "taobao.fenxiao.grade.update"
}
func (this *FenxiaoGradeUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoGradeUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 等级ID */
func (this *FenxiaoGradeUpdateRequest) SetGradeId(value string) {
	this.Set("grade_id", value)
}

/* 等级名称，等级名称不可重复<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *FenxiaoGradeUpdateRequest) SetName(value string) {
	this.Set("name", value)
}

type FenxiaoGradeUpdateResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	FenxiaoGradeUpdateResponseResult `json:"fenxiao_grade_update_response"`
}
type FenxiaoGradeUpdateResponseResult struct {
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.grades.get*/
type FenxiaoGradesGetRequest struct {
	values url.Values
}

func (this *FenxiaoGradesGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.grades.get"
}
func (this *FenxiaoGradesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoGradesGetRequest) GetValues() url.Values {
	return this.values
}

type FenxiaoGradesGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	FenxiaoGradesGetResponseResult `json:"fenxiao_grades_get_response"`
}
type FenxiaoGradesGetResponseResult struct {
	/* 分销商等级信息 */
	FenxiaoGrades []*FenxiaoGrade `json:"fenxiao_grades"`
	/* 记录数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.fenxiao.login.user.get*/
type FenxiaoLoginUserGetRequest struct {
	values url.Values
}

func (this *FenxiaoLoginUserGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.login.user.get"
}
func (this *FenxiaoLoginUserGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoLoginUserGetRequest) GetValues() url.Values {
	return this.values
}

type FenxiaoLoginUserGetResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	FenxiaoLoginUserGetResponseResult `json:"fenxiao_login_user_get_response"`
}
type FenxiaoLoginUserGetResponseResult struct {
	/* 登录用户信息 */
	LoginUser *LoginUser `json:"login_user"`
}

/*taobao.fenxiao.order.close*/
type FenxiaoOrderCloseRequest struct {
	values url.Values
}

func (this *FenxiaoOrderCloseRequest) GetApiMethodName() string {
	return "taobao.fenxiao.order.close"
}
func (this *FenxiaoOrderCloseRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoOrderCloseRequest) GetValues() url.Values {
	return this.values
}

/* 关闭理由,特殊字符会被转义，会改变长度，有特殊字符是请注意<br /> 支持最大长度为：200<br /> 支持的最大列表长度为：200 */
func (this *FenxiaoOrderCloseRequest) SetMessage(value string) {
	this.Set("message", value)
}

/* 采购单编号 */
func (this *FenxiaoOrderCloseRequest) SetPurchaseOrderId(value string) {
	this.Set("purchase_order_id", value)
}

/* 子采购单ID，可传多笔子单ID，逗号分隔 */
func (this *FenxiaoOrderCloseRequest) SetSubOrderIds(value string) {
	this.Set("sub_order_ids", value)
}

type FenxiaoOrderCloseResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	FenxiaoOrderCloseResponseResult `json:"fenxiao_order_close_response"`
}
type FenxiaoOrderCloseResponseResult struct {
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.order.confirm.paid*/
type FenxiaoOrderConfirmPaidRequest struct {
	values url.Values
}

func (this *FenxiaoOrderConfirmPaidRequest) GetApiMethodName() string {
	return "taobao.fenxiao.order.confirm.paid"
}
func (this *FenxiaoOrderConfirmPaidRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoOrderConfirmPaidRequest) GetValues() url.Values {
	return this.values
}

/* 确认支付信息（字数小于100） */
func (this *FenxiaoOrderConfirmPaidRequest) SetConfirmRemark(value string) {
	this.Set("confirm_remark", value)
}

/* 采购单编号。 */
func (this *FenxiaoOrderConfirmPaidRequest) SetPurchaseOrderId(value string) {
	this.Set("purchase_order_id", value)
}

type FenxiaoOrderConfirmPaidResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	FenxiaoOrderConfirmPaidResponseResult `json:"fenxiao_order_confirm_paid_response"`
}
type FenxiaoOrderConfirmPaidResponseResult struct {
	/* 确认结果成功与否 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.order.create.dealer*/
type FenxiaoOrderCreateDealerRequest struct {
	values url.Values
}

func (this *FenxiaoOrderCreateDealerRequest) GetApiMethodName() string {
	return "taobao.fenxiao.order.create.dealer"
}
func (this *FenxiaoOrderCreateDealerRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoOrderCreateDealerRequest) GetValues() url.Values {
	return this.values
}

/* 街道 */
func (this *FenxiaoOrderCreateDealerRequest) SetAddr(value string) {
	this.Set("addr", value)
}

/* 买家姓名<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *FenxiaoOrderCreateDealerRequest) SetBuyerName(value string) {
	this.Set("buyer_name", value)
}

/* 市 */
func (this *FenxiaoOrderCreateDealerRequest) SetCity(value string) {
	this.Set("city", value)
}

/* 区 */
func (this *FenxiaoOrderCreateDealerRequest) SetCountry(value string) {
	this.Set("country", value)
}

/* 运费，单位为分 */
func (this *FenxiaoOrderCreateDealerRequest) SetLogisticFee(value string) {
	this.Set("logistic_fee", value)
}

/* 运输方式，快递,平邮等 */
func (this *FenxiaoOrderCreateDealerRequest) SetLogisticType(value string) {
	this.Set("logistic_type", value)
}

/* 留言<br /> 支持最大长度为：200<br /> 支持的最大列表长度为：200 */
func (this *FenxiaoOrderCreateDealerRequest) SetMessage(value string) {
	this.Set("message", value)
}

/* 买家手机号码和电话号码两者中必须有一个 */
func (this *FenxiaoOrderCreateDealerRequest) SetMobilePhone(value string) {
	this.Set("mobile_phone", value)
}

/* erp主订单号，用于去重。当传入号已存在将返回原来的采购单 */
func (this *FenxiaoOrderCreateDealerRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 支付类型,需要供应支持该支付类型 */
func (this *FenxiaoOrderCreateDealerRequest) SetPayType(value string) {
	this.Set("pay_type", value)
}

/* 买家电话号码 */
func (this *FenxiaoOrderCreateDealerRequest) SetPhone(value string) {
	this.Set("phone", value)
}

/* 省 */
func (this *FenxiaoOrderCreateDealerRequest) SetProvince(value string) {
	this.Set("province", value)
}

/* 子单信息,子单内部以‘,’隔开，多个子单以‘;’隔开.
例(分销产品id,skuid,购买数量,单价;分销产品id:,skuid,购买数量,单价)
单价的单位位分 */
func (this *FenxiaoOrderCreateDealerRequest) SetSubOrderDetail(value string) {
	this.Set("sub_order_detail", value)
}

/* 邮编 */
func (this *FenxiaoOrderCreateDealerRequest) SetZipCode(value string) {
	this.Set("zip_code", value)
}

type FenxiaoOrderCreateDealerResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	FenxiaoOrderCreateDealerResponseResult `json:"fenxiao_order_create_dealer_response"`
}
type FenxiaoOrderCreateDealerResponseResult struct {
	/* 采购单号 */
	GetModule int64 `json:"get_module"`
}

/*taobao.fenxiao.order.message.add*/
type FenxiaoOrderMessageAddRequest struct {
	values url.Values
}

func (this *FenxiaoOrderMessageAddRequest) GetApiMethodName() string {
	return "taobao.fenxiao.order.message.add"
}
func (this *FenxiaoOrderMessageAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoOrderMessageAddRequest) GetValues() url.Values {
	return this.values
}

/* 留言内容 */
func (this *FenxiaoOrderMessageAddRequest) SetMessage(value string) {
	this.Set("message", value)
}

/* 采购单id */
func (this *FenxiaoOrderMessageAddRequest) SetPurchaseOrderId(value string) {
	this.Set("purchase_order_id", value)
}

type FenxiaoOrderMessageAddResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	FenxiaoOrderMessageAddResponseResult `json:"fenxiao_order_message_add_response"`
}
type FenxiaoOrderMessageAddResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.order.remark.update*/
type FenxiaoOrderRemarkUpdateRequest struct {
	values url.Values
}

func (this *FenxiaoOrderRemarkUpdateRequest) GetApiMethodName() string {
	return "taobao.fenxiao.order.remark.update"
}
func (this *FenxiaoOrderRemarkUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoOrderRemarkUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 采购单编号 */
func (this *FenxiaoOrderRemarkUpdateRequest) SetPurchaseOrderId(value string) {
	this.Set("purchase_order_id", value)
}

/* 备注内容(供应商操作) */
func (this *FenxiaoOrderRemarkUpdateRequest) SetSupplierMemo(value string) {
	this.Set("supplier_memo", value)
}

/* 旗子的标记，1-5之间的数字。非1-5之间，都采用1作为默认。
1:红色
2:黄色
3:绿色
4:蓝色
5:粉红色<br /> 支持最大值为：5<br /> 支持最小值为：1 */
func (this *FenxiaoOrderRemarkUpdateRequest) SetSupplierMemoFlag(value string) {
	this.Set("supplier_memo_flag", value)
}

type FenxiaoOrderRemarkUpdateResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	FenxiaoOrderRemarkUpdateResponseResult `json:"fenxiao_order_remark_update_response"`
}
type FenxiaoOrderRemarkUpdateResponseResult struct {
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.orders.get*/
type FenxiaoOrdersGetRequest struct {
	values url.Values
}

func (this *FenxiaoOrdersGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.orders.get"
}
func (this *FenxiaoOrdersGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoOrdersGetRequest) GetValues() url.Values {
	return this.values
}

/* 结束时间 格式 yyyy-MM-dd HH:mm:ss.支持到秒的查询。若不传时分秒，默认为0时0分0秒。若purchase_order_id没传，则此参数必传。 */
func (this *FenxiaoOrdersGetRequest) SetEndCreated(value string) {
	this.Set("end_created", value)
}

/* 多个字段用","分隔。

fields
如果为空：返回所有采购单对象(purchase_orders)字段。
如果不为空：返回指定采购单对象(purchase_orders)字段。

例1：
sub_purchase_orders.tc_order_id 表示只返回tc_order_id
例2：
sub_purchase_orders表示只返回子采购单列表 */
func (this *FenxiaoOrdersGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 页码。（大于0的整数。默认为1）<br /> 支持最大值为：2147483647<br /> 支持最小值为：-21474836478 */
func (this *FenxiaoOrdersGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数。（每页条数不超过50条）<br /> 支持最大值为：2147483647<br /> 支持最小值为：-21474836478 */
func (this *FenxiaoOrdersGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 采购单编号或分销流水号，若其它参数没传，则此参数必传。<br /> 支持最大值为：9223372036854775807<br /> 支持最小值为：-9223372036854775808 */
func (this *FenxiaoOrdersGetRequest) SetPurchaseOrderId(value string) {
	this.Set("purchase_order_id", value)
}

/* 起始时间 格式 yyyy-MM-dd HH:mm:ss.支持到秒的查询。若不传时分秒，默认为0时0分0秒。若purchase_order_id没传，则此参数必传。 */
func (this *FenxiaoOrdersGetRequest) SetStartCreated(value string) {
	this.Set("start_created", value)
}

/* 交易状态，不传默认查询所有采购单根据身份选择自身状态可选值:<br> *供应商：<br> WAIT_SELLER_SEND_GOODS(等待发货)<br> WAIT_SELLER_CONFIRM_PAY(待确认收款)<br> WAIT_BUYER_PAY(等待付款)<br> WAIT_BUYER_CONFIRM_GOODS(已发货)<br> TRADE_REFUNDING(退款中)<br> TRADE_FINISHED(采购成功)<br> TRADE_CLOSED(已关闭)<br> *分销商：<br> WAIT_BUYER_PAY(等待付款)<br> WAIT_BUYER_CONFIRM_GOODS(待收货确认)<br> TRADE_FOR_PAY(已付款)<br> TRADE_REFUNDING(退款中)<br> TRADE_FINISHED(采购成功)<br> TRADE_CLOSED(已关闭)<br> */
func (this *FenxiaoOrdersGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 采购单下游买家订单id */
func (this *FenxiaoOrdersGetRequest) SetTcOrderId(value string) {
	this.Set("tc_order_id", value)
}

/* 可选值：trade_time_type(采购单按照成交时间范围查询),update_time_type(采购单按照更新时间范围查询) */
func (this *FenxiaoOrdersGetRequest) SetTimeType(value string) {
	this.Set("time_type", value)
}

type FenxiaoOrdersGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	FenxiaoOrdersGetResponseResult `json:"fenxiao_orders_get_response"`
}
type FenxiaoOrdersGetResponseResult struct {
	/* 采购单及子采购单信息。返回 PurchaseOrder 包含的字段信息。 */
	PurchaseOrders []*PurchaseOrder `json:"purchase_orders"`
	/* 搜索到的采购单记录总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.fenxiao.product.add*/
type FenxiaoProductAddRequest struct {
	values url.Values
}

func (this *FenxiaoProductAddRequest) GetApiMethodName() string {
	return "taobao.fenxiao.product.add"
}
func (this *FenxiaoProductAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductAddRequest) GetValues() url.Values {
	return this.values
}

/* 警戒库存必须是0到29999。 */
func (this *FenxiaoProductAddRequest) SetAlarmNumber(value string) {
	this.Set("alarm_number", value)
}

/* 所属类目id，参考Taobao.itemcats.get，不支持成人等类目，输入成人类目id保存提示类目属性错误。 */
func (this *FenxiaoProductAddRequest) SetCategoryId(value string) {
	this.Set("category_id", value)
}

/* 所在地：市，例：“杭州” */
func (this *FenxiaoProductAddRequest) SetCity(value string) {
	this.Set("city", value)
}

/* 代销采购价格，单位：元。例：“10.56”。必须在0.01元到10000000元之间。 */
func (this *FenxiaoProductAddRequest) SetCostPrice(value string) {
	this.Set("cost_price", value)
}

/* 经销采购价，单位：元。例：“10.56”。必须在0.01元到10000000元之间。 */
func (this *FenxiaoProductAddRequest) SetDealerCostPrice(value string) {
	this.Set("dealer_cost_price", value)
}

/* 产品描述，长度为5到25000字符。 */
func (this *FenxiaoProductAddRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 折扣ID */
func (this *FenxiaoProductAddRequest) SetDiscountId(value string) {
	this.Set("discount_id", value)
}

/* 是否有保修，可选值：false（否）、true（是），默认false。 */
func (this *FenxiaoProductAddRequest) SetHaveGuarantee(value string) {
	this.Set("have_guarantee", value)
}

/* 是否有发票，可选值：false（否）、true（是），默认false。 */
func (this *FenxiaoProductAddRequest) SetHaveInvoice(value string) {
	this.Set("have_invoice", value)
}

/* 产品主图，大小不超过500k，格式为gif,jpg,jpeg,png,bmp等图片 */
func (this *FenxiaoProductAddRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 自定义属性。格式为pid:value;pid:value */
func (this *FenxiaoProductAddRequest) SetInputProperties(value string) {
	this.Set("input_properties", value)
}

/* 添加产品时，添加入参isAuthz:yes|no
yes:需要授权
no:不需要授权
默认是需要授权 */
func (this *FenxiaoProductAddRequest) SetIsAuthz(value string) {
	this.Set("is_authz", value)
}

/* 导入的商品ID */
func (this *FenxiaoProductAddRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 产品名称，长度不超过60个字节。 */
func (this *FenxiaoProductAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 商家编码，长度不能超过60个字节。 */
func (this *FenxiaoProductAddRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 产品主图图片空间相对路径或绝对路径 */
func (this *FenxiaoProductAddRequest) SetPicPath(value string) {
	this.Set("pic_path", value)
}

/* ems费用，单位：元。例：“10.56”。 大小为0.00元到999999元之间。 */
func (this *FenxiaoProductAddRequest) SetPostageEms(value string) {
	this.Set("postage_ems", value)
}

/* 快递费用，单位：元。例：“10.56”。 大小为0.01元到999999元之间。 */
func (this *FenxiaoProductAddRequest) SetPostageFast(value string) {
	this.Set("postage_fast", value)
}

/* 运费模板ID，参考taobao.postages.get。 */
func (this *FenxiaoProductAddRequest) SetPostageId(value string) {
	this.Set("postage_id", value)
}

/* 平邮费用，单位：元。例：“10.56”。 大小为0.01元到999999元之间。 */
func (this *FenxiaoProductAddRequest) SetPostageOrdinary(value string) {
	this.Set("postage_ordinary", value)
}

/* 运费类型，可选值：seller（供应商承担运费）、buyer（分销商承担运费）,默认seller。 */
func (this *FenxiaoProductAddRequest) SetPostageType(value string) {
	this.Set("postage_type", value)
}

/* 产品线ID */
func (this *FenxiaoProductAddRequest) SetProductcatId(value string) {
	this.Set("productcat_id", value)
}

/* 产品属性，格式为pid:vid;pid:vid */
func (this *FenxiaoProductAddRequest) SetProperties(value string) {
	this.Set("properties", value)
}

/* 属性别名，格式为：pid:vid:alias;pid:vid:alias（alias为别名） */
func (this *FenxiaoProductAddRequest) SetPropertyAlias(value string) {
	this.Set("property_alias", value)
}

/* 所在地：省，例：“浙江” */
func (this *FenxiaoProductAddRequest) SetProv(value string) {
	this.Set("prov", value)
}

/* 产品库存必须是1到999999。 */
func (this *FenxiaoProductAddRequest) SetQuantity(value string) {
	this.Set("quantity", value)
}

/* 最高零售价，单位：元。例：“10.56”。必须在0.01元到10000000元之间，最高零售价必须大于最低零售价。 */
func (this *FenxiaoProductAddRequest) SetRetailPriceHigh(value string) {
	this.Set("retail_price_high", value)
}

/* 最低零售价，单位：元。例：“10.56”。必须在0.01元到10000000元之间。 */
func (this *FenxiaoProductAddRequest) SetRetailPriceLow(value string) {
	this.Set("retail_price_low", value)
}

/* sku的采购价。如果多个，用逗号分隔，并与其他sku信息保持相同顺序 */
func (this *FenxiaoProductAddRequest) SetSkuCostPrices(value string) {
	this.Set("sku_cost_prices", value)
}

/* sku的经销采购价。如果多个，用逗号分隔，并与其他sku信息保持相同顺序。其中每个值的单位：元。例：“10.56,12.3”。必须在0.01元到10000000元之间。 */
func (this *FenxiaoProductAddRequest) SetSkuDealerCostPrices(value string) {
	this.Set("sku_dealer_cost_prices", value)
}

/* sku的商家编码。如果多个，用逗号分隔，并与其他sku信息保持相同顺序 */
func (this *FenxiaoProductAddRequest) SetSkuOuterIds(value string) {
	this.Set("sku_outer_ids", value)
}

/* sku的属性。如果多个，用逗号分隔，并与其他sku信息保持相同顺序 */
func (this *FenxiaoProductAddRequest) SetSkuProperties(value string) {
	this.Set("sku_properties", value)
}

/* sku的库存。如果多个，用逗号分隔，并与其他sku信息保持相同顺序 */
func (this *FenxiaoProductAddRequest) SetSkuQuantitys(value string) {
	this.Set("sku_quantitys", value)
}

/* sku的采购基准价。如果多个，用逗号分隔，并与其他sku信息保持相同顺序 */
func (this *FenxiaoProductAddRequest) SetSkuStandardPrices(value string) {
	this.Set("sku_standard_prices", value)
}

/* 产品spuID，达尔文产品必须要传spuID，否则不能发布。其他非达尔文产品，看情况传 */
func (this *FenxiaoProductAddRequest) SetSpuId(value string) {
	this.Set("spu_id", value)
}

/* 采购基准价格，单位：元。例：“10.56”。必须在0.01元到10000000元之间。 */
func (this *FenxiaoProductAddRequest) SetStandardPrice(value string) {
	this.Set("standard_price", value)
}

/* 零售基准价，单位：元。例：“10.56”。必须在0.01元到10000000元之间。 */
func (this *FenxiaoProductAddRequest) SetStandardRetailPrice(value string) {
	this.Set("standard_retail_price", value)
}

/* 分销方式：AGENT（只做代销，默认值）、DEALER（只做经销）、ALL（代销和经销都做） */
func (this *FenxiaoProductAddRequest) SetTradeType(value string) {
	this.Set("trade_type", value)
}

type FenxiaoProductAddResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	FenxiaoProductAddResponseResult `json:"fenxiao_product_add_response"`
}
type FenxiaoProductAddResponseResult struct {
	/* 产品创建时间 时间格式：yyyy-MM-dd HH:mm:ss */
	Created string `json:"created"`
	/* 产品ID */
	Pid int64 `json:"pid"`
}

/*taobao.fenxiao.product.gradeprice.get*/
type FenxiaoProductGradepriceGetRequest struct {
	values url.Values
}

func (this *FenxiaoProductGradepriceGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.product.gradeprice.get"
}
func (this *FenxiaoProductGradepriceGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductGradepriceGetRequest) GetValues() url.Values {
	return this.values
}

/* 产品id */
func (this *FenxiaoProductGradepriceGetRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* skuId */
func (this *FenxiaoProductGradepriceGetRequest) SetSkuId(value string) {
	this.Set("sku_id", value)
}

/* 经、代销模式（1：代销、2：经销） */
func (this *FenxiaoProductGradepriceGetRequest) SetTradeType(value string) {
	this.Set("trade_type", value)
}

type FenxiaoProductGradepriceGetResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	FenxiaoProductGradepriceGetResponseResult `json:"fenxiao_product_gradeprice_get_response"`
}
type FenxiaoProductGradepriceGetResponseResult struct {
	/* 等级折扣列表 */
	GradeDiscounts []*GradeDiscount `json:"grade_discounts"`
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.product.gradeprice.update*/
type FenxiaoProductGradepriceUpdateRequest struct {
	values url.Values
}

func (this *FenxiaoProductGradepriceUpdateRequest) GetApiMethodName() string {
	return "taobao.fenxiao.product.gradeprice.update"
}
func (this *FenxiaoProductGradepriceUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductGradepriceUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 会员等级的id或者分销商id，例如：”1001,2001,1002” */
func (this *FenxiaoProductGradepriceUpdateRequest) SetIds(value string) {
	this.Set("ids", value)
}

/* 优惠价格,大小为0到100000000之间的整数或两位小数，例：优惠价格为：100元2角5分，传入的参数应写成：100.25 */
func (this *FenxiaoProductGradepriceUpdateRequest) SetPrices(value string) {
	this.Set("prices", value)
}

/* 产品Id */
func (this *FenxiaoProductGradepriceUpdateRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* skuId，如果产品有skuId,必须要输入skuId;没有skuId的时候不必选 */
func (this *FenxiaoProductGradepriceUpdateRequest) SetSkuId(value string) {
	this.Set("sku_id", value)
}

/* 选择折扣方式：GRADE（按等级进行设置）;DISCITUTOR(按分销商进行设置）。例如"GRADE,DISTRIBUTOR" */
func (this *FenxiaoProductGradepriceUpdateRequest) SetTargetType(value string) {
	this.Set("target_type", value)
}

/* 交易类型： AGENT(代销)、DEALER(经销)，ALL(代销和经销) */
func (this *FenxiaoProductGradepriceUpdateRequest) SetTradeType(value string) {
	this.Set("trade_type", value)
}

type FenxiaoProductGradepriceUpdateResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	FenxiaoProductGradepriceUpdateResponseResult `json:"fenxiao_product_gradeprice_update_response"`
}
type FenxiaoProductGradepriceUpdateResponseResult struct {
	/* 返回操作结果：成功或失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.product.image.delete*/
type FenxiaoProductImageDeleteRequest struct {
	values url.Values
}

func (this *FenxiaoProductImageDeleteRequest) GetApiMethodName() string {
	return "taobao.fenxiao.product.image.delete"
}
func (this *FenxiaoProductImageDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductImageDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 图片位置 */
func (this *FenxiaoProductImageDeleteRequest) SetPosition(value string) {
	this.Set("position", value)
}

/* 产品ID */
func (this *FenxiaoProductImageDeleteRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* properties表示sku图片的属性。key:value形式，key是pid，value是vid。如果position是0的话，则properties需要是必传项 */
func (this *FenxiaoProductImageDeleteRequest) SetProperties(value string) {
	this.Set("properties", value)
}

type FenxiaoProductImageDeleteResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	FenxiaoProductImageDeleteResponseResult `json:"fenxiao_product_image_delete_response"`
}
type FenxiaoProductImageDeleteResponseResult struct {
	/* 操作时间 */
	Created string `json:"created"`
	/* 操作结果 */
	Result bool `json:"result"`
}

/*taobao.fenxiao.product.image.upload*/
type FenxiaoProductImageUploadRequest struct {
	values url.Values
}

func (this *FenxiaoProductImageUploadRequest) GetApiMethodName() string {
	return "taobao.fenxiao.product.image.upload"
}
func (this *FenxiaoProductImageUploadRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductImageUploadRequest) GetValues() url.Values {
	return this.values
}

/* 产品图片 */
func (this *FenxiaoProductImageUploadRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 产品主图图片空间相对路径或绝对路径 */
func (this *FenxiaoProductImageUploadRequest) SetPicPath(value string) {
	this.Set("pic_path", value)
}

/* 图片位置，0-14之间。0：操作sku属性图片，1：主图，2-5：细节图，6-14：额外主图 */
func (this *FenxiaoProductImageUploadRequest) SetPosition(value string) {
	this.Set("position", value)
}

/* 产品ID */
func (this *FenxiaoProductImageUploadRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* properties表示sku图片的属性。key:value形式，key是pid，value是vid。如果position是0的话，则properties需要是必传项 */
func (this *FenxiaoProductImageUploadRequest) SetProperties(value string) {
	this.Set("properties", value)
}

type FenxiaoProductImageUploadResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	FenxiaoProductImageUploadResponseResult `json:"fenxiao_product_image_upload_response"`
}
type FenxiaoProductImageUploadResponseResult struct {
	/* 操作时间 */
	Created string `json:"created"`
	/* 操作是否成功 */
	Result bool `json:"result"`
}

/*taobao.fenxiao.product.map.add*/
type FenxiaoProductMapAddRequest struct {
	values url.Values
}

func (this *FenxiaoProductMapAddRequest) GetApiMethodName() string {
	return "taobao.fenxiao.product.map.add"
}
func (this *FenxiaoProductMapAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductMapAddRequest) GetValues() url.Values {
	return this.values
}

/* 是否需要校验商家编码，true不校验，false校验。 */
func (this *FenxiaoProductMapAddRequest) SetNotCheckOuterCode(value string) {
	this.Set("not_check_outer_code", value)
}

/* 分销产品id。 */
func (this *FenxiaoProductMapAddRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 后端商品id（如果当前分销产品没有sku和后端商品时需要指定）。 */
func (this *FenxiaoProductMapAddRequest) SetScItemId(value string) {
	this.Set("sc_item_id", value)
}

/* 在有sku的情况下，与各个sku对应的后端商品id列表。逗号分隔，顺序需要保证与sku_ids一致。 */
func (this *FenxiaoProductMapAddRequest) SetScItemIds(value string) {
	this.Set("sc_item_ids", value)
}

/* 分销产品的sku id。逗号分隔，顺序需要保证与sc_item_ids一致（没有sku就不传）。 */
func (this *FenxiaoProductMapAddRequest) SetSkuIds(value string) {
	this.Set("sku_ids", value)
}

type FenxiaoProductMapAddResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	FenxiaoProductMapAddResponseResult `json:"fenxiao_product_map_add_response"`
}
type FenxiaoProductMapAddResponseResult struct {
	/* 操作结果 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.product.map.delete*/
type FenxiaoProductMapDeleteRequest struct {
	values url.Values
}

func (this *FenxiaoProductMapDeleteRequest) GetApiMethodName() string {
	return "taobao.fenxiao.product.map.delete"
}
func (this *FenxiaoProductMapDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductMapDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 分销产品id。 */
func (this *FenxiaoProductMapDeleteRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 分销产品的sku id列表，逗号分隔，在有sku时需要指定。 */
func (this *FenxiaoProductMapDeleteRequest) SetSkuIds(value string) {
	this.Set("sku_ids", value)
}

type FenxiaoProductMapDeleteResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	FenxiaoProductMapDeleteResponseResult `json:"fenxiao_product_map_delete_response"`
}
type FenxiaoProductMapDeleteResponseResult struct {
	/* 操作结果 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.product.sku.add*/
type FenxiaoProductSkuAddRequest struct {
	values url.Values
}

func (this *FenxiaoProductSkuAddRequest) GetApiMethodName() string {
	return "taobao.fenxiao.product.sku.add"
}
func (this *FenxiaoProductSkuAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductSkuAddRequest) GetValues() url.Values {
	return this.values
}

/* 代销采购价 */
func (this *FenxiaoProductSkuAddRequest) SetAgentCostPrice(value string) {
	this.Set("agent_cost_price", value)
}

/* 经销采购价 */
func (this *FenxiaoProductSkuAddRequest) SetDealerCostPrice(value string) {
	this.Set("dealer_cost_price", value)
}

/* 产品ID<br /> 支持的最大列表长度为：64 */
func (this *FenxiaoProductSkuAddRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* sku属性 */
func (this *FenxiaoProductSkuAddRequest) SetProperties(value string) {
	this.Set("properties", value)
}

/* sku产品库存，在0到1000000之间，如果不传，则库存为0<br /> 支持最大值为：1000000<br /> 支持最小值为：0 */
func (this *FenxiaoProductSkuAddRequest) SetQuantity(value string) {
	this.Set("quantity", value)
}

/* 商家编码 */
func (this *FenxiaoProductSkuAddRequest) SetSkuNumber(value string) {
	this.Set("sku_number", value)
}

/* 采购基准价，最大值1000000000 */
func (this *FenxiaoProductSkuAddRequest) SetStandardPrice(value string) {
	this.Set("standard_price", value)
}

type FenxiaoProductSkuAddResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	FenxiaoProductSkuAddResponseResult `json:"fenxiao_product_sku_add_response"`
}
type FenxiaoProductSkuAddResponseResult struct {
	/* 操作时间 */
	Created string `json:"created"`
	/* 操作结果 */
	Result bool `json:"result"`
}

/*taobao.fenxiao.product.sku.delete*/
type FenxiaoProductSkuDeleteRequest struct {
	values url.Values
}

func (this *FenxiaoProductSkuDeleteRequest) GetApiMethodName() string {
	return "taobao.fenxiao.product.sku.delete"
}
func (this *FenxiaoProductSkuDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductSkuDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 产品id */
func (this *FenxiaoProductSkuDeleteRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* sku属性 */
func (this *FenxiaoProductSkuDeleteRequest) SetProperties(value string) {
	this.Set("properties", value)
}

type FenxiaoProductSkuDeleteResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	FenxiaoProductSkuDeleteResponseResult `json:"fenxiao_product_sku_delete_response"`
}
type FenxiaoProductSkuDeleteResponseResult struct {
	/* 操作时间 */
	Created string `json:"created"`
	/* 操作结果 */
	Result bool `json:"result"`
}

/*taobao.fenxiao.product.sku.update*/
type FenxiaoProductSkuUpdateRequest struct {
	values url.Values
}

func (this *FenxiaoProductSkuUpdateRequest) GetApiMethodName() string {
	return "taobao.fenxiao.product.sku.update"
}
func (this *FenxiaoProductSkuUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductSkuUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 代销采购价 */
func (this *FenxiaoProductSkuUpdateRequest) SetAgentCostPrice(value string) {
	this.Set("agent_cost_price", value)
}

/* 经销采购价 */
func (this *FenxiaoProductSkuUpdateRequest) SetDealerCostPrice(value string) {
	this.Set("dealer_cost_price", value)
}

/* 产品ID */
func (this *FenxiaoProductSkuUpdateRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* sku属性 */
func (this *FenxiaoProductSkuUpdateRequest) SetProperties(value string) {
	this.Set("properties", value)
}

/* 产品SKU库存 */
func (this *FenxiaoProductSkuUpdateRequest) SetQuantity(value string) {
	this.Set("quantity", value)
}

/* 商家编码 */
func (this *FenxiaoProductSkuUpdateRequest) SetSkuNumber(value string) {
	this.Set("sku_number", value)
}

/* 采购基准价 */
func (this *FenxiaoProductSkuUpdateRequest) SetStandardPrice(value string) {
	this.Set("standard_price", value)
}

type FenxiaoProductSkuUpdateResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	FenxiaoProductSkuUpdateResponseResult `json:"fenxiao_product_sku_update_response"`
}
type FenxiaoProductSkuUpdateResponseResult struct {
	/* 操作时间 */
	Created string `json:"created"`
	/* 操作结果 */
	Result bool `json:"result"`
}

/*taobao.fenxiao.product.skus.get*/
type FenxiaoProductSkusGetRequest struct {
	values url.Values
}

func (this *FenxiaoProductSkusGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.product.skus.get"
}
func (this *FenxiaoProductSkusGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductSkusGetRequest) GetValues() url.Values {
	return this.values
}

/* 产品ID<br /> 支持的最大列表长度为：64 */
func (this *FenxiaoProductSkusGetRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

type FenxiaoProductSkusGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	FenxiaoProductSkusGetResponseResult `json:"fenxiao_product_skus_get_response"`
}
type FenxiaoProductSkusGetResponseResult struct {
	/* sku信息 */
	Skus []*FenxiaoSku `json:"skus"`
	/* 记录数量 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.fenxiao.product.update*/
type FenxiaoProductUpdateRequest struct {
	values url.Values
}

func (this *FenxiaoProductUpdateRequest) GetApiMethodName() string {
	return "taobao.fenxiao.product.update"
}
func (this *FenxiaoProductUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 警戒库存必须是0到29999。 */
func (this *FenxiaoProductUpdateRequest) SetAlarmNumber(value string) {
	this.Set("alarm_number", value)
}

/* 所属类目id，参考Taobao.itemcats.get，不支持成人等类目，输入成人类目id保存提示类目属性错误。 */
func (this *FenxiaoProductUpdateRequest) SetCategoryId(value string) {
	this.Set("category_id", value)
}

/* 所在地：市，例：“杭州” */
func (this *FenxiaoProductUpdateRequest) SetCity(value string) {
	this.Set("city", value)
}

/* 代销采购价格，单位：元。例：“10.56”。必须在0.01元到10000000元之间。 */
func (this *FenxiaoProductUpdateRequest) SetCostPrice(value string) {
	this.Set("cost_price", value)
}

/* 经销采购价，单位：元。例：“10.56”。必须在0.01元到10000000元之间。 */
func (this *FenxiaoProductUpdateRequest) SetDealerCostPrice(value string) {
	this.Set("dealer_cost_price", value)
}

/* 产品描述，长度为5到25000字符。 */
func (this *FenxiaoProductUpdateRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 折扣ID */
func (this *FenxiaoProductUpdateRequest) SetDiscountId(value string) {
	this.Set("discount_id", value)
}

/* 是否有保修，可选值：false（否）、true（是），默认false。 */
func (this *FenxiaoProductUpdateRequest) SetHaveGuarantee(value string) {
	this.Set("have_guarantee", value)
}

/* 是否有发票，可选值：false（否）、true（是），默认false。 */
func (this *FenxiaoProductUpdateRequest) SetHaveInvoice(value string) {
	this.Set("have_invoice", value)
}

/* 主图图片，如果pic_path参数不空，则优先使用pic_path，忽略该参数<br /> 支持的文件类型为：gif,jpg,jpeg,png,bmp<br /> 支持的最大列表长度为：512000 */
func (this *FenxiaoProductUpdateRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 自定义属性。格式为pid:value;pid:value */
func (this *FenxiaoProductUpdateRequest) SetInputProperties(value string) {
	this.Set("input_properties", value)
}

/* 产品是否需要授权isAuthz:yes|no
yes:需要授权
no:不需要授权 */
func (this *FenxiaoProductUpdateRequest) SetIsAuthz(value string) {
	this.Set("is_authz", value)
}

/* 产品名称，长度不超过60个字节。 */
func (this *FenxiaoProductUpdateRequest) SetName(value string) {
	this.Set("name", value)
}

/* 商家编码，长度不能超过60个字节。 */
func (this *FenxiaoProductUpdateRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 产品主图图片空间相对路径或绝对路径 */
func (this *FenxiaoProductUpdateRequest) SetPicPath(value string) {
	this.Set("pic_path", value)
}

/* 产品ID */
func (this *FenxiaoProductUpdateRequest) SetPid(value string) {
	this.Set("pid", value)
}

/* ems费用，单位：元。例：“10.56”。大小为0.01元到999999元之间。更新时必须指定运费类型为buyer，否则不更新。 */
func (this *FenxiaoProductUpdateRequest) SetPostageEms(value string) {
	this.Set("postage_ems", value)
}

/* 快递费用，单位：元。例：“10.56”。大小为0.01元到999999元之间。更新时必须指定运费类型为buyer，否则不更新。 */
func (this *FenxiaoProductUpdateRequest) SetPostageFast(value string) {
	this.Set("postage_fast", value)
}

/* 运费模板ID，参考taobao.postages.get。更新时必须指定运费类型为 buyer，否则不更新。 */
func (this *FenxiaoProductUpdateRequest) SetPostageId(value string) {
	this.Set("postage_id", value)
}

/* 平邮费用，单位：元。例：“10.56”。大小为0.01元到999999元之间。更新时必须指定运费类型为buyer，否则不更新。 */
func (this *FenxiaoProductUpdateRequest) SetPostageOrdinary(value string) {
	this.Set("postage_ordinary", value)
}

/* 运费类型，可选值：seller（供应商承担运费）、buyer（分销商承担运费）。 */
func (this *FenxiaoProductUpdateRequest) SetPostageType(value string) {
	this.Set("postage_type", value)
}

/* 产品属性 */
func (this *FenxiaoProductUpdateRequest) SetProperties(value string) {
	this.Set("properties", value)
}

/* 属性别名 */
func (this *FenxiaoProductUpdateRequest) SetPropertyAlias(value string) {
	this.Set("property_alias", value)
}

/* 所在地：省，例：“浙江” */
func (this *FenxiaoProductUpdateRequest) SetProv(value string) {
	this.Set("prov", value)
}

/* 产品库存必须是1到999999。 */
func (this *FenxiaoProductUpdateRequest) SetQuantity(value string) {
	this.Set("quantity", value)
}

/* 最高零售价，单位：元。例：“10.56”。必须在0.01元到10000000元之间，最高零售价必须大于最低零售价。 */
func (this *FenxiaoProductUpdateRequest) SetRetailPriceHigh(value string) {
	this.Set("retail_price_high", value)
}

/* 最低零售价，单位：元。例：“10.56”。必须在0.01元到10000000元之间。 */
func (this *FenxiaoProductUpdateRequest) SetRetailPriceLow(value string) {
	this.Set("retail_price_low", value)
}

/* sku采购价格，单位元，例："10.50,11.00,20.50"，字段必须和上面的sku_ids或sku_properties保持一致。 */
func (this *FenxiaoProductUpdateRequest) SetSkuCostPrices(value string) {
	this.Set("sku_cost_prices", value)
}

/* sku的经销采购价。如果多个，用逗号分隔，并与其他sku信息保持相同顺序。其中每个值的单位：元。例：“10.56,12.3”。必须在0.01元到10000000元之间。 */
func (this *FenxiaoProductUpdateRequest) SetSkuDealerCostPrices(value string) {
	this.Set("sku_dealer_cost_prices", value)
}

/* sku id列表，例：1001,1002,1003。如果传入sku_properties将忽略此参数。 */
func (this *FenxiaoProductUpdateRequest) SetSkuIds(value string) {
	this.Set("sku_ids", value)
}

/* sku商家编码 ，单位元，例："S1000,S1002,S1003"，字段必须和上面的id或sku_properties保持一致，如果没有可以写成",," */
func (this *FenxiaoProductUpdateRequest) SetSkuOuterIds(value string) {
	this.Set("sku_outer_ids", value)
}

/* sku属性。格式:pid:vid;pid:vid,表示一组属性如:1627207:3232483;1630696:3284570,表示一组:机身颜色:军绿色;手机套餐:一电一充。多组之间用逗号“,”区分。(属性的pid调用taobao.itemprops.get取得，属性值的vid用taobao.itempropvalues.get取得vid)
通过此字段可新增和更新sku。若传入此值将忽略sku_ids字段。sku其他字段与此值保持一致。 */
func (this *FenxiaoProductUpdateRequest) SetSkuProperties(value string) {
	this.Set("sku_properties", value)
}

/* 根据sku属性删除sku信息。需要按组删除属性。 */
func (this *FenxiaoProductUpdateRequest) SetSkuPropertiesDel(value string) {
	this.Set("sku_properties_del", value)
}

/* sku库存，单位元，例："10,20,30"，字段必须和sku_ids或sku_properties保持一致。 */
func (this *FenxiaoProductUpdateRequest) SetSkuQuantitys(value string) {
	this.Set("sku_quantitys", value)
}

/* sku采购基准价，单位元，例："10.50,11.00,20.50"，字段必须和上面的sku_ids或sku_properties保持一致。 */
func (this *FenxiaoProductUpdateRequest) SetSkuStandardPrices(value string) {
	this.Set("sku_standard_prices", value)
}

/* 采购基准价，单位：元。例：“10.56”。必须在0.01元到10000000元之间。 */
func (this *FenxiaoProductUpdateRequest) SetStandardPrice(value string) {
	this.Set("standard_price", value)
}

/* 零售基准价，单位：元。例：“10.56”。必须在0.01元到10000000元之间。 */
func (this *FenxiaoProductUpdateRequest) SetStandardRetailPrice(value string) {
	this.Set("standard_retail_price", value)
}

/* 发布状态，可选值：up（上架）、down（下架）、delete（删除），输入非法字符则忽略。 */
func (this *FenxiaoProductUpdateRequest) SetStatus(value string) {
	this.Set("status", value)
}

type FenxiaoProductUpdateResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	FenxiaoProductUpdateResponseResult `json:"fenxiao_product_update_response"`
}
type FenxiaoProductUpdateResponseResult struct {
	/* 更新时间，时间格式：yyyy-MM-dd HH:mm:ss */
	Modified string `json:"modified"`
	/* 产品ID */
	Pid int64 `json:"pid"`
}

/*taobao.fenxiao.productcat.add*/
type FenxiaoProductcatAddRequest struct {
	values url.Values
}

func (this *FenxiaoProductcatAddRequest) GetApiMethodName() string {
	return "taobao.fenxiao.productcat.add"
}
func (this *FenxiaoProductcatAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductcatAddRequest) GetValues() url.Values {
	return this.values
}

/* 代销默认采购价比例，注意：100.00%，则输入为10000<br /> 支持最大值为：99999<br /> 支持最小值为：100 */
func (this *FenxiaoProductcatAddRequest) SetAgentCostPercent(value string) {
	this.Set("agent_cost_percent", value)
}

/* 经销默认采购价比例，注意：100.00%，则输入为10000<br /> 支持最大值为：99999<br /> 支持最小值为：100 */
func (this *FenxiaoProductcatAddRequest) SetDealerCostPercent(value string) {
	this.Set("dealer_cost_percent", value)
}

/* 产品线名称<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *FenxiaoProductcatAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 最高零售价比例，注意：100.00%，则输入为10000<br /> 支持最大值为：99999<br /> 支持最小值为：100 */
func (this *FenxiaoProductcatAddRequest) SetRetailHighPercent(value string) {
	this.Set("retail_high_percent", value)
}

/* 最低零售价比例，注意：100.00%，则输入为10000<br /> 支持最大值为：99999<br /> 支持最小值为：100 */
func (this *FenxiaoProductcatAddRequest) SetRetailLowPercent(value string) {
	this.Set("retail_low_percent", value)
}

type FenxiaoProductcatAddResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	FenxiaoProductcatAddResponseResult `json:"fenxiao_productcat_add_response"`
}
type FenxiaoProductcatAddResponseResult struct {
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
	/* 产品线ID */
	ProductLineId int64 `json:"product_line_id"`
}

/*taobao.fenxiao.productcat.delete*/
type FenxiaoProductcatDeleteRequest struct {
	values url.Values
}

func (this *FenxiaoProductcatDeleteRequest) GetApiMethodName() string {
	return "taobao.fenxiao.productcat.delete"
}
func (this *FenxiaoProductcatDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductcatDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 产品线ID */
func (this *FenxiaoProductcatDeleteRequest) SetProductLineId(value string) {
	this.Set("product_line_id", value)
}

type FenxiaoProductcatDeleteResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	FenxiaoProductcatDeleteResponseResult `json:"fenxiao_productcat_delete_response"`
}
type FenxiaoProductcatDeleteResponseResult struct {
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.productcat.update*/
type FenxiaoProductcatUpdateRequest struct {
	values url.Values
}

func (this *FenxiaoProductcatUpdateRequest) GetApiMethodName() string {
	return "taobao.fenxiao.productcat.update"
}
func (this *FenxiaoProductcatUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductcatUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 代销默认采购价比例，注意：100.00%，则输入为10000<br /> 支持最大值为：99999<br /> 支持最小值为：100 */
func (this *FenxiaoProductcatUpdateRequest) SetAgentCostPercent(value string) {
	this.Set("agent_cost_percent", value)
}

/* 经销默认采购价比例，注意：100.00%，则输入为10000<br /> 支持最大值为：99999<br /> 支持最小值为：100 */
func (this *FenxiaoProductcatUpdateRequest) SetDealerCostPercent(value string) {
	this.Set("dealer_cost_percent", value)
}

/* 产品线名称<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *FenxiaoProductcatUpdateRequest) SetName(value string) {
	this.Set("name", value)
}

/* 产品线ID */
func (this *FenxiaoProductcatUpdateRequest) SetProductLineId(value string) {
	this.Set("product_line_id", value)
}

/* 最高零售价比例，注意：100.00%，则输入为10000<br /> 支持最大值为：99999<br /> 支持最小值为：100 */
func (this *FenxiaoProductcatUpdateRequest) SetRetailHighPercent(value string) {
	this.Set("retail_high_percent", value)
}

/* 最低零售价比例，注意：100.00%，则输入为10000<br /> 支持最大值为：99999<br /> 支持最小值为：100 */
func (this *FenxiaoProductcatUpdateRequest) SetRetailLowPercent(value string) {
	this.Set("retail_low_percent", value)
}

type FenxiaoProductcatUpdateResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	FenxiaoProductcatUpdateResponseResult `json:"fenxiao_productcat_update_response"`
}
type FenxiaoProductcatUpdateResponseResult struct {
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.productcats.get*/
type FenxiaoProductcatsGetRequest struct {
	values url.Values
}

func (this *FenxiaoProductcatsGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.productcats.get"
}
func (this *FenxiaoProductcatsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductcatsGetRequest) GetValues() url.Values {
	return this.values
}

/* 返回字段列表 */
func (this *FenxiaoProductcatsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

type FenxiaoProductcatsGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	FenxiaoProductcatsGetResponseResult `json:"fenxiao_productcats_get_response"`
}
type FenxiaoProductcatsGetResponseResult struct {
	/* 产品线列表。返回 ProductCat 包含的字段信息。 */
	Productcats []*ProductCat `json:"productcats"`
	/* 查询结果记录数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.fenxiao.products.get*/
type FenxiaoProductsGetRequest struct {
	values url.Values
}

func (this *FenxiaoProductsGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.products.get"
}
func (this *FenxiaoProductsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoProductsGetRequest) GetValues() url.Values {
	return this.values
}

/* 结束修改时间 */
func (this *FenxiaoProductsGetRequest) SetEndModified(value string) {
	this.Set("end_modified", value)
}

/* 指定查询额外的信息，可选值：skus（sku数据）、images（多图），多个可选值用逗号分割。 */
func (this *FenxiaoProductsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 查询产品列表时，查询入参“是否需要授权”
yes:需要授权
no:不需要授权 */
func (this *FenxiaoProductsGetRequest) SetIsAuthz(value string) {
	this.Set("is_authz", value)
}

/* 可根据导入的商品ID列表查询，优先级次于产品ID、sku_numbers，高于其他分页查询条件。最大限制20，用逗号分割，例如：“1001,1002,1003,1004,1005” */
func (this *FenxiaoProductsGetRequest) SetItemIds(value string) {
	this.Set("item_ids", value)
}

/* 商家编码 */
func (this *FenxiaoProductsGetRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 页码（大于0的整数，默认1） */
func (this *FenxiaoProductsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页记录数（默认20，最大50） */
func (this *FenxiaoProductsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 产品ID列表（最大限制30），用逗号分割，例如：“1001,1002,1003,1004,1005” */
func (this *FenxiaoProductsGetRequest) SetPids(value string) {
	this.Set("pids", value)
}

/* 产品线ID */
func (this *FenxiaoProductsGetRequest) SetProductcatId(value string) {
	this.Set("productcat_id", value)
}

/* sku商家编码 */
func (this *FenxiaoProductsGetRequest) SetSkuNumber(value string) {
	this.Set("sku_number", value)
}

/* 开始修改时间 */
func (this *FenxiaoProductsGetRequest) SetStartModified(value string) {
	this.Set("start_modified", value)
}

/* 产品状态，可选值：up（上架）、down（下架），不传默认查询所有 */
func (this *FenxiaoProductsGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

type FenxiaoProductsGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	FenxiaoProductsGetResponseResult `json:"fenxiao_products_get_response"`
}
type FenxiaoProductsGetResponseResult struct {
	/* 产品对象记录集。返回 FenxiaoProduct 包含的字段信息。 */
	Products []*FenxiaoProduct `json:"products"`
	/* 查询结果记录数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.fenxiao.refund.create*/
type FenxiaoRefundCreateRequest struct {
	values url.Values
}

func (this *FenxiaoRefundCreateRequest) GetApiMethodName() string {
	return "taobao.fenxiao.refund.create"
}
func (this *FenxiaoRefundCreateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoRefundCreateRequest) GetValues() url.Values {
	return this.values
}

/* 是否退货，只有子采购单发货后，才能申请退货 */
func (this *FenxiaoRefundCreateRequest) SetIsReturnGoods(value string) {
	this.Set("is_return_goods", value)
}

/* 此条子采购单是否退邮费，邮费要记在最后一笔申请退款的子单上面 */
func (this *FenxiaoRefundCreateRequest) SetIsReturnPostFee(value string) {
	this.Set("is_return_post_fee", value)
}

/* 退款说明,2-200字 */
func (this *FenxiaoRefundCreateRequest) SetRefundDesc(value string) {
	this.Set("refund_desc", value)
}

/* 发货前：
1、缺货，2、拍错商品，3、商品缺少所需样式，4、协商一致退款，5、未及时发货，0、其它
发货后：
经销：
1、商品质量问题，2、收到的商品不符，3、协商一致退款，4、一直未收到货，5、退还多付邮费，6、折扣、赠品、发票等问题，0、其它
代销：
1、商品质量问题，2、收到的商品不符，3、协商一致退款，4、买家一直未收到货，5、退还多付邮费，6、折扣、赠品、发票等问题，0、其它 */
func (this *FenxiaoRefundCreateRequest) SetRefundReasonId(value string) {
	this.Set("refund_reason_id", value)
}

/* 需要退款的金额，单位为分 */
func (this *FenxiaoRefundCreateRequest) SetReturnFee(value string) {
	this.Set("return_fee", value)
}

/* 需要创建退款的子采购单id */
func (this *FenxiaoRefundCreateRequest) SetSubOrderId(value string) {
	this.Set("sub_order_id", value)
}

type FenxiaoRefundCreateResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	FenxiaoRefundCreateResponseResult `json:"fenxiao_refund_create_response"`
}
type FenxiaoRefundCreateResponseResult struct {
	/* 退款是否创建成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.refund.get*/
type FenxiaoRefundGetRequest struct {
	values url.Values
}

func (this *FenxiaoRefundGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.refund.get"
}
func (this *FenxiaoRefundGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoRefundGetRequest) GetValues() url.Values {
	return this.values
}

/* 是否查询下游买家的退款信息 */
func (this *FenxiaoRefundGetRequest) SetQuerySellerRefund(value string) {
	this.Set("query_seller_refund", value)
}

/* 要查询的退款子单的id */
func (this *FenxiaoRefundGetRequest) SetSubOrderId(value string) {
	this.Set("sub_order_id", value)
}

type FenxiaoRefundGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	FenxiaoRefundGetResponseResult `json:"fenxiao_refund_get_response"`
}
type FenxiaoRefundGetResponseResult struct {
	/* 退款详情 */
	RefundDetail *RefundDetail `json:"refund_detail"`
}

/*taobao.fenxiao.refund.message.add*/
type FenxiaoRefundMessageAddRequest struct {
	values url.Values
}

func (this *FenxiaoRefundMessageAddRequest) GetApiMethodName() string {
	return "taobao.fenxiao.refund.message.add"
}
func (this *FenxiaoRefundMessageAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoRefundMessageAddRequest) GetValues() url.Values {
	return this.values
}

/* 留言凭证 */
func (this *FenxiaoRefundMessageAddRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 留言内容 */
func (this *FenxiaoRefundMessageAddRequest) SetMessageContent(value string) {
	this.Set("message_content", value)
}

/* 发生退款的子采购单id */
func (this *FenxiaoRefundMessageAddRequest) SetSubOrderId(value string) {
	this.Set("sub_order_id", value)
}

type FenxiaoRefundMessageAddResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	FenxiaoRefundMessageAddResponseResult `json:"fenxiao_refund_message_add_response"`
}
type FenxiaoRefundMessageAddResponseResult struct {
	/* 退款是否创建成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.refund.message.get*/
type FenxiaoRefundMessageGetRequest struct {
	values url.Values
}

func (this *FenxiaoRefundMessageGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.refund.message.get"
}
func (this *FenxiaoRefundMessageGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoRefundMessageGetRequest) GetValues() url.Values {
	return this.values
}

/* 页码。（大于0的整数。默认为1） */
func (this *FenxiaoRefundMessageGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数。（默认10） */
func (this *FenxiaoRefundMessageGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 子采购单id */
func (this *FenxiaoRefundMessageGetRequest) SetSubOrderId(value string) {
	this.Set("sub_order_id", value)
}

type FenxiaoRefundMessageGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	FenxiaoRefundMessageGetResponseResult `json:"fenxiao_refund_message_get_response"`
}
type FenxiaoRefundMessageGetResponseResult struct {
	/* 退款留言 */
	OrderMessages []*OrderMessage `json:"order_messages"`
	/* 总留言条数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.fenxiao.refund.query*/
type FenxiaoRefundQueryRequest struct {
	values url.Values
}

func (this *FenxiaoRefundQueryRequest) GetApiMethodName() string {
	return "taobao.fenxiao.refund.query"
}
func (this *FenxiaoRefundQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoRefundQueryRequest) GetValues() url.Values {
	return this.values
}

/* 代销采购退款最迟修改时间。与start_date的最大时间间隔不能超过30天 */
func (this *FenxiaoRefundQueryRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 页码（大于0的整数。无值或小于1的值按默认值1计） */
func (this *FenxiaoRefundQueryRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数（大于0但小于等于50的整数。无值或大于50或小于1的值按默认值50计） */
func (this *FenxiaoRefundQueryRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 是否查询下游买家的退款信息 */
func (this *FenxiaoRefundQueryRequest) SetQuerySellerRefund(value string) {
	this.Set("query_seller_refund", value)
}

/* 代销采购退款单最早修改时间 */
func (this *FenxiaoRefundQueryRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type FenxiaoRefundQueryResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	FenxiaoRefundQueryResponseResult `json:"fenxiao_refund_query_response"`
}
type FenxiaoRefundQueryResponseResult struct {
	/* 代销采购退款列表 */
	RefundList []*RefundDetail `json:"refund_list"`
	/* 按查询条件查到的记录总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.fenxiao.refund.update*/
type FenxiaoRefundUpdateRequest struct {
	values url.Values
}

func (this *FenxiaoRefundUpdateRequest) GetApiMethodName() string {
	return "taobao.fenxiao.refund.update"
}
func (this *FenxiaoRefundUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoRefundUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 是否退货，只有子采购单发货后，才能申请退货 */
func (this *FenxiaoRefundUpdateRequest) SetIsReturnGoods(value string) {
	this.Set("is_return_goods", value)
}

/* 退款说明 */
func (this *FenxiaoRefundUpdateRequest) SetRefundDesc(value string) {
	this.Set("refund_desc", value)
}

/* 发货前：
1、缺货，2、拍错商品，3、商品缺少所需样式，4、协商一致退款，5、未及时发货，0、其它
发货后：
经销：
1、商品质量问题，2、收到的商品不符，3、协商一致退款，4、一直未收到货，5、退还多付邮费，6、折扣、赠品、发票等问题，0、其它
代销：
1、商品质量问题，2、收到的商品不符，3、协商一致退款，4、买家一直未收到货，5、退还多付邮费，6、折扣、赠品、发票等问题，0、其它 */
func (this *FenxiaoRefundUpdateRequest) SetRefundReasonId(value string) {
	this.Set("refund_reason_id", value)
}

/* 需要退款的金额 */
func (this *FenxiaoRefundUpdateRequest) SetReturnFee(value string) {
	this.Set("return_fee", value)
}

/* 需要修改退款的子采购单id */
func (this *FenxiaoRefundUpdateRequest) SetSubOrderId(value string) {
	this.Set("sub_order_id", value)
}

type FenxiaoRefundUpdateResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	FenxiaoRefundUpdateResponseResult `json:"fenxiao_refund_update_response"`
}
type FenxiaoRefundUpdateResponseResult struct {
	/* 退款是否修改成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.fenxiao.requisitions.get*/
type FenxiaoRequisitionsGetRequest struct {
	values url.Values
}

func (this *FenxiaoRequisitionsGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.requisitions.get"
}
func (this *FenxiaoRequisitionsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoRequisitionsGetRequest) GetValues() url.Values {
	return this.values
}

/* 申请结束时间yyyy-MM-dd */
func (this *FenxiaoRequisitionsGetRequest) SetApplyEnd(value string) {
	this.Set("apply_end", value)
}

/* 申请开始时间yyyy-MM-dd */
func (this *FenxiaoRequisitionsGetRequest) SetApplyStart(value string) {
	this.Set("apply_start", value)
}

/* 页码（大于0的整数，默认1） */
func (this *FenxiaoRequisitionsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页记录数（默认20，最大50） */
func (this *FenxiaoRequisitionsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 申请状态（1-申请中、2-成功、3-被退回、4-已撤消、5-过期） */
func (this *FenxiaoRequisitionsGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

type FenxiaoRequisitionsGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	FenxiaoRequisitionsGetResponseResult `json:"fenxiao_requisitions_get_response"`
}
type FenxiaoRequisitionsGetResponseResult struct {
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
	/* 合作申请 */
	Requisitions []*Requisition `json:"requisitions"`
	/* 结果记录数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.fenxiao.trademonitor.get*/
type FenxiaoTrademonitorGetRequest struct {
	values url.Values
}

func (this *FenxiaoTrademonitorGetRequest) GetApiMethodName() string {
	return "taobao.fenxiao.trademonitor.get"
}
func (this *FenxiaoTrademonitorGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FenxiaoTrademonitorGetRequest) GetValues() url.Values {
	return this.values
}

/* 经销商的淘宝账号 */
func (this *FenxiaoTrademonitorGetRequest) SetDistributorNick(value string) {
	this.Set("distributor_nick", value)
}

/* 结束时间 格式 yyyy-MM-dd HH:mm:ss.支持到秒的查询。若不传时分秒，默认为0时0分0秒。 */
func (this *FenxiaoTrademonitorGetRequest) SetEndCreated(value string) {
	this.Set("end_created", value)
}

/* 多个字段用","分隔。 fields 如果为空：返回所有采购单对象(purchase_orders)字段。 如果不为空：返回指定采购单对象(purchase_orders)字段。例如：trade_monitors.item_title表示只返回item_title */
func (this *FenxiaoTrademonitorGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 页码。（大于0的整数。小于1按1计） */
func (this *FenxiaoTrademonitorGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数。（每页条数不超过50条，超过50或小于0均按50计） */
func (this *FenxiaoTrademonitorGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 产品id */
func (this *FenxiaoTrademonitorGetRequest) SetProductId(value string) {
	this.Set("product_id", value)
}

/* 起始时间 格式 yyyy-MM-dd HH:mm:ss.支持到秒的查询。若不传时分秒，默认为0时0分0秒。 */
func (this *FenxiaoTrademonitorGetRequest) SetStartCreated(value string) {
	this.Set("start_created", value)
}

type FenxiaoTrademonitorGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	FenxiaoTrademonitorGetResponseResult `json:"fenxiao_trademonitor_get_response"`
}
type FenxiaoTrademonitorGetResponseResult struct {
	/* 搜索到的经销商品订单数量 */
	TotalResults int64 `json:"total_results"`
	/* 经销商品订单监控信息 */
	TradeMonitors []*TradeMonitor `json:"trade_monitors"`
}

/*taobao.inventory.adjust.external*/
type InventoryAdjustExternalRequest struct {
	values url.Values
}

func (this *InventoryAdjustExternalRequest) GetApiMethodName() string {
	return "taobao.inventory.adjust.external"
}
func (this *InventoryAdjustExternalRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *InventoryAdjustExternalRequest) GetValues() url.Values {
	return this.values
}

/* 外部订单类型：ALLOCATE:调拨、 RETURN:退货、PURCHACE：采购、BALANCE:盘点、NON_TAOBAO_TRADE：非淘宝交易、OTHERS：其他 */
func (this *InventoryAdjustExternalRequest) SetBizType(value string) {
	this.Set("biz_type", value)
}

/* 商家外部定单号 */
func (this *InventoryAdjustExternalRequest) SetBizUniqueCode(value string) {
	this.Set("biz_unique_code", value)
}

/* 商品初始库存信息： [{"scItemId":"商品后端ID，如果有传scItemCode,参数可以为0","scItemCode":"商品商家编码","inventoryType":"库存类型  1：正常,”direction”: 1: 盘盈 -1: 盘亏,参数可选,"quantity":"数量"}] */
func (this *InventoryAdjustExternalRequest) SetItems(value string) {
	this.Set("items", value)
}

/* 库存占用返回的操作码.operate_type 为OUTBOUND时，如果是确认事先进行过的库存占用，需要传入当时返回的操作码，并且明细必须与申请时保持一致 */
func (this *InventoryAdjustExternalRequest) SetOccupyOperateCode(value string) {
	this.Set("occupy_operate_code", value)
}

/* 业务操作时间 */
func (this *InventoryAdjustExternalRequest) SetOperateTime(value string) {
	this.Set("operate_time", value)
}

/* 库存操作类别：INBOUND：入库 OUTBOUND: 出库BALANCE: 盘点 */
func (this *InventoryAdjustExternalRequest) SetOperateType(value string) {
	this.Set("operate_type", value)
}

/* 出库时库存扣减类型，operate_type为OUTBOUND时有效。
AUTO_CALCULATE:自动计算可供扣减，如果库存不够返回失败 ClIENT_FORCE：强制要求最大化扣减，有多少扣多少 */
func (this *InventoryAdjustExternalRequest) SetReduceType(value string) {
	this.Set("reduce_type", value)
}

/* 商家仓库编码 */
func (this *InventoryAdjustExternalRequest) SetStoreCode(value string) {
	this.Set("store_code", value)
}

type InventoryAdjustExternalResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	InventoryAdjustExternalResponseResult `json:"inventory_adjust_external_response"`
}
type InventoryAdjustExternalResponseResult struct {
	/* 操作返回码 */
	OperateCode string `json:"operate_code"`
	/* 提示信息 */
	TipInfos []*TipInfo `json:"tip_infos"`
}

/*taobao.inventory.adjust.trade*/
type InventoryAdjustTradeRequest struct {
	values url.Values
}

func (this *InventoryAdjustTradeRequest) GetApiMethodName() string {
	return "taobao.inventory.adjust.trade"
}
func (this *InventoryAdjustTradeRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *InventoryAdjustTradeRequest) GetValues() url.Values {
	return this.values
}

/* 商家外部定单号 */
func (this *InventoryAdjustTradeRequest) SetBizUniqueCode(value string) {
	this.Set("biz_unique_code", value)
}

/* 商品初始库存信息： [{ "TBOrderCode”:”淘宝交易号”,"TBSubOrderCode ":"淘宝子交易单号,赠品可以不填","”isGift”:”TRUE或者FALSE,是否赠品”,storeCode":"商家仓库编码"," scItemId ":"商品后端ID","scItemCode":"商品商家编码"," originScItemId ":"原商品ID","inventoryType":"","quantity":"111","isComplete":"TRUE或者FALSE，是否全部确认出库"}] */
func (this *InventoryAdjustTradeRequest) SetItems(value string) {
	this.Set("items", value)
}

/* 业务操作时间 */
func (this *InventoryAdjustTradeRequest) SetOperateTime(value string) {
	this.Set("operate_time", value)
}

/* 订单类型：B2C、B2B */
func (this *InventoryAdjustTradeRequest) SetTbOrderType(value string) {
	this.Set("tb_order_type", value)
}

type InventoryAdjustTradeResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	InventoryAdjustTradeResponseResult `json:"inventory_adjust_trade_response"`
}
type InventoryAdjustTradeResponseResult struct {
	/* 操作返回码 */
	OperateCode string `json:"operate_code"`
	/* 提示信息 */
	TipInfos []*TipInfo `json:"tip_infos"`
}

/*taobao.inventory.initial*/
type InventoryInitialRequest struct {
	values url.Values
}

func (this *InventoryInitialRequest) GetApiMethodName() string {
	return "taobao.inventory.initial"
}
func (this *InventoryInitialRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *InventoryInitialRequest) GetValues() url.Values {
	return this.values
}

/* 商品初始库存信息： [{"scItemId":"商品后端ID，如果有传scItemCode,参数可以为0","scItemCode":"商品商家编码","inventoryType":"库存类型  1：正常,2：损坏,3：冻结,10：质押,11-20:用户自定义","quantity":"数量"}] */
func (this *InventoryInitialRequest) SetItems(value string) {
	this.Set("items", value)
}

/* 商家仓库编码 */
func (this *InventoryInitialRequest) SetStoreCode(value string) {
	this.Set("store_code", value)
}

type InventoryInitialResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	InventoryInitialResponseResult `json:"inventory_initial_response"`
}
type InventoryInitialResponseResult struct {
	/* 提示信息 */
	TipInfos []*TipInfo `json:"tip_infos"`
}

/*taobao.inventory.initial.item*/
type InventoryInitialItemRequest struct {
	values url.Values
}

func (this *InventoryInitialItemRequest) GetApiMethodName() string {
	return "taobao.inventory.initial.item"
}
func (this *InventoryInitialItemRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *InventoryInitialItemRequest) GetValues() url.Values {
	return this.values
}

/* 后端商品id */
func (this *InventoryInitialItemRequest) SetScItemId(value string) {
	this.Set("sc_item_id", value)
}

/* 商品初始库存信息： [{"storeCode":"必选,商家仓库编号","inventoryType":"可选，库存类型 1：正常,2：损坏,3：冻结,10：质押,11-20:用户自定义,默认为1","quantity":"必选,数量"}] */
func (this *InventoryInitialItemRequest) SetStoreInventorys(value string) {
	this.Set("store_inventorys", value)
}

type InventoryInitialItemResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	InventoryInitialItemResponseResult `json:"inventory_initial_item_response"`
}
type InventoryInitialItemResponseResult struct {
	/* 提示信息 */
	TipInfos []*TipInfo `json:"tip_infos"`
}

/*taobao.inventory.occupy.adjust*/
type InventoryOccupyAdjustRequest struct {
	values url.Values
}

func (this *InventoryOccupyAdjustRequest) GetApiMethodName() string {
	return "taobao.inventory.occupy.adjust"
}
func (this *InventoryOccupyAdjustRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *InventoryOccupyAdjustRequest) GetValues() url.Values {
	return this.values
}

/* 商家外部订单号 */
func (this *InventoryOccupyAdjustRequest) SetBizUniqueCode(value string) {
	this.Set("biz_unique_code", value)
}

/* 商品初始库存信息： [{ "TBOrderCode":"淘宝交易号","TBSubOrderCode ":"淘宝子交易单号","originalStoreCode":"交易下单的仓库编码","storeCode":"要切换占用到的商家仓库编码"," scItemId ":"商品后端ID","scItemCode":"商品商家编码","inventoryType":"仓储类型","quantity":"新仓库的占用数量，如果不传，则取用原先的占用数"}] */
func (this *InventoryOccupyAdjustRequest) SetItems(value string) {
	this.Set("items", value)
}

/* 业务操作时间 */
func (this *InventoryOccupyAdjustRequest) SetOperateTime(value string) {
	this.Set("operate_time", value)
}

/* 订单类型：B2C、B2B */
func (this *InventoryOccupyAdjustRequest) SetTbOrderType(value string) {
	this.Set("tb_order_type", value)
}

type InventoryOccupyAdjustResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	InventoryOccupyAdjustResponseResult `json:"inventory_occupy_adjust_response"`
}
type InventoryOccupyAdjustResponseResult struct {
	/* 操作返回码 */
	OperateCode string `json:"operate_code"`
	/* 提示信息 */
	TipInfos []*TipInfo `json:"tip_infos"`
}

/*taobao.inventory.query*/
type InventoryQueryRequest struct {
	values url.Values
}

func (this *InventoryQueryRequest) GetApiMethodName() string {
	return "taobao.inventory.query"
}
func (this *InventoryQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *InventoryQueryRequest) GetValues() url.Values {
	return this.values
}

/* 后端商品的商家编码列表，控制到50个 */
func (this *InventoryQueryRequest) SetScItemCodes(value string) {
	this.Set("sc_item_codes", value)
}

/* 后端商品ID 列表，控制到50个 */
func (this *InventoryQueryRequest) SetScItemIds(value string) {
	this.Set("sc_item_ids", value)
}

/* 卖家昵称 */
func (this *InventoryQueryRequest) SetSellerNick(value string) {
	this.Set("seller_nick", value)
}

/* 仓库列表:GLY001^GLY002 */
func (this *InventoryQueryRequest) SetStoreCodes(value string) {
	this.Set("store_codes", value)
}

type InventoryQueryResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	InventoryQueryResponseResult `json:"inventory_query_response"`
}
type InventoryQueryResponseResult struct {
	/* 商品总体库存信息 */
	ItemInventorys []*InventorySum `json:"item_inventorys"`
	/* 提示信息，提示不存在的后端商品 */
	TipInfos []*TipInfo `json:"tip_infos"`
}

/*taobao.inventory.store.manage*/
type InventoryStoreManageRequest struct {
	values url.Values
}

func (this *InventoryStoreManageRequest) GetApiMethodName() string {
	return "taobao.inventory.store.manage"
}
func (this *InventoryStoreManageRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *InventoryStoreManageRequest) GetValues() url.Values {
	return this.values
}

/* 仓库的物理地址，可更新 */
func (this *InventoryStoreManageRequest) SetAddress(value string) {
	this.Set("address", value)
}

/* 仓库区域名，可更新 */
func (this *InventoryStoreManageRequest) SetAddressAreaName(value string) {
	this.Set("address_area_name", value)
}

/* 仓库简称，可更新 */
func (this *InventoryStoreManageRequest) SetAliasName(value string) {
	this.Set("alias_name", value)
}

/* 联系人，可更新 */
func (this *InventoryStoreManageRequest) SetContact(value string) {
	this.Set("contact", value)
}

/* 参数定义，ADD：新建; UPDATE：更新 */
func (this *InventoryStoreManageRequest) SetOperateType(value string) {
	this.Set("operate_type", value)
}

/* 联系电话，可更新 */
func (this *InventoryStoreManageRequest) SetPhone(value string) {
	this.Set("phone", value)
}

/* 邮编，可更新 */
func (this *InventoryStoreManageRequest) SetPostcode(value string) {
	this.Set("postcode", value)
}

/* 商家的仓库编码，不允许重复，不允许更新 */
func (this *InventoryStoreManageRequest) SetStoreCode(value string) {
	this.Set("store_code", value)
}

/* 商家的仓库名称，可更新 */
func (this *InventoryStoreManageRequest) SetStoreName(value string) {
	this.Set("store_name", value)
}

/* 仓库类型，可更新。目前只支持自有仓，TYPE_OWN：自有物理仓 */
func (this *InventoryStoreManageRequest) SetStoreType(value string) {
	this.Set("store_type", value)
}

type InventoryStoreManageResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	InventoryStoreManageResponseResult `json:"inventory_store_manage_response"`
}
type InventoryStoreManageResponseResult struct {
	/* 返回结果 */
	StoreList []*Store `json:"store_list"`
}

/*taobao.inventory.store.query*/
type InventoryStoreQueryRequest struct {
	values url.Values
}

func (this *InventoryStoreQueryRequest) GetApiMethodName() string {
	return "taobao.inventory.store.query"
}
func (this *InventoryStoreQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *InventoryStoreQueryRequest) GetValues() url.Values {
	return this.values
}

/* 商家的仓库编码 */
func (this *InventoryStoreQueryRequest) SetStoreCode(value string) {
	this.Set("store_code", value)
}

type InventoryStoreQueryResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	InventoryStoreQueryResponseResult `json:"inventory_store_query_response"`
}
type InventoryStoreQueryResponseResult struct {
	/* 仓库列表 */
	StoreList []*Store `json:"store_list"`
}

/*taobao.scitem.add*/
type ScitemAddRequest struct {
	values url.Values
}

func (this *ScitemAddRequest) GetApiMethodName() string {
	return "taobao.scitem.add"
}
func (this *ScitemAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ScitemAddRequest) GetValues() url.Values {
	return this.values
}

/* 条形码 */
func (this *ScitemAddRequest) SetBarCode(value string) {
	this.Set("bar_code", value)
}

/* 品牌id */
func (this *ScitemAddRequest) SetBrandId(value string) {
	this.Set("brand_id", value)
}

/* brand_Name */
func (this *ScitemAddRequest) SetBrandName(value string) {
	this.Set("brand_name", value)
}

/* 高 单位：mm */
func (this *ScitemAddRequest) SetHeight(value string) {
	this.Set("height", value)
}

/* 1表示区域销售，0或是空是非区域销售 */
func (this *ScitemAddRequest) SetIsAreaSale(value string) {
	this.Set("is_area_sale", value)
}

/* 是否是贵重品 0:不是 1：是 */
func (this *ScitemAddRequest) SetIsCostly(value string) {
	this.Set("is_costly", value)
}

/* 是否危险 0：不是  1：是 */
func (this *ScitemAddRequest) SetIsDangerous(value string) {
	this.Set("is_dangerous", value)
}

/* 是否易碎 0：不是  1：是 */
func (this *ScitemAddRequest) SetIsFriable(value string) {
	this.Set("is_friable", value)
}

/* 是否保质期：0:不是 1：是 */
func (this *ScitemAddRequest) SetIsWarranty(value string) {
	this.Set("is_warranty", value)
}

/* 商品名称 */
func (this *ScitemAddRequest) SetItemName(value string) {
	this.Set("item_name", value)
}

/* 0.普通供应链商品 1.供应链组合主商品 */
func (this *ScitemAddRequest) SetItemType(value string) {
	this.Set("item_type", value)
}

/* 长度 单位：mm */
func (this *ScitemAddRequest) SetLength(value string) {
	this.Set("length", value)
}

/* 0:液体，1：粉体，2：固体 */
func (this *ScitemAddRequest) SetMatterStatus(value string) {
	this.Set("matter_status", value)
}

/* 商家编码 */
func (this *ScitemAddRequest) SetOuterCode(value string) {
	this.Set("outer_code", value)
}

/* 价格 单位：分 */
func (this *ScitemAddRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 商品属性格式是  p1:v1,p2:v2,p3:v3 */
func (this *ScitemAddRequest) SetProperties(value string) {
	this.Set("properties", value)
}

/* remark */
func (this *ScitemAddRequest) SetRemark(value string) {
	this.Set("remark", value)
}

/* spuId或是cspuid */
func (this *ScitemAddRequest) SetSpuId(value string) {
	this.Set("spu_id", value)
}

/* 体积：立方厘米 */
func (this *ScitemAddRequest) SetVolume(value string) {
	this.Set("volume", value)
}

/* 重量 单位：g */
func (this *ScitemAddRequest) SetWeight(value string) {
	this.Set("weight", value)
}

/* 宽 单位：mm */
func (this *ScitemAddRequest) SetWidth(value string) {
	this.Set("width", value)
}

/* 仓储商编码 */
func (this *ScitemAddRequest) SetWmsCode(value string) {
	this.Set("wms_code", value)
}

type ScitemAddResponse struct {
	*ErrorResponse          `json:"error_response,omitempty"`
	ScitemAddResponseResult `json:"scitem_add_response"`
}
type ScitemAddResponseResult struct {
	/* 后台商品信息 */
	ScItem *ScItem `json:"sc_item"`
}

/*taobao.scitem.get*/
type ScitemGetRequest struct {
	values url.Values
}

func (this *ScitemGetRequest) GetApiMethodName() string {
	return "taobao.scitem.get"
}
func (this *ScitemGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ScitemGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品id */
func (this *ScitemGetRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

type ScitemGetResponse struct {
	*ErrorResponse          `json:"error_response,omitempty"`
	ScitemGetResponseResult `json:"scitem_get_response"`
}
type ScitemGetResponseResult struct {
	/* 后端商品 */
	ScItem *ScItem `json:"sc_item"`
}

/*taobao.scitem.map.add*/
type ScitemMapAddRequest struct {
	values url.Values
}

func (this *ScitemMapAddRequest) GetApiMethodName() string {
	return "taobao.scitem.map.add"
}
func (this *ScitemMapAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ScitemMapAddRequest) GetValues() url.Values {
	return this.values
}

/* 前台ic商品id */
func (this *ScitemMapAddRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 默认值为false
true:进行高级校验,前端商品或SKU的商家编码必须与后端商品的商家编码一致，否则会拒绝关联
false:不进行高级校验 */
func (this *ScitemMapAddRequest) SetNeedCheck(value string) {
	this.Set("need_check", value)
}

/* sc_item_id和outer_code 其中一个不能为空 */
func (this *ScitemMapAddRequest) SetOuterCode(value string) {
	this.Set("outer_code", value)
}

/* sc_item_id和outer_code 其中一个不能为空 */
func (this *ScitemMapAddRequest) SetScItemId(value string) {
	this.Set("sc_item_id", value)
}

/* 前台ic商品skuid */
func (this *ScitemMapAddRequest) SetSkuId(value string) {
	this.Set("sku_id", value)
}

type ScitemMapAddResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	ScitemMapAddResponseResult `json:"scitem_map_add_response"`
}
type ScitemMapAddResponseResult struct {
	/* 接口调用返回结果信息：商家编码 */
	OuterCode string `json:"outer_code"`
}

/*taobao.scitem.map.batch.query*/
type ScitemMapBatchQueryRequest struct {
	values url.Values
}

func (this *ScitemMapBatchQueryRequest) GetApiMethodName() string {
	return "taobao.scitem.map.batch.query"
}
func (this *ScitemMapBatchQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ScitemMapBatchQueryRequest) GetValues() url.Values {
	return this.values
}

/* 后端商品的商家编码 */
func (this *ScitemMapBatchQueryRequest) SetOuterCode(value string) {
	this.Set("outer_code", value)
}

/* 当前页码数 */
func (this *ScitemMapBatchQueryRequest) SetPageIndex(value string) {
	this.Set("page_index", value)
}

/* 分页记录个数，如果用户输入的记录数大于50，则一页显示50条记录 */
func (this *ScitemMapBatchQueryRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 后端商品id */
func (this *ScitemMapBatchQueryRequest) SetScItemId(value string) {
	this.Set("sc_item_id", value)
}

type ScitemMapBatchQueryResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	ScitemMapBatchQueryResponseResult `json:"scitem_map_batch_query_response"`
}
type ScitemMapBatchQueryResponseResult struct {
	/* 后端商品映射列表 */
	ScItemMaps []*ScItemMap `json:"sc_item_maps"`
}

/*taobao.scitem.map.delete*/
type ScitemMapDeleteRequest struct {
	values url.Values
}

func (this *ScitemMapDeleteRequest) GetApiMethodName() string {
	return "taobao.scitem.map.delete"
}
func (this *ScitemMapDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ScitemMapDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 后台商品ID */
func (this *ScitemMapDeleteRequest) SetScItemId(value string) {
	this.Set("sc_item_id", value)
}

/* 店铺用户nick。 如果该参数为空则删除后端商品与当前调用人的商品映射关系;如果不为空则删除指定用户与后端商品的映射关系 */
func (this *ScitemMapDeleteRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type ScitemMapDeleteResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	ScitemMapDeleteResponseResult `json:"scitem_map_delete_response"`
}
type ScitemMapDeleteResponseResult struct {
	/* 失效条数 */
	Module int64 `json:"module"`
}

/*taobao.scitem.map.query*/
type ScitemMapQueryRequest struct {
	values url.Values
}

func (this *ScitemMapQueryRequest) GetApiMethodName() string {
	return "taobao.scitem.map.query"
}
func (this *ScitemMapQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ScitemMapQueryRequest) GetValues() url.Values {
	return this.values
}

/* map_type为1：前台ic商品id
map_type为2：分销productid */
func (this *ScitemMapQueryRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* map_type为1：前台ic商品skuid
map_type为2：分销商品的skuid */
func (this *ScitemMapQueryRequest) SetSkuId(value string) {
	this.Set("sku_id", value)
}

type ScitemMapQueryResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	ScitemMapQueryResponseResult `json:"scitem_map_query_response"`
}
type ScitemMapQueryResponseResult struct {
	/* 后端商品映射列表 */
	ScItemMaps []*ScItemMap `json:"sc_item_maps"`
}

/*taobao.scitem.outercode.get*/
type ScitemOutercodeGetRequest struct {
	values url.Values
}

func (this *ScitemOutercodeGetRequest) GetApiMethodName() string {
	return "taobao.scitem.outercode.get"
}
func (this *ScitemOutercodeGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ScitemOutercodeGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品编码 */
func (this *ScitemOutercodeGetRequest) SetOuterCode(value string) {
	this.Set("outer_code", value)
}

type ScitemOutercodeGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	ScitemOutercodeGetResponseResult `json:"scitem_outercode_get_response"`
}
type ScitemOutercodeGetResponseResult struct {
	/* 后台商品 */
	ScItem *ScItem `json:"sc_item"`
}

/*taobao.scitem.query*/
type ScitemQueryRequest struct {
	values url.Values
}

func (this *ScitemQueryRequest) GetApiMethodName() string {
	return "taobao.scitem.query"
}
func (this *ScitemQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ScitemQueryRequest) GetValues() url.Values {
	return this.values
}

/* 条形码 */
func (this *ScitemQueryRequest) SetBarCode(value string) {
	this.Set("bar_code", value)
}

/* 商品名称 */
func (this *ScitemQueryRequest) SetItemName(value string) {
	this.Set("item_name", value)
}

/* ITEM类型(只允许输入以下英文或空) NORMAL 0:普通商品; COMBINE 1:是否是组合商品 DISTRIBUTION */
func (this *ScitemQueryRequest) SetItemType(value string) {
	this.Set("item_type", value)
}

/* 商家给商品的一个编码 */
func (this *ScitemQueryRequest) SetOuterCode(value string) {
	this.Set("outer_code", value)
}

/* 当前页码数 */
func (this *ScitemQueryRequest) SetPageIndex(value string) {
	this.Set("page_index", value)
}

/* 分页记录个数，如果用户输入的记录数大于50，则一页显示50条记录 */
func (this *ScitemQueryRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 仓库编码 */
func (this *ScitemQueryRequest) SetWmsCode(value string) {
	this.Set("wms_code", value)
}

type ScitemQueryResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	ScitemQueryResponseResult `json:"scitem_query_response"`
}
type ScitemQueryResponseResult struct {
	/* 当前所在页数 */
	PageIndex int64 `json:"page_index"`
	/* 返回商品列表的页数 */
	PageSize int64 `json:"page_size"`
	/* 分页 */
	QueryPagination *QueryPagination `json:"query_pagination"`
	/* List<ScItemDO> */
	ScItemList []*ScItem `json:"sc_item_list"`
	/* 商品条数 */
	TotalPage int64 `json:"total_page"`
}

/*taobao.scitem.update*/
type ScitemUpdateRequest struct {
	values url.Values
}

func (this *ScitemUpdateRequest) GetApiMethodName() string {
	return "taobao.scitem.update"
}
func (this *ScitemUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ScitemUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 条形码 */
func (this *ScitemUpdateRequest) SetBarCode(value string) {
	this.Set("bar_code", value)
}

/* 品牌id */
func (this *ScitemUpdateRequest) SetBrandId(value string) {
	this.Set("brand_id", value)
}

/* brand_Name */
func (this *ScitemUpdateRequest) SetBrandName(value string) {
	this.Set("brand_name", value)
}

/* 高 单位：mm */
func (this *ScitemUpdateRequest) SetHeight(value string) {
	this.Set("height", value)
}

/* 1表示区域销售，0或是空是非区域销售 */
func (this *ScitemUpdateRequest) SetIsAreaSale(value string) {
	this.Set("is_area_sale", value)
}

/* 是否是贵重品 0:不是 1：是 */
func (this *ScitemUpdateRequest) SetIsCostly(value string) {
	this.Set("is_costly", value)
}

/* 是否危险 0：不是  0：是 */
func (this *ScitemUpdateRequest) SetIsDangerous(value string) {
	this.Set("is_dangerous", value)
}

/* 是否易碎 0：不是  1：是 */
func (this *ScitemUpdateRequest) SetIsFriable(value string) {
	this.Set("is_friable", value)
}

/* 是否保质期：0:不是 1：是 */
func (this *ScitemUpdateRequest) SetIsWarranty(value string) {
	this.Set("is_warranty", value)
}

/* 后端商品ID，跟outer_code必须指定一个 */
func (this *ScitemUpdateRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 商品名称 */
func (this *ScitemUpdateRequest) SetItemName(value string) {
	this.Set("item_name", value)
}

/* 0.普通供应链商品 1.供应链组合主商品 */
func (this *ScitemUpdateRequest) SetItemType(value string) {
	this.Set("item_type", value)
}

/* 长度 单位：mm */
func (this *ScitemUpdateRequest) SetLength(value string) {
	this.Set("length", value)
}

/* 0:液体，1：粉体，2：固体 */
func (this *ScitemUpdateRequest) SetMatterStatus(value string) {
	this.Set("matter_status", value)
}

/* 商家编码，跟item_id必须指定一个 */
func (this *ScitemUpdateRequest) SetOuterCode(value string) {
	this.Set("outer_code", value)
}

/* price */
func (this *ScitemUpdateRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* remark */
func (this *ScitemUpdateRequest) SetRemark(value string) {
	this.Set("remark", value)
}

/* 移除商品属性P列表,P由系统分配：p1；p2 */
func (this *ScitemUpdateRequest) SetRemoveProperties(value string) {
	this.Set("remove_properties", value)
}

/* 淘宝SKU产品级编码CSPU ID */
func (this *ScitemUpdateRequest) SetSpuId(value string) {
	this.Set("spu_id", value)
}

/* 需要更新的商品属性格式是  p1:v1,p2:v2,p3:v3 */
func (this *ScitemUpdateRequest) SetUpdateProperties(value string) {
	this.Set("update_properties", value)
}

/* 体积：立方厘米 */
func (this *ScitemUpdateRequest) SetVolume(value string) {
	this.Set("volume", value)
}

/* weight */
func (this *ScitemUpdateRequest) SetWeight(value string) {
	this.Set("weight", value)
}

/* 宽 单位：mm */
func (this *ScitemUpdateRequest) SetWidth(value string) {
	this.Set("width", value)
}

/* 仓储商编码 */
func (this *ScitemUpdateRequest) SetWmsCode(value string) {
	this.Set("wms_code", value)
}

type ScitemUpdateResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	ScitemUpdateResponseResult `json:"scitem_update_response"`
}
type ScitemUpdateResponseResult struct {
	/* 更新商品数量,1表示成功更新了一条数据，0：表示未找到匹配的数据 */
	UpdateRows int64 `json:"update_rows"`
}

/*taobao.wangwang.abstract.addword*/
type WangwangAbstractAddwordRequest struct {
	values url.Values
}

func (this *WangwangAbstractAddwordRequest) GetApiMethodName() string {
	return "taobao.wangwang.abstract.addword"
}
func (this *WangwangAbstractAddwordRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangAbstractAddwordRequest) GetValues() url.Values {
	return this.values
}

/* 传入参数的字符集 */
func (this *WangwangAbstractAddwordRequest) SetCharset(value string) {
	this.Set("charset", value)
}

/* 关键词，长度大于0<br /> 支持最大长度为：12<br /> 支持的最大列表长度为：12 */
func (this *WangwangAbstractAddwordRequest) SetWord(value string) {
	this.Set("word", value)
}

type WangwangAbstractAddwordResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	WangwangAbstractAddwordResponseResult `json:"wangwang_abstract_addword_response"`
}
type WangwangAbstractAddwordResponseResult struct {
	/* 例如单词长度太长等，当ret_code=-1时才有这项 */
	ErrorMsg string `json:"error_msg"`
	/* 0或-1，表示错误或正确，错误时有错误信息 */
	RetCode int64 `json:"ret_code"`
}

/*taobao.wangwang.abstract.deleteword*/
type WangwangAbstractDeletewordRequest struct {
	values url.Values
}

func (this *WangwangAbstractDeletewordRequest) GetApiMethodName() string {
	return "taobao.wangwang.abstract.deleteword"
}
func (this *WangwangAbstractDeletewordRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangAbstractDeletewordRequest) GetValues() url.Values {
	return this.values
}

/* 传入参数的字符集 */
func (this *WangwangAbstractDeletewordRequest) SetCharset(value string) {
	this.Set("charset", value)
}

/* 关键词，长度大于0<br /> 支持最大长度为：12<br /> 支持的最大列表长度为：12 */
func (this *WangwangAbstractDeletewordRequest) SetWord(value string) {
	this.Set("word", value)
}

type WangwangAbstractDeletewordResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	WangwangAbstractDeletewordResponseResult `json:"wangwang_abstract_deleteword_response"`
}
type WangwangAbstractDeletewordResponseResult struct {
	/* 例如单词长度太长等 */
	ErrorMsg string `json:"error_msg"`
	/* 0或-1，表示错误或正确，错误时有错误信息 */
	RetCode int64 `json:"ret_code"`
}

/*taobao.wangwang.abstract.getwordlist*/
type WangwangAbstractGetwordlistRequest struct {
	values url.Values
}

func (this *WangwangAbstractGetwordlistRequest) GetApiMethodName() string {
	return "taobao.wangwang.abstract.getwordlist"
}
func (this *WangwangAbstractGetwordlistRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangAbstractGetwordlistRequest) GetValues() url.Values {
	return this.values
}

/* 传入参数的字符集 */
func (this *WangwangAbstractGetwordlistRequest) SetCharset(value string) {
	this.Set("charset", value)
}

type WangwangAbstractGetwordlistResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	WangwangAbstractGetwordlistResponseResult `json:"wangwang_abstract_getwordlist_response"`
}
type WangwangAbstractGetwordlistResponseResult struct {
	/* 例如单词长度太长等，ret_code=-1才有 */
	ErrorMsg string `json:"error_msg"`
	/* 0或-1，表示错误或正确，错误时有错误信息 */
	RetCode int64 `json:"ret_code"`
	/* 关键词列表，ret_code=0才有 */
	WordLists []*WordList `json:"word_lists"`
}

/*taobao.wangwang.abstract.initialize*/
type WangwangAbstractInitializeRequest struct {
	values url.Values
}

func (this *WangwangAbstractInitializeRequest) GetApiMethodName() string {
	return "taobao.wangwang.abstract.initialize"
}
func (this *WangwangAbstractInitializeRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangAbstractInitializeRequest) GetValues() url.Values {
	return this.values
}

/* 传入参数的字符集 */
func (this *WangwangAbstractInitializeRequest) SetCharset(value string) {
	this.Set("charset", value)
}

type WangwangAbstractInitializeResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	WangwangAbstractInitializeResponseResult `json:"wangwang_abstract_initialize_response"`
}
type WangwangAbstractInitializeResponseResult struct {
	/* 当ret_code=-1时这个变量才有 */
	ErrorMsg string `json:"error_msg"`
	/* 0或-1表示成功或失败 */
	RetCode int64 `json:"ret_code"`
}

/*taobao.wangwang.abstract.logquery*/
type WangwangAbstractLogqueryRequest struct {
	values url.Values
}

func (this *WangwangAbstractLogqueryRequest) GetApiMethodName() string {
	return "taobao.wangwang.abstract.logquery"
}
func (this *WangwangAbstractLogqueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangAbstractLogqueryRequest) GetValues() url.Values {
	return this.values
}

/* 传入参数的字符集 */
func (this *WangwangAbstractLogqueryRequest) SetCharset(value string) {
	this.Set("charset", value)
}

/* 获取记录条数，默认值是1000<br /> 支持最小值为：1 */
func (this *WangwangAbstractLogqueryRequest) SetCount(value string) {
	this.Set("count", value)
}

/* 东八区时间 */
func (this *WangwangAbstractLogqueryRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 卖家id，有cntaobao前缀 */
func (this *WangwangAbstractLogqueryRequest) SetFromId(value string) {
	this.Set("from_id", value)
}

/* 设置了这个值，那么聊天记录就从这个点开始查询 */
func (this *WangwangAbstractLogqueryRequest) SetNextKey(value string) {
	this.Set("next_key", value)
}

/* 东八区时间 */
func (this *WangwangAbstractLogqueryRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

/* 买家id，有cntaobao前缀 */
func (this *WangwangAbstractLogqueryRequest) SetToId(value string) {
	this.Set("to_id", value)
}

type WangwangAbstractLogqueryResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	WangwangAbstractLogqueryResponseResult `json:"wangwang_abstract_logquery_response"`
}
type WangwangAbstractLogqueryResponseResult struct {
	/* 例如单词长度太长等。
	当ret_code不为0时这个值存在。 */
	ErrorMsg string `json:"error_msg"`
	/* 卖家id */
	FromId string `json:"from_id"`
	/* 0或1
	其他返回时，是由于用户名等参数设置有误等引起的远端服务错误 */
	IsSliced int64 `json:"is_sliced"`
	/* 消息列表 */
	MsgLists []*MsgList `json:"msg_lists"`
	/* 当is_sliced为1时有效 */
	NextKey string `json:"next_key"`
	/* 0或-1，表示错误或正确，错误时有错误信息.
	为-1时就只有error_msg字段是有效的。 */
	RetCode int64 `json:"ret_code"`
	/* 买家id */
	ToId string `json:"to_id"`
}

/*taobao.wangwang.eservice.accountstatus.get*/
type WangwangEserviceAccountstatusGetRequest struct {
	values url.Values
}

func (this *WangwangEserviceAccountstatusGetRequest) GetApiMethodName() string {
	return "taobao.wangwang.eservice.accountstatus.get"
}
func (this *WangwangEserviceAccountstatusGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangEserviceAccountstatusGetRequest) GetValues() url.Values {
	return this.values
}

/* 的起始时间。</br>
格式为： YYYY-mm-dd_HH:MM:SS </br>
注：</br>
1. 查询时间必须在30天之内。
2. 起始时间和结束时间间隔不超过7天。<br /> 支持最大长度为：19<br /> 支持的最大列表长度为：19 */
func (this *WangwangEserviceAccountstatusGetRequest) SetBtime(value string) {
	this.Set("btime", value)
}

/* 结束时间 。 </br>
格式为：YYYY-mm-dd_HH:MM:SS </br>
注：</br>
1. 查询时间必须在30天之内。
2. 起始时间和结束时间间隔不超过7天。<br /> 支持最大长度为：19<br /> 支持的最大列表长度为：19 */
func (this *WangwangEserviceAccountstatusGetRequest) SetEtime(value string) {
	this.Set("etime", value)
}

/* 查询账号（序列）。 需要带前缀（如cntaobao）。</br>

注： </br>
1. uid中所有账号必须为授权店铺的店铺内账号。</br>
2. 如果传入多个账号，账号与账号之间以","分割。最多30个账号。每个账号的最大长度是64。</br>
3. 由于后端依然是顺序请求，所以该接口的响应时长是会随uid的数量线性增长，即uid数量越多，调用时间越长。请合理使用<br /> 支持最大长度为：1920<br /> 支持的最大列表长度为：1920 */
func (this *WangwangEserviceAccountstatusGetRequest) SetUid(value string) {
	this.Set("uid", value)
}

type WangwangEserviceAccountstatusGetResponse struct {
	*ErrorResponse                                 `json:"error_response,omitempty"`
	WangwangEserviceAccountstatusGetResponseResult `json:"wangwang_eservice_accountstatus_get_response"`
}
type WangwangEserviceAccountstatusGetResponseResult struct {
	/* 账号操作记录列表。 */
	AccountInfos []*AccountInfo `json:"account_infos"`
	/* 接口调用返回码。 0：成功。100：部分成功。 */
	RetCode int64 `json:"ret_code"`
}

/*taobao.wangwang.eservice.avgwaittime.get*/
type WangwangEserviceAvgwaittimeGetRequest struct {
	values url.Values
}

func (this *WangwangEserviceAvgwaittimeGetRequest) GetApiMethodName() string {
	return "taobao.wangwang.eservice.avgwaittime.get"
}
func (this *WangwangEserviceAvgwaittimeGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangEserviceAvgwaittimeGetRequest) GetValues() url.Values {
	return this.values
}

/* 结束时间 */
func (this *WangwangEserviceAvgwaittimeGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 客服人员id：cntaobao+淘宝nick，例如cntaobaotest<br /> 支持最大长度为：1900<br /> 支持的最大列表长度为：1900 */
func (this *WangwangEserviceAvgwaittimeGetRequest) SetServiceStaffId(value string) {
	this.Set("service_staff_id", value)
}

/* 开始时间 */
func (this *WangwangEserviceAvgwaittimeGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type WangwangEserviceAvgwaittimeGetResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	WangwangEserviceAvgwaittimeGetResponseResult `json:"wangwang_eservice_avgwaittime_get_response"`
}
type WangwangEserviceAvgwaittimeGetResponseResult struct {
	/* 平均等待时长 */
	WaitingTimeListOnDays []*WaitingTimesOnDay `json:"waiting_time_list_on_days"`
}

/*taobao.wangwang.eservice.chatpeers.get*/
type WangwangEserviceChatpeersGetRequest struct {
	values url.Values
}

func (this *WangwangEserviceChatpeersGetRequest) GetApiMethodName() string {
	return "taobao.wangwang.eservice.chatpeers.get"
}
func (this *WangwangEserviceChatpeersGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangEserviceChatpeersGetRequest) GetValues() url.Values {
	return this.values
}

/* 字符集 */
func (this *WangwangEserviceChatpeersGetRequest) SetCharset(value string) {
	this.Set("charset", value)
}

/* 聊天用户ID：cntaobao+淘宝nick，例如cntaobaotest */
func (this *WangwangEserviceChatpeersGetRequest) SetChatId(value string) {
	this.Set("chat_id", value)
}

/* 查询结束日期。如2010-03-24，与起始日期跨度不能超过7天 */
func (this *WangwangEserviceChatpeersGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 查询起始日期。如2010-02-01，与当前日期间隔小于1个月。 */
func (this *WangwangEserviceChatpeersGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type WangwangEserviceChatpeersGetResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	WangwangEserviceChatpeersGetResponseResult `json:"wangwang_eservice_chatpeers_get_response"`
}
type WangwangEserviceChatpeersGetResponseResult struct {
	/* 聊天对象ID列表 */
	Chatpeers []*Chatpeer `json:"chatpeers"`
	/* 成员数目。 */
	Count int64 `json:"count"`
	/* 返回码：
	10000:成功；

	60000：时间非法，包括1)时间段超过7天,或2)起始时间距今超过30天，或3)时间格式不对；

	50000：聊天用户ID不是该店铺的帐号；

	40000：系统错误，包括必填参数为空。 */
	Ret int64 `json:"ret"`
}

/*taobao.wangwang.eservice.evals.get*/
type WangwangEserviceEvalsGetRequest struct {
	values url.Values
}

func (this *WangwangEserviceEvalsGetRequest) GetApiMethodName() string {
	return "taobao.wangwang.eservice.evals.get"
}
func (this *WangwangEserviceEvalsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangEserviceEvalsGetRequest) GetValues() url.Values {
	return this.values
}

/* 结束时间 */
func (this *WangwangEserviceEvalsGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 想要查询的账号列表 */
func (this *WangwangEserviceEvalsGetRequest) SetServiceStaffId(value string) {
	this.Set("service_staff_id", value)
}

/* 开始时间 */
func (this *WangwangEserviceEvalsGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type WangwangEserviceEvalsGetResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	WangwangEserviceEvalsGetResponseResult `json:"wangwang_eservice_evals_get_response"`
}
type WangwangEserviceEvalsGetResponseResult struct {
	/* 0表示成功 */
	ResultCode int64 `json:"result_code"`
	/* 总条数 */
	ResultCount int64 `json:"result_count"`
	/* 评价具体数据 */
	StaffEvalDetails []*EvalDetail `json:"staff_eval_details"`
}

/*taobao.wangwang.eservice.evaluation.get*/
type WangwangEserviceEvaluationGetRequest struct {
	values url.Values
}

func (this *WangwangEserviceEvaluationGetRequest) GetApiMethodName() string {
	return "taobao.wangwang.eservice.evaluation.get"
}
func (this *WangwangEserviceEvaluationGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangEserviceEvaluationGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询结束日期 */
func (this *WangwangEserviceEvaluationGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 客服人员id：cntaobao+淘宝nick，例如cntaobaotest<br /> 支持最大长度为：1900<br /> 支持的最大列表长度为：1900 */
func (this *WangwangEserviceEvaluationGetRequest) SetServiceStaffId(value string) {
	this.Set("service_staff_id", value)
}

/* 查询开始日期 */
func (this *WangwangEserviceEvaluationGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type WangwangEserviceEvaluationGetResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	WangwangEserviceEvaluationGetResponseResult `json:"wangwang_eservice_evaluation_get_response"`
}
type WangwangEserviceEvaluationGetResponseResult struct {
	/* 客服平均统计列表 */
	StaffEvalStatOnDays []*StaffEvalStatOnDay `json:"staff_eval_stat_on_days"`
}

/*taobao.wangwang.eservice.groupmember.get*/
type WangwangEserviceGroupmemberGetRequest struct {
	values url.Values
}

func (this *WangwangEserviceGroupmemberGetRequest) GetApiMethodName() string {
	return "taobao.wangwang.eservice.groupmember.get"
}
func (this *WangwangEserviceGroupmemberGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangEserviceGroupmemberGetRequest) GetValues() url.Values {
	return this.values
}

/* 主帐号ID：cntaobao+淘宝nick，例如cntaobaotest<br /> 支持最大长度为：128<br /> 支持的最大列表长度为：128 */
func (this *WangwangEserviceGroupmemberGetRequest) SetManagerId(value string) {
	this.Set("manager_id", value)
}

type WangwangEserviceGroupmemberGetResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	WangwangEserviceGroupmemberGetResponseResult `json:"wangwang_eservice_groupmember_get_response"`
}
type WangwangEserviceGroupmemberGetResponseResult struct {
	/* 组及其成员列表 */
	GroupMemberList []*GroupMember `json:"group_member_list"`
}

/*taobao.wangwang.eservice.loginlogs.get*/
type WangwangEserviceLoginlogsGetRequest struct {
	values url.Values
}

func (this *WangwangEserviceLoginlogsGetRequest) GetApiMethodName() string {
	return "taobao.wangwang.eservice.loginlogs.get"
}
func (this *WangwangEserviceLoginlogsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangEserviceLoginlogsGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询登录日志的结束时间，必须按示例的格式，否则会返回错误 */
func (this *WangwangEserviceLoginlogsGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 需要查询登录日志的账号列表 */
func (this *WangwangEserviceLoginlogsGetRequest) SetServiceStaffId(value string) {
	this.Set("service_staff_id", value)
}

/* 查询登录日志的开始日期，必须按示例的格式，否则会返回错误 */
func (this *WangwangEserviceLoginlogsGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type WangwangEserviceLoginlogsGetResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	WangwangEserviceLoginlogsGetResponseResult `json:"wangwang_eservice_loginlogs_get_response"`
}
type WangwangEserviceLoginlogsGetResponseResult struct {
	/* 在指定时间段登录日志的条数 */
	Count int64 `json:"count"`
	/* 登录日志具体信息 */
	Loginlogs []*LoginLog `json:"loginlogs"`
	/* 被查询的用户id */
	UserId string `json:"user_id"`
}

/*taobao.wangwang.eservice.newevals.get*/
type WangwangEserviceNewevalsGetRequest struct {
	values url.Values
}

func (this *WangwangEserviceNewevalsGetRequest) GetApiMethodName() string {
	return "taobao.wangwang.eservice.newevals.get"
}
func (this *WangwangEserviceNewevalsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangEserviceNewevalsGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询登录日志的开始日期，必须按示例的格式，否则会返回错误；
开始时间不能在当前时间30天前，开始时间和结束时间的间隔不能超过7天；
开始时间不能超过当前系统时间 */
func (this *WangwangEserviceNewevalsGetRequest) SetBtime(value string) {
	this.Set("btime", value)
}

/* 查询登录日志的结束时间，必须按示例的格式，否则会返回错误；
结束时间不能小于开始时间，结束时间和开始时间的间隔不能超过7天 */
func (this *WangwangEserviceNewevalsGetRequest) SetEtime(value string) {
	this.Set("etime", value)
}

/* 需要查询登录日志的账号列表，多个id之间用逗号隔开，每次查询的id数不能超过30个 */
func (this *WangwangEserviceNewevalsGetRequest) SetQueryIds(value string) {
	this.Set("query_ids", value)
}

type WangwangEserviceNewevalsGetResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	WangwangEserviceNewevalsGetResponseResult `json:"wangwang_eservice_newevals_get_response"`
}
type WangwangEserviceNewevalsGetResponseResult struct {
	/* 0表示成功 */
	ResultCode int64 `json:"result_code"`
	/* 总条数 */
	ResultCount int64 `json:"result_count"`
	/* 评价具体数据 */
	StaffEvalDetails []*EvalDetail `json:"staff_eval_details"`
}

/*taobao.wangwang.eservice.newloginlogs.get*/
type WangwangEserviceNewloginlogsGetRequest struct {
	values url.Values
}

func (this *WangwangEserviceNewloginlogsGetRequest) GetApiMethodName() string {
	return "taobao.wangwang.eservice.newloginlogs.get"
}
func (this *WangwangEserviceNewloginlogsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangEserviceNewloginlogsGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询登录日志的开始日期，必须按示例的格式，否则会返回错误；
开始时间不能在当前时间30天前，开始时间和结束时间的间隔不能超过7天；
开始时间不能超过当前系统时间 */
func (this *WangwangEserviceNewloginlogsGetRequest) SetBtime(value string) {
	this.Set("btime", value)
}

/* 查询登录日志的结束时间，必须按示例的格式，否则会返回错误；
结束时间不能小于开始时间，结束时间和开始时间的间隔不能超过7天 */
func (this *WangwangEserviceNewloginlogsGetRequest) SetEtime(value string) {
	this.Set("etime", value)
}

/* 需要查询登录日志的账号列表，多个id之间用逗号隔开，每次查询的id数不能超过30个 */
func (this *WangwangEserviceNewloginlogsGetRequest) SetQueryIds(value string) {
	this.Set("query_ids", value)
}

type WangwangEserviceNewloginlogsGetResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	WangwangEserviceNewloginlogsGetResponseResult `json:"wangwang_eservice_newloginlogs_get_response"`
}
type WangwangEserviceNewloginlogsGetResponseResult struct {
	/* 用户登录日志 */
	Userloginlogs []*UserLoginlog `json:"userloginlogs"`
}

/*taobao.wangwang.eservice.noreplynum.get*/
type WangwangEserviceNoreplynumGetRequest struct {
	values url.Values
}

func (this *WangwangEserviceNoreplynumGetRequest) GetApiMethodName() string {
	return "taobao.wangwang.eservice.noreplynum.get"
}
func (this *WangwangEserviceNoreplynumGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangEserviceNoreplynumGetRequest) GetValues() url.Values {
	return this.values
}

/* 结束日期 */
func (this *WangwangEserviceNoreplynumGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 客服人员id：cntaobao+淘宝nick，例如cntaobaotest<br /> 支持最大长度为：1900<br /> 支持的最大列表长度为：1900 */
func (this *WangwangEserviceNoreplynumGetRequest) SetServiceStaffId(value string) {
	this.Set("service_staff_id", value)
}

/* 开始日期 */
func (this *WangwangEserviceNoreplynumGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type WangwangEserviceNoreplynumGetResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	WangwangEserviceNoreplynumGetResponseResult `json:"wangwang_eservice_noreplynum_get_response"`
}
type WangwangEserviceNoreplynumGetResponseResult struct {
	/* 未回复统计列表 */
	NonReplyStatOnDays []*NonReplyStatOnDay `json:"non_reply_stat_on_days"`
}

/*taobao.wangwang.eservice.onlinetime.get*/
type WangwangEserviceOnlinetimeGetRequest struct {
	values url.Values
}

func (this *WangwangEserviceOnlinetimeGetRequest) GetApiMethodName() string {
	return "taobao.wangwang.eservice.onlinetime.get"
}
func (this *WangwangEserviceOnlinetimeGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangEserviceOnlinetimeGetRequest) GetValues() url.Values {
	return this.values
}

/* 结束日期 */
func (this *WangwangEserviceOnlinetimeGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 客服人员id：cntaobao+淘宝nick，例如cntaobaotest */
func (this *WangwangEserviceOnlinetimeGetRequest) SetServiceStaffId(value string) {
	this.Set("service_staff_id", value)
}

/* 开始日期 */
func (this *WangwangEserviceOnlinetimeGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type WangwangEserviceOnlinetimeGetResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	WangwangEserviceOnlinetimeGetResponseResult `json:"wangwang_eservice_onlinetime_get_response"`
}
type WangwangEserviceOnlinetimeGetResponseResult struct {
	/* 客服在线时长（按天统计，排列） */
	OnlineTimesListOnDays []*OnlineTimesOnDay `json:"online_times_list_on_days"`
}

/*taobao.wangwang.eservice.receivenum.get*/
type WangwangEserviceReceivenumGetRequest struct {
	values url.Values
}

func (this *WangwangEserviceReceivenumGetRequest) GetApiMethodName() string {
	return "taobao.wangwang.eservice.receivenum.get"
}
func (this *WangwangEserviceReceivenumGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangEserviceReceivenumGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询接待人数的结束日期 时间精确到日 时分秒可以直接传00:00:00 */
func (this *WangwangEserviceReceivenumGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 客服人员id：cntaobao+淘宝nick，例如cntaobaotest<br /> 支持最大长度为：1900<br /> 支持的最大列表长度为：1900 */
func (this *WangwangEserviceReceivenumGetRequest) SetServiceStaffId(value string) {
	this.Set("service_staff_id", value)
}

/* 查询接待人数的开始日期 时间精确到日 时分秒可直接传 00:00:00 */
func (this *WangwangEserviceReceivenumGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type WangwangEserviceReceivenumGetResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	WangwangEserviceReceivenumGetResponseResult `json:"wangwang_eservice_receivenum_get_response"`
}
type WangwangEserviceReceivenumGetResponseResult struct {
	/* 客服回复列表，按天统计，排列 */
	ReplyStatListOnDays []*ReplyStatOnDay `json:"reply_stat_list_on_days"`
}

/*taobao.wangwang.eservice.streamweigths.get*/
type WangwangEserviceStreamweigthsGetRequest struct {
	values url.Values
}

func (this *WangwangEserviceStreamweigthsGetRequest) GetApiMethodName() string {
	return "taobao.wangwang.eservice.streamweigths.get"
}
func (this *WangwangEserviceStreamweigthsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WangwangEserviceStreamweigthsGetRequest) GetValues() url.Values {
	return this.values
}

type WangwangEserviceStreamweigthsGetResponse struct {
	*ErrorResponse                                 `json:"error_response,omitempty"`
	WangwangEserviceStreamweigthsGetResponseResult `json:"wangwang_eservice_streamweigths_get_response"`
}
type WangwangEserviceStreamweigthsGetResponseResult struct {
	/* 0表示返回正确 */
	ResultCode int64 `json:"result_code"`
	/* 返回数据条数 */
	ResultCount int64 `json:"result_count"`
	/* 分流权重数据 */
	StaffStreamWeights []*StreamWeight `json:"staff_stream_weights"`
	/* 返回数据的总权重，返回数据为空的时候没有这个数字 */
	TotalWeight int64 `json:"total_weight"`
}

/*taobao.aitaobao.items.buy.convert*/
type AitaobaoItemsBuyConvertRequest struct {
	values url.Values
}

func (this *AitaobaoItemsBuyConvertRequest) GetApiMethodName() string {
	return "taobao.aitaobao.items.buy.convert"
}
func (this *AitaobaoItemsBuyConvertRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AitaobaoItemsBuyConvertRequest) GetValues() url.Values {
	return this.values
}

/* 是否立即购买 */
func (this *AitaobaoItemsBuyConvertRequest) SetBuyNow(value string) {
	this.Set("buy_now", value)
}

/* 来源 */
func (this *AitaobaoItemsBuyConvertRequest) SetFrom(value string) {
	this.Set("from", value)
}

/* 商品混淆id */
func (this *AitaobaoItemsBuyConvertRequest) SetOpenIid(value string) {
	this.Set("open_iid", value)
}

/* 完整的三段式推广pid */
func (this *AitaobaoItemsBuyConvertRequest) SetPid(value string) {
	this.Set("pid", value)
}

/* 购买数量 */
func (this *AitaobaoItemsBuyConvertRequest) SetQuantity(value string) {
	this.Set("quantity", value)
}

/* sku */
func (this *AitaobaoItemsBuyConvertRequest) SetSkuId(value string) {
	this.Set("sku_id", value)
}

type AitaobaoItemsBuyConvertResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	AitaobaoItemsBuyConvertResponseResult `json:"aitaobao_items_buy_convert_response"`
}
type AitaobaoItemsBuyConvertResponseResult struct {
	/* 淘客商品下单地址 */
	ClickUrl string `json:"click_url"`
}

/*taobao.aitaobao.items.coupon.get*/
type AitaobaoItemsCouponGetRequest struct {
	values url.Values
}

func (this *AitaobaoItemsCouponGetRequest) GetApiMethodName() string {
	return "taobao.aitaobao.items.coupon.get"
}
func (this *AitaobaoItemsCouponGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AitaobaoItemsCouponGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品所在地 */
func (this *AitaobaoItemsCouponGetRequest) SetArea(value string) {
	this.Set("area", value)
}

/* 标准商品后台类目id。该ID可以通过taobao.itemcats.get接口获取到。<br /> 支持最大值为：2147483647 */
func (this *AitaobaoItemsCouponGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 优惠商品类型.1:打折商品,默认值为1 */
func (this *AitaobaoItemsCouponGetRequest) SetCouponType(value string) {
	this.Set("coupon_type", value)
}

/* 设置30天累计推广量（与返回数据中的commission_num字段对应）上限.注：该字段要与start_commissionNum一起使用才生效 */
func (this *AitaobaoItemsCouponGetRequest) SetEndCommissionNum(value string) {
	this.Set("end_commission_num", value)
}

/* 最高佣金比率选项，如：2345表示23.45%。注：要起始佣金比率和最高佣金比率一起设置才有效。 */
func (this *AitaobaoItemsCouponGetRequest) SetEndCommissionRate(value string) {
	this.Set("end_commission_rate", value)
}

/* 最高累计推广佣金选项 */
func (this *AitaobaoItemsCouponGetRequest) SetEndCommissionVolume(value string) {
	this.Set("end_commission_volume", value)
}

/* 设置折扣比例范围上限,如：8000表示80.00%.注：要起始折扣比率和最高折扣比率一起设置才有效 */
func (this *AitaobaoItemsCouponGetRequest) SetEndCouponRate(value string) {
	this.Set("end_coupon_rate", value)
}

/* 可选值和start_credit一样.start_credit的值一定要小于或等于end_credit的值。注：end_credit与start_credit一起使用才生效 */
func (this *AitaobaoItemsCouponGetRequest) SetEndCredit(value string) {
	this.Set("end_credit", value)
}

/* 设置商品总成交量（与返回字段volume对应）上限。 */
func (this *AitaobaoItemsCouponGetRequest) SetEndVolume(value string) {
	this.Set("end_volume", value)
}

/* 需返回的字段列表.可选值:num_iid,title,nick,pic_url,price,commission,commission_rate,commission_num,commission_volume,seller_credit_score,item_location,volume,coupon_price,coupon_rate,coupon_start_time,coupon_end_time,shop_type;字段之间用","分隔 */
func (this *AitaobaoItemsCouponGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 商品标题中包含的关键字. 注意:查询时keyword,cid至少选择其中一个参数 */
func (this *AitaobaoItemsCouponGetRequest) SetKeyword(value string) {
	this.Set("keyword", value)
}

/* 结果页数.1~99 */
func (this *AitaobaoItemsCouponGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页返回结果数.最大每页100 */
func (this *AitaobaoItemsCouponGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 店铺类型.默认all,商城:b,集市:c */
func (this *AitaobaoItemsCouponGetRequest) SetShopType(value string) {
	this.Set("shop_type", value)
}

/* default(默认排序),
price_desc(折扣价格从高到低),
price_asc(折扣价格从低到高),
credit_desc(信用等级从高到低),
credit_asc(信用等级从低到高),
commissionRate_desc(佣金比率从高到低),
commissionRate_asc(佣金比率从低到高),
volume_desc(成交量成高到低), volume_asc(成交量从低到高) */
func (this *AitaobaoItemsCouponGetRequest) SetSort(value string) {
	this.Set("sort", value)
}

/* 设置30天累计推广量（与返回数据中的commission_num字段对应）下限.注：该字段要与end_commissionNum一起使用才生效 */
func (this *AitaobaoItemsCouponGetRequest) SetStartCommissionNum(value string) {
	this.Set("start_commission_num", value)
}

/* 起始佣金比率选项，如：1234表示12.34% */
func (this *AitaobaoItemsCouponGetRequest) SetStartCommissionRate(value string) {
	this.Set("start_commission_rate", value)
}

/* 起始累计推广量佣金.注：返回的数据是30天内累计推广佣金，该字段要与最高累计推广佣金一起使用才生效 */
func (this *AitaobaoItemsCouponGetRequest) SetStartCommissionVolume(value string) {
	this.Set("start_commission_volume", value)
}

/* 设置折扣比例范围下限,如：7000表示70.00% */
func (this *AitaobaoItemsCouponGetRequest) SetStartCouponRate(value string) {
	this.Set("start_coupon_rate", value)
}

/* 卖家信用: 1heart(一心) 2heart (两心) 3heart(三心) 4heart(四心) 5heart(五心) 1diamond(一钻) 2diamond(两钻) 3diamond(三钻) 4diamond(四钻) 5diamond(五钻) 1crown(一冠) 2crown(两冠) 3crown(三冠) 4crown(四冠) 5crown(五冠) 1goldencrown(一黄冠) 2goldencrown(二黄冠) 3goldencrown(三黄冠) 4goldencrown(四黄冠) 5goldencrown(五黄冠) */
func (this *AitaobaoItemsCouponGetRequest) SetStartCredit(value string) {
	this.Set("start_credit", value)
}

/* 设置商品总成交量（与返回字段volume对应）下限。 */
func (this *AitaobaoItemsCouponGetRequest) SetStartVolume(value string) {
	this.Set("start_volume", value)
}

type AitaobaoItemsCouponGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	AitaobaoItemsCouponGetResponseResult `json:"aitaobao_items_coupon_get_response"`
}
type AitaobaoItemsCouponGetResponseResult struct {
	/* 爱淘宝商品对象列表 */
	AitaobaoItems []*AitaobaoItem `json:"aitaobao_items"`
	/* 搜索到符合条件的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.aitaobao.items.detail.convert*/
type AitaobaoItemsDetailConvertRequest struct {
	values url.Values
}

func (this *AitaobaoItemsDetailConvertRequest) GetApiMethodName() string {
	return "taobao.aitaobao.items.detail.convert"
}
func (this *AitaobaoItemsDetailConvertRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AitaobaoItemsDetailConvertRequest) GetValues() url.Values {
	return this.values
}

/* 商品混淆id */
func (this *AitaobaoItemsDetailConvertRequest) SetOpenIid(value string) {
	this.Set("open_iid", value)
}

/* 完整的三段式推广pid */
func (this *AitaobaoItemsDetailConvertRequest) SetPid(value string) {
	this.Set("pid", value)
}

type AitaobaoItemsDetailConvertResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	AitaobaoItemsDetailConvertResponseResult `json:"aitaobao_items_detail_convert_response"`
}
type AitaobaoItemsDetailConvertResponseResult struct {
	/* 淘客商品详情地址 */
	ClickUrl string `json:"click_url"`
}

/*taobao.aitaobao.items.detail.get*/
type AitaobaoItemsDetailGetRequest struct {
	values url.Values
}

func (this *AitaobaoItemsDetailGetRequest) GetApiMethodName() string {
	return "taobao.aitaobao.items.detail.get"
}
func (this *AitaobaoItemsDetailGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AitaobaoItemsDetailGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表.可选值:TaobaokeItemDetail淘宝客商品结构体中的所有字段;字段之间用","分隔。item_detail需要设置到Item模型下的字段,如设置:num_iid,detail_url等; 只设置item_detail,则不返回的Item下的所有信息.注：item结构中的skus、videos、props_name不返回 */
func (this *AitaobaoItemsDetailGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 淘宝客商品数字id串.最大输入10个.格式如:"value1,value2,value3" 用" , "号分隔商品id. */
func (this *AitaobaoItemsDetailGetRequest) SetNumIids(value string) {
	this.Set("num_iids", value)
}

/* 商品track_iid串（带有追踪效果的商品id),最大输入10个,与num_iids必填其一 */
func (this *AitaobaoItemsDetailGetRequest) SetTrackIids(value string) {
	this.Set("track_iids", value)
}

type AitaobaoItemsDetailGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	AitaobaoItemsDetailGetResponseResult `json:"aitaobao_items_detail_get_response"`
}
type AitaobaoItemsDetailGetResponseResult struct {
	/* 爱淘宝商品详情列表 */
	AitaobaoItemDetails []*AitaobaoItemDetail `json:"aitaobao_item_details"`
	/* 搜索到符合条件的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.aitaobao.items.get*/
type AitaobaoItemsGetRequest struct {
	values url.Values
}

func (this *AitaobaoItemsGetRequest) GetApiMethodName() string {
	return "taobao.aitaobao.items.get"
}
func (this *AitaobaoItemsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AitaobaoItemsGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品所在地 */
func (this *AitaobaoItemsGetRequest) SetArea(value string) {
	this.Set("area", value)
}

/* 是否自动发货 */
func (this *AitaobaoItemsGetRequest) SetAutoSend(value string) {
	this.Set("auto_send", value)
}

/* 是否支持抵价券，设置为true表示该商品支持抵价券，设置为false或不设置表示不判断这个属性 */
func (this *AitaobaoItemsGetRequest) SetCashCoupon(value string) {
	this.Set("cash_coupon", value)
}

/* 是否支持货到付款，设置为true表示该商品是支持货到付款，设置为false或不设置表示不判断这个属性 */
func (this *AitaobaoItemsGetRequest) SetCashOndelivery(value string) {
	this.Set("cash_ondelivery", value)
}

/* 标准商品后台类目id。该ID可以通过taobao.itemcats.get接口获取到。<br /> 支持最大值为：2147483647 */
func (this *AitaobaoItemsGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 30天累计推广量（与返回数据中的commission_num字段对应）上限. */
func (this *AitaobaoItemsGetRequest) SetEndCommissionNum(value string) {
	this.Set("end_commissionNum", value)
}

/* 佣金比率上限，如：2345表示23.45%。注：start_commissionRate和end_commissionRate一起设置才有效。 */
func (this *AitaobaoItemsGetRequest) SetEndCommissionRate(value string) {
	this.Set("end_commissionRate", value)
}

/* 可选值和start_credit一样.start_credit的值一定要小于或等于end_credit的值。注：end_credit与start_credit一起使用才生效 */
func (this *AitaobaoItemsGetRequest) SetEndCredit(value string) {
	this.Set("end_credit", value)
}

/* 最高价格 */
func (this *AitaobaoItemsGetRequest) SetEndPrice(value string) {
	this.Set("end_price", value)
}

/* 商品总成交量（与返回字段volume对应）上限。 */
func (this *AitaobaoItemsGetRequest) SetEndTotalnum(value string) {
	this.Set("end_totalnum", value)
}

/* 需返回的字段列表.可选值:num_iid,title,nick,pic_url,price,commission,commission_rate,commission_num,commission_volume,seller_credit_score,item_location,volume
;字段之间用","分隔 */
func (this *AitaobaoItemsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 是否查询消保卖家 */
func (this *AitaobaoItemsGetRequest) SetGuarantee(value string) {
	this.Set("guarantee", value)
}

/* 商品标题中包含的关键字. 注意:查询时keyword,cid至少选择其中一个参数 */
func (this *AitaobaoItemsGetRequest) SetKeyword(value string) {
	this.Set("keyword", value)
}

/* 是否商城的商品，设置为true表示该商品是属于淘宝商城的商品，设置为false或不设置表示不判断这个属性 */
func (this *AitaobaoItemsGetRequest) SetMallItem(value string) {
	this.Set("mall_item", value)
}

/* 是否30天维修，设置为true表示该商品是支持30天维修，设置为false或不设置表示不判断这个属性 */
func (this *AitaobaoItemsGetRequest) SetOnemonthRepair(value string) {
	this.Set("onemonth_repair", value)
}

/* 是否海外商品，设置为true表示该商品是属于海外商品，默认为false */
func (this *AitaobaoItemsGetRequest) SetOverseasItem(value string) {
	this.Set("overseas_item", value)
}

/* 结果页数.1~10<br /> 支持最大值为：10 */
func (this *AitaobaoItemsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页返回结果数.最大每页40<br /> 支持最大值为：400 */
func (this *AitaobaoItemsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 是否如实描述(即:先行赔付)商品，设置为true表示该商品是如实描述的商品，设置为false或不设置表示不判断这个属性 */
func (this *AitaobaoItemsGetRequest) SetRealDescribe(value string) {
	this.Set("real_describe", value)
}

/* 是否支持7天退换，设置为true表示该商品支持7天退换，设置为false或不设置表示不判断这个属性 */
func (this *AitaobaoItemsGetRequest) SetSevendaysReturn(value string) {
	this.Set("sevendays_return", value)
}

/* 默认排序:default

price_desc(价格从高到低)
price_asc(价格从低到高)
credit_desc(信用等级从高到低)
commissionRate_desc(佣金比率从高到低)
commissionRate_asc(佣金比率从低到高)
commissionNum_desc(成交量成高到低)
commissionNum_asc(成交量从低到高)
commissionVolume_desc(总支出佣金从高到低)
commissionVolume_asc(总支出佣金从低到高)
delistTime_desc(商品下架时间从高到低)
delistTime_asc(商品下架时间从低到高) */
func (this *AitaobaoItemsGetRequest) SetSort(value string) {
	this.Set("sort", value)
}

/* 30天累计推广量（与返回数据中的commission_num字段对应）下限.注：该字段要与end_commissionNum一起使用才生效 */
func (this *AitaobaoItemsGetRequest) SetStartCommissionNum(value string) {
	this.Set("start_commissionNum", value)
}

/* 佣金比率下限，如：1234表示12.34% */
func (this *AitaobaoItemsGetRequest) SetStartCommissionRate(value string) {
	this.Set("start_commissionRate", value)
}

/* 卖家信用:

1heart(一心)
2heart (两心)
3heart(三心)
4heart(四心)
5heart(五心)
1diamond(一钻)
2diamond(两钻)
3diamond(三钻)
4diamond(四钻)
5diamond(五钻)
1crown(一冠)
2crown(两冠)
3crown(三冠)
4crown(四冠)
5crown(五冠)
1goldencrown(一黄冠)
2goldencrown(二黄冠)
3goldencrown(三黄冠)
4goldencrown(四黄冠)
5goldencrown(五黄冠) */
func (this *AitaobaoItemsGetRequest) SetStartCredit(value string) {
	this.Set("start_credit", value)
}

/* 起始价格.传入价格参数时,需注意起始价格和最高价格必须一起传入,并且 start_price <= end_price */
func (this *AitaobaoItemsGetRequest) SetStartPrice(value string) {
	this.Set("start_price", value)
}

/* 商品总成交量（与返回字段volume对应）下限。 */
func (this *AitaobaoItemsGetRequest) SetStartTotalnum(value string) {
	this.Set("start_totalnum", value)
}

/* 是否支持VIP卡，设置为true表示该商品支持VIP卡，设置为false或不设置表示不判断这个属性 */
func (this *AitaobaoItemsGetRequest) SetVipCard(value string) {
	this.Set("vip_card", value)
}

type AitaobaoItemsGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	AitaobaoItemsGetResponseResult `json:"aitaobao_items_get_response"`
}
type AitaobaoItemsGetResponseResult struct {
	/* 爱淘宝商品对象列表。 */
	AitaobaoItems []*AitaobaoItem `json:"aitaobao_items"`
	/* 搜索到符合条件的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.aitaobao.items.relate.get*/
type AitaobaoItemsRelateGetRequest struct {
	values url.Values
}

func (this *AitaobaoItemsRelateGetRequest) GetApiMethodName() string {
	return "taobao.aitaobao.items.relate.get"
}
func (this *AitaobaoItemsRelateGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AitaobaoItemsRelateGetRequest) GetValues() url.Values {
	return this.values
}

/* 分类id.推荐类型为5时cid不能为空。仅支持叶子类目ID，即通过taobao.itemcats.get获取到is_parent=false的cid。 */
func (this *AitaobaoItemsRelateGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 需返回的字段列表.可选值:num_iid,title,nick,pic_url,price,click_url,commission,ommission_rate,commission_num,commission_volume,shop_click_url,seller_credit_score,item_location,volume;字段之间用","分隔 */
func (this *AitaobaoItemsRelateGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 指定返回结果的最大条数.实际返回结果个数根据算法来确定,所以该值会小于或者等于该值 */
func (this *AitaobaoItemsRelateGetRequest) SetMaxCount(value string) {
	this.Set("max_count", value)
}

/* 淘宝客商品数字id.推荐类型为1,2,3时num_iid不能为空 */
func (this *AitaobaoItemsRelateGetRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* <p>推荐类型.</p>
<p>1:同类商品推荐;此时必须得输入num_iid</p>
<p>2:异类商品推荐;此时必须得输入num_iid</p>
<p>3:同店商品推荐;此时必须得输入num_iid</p>
<p>4:店铺热门推荐;此时必须得输入seller_id</p>
<p>5:类目热门推荐;此时必须得输入cid</p> */
func (this *AitaobaoItemsRelateGetRequest) SetRelateType(value string) {
	this.Set("relate_type", value)
}

/* 卖家的用户id.注：推荐类型为4时seller_id不能为空 */
func (this *AitaobaoItemsRelateGetRequest) SetSellerId(value string) {
	this.Set("seller_id", value)
}

/* 店铺类型.默认all,商城:b,集市:c */
func (this *AitaobaoItemsRelateGetRequest) SetShopType(value string) {
	this.Set("shop_type", value)
}

/* default(默认排序,关联推荐相关度),price_desc(价格从高到低), price_asc(价格从低到高),commissionRate_desc(佣金比率从高到低), commissionRate_asc(佣金比率从低到高), commissionNum_desc(成交量成高到低), commissionNum_asc(成交量从低到高) */
func (this *AitaobaoItemsRelateGetRequest) SetSort(value string) {
	this.Set("sort", value)
}

/* 商品数字ID(带有跟踪效果) */
func (this *AitaobaoItemsRelateGetRequest) SetTrackIid(value string) {
	this.Set("track_iid", value)
}

type AitaobaoItemsRelateGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	AitaobaoItemsRelateGetResponseResult `json:"aitaobao_items_relate_get_response"`
}
type AitaobaoItemsRelateGetResponseResult struct {
	/* 爱淘宝商品对象列表 */
	AitaobaoItems []*AitaobaoItem `json:"aitaobao_items"`
	/* 返回的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.aitaobao.realtime.report.get*/
type AitaobaoRealtimeReportGetRequest struct {
	values url.Values
}

func (this *AitaobaoRealtimeReportGetRequest) GetApiMethodName() string {
	return "taobao.aitaobao.realtime.report.get"
}
func (this *AitaobaoRealtimeReportGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AitaobaoRealtimeReportGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表.可选值:Payment淘宝客订单构体中的所有字段;字段之间用","分隔. */
func (this *AitaobaoRealtimeReportGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 当前页数<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *AitaobaoRealtimeReportGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页返回结果数，最小每页40条，默认每页40条，最大每页100条<br /> 支持最大值为：100 */
func (this *AitaobaoRealtimeReportGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 查询报表的时间跨度，单位秒。
以用户输入的start_time时间为起始时间，start_time+span为结束时间，查询该时间段内的订单。span最小值为60秒，最大值为600秒，默认值为60秒<br /> 支持最大值为：600<br /> 支持最小值为：60 */
func (this *AitaobaoRealtimeReportGetRequest) SetSpan(value string) {
	this.Set("span", value)
}

/* 需要查询报表的开始日期，有效的日期为从当前日期开始起90天以内的订单 */
func (this *AitaobaoRealtimeReportGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type AitaobaoRealtimeReportGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	AitaobaoRealtimeReportGetResponseResult `json:"aitaobao_realtime_report_get_response"`
}
type AitaobaoRealtimeReportGetResponseResult struct {
	/* 淘宝客订单 */
	Payments []*Payment `json:"payments"`
}

/*taobao.aitaobao.shops.detail.get*/
type AitaobaoShopsDetailGetRequest struct {
	values url.Values
}

func (this *AitaobaoShopsDetailGetRequest) GetApiMethodName() string {
	return "taobao.aitaobao.shops.detail.get"
}
func (this *AitaobaoShopsDetailGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AitaobaoShopsDetailGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表.可选值:AitaobaoShop淘宝客商品结构体中的user_id,shop_title,commission_rate;字段之间用","分隔. */
func (this *AitaobaoShopsDetailGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 卖家昵称串.最大输入10个.格式如:"value1,value2,value3" 用" , "号分隔。
注意：sids和seller_nicks两个参数任意必须输入一个，如果同时输入，则以seller_nicks为准 */
func (this *AitaobaoShopsDetailGetRequest) SetSellerNicks(value string) {
	this.Set("seller_nicks", value)
}

/* 店铺id串.最大输入10个.格式如:"value1,value2,value3" 用" , "号分隔店铺id.
注意：sids和seller_nicks两个参数任意必须输入一个，如果同时输入，则以seller_nicks为准 */
func (this *AitaobaoShopsDetailGetRequest) SetSids(value string) {
	this.Set("sids", value)
}

type AitaobaoShopsDetailGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	AitaobaoShopsDetailGetResponseResult `json:"aitaobao_shops_detail_get_response"`
}
type AitaobaoShopsDetailGetResponseResult struct {
	/* 淘宝客店铺对象列表 */
	AitaobaoShops []*AitaobaoShop `json:"aitaobao_shops"`
}

/*taobao.aitaobao.shops.get*/
type AitaobaoShopsGetRequest struct {
	values url.Values
}

func (this *AitaobaoShopsGetRequest) GetApiMethodName() string {
	return "taobao.aitaobao.shops.get"
}
func (this *AitaobaoShopsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AitaobaoShopsGetRequest) GetValues() url.Values {
	return this.values
}

/* 店铺前台展示类目id，可以通过taobao.shopcats.list.get获取。 */
func (this *AitaobaoShopsGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 店铺商品数查询结束值。需要跟start_auctioncount同时设置才生效，只设置该值不生效。 */
func (this *AitaobaoShopsGetRequest) SetEndAuctioncount(value string) {
	this.Set("end_auctioncount", value)
}

/* 店铺佣金比例查询结束值 */
func (this *AitaobaoShopsGetRequest) SetEndCommissionrate(value string) {
	this.Set("end_commissionrate", value)
}

/* 店铺掌柜信用等级查询结束
店铺的信用等级总共为20级 1-5:1heart-5heart;6-10:1diamond-5diamond;11-15:1crown-5crown;16-20:1goldencrown-5goldencrown */
func (this *AitaobaoShopsGetRequest) SetEndCredit(value string) {
	this.Set("end_credit", value)
}

/* 店铺累计推广数查询结束值 */
func (this *AitaobaoShopsGetRequest) SetEndTotalaction(value string) {
	this.Set("end_totalaction", value)
}

/* 需要返回的字段，目前包括如下字段 user_id click_url shop_title commission_rate seller_credit shop_type auction_count total_auction */
func (this *AitaobaoShopsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 店铺主题关键字查询 */
func (this *AitaobaoShopsGetRequest) SetKeyword(value string) {
	this.Set("keyword", value)
}

/* 是否只显示商城店铺 */
func (this *AitaobaoShopsGetRequest) SetOnlyMall(value string) {
	this.Set("only_mall", value)
}

/* 页码.结果页1~99 */
func (this *AitaobaoShopsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数.最大每页40 */
func (this *AitaobaoShopsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 排序字段。目前支持的排序字段有：
commission_rate，auction_count，total_auction。必须输入这三个任意值，否则排序无效 */
func (this *AitaobaoShopsGetRequest) SetSortField(value string) {
	this.Set("sort_field", value)
}

/* 排序类型.必须输入desc,asc任一值，否则无效
desc-降序,asc-升序 */
func (this *AitaobaoShopsGetRequest) SetSortType(value string) {
	this.Set("sort_type", value)
}

/* 店铺宝贝数查询开始值。需要跟end_auctioncount同时设置才生效，只设置该值不生效。 */
func (this *AitaobaoShopsGetRequest) SetStartAuctioncount(value string) {
	this.Set("start_auctioncount", value)
}

/* 店铺佣金比例查询开始值，注意佣金比例是x10000的整数.50表示0.5% */
func (this *AitaobaoShopsGetRequest) SetStartCommissionrate(value string) {
	this.Set("start_commissionrate", value)
}

/* 店铺掌柜信用等级起始
店铺的信用等级总共为20级 1-5:1heart-5heart;6-10:1diamond-5diamond;11-15:1crown-5crown;16-20:1goldencrown-5goldencrown */
func (this *AitaobaoShopsGetRequest) SetStartCredit(value string) {
	this.Set("start_credit", value)
}

/* 店铺累计推广量开始值 */
func (this *AitaobaoShopsGetRequest) SetStartTotalaction(value string) {
	this.Set("start_totalaction", value)
}

type AitaobaoShopsGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	AitaobaoShopsGetResponseResult `json:"aitaobao_shops_get_response"`
}
type AitaobaoShopsGetResponseResult struct {
	/* 搜索结果列表 */
	AitaobaoShops []*AitaobaoShop `json:"aitaobao_shops"`
	/* 符合条件的店铺总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.aitaobao.shops.relate.get*/
type AitaobaoShopsRelateGetRequest struct {
	values url.Values
}

func (this *AitaobaoShopsRelateGetRequest) GetApiMethodName() string {
	return "taobao.aitaobao.shops.relate.get"
}
func (this *AitaobaoShopsRelateGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AitaobaoShopsRelateGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表.可选值:TaobaokeShop淘宝客商品结构体中的user_id,seller_nick,shop_id,shop_title,seller_credit,shop_type,commission_rate,click_url,total_auction,auction_count,字段之间用","分隔 */
func (this *AitaobaoShopsRelateGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 指定返回结果的最大条数,实际返回结果个数根据算法来确定 */
func (this *AitaobaoShopsRelateGetRequest) SetMaxCount(value string) {
	this.Set("max_count", value)
}

/* 卖家id.seller_id和seller_nick不能同时为空,如果都有值,则以seller_id为主 */
func (this *AitaobaoShopsRelateGetRequest) SetSellerId(value string) {
	this.Set("seller_id", value)
}

/* 卖家昵称 */
func (this *AitaobaoShopsRelateGetRequest) SetSellerNick(value string) {
	this.Set("seller_nick", value)
}

/* 店铺类型.所有:all,商城:b,集市:c */
func (this *AitaobaoShopsRelateGetRequest) SetShopType(value string) {
	this.Set("shop_type", value)
}

/* default(默认排序,关联推荐相关度),commissionRate_desc(佣金比率从高到低), commissionRate_asc(佣金比率从低到高),credit_desc(信用等级从高到低), credit_asc(信用等级从低到高) */
func (this *AitaobaoShopsRelateGetRequest) SetSort(value string) {
	this.Set("sort", value)
}

type AitaobaoShopsRelateGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	AitaobaoShopsRelateGetResponseResult `json:"aitaobao_shops_relate_get_response"`
}
type AitaobaoShopsRelateGetResponseResult struct {
	/* 淘宝客店铺对象列表 */
	AitaobaoShops []*AitaobaoShop `json:"aitaobao_shops"`
	/* 搜索到符合条件的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.tbk.items.convert*/
type TbkItemsConvertRequest struct {
	values url.Values
}

func (this *TbkItemsConvertRequest) GetApiMethodName() string {
	return "taobao.tbk.items.convert"
}
func (this *TbkItemsConvertRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TbkItemsConvertRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表.可选值:click_url */
func (this *TbkItemsConvertRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 推广者的淘宝会员昵称.注：指的是淘宝的会员登录名 */
func (this *TbkItemsConvertRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 淘宝客商品数字id串.最大输入40个.格式如:"value1,value2,value3" 用" , "号分隔商品数字id */
func (this *TbkItemsConvertRequest) SetNumIids(value string) {
	this.Set("num_iids", value)
}

/* 自定义输入串.格式:英文和数字组成;长度不能大于12个字符,区分不同的推广渠道,如:bbs,表示bbs为推广渠道;blog,表示blog为推广渠道. */
func (this *TbkItemsConvertRequest) SetOuterCode(value string) {
	this.Set("outer_code", value)
}

/* 用户的pid,必须是mm_xxxx_0_0这种格式中间的"xxxx". 注意nick和pid至少需要传递一个,如果2个都传了,将以pid为准,且pid的最大长度是20。第一次调用接口的用户，推荐该入参不要填写，使用nick=（淘宝账号）的方式去获取，以免出错。 */
func (this *TbkItemsConvertRequest) SetPid(value string) {
	this.Set("pid", value)
}

/* 点击串跳转类型，1：单品，2：单品中间页（无线暂无） */
func (this *TbkItemsConvertRequest) SetReferType(value string) {
	this.Set("refer_type", value)
}

/* 商品track_iid串（带有追踪效果的商品id),最大输入40个,与num_iids必填其一 */
func (this *TbkItemsConvertRequest) SetTrackIids(value string) {
	this.Set("track_iids", value)
}

type TbkItemsConvertResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	TbkItemsConvertResponseResult `json:"tbk_items_convert_response"`
}
type TbkItemsConvertResponseResult struct {
	/* 淘宝客商品对象列表 */
	TbkItems []*TbkItem `json:"tbk_items"`
	/* 返回的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.tbk.items.detail.get*/
type TbkItemsDetailGetRequest struct {
	values url.Values
}

func (this *TbkItemsDetailGetRequest) GetApiMethodName() string {
	return "taobao.tbk.items.detail.get"
}
func (this *TbkItemsDetailGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TbkItemsDetailGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表.可选值:num_iid,seller_id,nick,title,price,volume,pic_url,item_url,shop_url
;字段之间用","分隔. */
func (this *TbkItemsDetailGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 淘宝客商品数字id串.最大输入40个.格式如:"value1,value2,value3" 用" , "号分隔商品数字id */
func (this *TbkItemsDetailGetRequest) SetNumIids(value string) {
	this.Set("num_iids", value)
}

/* 商品track_iid串（带有追踪效果的商品id),最大输入40个,与num_iids必填其一 */
func (this *TbkItemsDetailGetRequest) SetTrackIids(value string) {
	this.Set("track_iids", value)
}

type TbkItemsDetailGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	TbkItemsDetailGetResponseResult `json:"tbk_items_detail_get_response"`
}
type TbkItemsDetailGetResponseResult struct {
	/* 淘宝客商品对象列表 */
	TbkItems []*TbkItem `json:"tbk_items"`
	/* 返回的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.tbk.items.get*/
type TbkItemsGetRequest struct {
	values url.Values
}

func (this *TbkItemsGetRequest) GetApiMethodName() string {
	return "taobao.tbk.items.get"
}
func (this *TbkItemsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TbkItemsGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品所在地 */
func (this *TbkItemsGetRequest) SetArea(value string) {
	this.Set("area", value)
}

/* 是否自动发货 */
func (this *TbkItemsGetRequest) SetAutoSend(value string) {
	this.Set("auto_send", value)
}

/* 是否支持抵价券，设置为true表示该商品支持抵价券，设置为false或不设置表示不判断这个属性 */
func (this *TbkItemsGetRequest) SetCashCoupon(value string) {
	this.Set("cash_coupon", value)
}

/* 是否支持货到付款，设置为true表示该商品是支持货到付款，设置为false或不设置表示不判断这个属性 */
func (this *TbkItemsGetRequest) SetCashOndelivery(value string) {
	this.Set("cash_ondelivery", value)
}

/* 标准商品后台类目id。该ID可以通过taobao.itemcats.get接口获取到。<br /> 支持最大值为：2147483647 */
func (this *TbkItemsGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 30天累计推广量（与返回数据中的commission_num字段对应）上限. */
func (this *TbkItemsGetRequest) SetEndCommissionNum(value string) {
	this.Set("end_commissionNum", value)
}

/* 佣金比率上限，如：2345表示23.45%。注：start_commissionRate和end_commissionRate一起设置才有效。 */
func (this *TbkItemsGetRequest) SetEndCommissionRate(value string) {
	this.Set("end_commissionRate", value)
}

/* 可选值和start_credit一样.start_credit的值一定要小于或等于end_credit的值。注：end_credit与start_credit一起使用才生效 */
func (this *TbkItemsGetRequest) SetEndCredit(value string) {
	this.Set("end_credit", value)
}

/* 最高价格 */
func (this *TbkItemsGetRequest) SetEndPrice(value string) {
	this.Set("end_price", value)
}

/* 商品总成交量（与返回字段volume对应）上限。 */
func (this *TbkItemsGetRequest) SetEndTotalnum(value string) {
	this.Set("end_totalnum", value)
}

/* 需返回的字段列表.可选值:num_iid,seller_id,nick,title,volume,pic_url,item_url,shop_url;字段之间用","分隔 */
func (this *TbkItemsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 是否查询消保卖家 */
func (this *TbkItemsGetRequest) SetGuarantee(value string) {
	this.Set("guarantee", value)
}

/* 标识一个应用是否来在无线或者手机应用,如果是true则会使用其他规则加密点击串.如果不传值,则默认是false. */
func (this *TbkItemsGetRequest) SetIsMobile(value string) {
	this.Set("is_mobile", value)
}

/* 商品标题中包含的关键字. 注意:查询时keyword,cid至少选择其中一个参数 */
func (this *TbkItemsGetRequest) SetKeyword(value string) {
	this.Set("keyword", value)
}

/* 是否商城的商品，设置为true表示该商品是属于淘宝商城的商品，设置为false或不设置表示不判断这个属性 */
func (this *TbkItemsGetRequest) SetMallItem(value string) {
	this.Set("mall_item", value)
}

/* 是否30天维修，设置为true表示该商品是支持30天维修，设置为false或不设置表示不判断这个属性 */
func (this *TbkItemsGetRequest) SetOnemonthRepair(value string) {
	this.Set("onemonth_repair", value)
}

/* 是否海外商品，设置为true表示该商品是属于海外商品，默认为false */
func (this *TbkItemsGetRequest) SetOverseasItem(value string) {
	this.Set("overseas_item", value)
}

/* 结果页数.1~10<br /> 支持最大值为：10 */
func (this *TbkItemsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页返回结果数.最大每页40<br /> 支持最大值为：400 */
func (this *TbkItemsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 是否如实描述(即:先行赔付)商品，设置为true表示该商品是如实描述的商品，设置为false或不设置表示不判断这个属性 */
func (this *TbkItemsGetRequest) SetRealDescribe(value string) {
	this.Set("real_describe", value)
}

/* 是否支持7天退换，设置为true表示该商品支持7天退换，设置为false或不设置表示不判断这个属性 */
func (this *TbkItemsGetRequest) SetSevendaysReturn(value string) {
	this.Set("sevendays_return", value)
}

/* 默认排序:default

price_desc(价格从高到低)
price_asc(价格从低到高)
credit_desc(信用等级从高到低)
commissionRate_desc(佣金比率从高到低)
commissionRate_asc(佣金比率从低到高)
commissionNum_desc(成交量成高到低)
commissionNum_asc(成交量从低到高)
commissionVolume_desc(总支出佣金从高到低)
commissionVolume_asc(总支出佣金从低到高)
delistTime_desc(商品下架时间从高到低)
delistTime_asc(商品下架时间从低到高) */
func (this *TbkItemsGetRequest) SetSort(value string) {
	this.Set("sort", value)
}

/* 30天累计推广量（与返回数据中的commission_num字段对应）下限.注：该字段要与end_commissionNum一起使用才生效 */
func (this *TbkItemsGetRequest) SetStartCommissionNum(value string) {
	this.Set("start_commissionNum", value)
}

/* 佣金比率下限，如：1234表示12.34% */
func (this *TbkItemsGetRequest) SetStartCommissionRate(value string) {
	this.Set("start_commissionRate", value)
}

/* 卖家信用:

1heart(一心)
2heart (两心)
3heart(三心)
4heart(四心)
5heart(五心)
1diamond(一钻)
2diamond(两钻)
3diamond(三钻)
4diamond(四钻)
5diamond(五钻)
1crown(一冠)
2crown(两冠)
3crown(三冠)
4crown(四冠)
5crown(五冠)
1goldencrown(一黄冠)
2goldencrown(二黄冠)
3goldencrown(三黄冠)
4goldencrown(四黄冠)
5goldencrown(五黄冠) */
func (this *TbkItemsGetRequest) SetStartCredit(value string) {
	this.Set("start_credit", value)
}

/* 起始价格.传入价格参数时,需注意起始价格和最高价格必须一起传入,并且 start_price <= end_price */
func (this *TbkItemsGetRequest) SetStartPrice(value string) {
	this.Set("start_price", value)
}

/* 商品总成交量（与返回字段volume对应）下限。 */
func (this *TbkItemsGetRequest) SetStartTotalnum(value string) {
	this.Set("start_totalnum", value)
}

/* 是否支持VIP卡，设置为true表示该商品支持VIP卡，设置为false或不设置表示不判断这个属性 */
func (this *TbkItemsGetRequest) SetVipCard(value string) {
	this.Set("vip_card", value)
}

type TbkItemsGetResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	TbkItemsGetResponseResult `json:"tbk_items_get_response"`
}
type TbkItemsGetResponseResult struct {
	/* 淘宝客商品对象列表 */
	TbkItems []*TbkItem `json:"tbk_items"`
	/* 搜索到符合条件的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.tbk.shops.convert*/
type TbkShopsConvertRequest struct {
	values url.Values
}

func (this *TbkShopsConvertRequest) GetApiMethodName() string {
	return "taobao.tbk.shops.convert"
}
func (this *TbkShopsConvertRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TbkShopsConvertRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表.可选值:click_url. */
func (this *TbkShopsConvertRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 推广者的淘宝会员昵称.注：这里指的是淘宝的登录会员名 */
func (this *TbkShopsConvertRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 自定义输入串.格式:英文和数字组成;长度不能大于12个字符,区分不同的推广渠道,如:bbs,表示bbs为推广渠道;blog,表示blog为推广渠道. */
func (this *TbkShopsConvertRequest) SetOuterCode(value string) {
	this.Set("outer_code", value)
}

/* 用户的pid,必须是mm_xxxx_0_0这种格式中间的"xxxx". 注意nick和pid至少需要传递一个,如果2个都传了,将以pid为准,且pid的最大长度是20。第一次调用接口的用户，推荐该入参不要填写，使用nick=（淘宝账号）的方式去获取，以免出错。 */
func (this *TbkShopsConvertRequest) SetPid(value string) {
	this.Set("pid", value)
}

/* 卖家昵称串.最大输入10个.格式如:"value1,value2,value3" 用" , "号分隔。
注意：sids和seller_nicks两个参数任意必须输入一个，如果同时输入，则以seller_nicks为准 */
func (this *TbkShopsConvertRequest) SetSellerNicks(value string) {
	this.Set("seller_nicks", value)
}

/* 店铺id串.最大输入10个.格式如:"value1,value2,value3" 用" , "号分隔店铺id.
注意：sids和seller_nicks两个参数任意必须输入一个，如果同时输入，则以seller_nicks为准 */
func (this *TbkShopsConvertRequest) SetSids(value string) {
	this.Set("sids", value)
}

type TbkShopsConvertResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	TbkShopsConvertResponseResult `json:"tbk_shops_convert_response"`
}
type TbkShopsConvertResponseResult struct {
	/* 淘宝客店铺对象列表 */
	TbkShops []*TbkShop `json:"tbk_shops"`
}

/*taobao.tbk.shops.detail.get*/
type TbkShopsDetailGetRequest struct {
	values url.Values
}

func (this *TbkShopsDetailGetRequest) GetApiMethodName() string {
	return "taobao.tbk.shops.detail.get"
}
func (this *TbkShopsDetailGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TbkShopsDetailGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表.可选值:user_id,seller_nick,shop_title,pic_url,shop_url;字段之间用","分隔. */
func (this *TbkShopsDetailGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 标识一个应用是否来在无线或者手机应用,如果是true则会生成无线店铺URL.如果不传值,则默认是false. */
func (this *TbkShopsDetailGetRequest) SetIsMobile(value string) {
	this.Set("is_mobile", value)
}

/* 卖家昵称串.最大输入10个.格式如:"value1,value2,value3" 用" , "号分隔。
注意：sids和seller_nicks两个参数任意必须输入一个，如果同时输入，则以seller_nicks为准 */
func (this *TbkShopsDetailGetRequest) SetSellerNicks(value string) {
	this.Set("seller_nicks", value)
}

/* 店铺id串.最大输入10个.格式如:"value1,value2,value3" 用" , "号分隔店铺id.
注意：sids和seller_nicks两个参数任意必须输入一个，如果同时输入，则以seller_nicks为准 */
func (this *TbkShopsDetailGetRequest) SetSids(value string) {
	this.Set("sids", value)
}

type TbkShopsDetailGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	TbkShopsDetailGetResponseResult `json:"tbk_shops_detail_get_response"`
}
type TbkShopsDetailGetResponseResult struct {
	/* 淘宝客店铺对象列表 */
	TbkShops []*TbkShop `json:"tbk_shops"`
}

/*taobao.tbk.shops.get*/
type TbkShopsGetRequest struct {
	values url.Values
}

func (this *TbkShopsGetRequest) GetApiMethodName() string {
	return "taobao.tbk.shops.get"
}
func (this *TbkShopsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TbkShopsGetRequest) GetValues() url.Values {
	return this.values
}

/* 店铺前台展示类目id，可以通过taobao.shopcats.list.get获取。 */
func (this *TbkShopsGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 店铺商品数查询结束值。需要跟start_auctioncount同时设置才生效，只设置该值不生效。 */
func (this *TbkShopsGetRequest) SetEndAuctioncount(value string) {
	this.Set("end_auctioncount", value)
}

/* 店铺佣金比例查询结束值 */
func (this *TbkShopsGetRequest) SetEndCommissionrate(value string) {
	this.Set("end_commissionrate", value)
}

/* 店铺掌柜信用等级查询结束
店铺的信用等级总共为20级 1-5:1heart-5heart;6-10:1diamond-5diamond;11-15:1crown-5crown;16-20:1goldencrown-5goldencrown */
func (this *TbkShopsGetRequest) SetEndCredit(value string) {
	this.Set("end_credit", value)
}

/* 店铺累计推广数查询结束值 */
func (this *TbkShopsGetRequest) SetEndTotalaction(value string) {
	this.Set("end_totalaction", value)
}

/* 需要返回的字段，目前包括如下字段user_id,seller_nick,shop_title,pic_url,shop_url */
func (this *TbkShopsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 标识一个应用是否来在无线或者手机应用,如果是true则会使用其他规则加密点击串.如果不传值,则默认是false. */
func (this *TbkShopsGetRequest) SetIsMobile(value string) {
	this.Set("is_mobile", value)
}

/* 店铺主题关键字查询 */
func (this *TbkShopsGetRequest) SetKeyword(value string) {
	this.Set("keyword", value)
}

/* 是否只显示商城店铺 */
func (this *TbkShopsGetRequest) SetOnlyMall(value string) {
	this.Set("only_mall", value)
}

/* 页码.结果页1~99 */
func (this *TbkShopsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数.最大每页40 */
func (this *TbkShopsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 排序字段。目前支持的排序字段有：
commission_rate，auction_count，total_auction。必须输入这三个任意值，否则排序无效 */
func (this *TbkShopsGetRequest) SetSortField(value string) {
	this.Set("sort_field", value)
}

/* 排序类型.必须输入desc,asc任一值，否则无效
desc-降序,asc-升序 */
func (this *TbkShopsGetRequest) SetSortType(value string) {
	this.Set("sort_type", value)
}

/* 店铺宝贝数查询开始值。需要跟end_auctioncount同时设置才生效，只设置该值不生效。 */
func (this *TbkShopsGetRequest) SetStartAuctioncount(value string) {
	this.Set("start_auctioncount", value)
}

/* 店铺佣金比例查询开始值，注意佣金比例是x10000的整数.50表示0.5% */
func (this *TbkShopsGetRequest) SetStartCommissionrate(value string) {
	this.Set("start_commissionrate", value)
}

/* 店铺掌柜信用等级起始
店铺的信用等级总共为20级 1-5:1heart-5heart;6-10:1diamond-5diamond;11-15:1crown-5crown;16-20:1goldencrown-5goldencrown */
func (this *TbkShopsGetRequest) SetStartCredit(value string) {
	this.Set("start_credit", value)
}

/* 店铺累计推广量开始值 */
func (this *TbkShopsGetRequest) SetStartTotalaction(value string) {
	this.Set("start_totalaction", value)
}

type TbkShopsGetResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	TbkShopsGetResponseResult `json:"tbk_shops_get_response"`
}
type TbkShopsGetResponseResult struct {
	/* 搜索结果列表 */
	TbkShops []*TbkShop `json:"tbk_shops"`
	/* 符合条件的店铺总数 */
	TotalResults int64 `json:"total_results"`
}

/*alibaba.geoip.get*/
type AlibabaGeoipGetRequest struct {
	values url.Values
}

func (this *AlibabaGeoipGetRequest) GetApiMethodName() string {
	return "alibaba.geoip.get"
}
func (this *AlibabaGeoipGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlibabaGeoipGetRequest) GetValues() url.Values {
	return this.values
}

/* 要查询的IP地址,与language一起使用，与iplist二选一使用，提供单个IP查询 */
func (this *AlibabaGeoipGetRequest) SetIp(value string) {
	this.Set("ip", value)
}

/* 返回结果的文字语言，cn中文；en英文 */
func (this *AlibabaGeoipGetRequest) SetLanguage(value string) {
	this.Set("language", value)
}

type AlibabaGeoipGetResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	AlibabaGeoipGetResponseResult `json:"alibaba_geoip_get_response"`
}
type AlibabaGeoipGetResponseResult struct {
	/* 城市名称 */
	City string `json:"city"`
	/* 城市id */
	Cityid string `json:"cityid"`
	/* 国家 */
	Country string `json:"country"`
	/* 国家编码 */
	Countryid string `json:"countryid"`
	/* 县 */
	County string `json:"county"`
	/* 县ID */
	Countyid string `json:"countyid"`
	/* IP地址字符串 */
	Ip string `json:"ip"`
	/* 运营商名称 */
	Isp string `json:"isp"`
	/* 运营商id */
	Ispid string `json:"ispid"`
	/* 语言 */
	Lang string `json:"lang"`
	/* 经度 */
	Latitude string `json:"latitude"`
	/* IP地址的整数值 */
	Lip int64 `json:"lip"`
	/* 纬度 */
	Longitude string `json:"longitude"`
	/* 地区名称 */
	Region string `json:"region"`
	/* 地区编码 */
	Regionid string `json:"regionid"`
}

/*taobao.appip.get*/
type AppipGetRequest struct {
	values url.Values
}

func (this *AppipGetRequest) GetApiMethodName() string {
	return "taobao.appip.get"
}
func (this *AppipGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AppipGetRequest) GetValues() url.Values {
	return this.values
}

type AppipGetResponse struct {
	*ErrorResponse         `json:"error_response,omitempty"`
	AppipGetResponseResult `json:"appip_get_response"`
}
type AppipGetResponseResult struct {
	/* ISV发起请求服务器IP */
	Ip string `json:"ip"`
}

/*taobao.kfc.keyword.search*/
type KfcKeywordSearchRequest struct {
	values url.Values
}

func (this *KfcKeywordSearchRequest) GetApiMethodName() string {
	return "taobao.kfc.keyword.search"
}
func (this *KfcKeywordSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *KfcKeywordSearchRequest) GetValues() url.Values {
	return this.values
}

/* 应用点，分为一级应用点、二级应用点。其中一级应用点通常是指某一个系统或产品，比如淘宝的商品应用（taobao_auction）；二级应用点，是指一级应用点下的具体的分类，比如商品标题(title)、商品描述(content)。不同的二级应用可以设置不同关键词。

这里的apply参数是由一级应用点与二级应用点合起来的字符（一级应用点+"."+二级应用点），如taobao_auction.title。


通常apply参数是不需要传递的。如有特殊需求（比如特殊的过滤需求，需要自己维护一套自己词库），需传递此参数。 */
func (this *KfcKeywordSearchRequest) SetApply(value string) {
	this.Set("apply", value)
}

/* 需要过滤的文本信息 */
func (this *KfcKeywordSearchRequest) SetContent(value string) {
	this.Set("content", value)
}

/* 发布信息的淘宝会员名，可以不传 */
func (this *KfcKeywordSearchRequest) SetNick(value string) {
	this.Set("nick", value)
}

type KfcKeywordSearchResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	KfcKeywordSearchResponseResult `json:"kfc_keyword_search_response"`
}
type KfcKeywordSearchResponseResult struct {
	/* KFC关键词匹配返回的结果信息 */
	KfcSearchResult *KfcSearchResult `json:"kfc_search_result"`
}

/*taobao.time.get*/
type TimeGetRequest struct {
	values url.Values
}

func (this *TimeGetRequest) GetApiMethodName() string {
	return "taobao.time.get"
}
func (this *TimeGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TimeGetRequest) GetValues() url.Values {
	return this.values
}

type TimeGetResponse struct {
	*ErrorResponse        `json:"error_response,omitempty"`
	TimeGetResponseResult `json:"time_get_response"`
}
type TimeGetResponseResult struct {
	/* 淘宝系统当前时间。格式:yyyy-MM-dd HH:mm:ss */
	Time string `json:"time"`
}

/*taobao.topats.result.get*/
type TopatsResultGetRequest struct {
	values url.Values
}

func (this *TopatsResultGetRequest) GetApiMethodName() string {
	return "taobao.topats.result.get"
}
func (this *TopatsResultGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TopatsResultGetRequest) GetValues() url.Values {
	return this.values
}

/* 任务id号，创建任务时返回的task_id */
func (this *TopatsResultGetRequest) SetTaskId(value string) {
	this.Set("task_id", value)
}

type TopatsResultGetResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	TopatsResultGetResponseResult `json:"topats_result_get_response"`
}
type TopatsResultGetResponseResult struct {
	/* 任务结果信息 */
	Task *Task `json:"task"`
}

/*taobao.topats.task.delete*/
type TopatsTaskDeleteRequest struct {
	values url.Values
}

func (this *TopatsTaskDeleteRequest) GetApiMethodName() string {
	return "taobao.topats.task.delete"
}
func (this *TopatsTaskDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TopatsTaskDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 需要取消的任务ID */
func (this *TopatsTaskDeleteRequest) SetTaskId(value string) {
	this.Set("task_id", value)
}

type TopatsTaskDeleteResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	TopatsTaskDeleteResponseResult `json:"topats_task_delete_response"`
}
type TopatsTaskDeleteResponseResult struct {
	/* 表示操作是否成功，是为true，否为false。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.inventory.ipc.inventorydetail.get*/
type InventoryIpcInventorydetailGetRequest struct {
	values url.Values
}

func (this *InventoryIpcInventorydetailGetRequest) GetApiMethodName() string {
	return "taobao.inventory.ipc.inventorydetail.get"
}
func (this *InventoryIpcInventorydetailGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *InventoryIpcInventorydetailGetRequest) GetValues() url.Values {
	return this.values
}

/* 主订单号，可选<br /> 支持最小值为：0 */
func (this *InventoryIpcInventorydetailGetRequest) SetBizOrderId(value string) {
	this.Set("biz_order_id", value)
}

/* 子订单号，可选<br /> 支持最小值为：0 */
func (this *InventoryIpcInventorydetailGetRequest) SetBizSubOrderId(value string) {
	this.Set("biz_sub_order_id", value)
}

/* 当前页数<br /> 支持最小值为：0 */
func (this *InventoryIpcInventorydetailGetRequest) SetPageIndex(value string) {
	this.Set("page_index", value)
}

/* 一页显示多少条 */
func (this *InventoryIpcInventorydetailGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 仓储商品id */
func (this *InventoryIpcInventorydetailGetRequest) SetScItemId(value string) {
	this.Set("sc_item_id", value)
}

/* 1:查询预扣  4：查询占用<br /> 支持最小值为：1 */
func (this *InventoryIpcInventorydetailGetRequest) SetStatusQuery(value string) {
	this.Set("status_query", value)
}

type InventoryIpcInventorydetailGetResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	InventoryIpcInventorydetailGetResponseResult `json:"inventory_ipc_inventorydetail_get_response"`
}
type InventoryIpcInventorydetailGetResponseResult struct {
	/* 库存明细列表 */
	InventoryDetails []*IpcInventoryDetailDo `json:"inventory_details"`
}

/*taobao.logistics.address.reachable*/
type LogisticsAddressReachableRequest struct {
	values url.Values
}

func (this *LogisticsAddressReachableRequest) GetApiMethodName() string {
	return "taobao.logistics.address.reachable"
}
func (this *LogisticsAddressReachableRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsAddressReachableRequest) GetValues() url.Values {
	return this.values
}

/* 详细地址 */
func (this *LogisticsAddressReachableRequest) SetAddress(value string) {
	this.Set("address", value)
}

/* 标准区域编码(三级行政区编码或是四级行政区)，可以通过taobao.areas.get获取，如北京市朝阳区为110105 */
func (this *LogisticsAddressReachableRequest) SetAreaCode(value string) {
	this.Set("area_code", value)
}

/* 物流公司编码ID，可以从这个接口获取所有物流公司的标准编码taobao.logistics.companies.get，可以传入多个值，以英文逗号分隔，如“1000000952,1000000953” */
func (this *LogisticsAddressReachableRequest) SetPartnerIds(value string) {
	this.Set("partner_ids", value)
}

/* 服务对应的数字编码，如揽派范围对应88 */
func (this *LogisticsAddressReachableRequest) SetServiceType(value string) {
	this.Set("service_type", value)
}

/* 发货地，标准区域编码(四级行政)，可以通过taobao.areas.get获取，如浙江省杭州市余杭区闲林街道为 330110011 */
func (this *LogisticsAddressReachableRequest) SetSourceAreaCode(value string) {
	this.Set("source_area_code", value)
}

type LogisticsAddressReachableResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	LogisticsAddressReachableResponseResult `json:"logistics_address_reachable_response"`
}
type LogisticsAddressReachableResponseResult struct {
	/* 地址可达返回结果，每个TP对应一个 */
	ReachableResultList []*AddressReachableResult `json:"reachable_result_list"`
}

/*taobao.logistics.address.reachablebatch.get*/
type LogisticsAddressReachablebatchGetRequest struct {
	values url.Values
}

func (this *LogisticsAddressReachablebatchGetRequest) GetApiMethodName() string {
	return "taobao.logistics.address.reachablebatch.get"
}
func (this *LogisticsAddressReachablebatchGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *LogisticsAddressReachablebatchGetRequest) GetValues() url.Values {
	return this.values
}

/* 筛单用户输入地址结构 */
func (this *LogisticsAddressReachablebatchGetRequest) SetAddressList(value string) {
	this.Set("address_list", value)
}

type LogisticsAddressReachablebatchGetResponse struct {
	*ErrorResponse                                  `json:"error_response,omitempty"`
	LogisticsAddressReachablebatchGetResponseResult `json:"logistics_address_reachablebatch_get_response"`
}
type LogisticsAddressReachablebatchGetResponseResult struct {
	/* 物流是否可达结果列表 */
	ReachableResults []*AddressReachableTopResult `json:"reachable_results"`
}

/*taobao.wlb.extorder.cancle*/
type WlbExtorderCancleRequest struct {
	values url.Values
}

func (this *WlbExtorderCancleRequest) GetApiMethodName() string {
	return "taobao.wlb.extorder.cancle"
}
func (this *WlbExtorderCancleRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbExtorderCancleRequest) GetValues() url.Values {
	return this.values
}

/* 外部单据编号 */
func (this *WlbExtorderCancleRequest) SetExtOrderCode(value string) {
	this.Set("ext_order_code", value)
}

type WlbExtorderCancleResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	WlbExtorderCancleResponseResult `json:"wlb_extorder_cancle_response"`
}
type WlbExtorderCancleResponseResult struct {
	/* 错误编码列表 */
	ErrorCodeList string `json:"error_code_list"`
	/* 修改时间，只有在取消成功的情况下，才有效 */
	ModifyTime string `json:"modify_time"`
}

/*taobao.wlb.extorder.create*/
type WlbExtorderCreateRequest struct {
	values url.Values
}

func (this *WlbExtorderCreateRequest) GetApiMethodName() string {
	return "taobao.wlb.extorder.create"
}
func (this *WlbExtorderCreateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbExtorderCreateRequest) GetValues() url.Values {
	return this.values
}

/* 买家昵称 */
func (this *WlbExtorderCreateRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 期望结束时间，在入库单会使用到 */
func (this *WlbExtorderCreateRequest) SetExpectEndTime(value string) {
	this.Set("expect_end_time", value)
}

/* 计划开始送达时间 在入库单中可能会使用 */
func (this *WlbExtorderCreateRequest) SetExpectStartTime(value string) {
	this.Set("expect_start_time", value)
}

/* 用字符串格式来表示订单标记列表：比如COD^PRESELL^SPLIT^LIMIT 等，中间用“^”来隔开 ---------------------------------------- 订单标记list（所有字母全部大写）1:COD-货到付款,2:LIMIT-限时配送,3:PRESELL-预售,4:INVOICE-需要发票,5:COMPLAIN-已投诉,6:MERGE-合单,7:SPLIT-拆单,8: EXCHANGE-退换货， 9:VISIT-上门 ,10:MODIFYTRANSPORT-可改配送方式,11:CONSIGN-代理已发货通知, 12:SELLER_AFFORD-卖家承担运费,13:SYNC_RETURN_BILL-同时退回发票,14: FENXIAO-分销订单标志 */
func (this *WlbExtorderCreateRequest) SetExtFlag(value string) {
	this.Set("ext_flag", value)
}

/* 外部单据编号 */
func (this *WlbExtorderCreateRequest) SetExtOrderCode(value string) {
	this.Set("ext_order_code", value)
}

/* 外部订单来源： （1）LC：推荐物流 （2）EXT：wlb_ext （3）ERP：erp （4）WMS： WMS盘点 （5）FENXIAO：分销  (6) OMS: OMS （7）ELINK： ELINK */
func (this *WlbExtorderCreateRequest) SetExtOrderSource(value string) {
	this.Set("ext_order_source", value)
}

/* 引起当前单据的前一个单据的编号 */
func (this *WlbExtorderCreateRequest) SetExtPrevOrderId(value string) {
	this.Set("ext_prev_order_id", value)
}

/* {"invoince_info": [{"bill_type":"发票类型，必选", "bill_title":"发票抬头，必选", "bill_amount":"发票金额(单位是分)，必选","bill_content":"发票内容，可选"}]} */
func (this *WlbExtorderCreateRequest) SetInvoinceInfo(value string) {
	this.Set("invoince_info", value)
}

/* 1:NORM-正常订单,2:RETURN-退货订单,3:SWITCH-换货订单 */
func (this *WlbExtorderCreateRequest) SetOpMainType(value string) {
	this.Set("op_main_type", value)
}

/* 外部交易号 */
func (this *WlbExtorderCreateRequest) SetOperateCode(value string) {
	this.Set("operate_code", value)
}

/* 订单类型： （1）OTHER： 其他 （2）TBTRADE： 淘宝交易 （3）OTHER_TRADE：其他交易 （4）COORDINATE：调拨（5）ALLOCATION： 盘点 （6）STOCK:采购 */
func (this *WlbExtorderCreateRequest) SetOperateType(value string) {
	this.Set("operate_type", value)
}

/* 订单商品列表： {"order_item_list":[{" sub_trade_code ":"可选,淘宝子交易号","item_id":"必须,商品Id","item_code":"必须,商家编码","item_name":"可选,物流宝商品名称","item_quantity":"必选,计划数量","item_price":"必选,物品价格,单位为分","owner_user_nick ":"可选,货主nick 代销模式下会存在","flag":"判断是否为赠品0 不是1是","picture_url":"图片Url","remarks":"可选,备注","inventory_type":"必须，库存类型1 可销售库存 101 类型用来定义残次品 201 冻结类型库存 301 在途库存"]} */
func (this *WlbExtorderCreateRequest) SetOrderItemList(value string) {
	this.Set("order_item_list", value)
}

/* 订单类型：（1）INBOUND：入库（2）OUTBOUND：出库（3）ALLOCATE：调拨（4）RETURN_IN:退货入库 */
func (this *WlbExtorderCreateRequest) SetOrderType(value string) {
	this.Set("order_type", value)
}

/* 包裹件数，入库单和出库单中会用到 */
func (this *WlbExtorderCreateRequest) SetPackageCount(value string) {
	this.Set("package_count", value)
}

/* 运费，以分为单位 */
func (this *WlbExtorderCreateRequest) SetPostage(value string) {
	this.Set("postage", value)
}

/* 发收方发货方信息必须传 手机和电话必选其一 收货方信息 邮编^^^省^^^市^^^区^^^具体地址^^^收件方名称^^^手机^^^电话 如果某一个字段的数据为空时，必须传NA */
func (this *WlbExtorderCreateRequest) SetReceiverInfo(value string) {
	this.Set("receiver_info", value)
}

/* 备注 */
func (this *WlbExtorderCreateRequest) SetRemark(value string) {
	this.Set("remark", value)
}

/* 零售商 */
func (this *WlbExtorderCreateRequest) SetRetailer(value string) {
	this.Set("retailer", value)
}

/* 退货时的运单号 */
func (this *WlbExtorderCreateRequest) SetReturnTmsCode(value string) {
	this.Set("return_tms_code", value)
}

/* 投递时间范围要求,格式'15:20'用分号隔开 */
func (this *WlbExtorderCreateRequest) SetScheduleEnd(value string) {
	this.Set("schedule_end", value)
}

/* 投递时间范围要求,格式'13:20'用分号隔开 */
func (this *WlbExtorderCreateRequest) SetScheduleStart(value string) {
	this.Set("schedule_start", value)
}

/* 投递时延要求: （1）INSTANT_ARRIVED： 当日达 （2）TOMMORROY_MORNING_ARRIVED：次晨达 （3）TOMMORROY_ARRIVED：次日达 （4）工作日：WORK_DAY （5）节假日：WEEKED_DAY */
func (this *WlbExtorderCreateRequest) SetScheduleType(value string) {
	this.Set("schedule_type", value)
}

/* 发货方信息，发收方发货方信息必须传 手机和电话必选其一 邮编^^^省^^^市^^^区^^^具体地址^^^收件方名称^^^手机^^^电话 如果某一个字段的数据为空时，必须传NA */
func (this *WlbExtorderCreateRequest) SetSenderInfo(value string) {
	this.Set("sender_info", value)
}

/* 服务费用，以分为单位 */
func (this *WlbExtorderCreateRequest) SetServiceFee(value string) {
	this.Set("service_fee", value)
}

/* 物流运送方式: （1）MAIL:平邮 （2）EXPRESS :快递？ (3) EMS: EMS (4) OTHER:其他 */
func (this *WlbExtorderCreateRequest) SetShippingType(value string) {
	this.Set("shipping_type", value)
}

/* 子订单外部订单编号 */
func (this *WlbExtorderCreateRequest) SetSubExtOrderCode(value string) {
	this.Set("sub_ext_order_code", value)
}

/* 快递公司的代码 */
func (this *WlbExtorderCreateRequest) SetTmsCode(value string) {
	this.Set("tms_code", value)
}

/* 卖家建议的物流公司编码,或者退货时的发货公司编码 */
func (this *WlbExtorderCreateRequest) SetTmsTpCode(value string) {
	this.Set("tms_tp_code", value)
}

/* 物品总价，以分为单位 */
func (this *WlbExtorderCreateRequest) SetTotalPrice(value string) {
	this.Set("total_price", value)
}

/* 交易订单类型，1：MAIN-表示主订单，2：SUB-表示子订单 */
func (this *WlbExtorderCreateRequest) SetTradeOrderType(value string) {
	this.Set("trade_order_type", value)
}

/* 仓库的代码 */
func (this *WlbExtorderCreateRequest) SetWmsCode(value string) {
	this.Set("wms_code", value)
}

/* 调拨单目地仓库 */
func (this *WlbExtorderCreateRequest) SetWmsCodeDestination(value string) {
	this.Set("wms_code_destination", value)
}

type WlbExtorderCreateResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	WlbExtorderCreateResponseResult `json:"wlb_extorder_create_response"`
}
type WlbExtorderCreateResponseResult struct {
	/* 订单创建时间 */
	CreateTime string `json:"create_time"`
	/* 物流宝外部订单创建成功后，返回物流宝的外部订单编号；如果订单创建失败，该字段为空。 */
	ExtOrderCode string `json:"ext_order_code"`
}

/*taobao.wlb.extorder.page.get*/
type WlbExtorderPageGetRequest struct {
	values url.Values
}

func (this *WlbExtorderPageGetRequest) GetApiMethodName() string {
	return "taobao.wlb.extorder.page.get"
}
func (this *WlbExtorderPageGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbExtorderPageGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询截止时间 */
func (this *WlbExtorderPageGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 外部单据编号 */
func (this *WlbExtorderPageGetRequest) SetExtOrderCode(value string) {
	this.Set("ext_order_code", value)
}

/* 外部订单来源： （1）EXT_LC：推荐物流 （2）EXT_WLB：wlb_ext （3）EXT_ERP：erp （4）EXT_WMS： WMS盘点 （5）EXT_FENXIAO：分销  (6) EXT_OMS: OMS （7）EXT_ELINK： ELINK */
func (this *WlbExtorderPageGetRequest) SetExtOrderSource(value string) {
	this.Set("ext_order_source", value)
}

/* 订单状态： DRAFT-订单已创建，CANCLE-订单已取消，CLOSED-订单关闭，SEND2WMS-下发中，WMS_RECEIVED-已下发，REJECT-接收方拒签，WMS_SEND-已发货，SIGNED-签收成功 */
func (this *WlbExtorderPageGetRequest) SetExtOrderStatus(value string) {
	this.Set("ext_order_status", value)
}

/* 分页的第几页 */
func (this *WlbExtorderPageGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页多少条 */
func (this *WlbExtorderPageGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 查询开始时间 */
func (this *WlbExtorderPageGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type WlbExtorderPageGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	WlbExtorderPageGetResponseResult `json:"wlb_extorder_page_get_response"`
}
type WlbExtorderPageGetResponseResult struct {
	/* 分页查询返回结果 */
	ExtOrderList []*WlbExtOrder `json:"ext_order_list"`
	/* 总条数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.wlb.icitem.regionsale.operate*/
type WlbIcitemRegionsaleOperateRequest struct {
	values url.Values
}

func (this *WlbIcitemRegionsaleOperateRequest) GetApiMethodName() string {
	return "taobao.wlb.icitem.regionsale.operate"
}
func (this *WlbIcitemRegionsaleOperateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbIcitemRegionsaleOperateRequest) GetValues() url.Values {
	return this.values
}

/* 前台宝贝id */
func (this *WlbIcitemRegionsaleOperateRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 1:表示添加区域化销售服务
-1:表示去除区域化销售服务 */
func (this *WlbIcitemRegionsaleOperateRequest) SetOpType(value string) {
	this.Set("op_type", value)
}

type WlbIcitemRegionsaleOperateResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	WlbIcitemRegionsaleOperateResponseResult `json:"wlb_icitem_regionsale_operate_response"`
}
type WlbIcitemRegionsaleOperateResponseResult struct {
	/* 修改时间 */
	GmtModified string `json:"gmt_modified"`
}

/*taobao.wlb.inventory.detail.get*/
type WlbInventoryDetailGetRequest struct {
	values url.Values
}

func (this *WlbInventoryDetailGetRequest) GetApiMethodName() string {
	return "taobao.wlb.inventory.detail.get"
}
func (this *WlbInventoryDetailGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbInventoryDetailGetRequest) GetValues() url.Values {
	return this.values
}

/* 库存类型列表，值包括：
VENDIBLE--可销售库存
FREEZE--冻结库存
ONWAY--在途库存
DEFECT--残次品库存
ENGINE_DAMAGE--机损
BOX_DAMAGE--箱损
EXPIRATION--过保 */
func (this *WlbInventoryDetailGetRequest) SetInventoryTypeList(value string) {
	this.Set("inventory_type_list", value)
}

/* 商品ID */
func (this *WlbInventoryDetailGetRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 仓库编码 */
func (this *WlbInventoryDetailGetRequest) SetStoreCode(value string) {
	this.Set("store_code", value)
}

type WlbInventoryDetailGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	WlbInventoryDetailGetResponseResult `json:"wlb_inventory_detail_get_response"`
}
type WlbInventoryDetailGetResponseResult struct {
	/* 库存详情列表 */
	InventoryList []*WlbInventory `json:"inventory_list"`
	/* 商品ID */
	ItemId int64 `json:"item_id"`
}

/*taobao.wlb.inventory.sync*/
type WlbInventorySyncRequest struct {
	values url.Values
}

func (this *WlbInventorySyncRequest) GetApiMethodName() string {
	return "taobao.wlb.inventory.sync"
}
func (this *WlbInventorySyncRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbInventorySyncRequest) GetValues() url.Values {
	return this.values
}

/* 商品ID */
func (this *WlbInventorySyncRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 外部实体类型.存如下值
IC_ITEM --表示IC商品;
IC_SKU --表示IC最小单位商品;
WLB_ITEM  --表示WLB商品.
若值不在范围内，则按WLB_ITEM处理 */
func (this *WlbInventorySyncRequest) SetItemType(value string) {
	this.Set("item_type", value)
}

/* 库存数量 */
func (this *WlbInventorySyncRequest) SetQuantity(value string) {
	this.Set("quantity", value)
}

type WlbInventorySyncResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	WlbInventorySyncResponseResult `json:"wlb_inventory_sync_response"`
}
type WlbInventorySyncResponseResult struct {
	/* 修改时间 */
	GmtModified string `json:"gmt_modified"`
}

/*taobao.wlb.inventorylog.query*/
type WlbInventorylogQueryRequest struct {
	values url.Values
}

func (this *WlbInventorylogQueryRequest) GetApiMethodName() string {
	return "taobao.wlb.inventorylog.query"
}
func (this *WlbInventorylogQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbInventorylogQueryRequest) GetValues() url.Values {
	return this.values
}

/* 结束修改时间,小于等于该时间 */
func (this *WlbInventorylogQueryRequest) SetGmtEnd(value string) {
	this.Set("gmt_end", value)
}

/* 起始修改时间,大于等于该时间 */
func (this *WlbInventorylogQueryRequest) SetGmtStart(value string) {
	this.Set("gmt_start", value)
}

/* 商品ID */
func (this *WlbInventorylogQueryRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 库存操作作类型(可以为空)
CHU_KU 1-出库
RU_KU 2-入库
FREEZE 3-冻结
THAW 4-解冻
CHECK_FREEZE 5-冻结确认
CHANGE_KU 6-库存类型变更
若值不在范围内，则按CHU_KU处理 */
func (this *WlbInventorylogQueryRequest) SetOpType(value string) {
	this.Set("op_type", value)
}

/* 可指定授权的用户来查询 */
func (this *WlbInventorylogQueryRequest) SetOpUserId(value string) {
	this.Set("op_user_id", value)
}

/* 单号 */
func (this *WlbInventorylogQueryRequest) SetOrderCode(value string) {
	this.Set("order_code", value)
}

/* 当前页 */
func (this *WlbInventorylogQueryRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 分页记录个数 */
func (this *WlbInventorylogQueryRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 仓库编码 */
func (this *WlbInventorylogQueryRequest) SetStoreCode(value string) {
	this.Set("store_code", value)
}

type WlbInventorylogQueryResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	WlbInventorylogQueryResponseResult `json:"wlb_inventorylog_query_response"`
}
type WlbInventorylogQueryResponseResult struct {
	/* 库存变更记录列表 */
	InventoryLogList []*WlbItemInventoryLog `json:"inventory_log_list"`
	/* 记录数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.wlb.item.add*/
type WlbItemAddRequest struct {
	values url.Values
}

func (this *WlbItemAddRequest) GetApiMethodName() string {
	return "taobao.wlb.item.add"
}
func (this *WlbItemAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemAddRequest) GetValues() url.Values {
	return this.values
}

/* 商品颜色 */
func (this *WlbItemAddRequest) SetColor(value string) {
	this.Set("color", value)
}

/* 货类 */
func (this *WlbItemAddRequest) SetGoodsCat(value string) {
	this.Set("goods_cat", value)
}

/* 商品高度，单位毫米 */
func (this *WlbItemAddRequest) SetHeight(value string) {
	this.Set("height", value)
}

/* 是否危险品 */
func (this *WlbItemAddRequest) SetIsDangerous(value string) {
	this.Set("is_dangerous", value)
}

/* 是否易碎品 */
func (this *WlbItemAddRequest) SetIsFriable(value string) {
	this.Set("is_friable", value)
}

/* 是否sku */
func (this *WlbItemAddRequest) SetIsSku(value string) {
	this.Set("is_sku", value)
}

/* 商品编码 */
func (this *WlbItemAddRequest) SetItemCode(value string) {
	this.Set("item_code", value)
}

/* 商品长度，单位毫米 */
func (this *WlbItemAddRequest) SetLength(value string) {
	this.Set("length", value)
}

/* 商品名称 */
func (this *WlbItemAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 商品包装材料类型 */
func (this *WlbItemAddRequest) SetPackageMaterial(value string) {
	this.Set("package_material", value)
}

/* 商品价格，单位：分 */
func (this *WlbItemAddRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 计价货类 */
func (this *WlbItemAddRequest) SetPricingCat(value string) {
	this.Set("pricing_cat", value)
}

/* 属性名列表,目前支持的属性：
毛重:GWeight
净重:Nweight
皮重: Tweight
自定义属性：
paramkey1
paramkey2
paramkey3
paramkey4 */
func (this *WlbItemAddRequest) SetProNameList(value string) {
	this.Set("pro_name_list", value)
}

/* 属性值列表：
10,8 */
func (this *WlbItemAddRequest) SetProValueList(value string) {
	this.Set("pro_value_list", value)
}

/* 商品备注 */
func (this *WlbItemAddRequest) SetRemark(value string) {
	this.Set("remark", value)
}

/* 是否支持批次 */
func (this *WlbItemAddRequest) SetSupportBatch(value string) {
	this.Set("support_batch", value)
}

/* 商品标题 */
func (this *WlbItemAddRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* NORMAL--普通商品
COMBINE--组合商品
DISTRIBUTION--分销 */
func (this *WlbItemAddRequest) SetType(value string) {
	this.Set("type", value)
}

/* 商品体积，单位立方厘米 */
func (this *WlbItemAddRequest) SetVolume(value string) {
	this.Set("volume", value)
}

/* 商品重量，单位G */
func (this *WlbItemAddRequest) SetWeight(value string) {
	this.Set("weight", value)
}

/* 商品宽度，单位毫米 */
func (this *WlbItemAddRequest) SetWidth(value string) {
	this.Set("width", value)
}

type WlbItemAddResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	WlbItemAddResponseResult `json:"wlb_item_add_response"`
}
type WlbItemAddResponseResult struct {
	/* 新增的商品 */
	ItemId int64 `json:"item_id"`
}

/*taobao.wlb.item.authorization.add*/
type WlbItemAuthorizationAddRequest struct {
	values url.Values
}

func (this *WlbItemAuthorizationAddRequest) GetApiMethodName() string {
	return "taobao.wlb.item.authorization.add"
}
func (this *WlbItemAuthorizationAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemAuthorizationAddRequest) GetValues() url.Values {
	return this.values
}

/* 授权类型：1=全量授权，0=部分授权
当部分授权时，需要指定授权数量quantity */
func (this *WlbItemAuthorizationAddRequest) SetAuthType(value string) {
	this.Set("auth_type", value)
}

/* 授权结束时间 */
func (this *WlbItemAuthorizationAddRequest) SetAuthorizeEndTime(value string) {
	this.Set("authorize_end_time", value)
}

/* 授权开始时间 */
func (this *WlbItemAuthorizationAddRequest) SetAuthorizeStartTime(value string) {
	this.Set("authorize_start_time", value)
}

/* 被授权人用户id */
func (this *WlbItemAuthorizationAddRequest) SetConsignUserNick(value string) {
	this.Set("consign_user_nick", value)
}

/* 商品id列表，以英文逗号,分隔，最多可放入50个商品ID。 */
func (this *WlbItemAuthorizationAddRequest) SetItemIdList(value string) {
	this.Set("item_id_list", value)
}

/* 规则名称<br /> 支持最大长度为：255<br /> 支持的最大列表长度为：255 */
func (this *WlbItemAuthorizationAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 授权数量 */
func (this *WlbItemAuthorizationAddRequest) SetQuantity(value string) {
	this.Set("quantity", value)
}

/* 授权规则：目前只有GRANT_FIX，按照数量授权 */
func (this *WlbItemAuthorizationAddRequest) SetRuleCode(value string) {
	this.Set("rule_code", value)
}

type WlbItemAuthorizationAddResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	WlbItemAuthorizationAddResponseResult `json:"wlb_item_authorization_add_response"`
}
type WlbItemAuthorizationAddResponseResult struct {
	/* 授权规则ID列表 */
	RuleIdList []int64 `json:"rule_id_list"`
}

/*taobao.wlb.item.authorization.delete*/
type WlbItemAuthorizationDeleteRequest struct {
	values url.Values
}

func (this *WlbItemAuthorizationDeleteRequest) GetApiMethodName() string {
	return "taobao.wlb.item.authorization.delete"
}
func (this *WlbItemAuthorizationDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemAuthorizationDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 授权关系ID */
func (this *WlbItemAuthorizationDeleteRequest) SetAuthorizeId(value string) {
	this.Set("authorize_id", value)
}

type WlbItemAuthorizationDeleteResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	WlbItemAuthorizationDeleteResponseResult `json:"wlb_item_authorization_delete_response"`
}
type WlbItemAuthorizationDeleteResponseResult struct {
	/* 修改时间 */
	GmtModified string `json:"gmt_modified"`
}

/*taobao.wlb.item.authorization.query*/
type WlbItemAuthorizationQueryRequest struct {
	values url.Values
}

func (this *WlbItemAuthorizationQueryRequest) GetApiMethodName() string {
	return "taobao.wlb.item.authorization.query"
}
func (this *WlbItemAuthorizationQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemAuthorizationQueryRequest) GetValues() url.Values {
	return this.values
}

/* 授权商品ID */
func (this *WlbItemAuthorizationQueryRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 授权名称<br /> 支持最大长度为：255<br /> 支持的最大列表长度为：255 */
func (this *WlbItemAuthorizationQueryRequest) SetName(value string) {
	this.Set("name", value)
}

/* 当前页 */
func (this *WlbItemAuthorizationQueryRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 分页记录个数，如果用户输入的记录数大于50，则一页显示50条记录 */
func (this *WlbItemAuthorizationQueryRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 授权编码 */
func (this *WlbItemAuthorizationQueryRequest) SetRuleCode(value string) {
	this.Set("rule_code", value)
}

/* 状态： 只能输入如下值,范围外的默认按VALID处理;不选则查询所有;
VALID -- 1 有效； INVALIDATION -- 2 失效 */
func (this *WlbItemAuthorizationQueryRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 类型：可由不同角色来查询，默认值OWNER,
OWNER -- 授权人,
ON_COMMISSION -- 被授权人 */
func (this *WlbItemAuthorizationQueryRequest) SetType(value string) {
	this.Set("type", value)
}

type WlbItemAuthorizationQueryResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	WlbItemAuthorizationQueryResponseResult `json:"wlb_item_authorization_query_response"`
}
type WlbItemAuthorizationQueryResponseResult struct {
	/* 授权关系列表 */
	AuthorizationList []*WlbAuthorization `json:"authorization_list"`
	/* 结果总数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.wlb.item.batch.query*/
type WlbItemBatchQueryRequest struct {
	values url.Values
}

func (this *WlbItemBatchQueryRequest) GetApiMethodName() string {
	return "taobao.wlb.item.batch.query"
}
func (this *WlbItemBatchQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemBatchQueryRequest) GetValues() url.Values {
	return this.values
}

/* 需要查询的商品ID列表，以字符串表示，ID间以;隔开 */
func (this *WlbItemBatchQueryRequest) SetItemIds(value string) {
	this.Set("item_ids", value)
}

/* 分页查询参数，指定查询页数，默认为1 */
func (this *WlbItemBatchQueryRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 分页查询参数，每页查询数量，默认20，最大值50,大于50时按照50条查询 */
func (this *WlbItemBatchQueryRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 仓库编号 */
func (this *WlbItemBatchQueryRequest) SetStoreCode(value string) {
	this.Set("store_code", value)
}

type WlbItemBatchQueryResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	WlbItemBatchQueryResponseResult `json:"wlb_item_batch_query_response"`
}
type WlbItemBatchQueryResponseResult struct {
	/* 商品库存及批次信息查询结果 */
	ItemInventoryBatchList []*WlbItemBatchInventory `json:"item_inventory_batch_list"`
	/* 返回结果记录的数量 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.wlb.item.combination.create*/
type WlbItemCombinationCreateRequest struct {
	values url.Values
}

func (this *WlbItemCombinationCreateRequest) GetApiMethodName() string {
	return "taobao.wlb.item.combination.create"
}
func (this *WlbItemCombinationCreateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemCombinationCreateRequest) GetValues() url.Values {
	return this.values
}

/* 组合商品的id列表 */
func (this *WlbItemCombinationCreateRequest) SetDestItemList(value string) {
	this.Set("dest_item_list", value)
}

/* 要建立组合关系的商品id */
func (this *WlbItemCombinationCreateRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 组成组合商品的比例列表，描述组合商品的组合比例，默认为1,1,1 */
func (this *WlbItemCombinationCreateRequest) SetProportionList(value string) {
	this.Set("proportion_list", value)
}

type WlbItemCombinationCreateResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	WlbItemCombinationCreateResponseResult `json:"wlb_item_combination_create_response"`
}
type WlbItemCombinationCreateResponseResult struct {
	/* 组合关系创建时间 */
	GmtCreate string `json:"gmt_create"`
}

/*taobao.wlb.item.combination.delete*/
type WlbItemCombinationDeleteRequest struct {
	values url.Values
}

func (this *WlbItemCombinationDeleteRequest) GetApiMethodName() string {
	return "taobao.wlb.item.combination.delete"
}
func (this *WlbItemCombinationDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemCombinationDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 组合商品的id列表 */
func (this *WlbItemCombinationDeleteRequest) SetDestItemList(value string) {
	this.Set("dest_item_list", value)
}

/* 组合关系的商品id */
func (this *WlbItemCombinationDeleteRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

type WlbItemCombinationDeleteResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	WlbItemCombinationDeleteResponseResult `json:"wlb_item_combination_delete_response"`
}
type WlbItemCombinationDeleteResponseResult struct {
	/* 修改时间 */
	GmtModified string `json:"gmt_modified"`
}

/*taobao.wlb.item.combination.get*/
type WlbItemCombinationGetRequest struct {
	values url.Values
}

func (this *WlbItemCombinationGetRequest) GetApiMethodName() string {
	return "taobao.wlb.item.combination.get"
}
func (this *WlbItemCombinationGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemCombinationGetRequest) GetValues() url.Values {
	return this.values
}

/* 要查询的组合商品id */
func (this *WlbItemCombinationGetRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

type WlbItemCombinationGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	WlbItemCombinationGetResponseResult `json:"wlb_item_combination_get_response"`
}
type WlbItemCombinationGetResponseResult struct {
	/* 组合子商品id列表 */
	ItemIdList []int64 `json:"item_id_list"`
}

/*taobao.wlb.item.consignment.create*/
type WlbItemConsignmentCreateRequest struct {
	values url.Values
}

func (this *WlbItemConsignmentCreateRequest) GetApiMethodName() string {
	return "taobao.wlb.item.consignment.create"
}
func (this *WlbItemConsignmentCreateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemConsignmentCreateRequest) GetValues() url.Values {
	return this.values
}

/* 商品id */
func (this *WlbItemConsignmentCreateRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 代销数量 */
func (this *WlbItemConsignmentCreateRequest) SetNumber(value string) {
	this.Set("number", value)
}

/* 货主商品id */
func (this *WlbItemConsignmentCreateRequest) SetOwnerItemId(value string) {
	this.Set("owner_item_id", value)
}

/* 货主id */
func (this *WlbItemConsignmentCreateRequest) SetOwnerUserId(value string) {
	this.Set("owner_user_id", value)
}

/* 通过taobao.wlb.item.authorization.add接口创建后得到的rule_id，规则中设定了代销商可以代销的商品数量 */
func (this *WlbItemConsignmentCreateRequest) SetRuleId(value string) {
	this.Set("rule_id", value)
}

type WlbItemConsignmentCreateResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	WlbItemConsignmentCreateResponseResult `json:"wlb_item_consignment_create_response"`
}
type WlbItemConsignmentCreateResponseResult struct {
	/* 代销关系唯一标识 */
	ConsignmentId int64 `json:"consignment_id"`
}

/*taobao.wlb.item.consignment.delete*/
type WlbItemConsignmentDeleteRequest struct {
	values url.Values
}

func (this *WlbItemConsignmentDeleteRequest) GetApiMethodName() string {
	return "taobao.wlb.item.consignment.delete"
}
func (this *WlbItemConsignmentDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemConsignmentDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 代销商前台宝贝ID */
func (this *WlbItemConsignmentDeleteRequest) SetIcItemId(value string) {
	this.Set("ic_item_id", value)
}

/* 货主的物流宝商品ID */
func (this *WlbItemConsignmentDeleteRequest) SetOwnerItemId(value string) {
	this.Set("owner_item_id", value)
}

/* 授权关系id */
func (this *WlbItemConsignmentDeleteRequest) SetRuleId(value string) {
	this.Set("rule_id", value)
}

type WlbItemConsignmentDeleteResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	WlbItemConsignmentDeleteResponseResult `json:"wlb_item_consignment_delete_response"`
}
type WlbItemConsignmentDeleteResponseResult struct {
	/* 修改时间 */
	GmtModified string `json:"gmt_modified"`
}

/*taobao.wlb.item.consignment.page.get*/
type WlbItemConsignmentPageGetRequest struct {
	values url.Values
}

func (this *WlbItemConsignmentPageGetRequest) GetApiMethodName() string {
	return "taobao.wlb.item.consignment.page.get"
}
func (this *WlbItemConsignmentPageGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemConsignmentPageGetRequest) GetValues() url.Values {
	return this.values
}

/* 代销商宝贝id */
func (this *WlbItemConsignmentPageGetRequest) SetIcItemId(value string) {
	this.Set("ic_item_id", value)
}

/* 供应商商品id */
func (this *WlbItemConsignmentPageGetRequest) SetOwnerItemId(value string) {
	this.Set("owner_item_id", value)
}

/* 供应商用户昵称 */
func (this *WlbItemConsignmentPageGetRequest) SetOwnerUserNick(value string) {
	this.Set("owner_user_nick", value)
}

type WlbItemConsignmentPageGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	WlbItemConsignmentPageGetResponseResult `json:"wlb_item_consignment_page_get_response"`
}
type WlbItemConsignmentPageGetResponseResult struct {
	/* 条件查询结果总数 */
	TotalCount int64 `json:"total_count"`
	/* 代销关系列表 */
	WlbConsignMents []*WlbConsignMent `json:"wlb_consign_ments"`
}

/*taobao.wlb.item.consignment.query*/
type WlbItemConsignmentQueryRequest struct {
	values url.Values
}

func (this *WlbItemConsignmentQueryRequest) GetApiMethodName() string {
	return "taobao.wlb.item.consignment.query"
}
func (this *WlbItemConsignmentQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemConsignmentQueryRequest) GetValues() url.Values {
	return this.values
}

/* 授权结束时间 */
func (this *WlbItemConsignmentQueryRequest) SetAuthorizeEndTime(value string) {
	this.Set("authorize_end_time", value)
}

/* 授权开始时间 */
func (this *WlbItemConsignmentQueryRequest) SetAuthorizeStartTime(value string) {
	this.Set("authorize_start_time", value)
}

/* 货主的用户昵称，未设置则查询全部 */
func (this *WlbItemConsignmentQueryRequest) SetOwnerUserNick(value string) {
	this.Set("owner_user_nick", value)
}

/* 当前页 */
func (this *WlbItemConsignmentQueryRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 分页记录个数，如果用户输入的记录数大于50，则一页显示50条记录 */
func (this *WlbItemConsignmentQueryRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type WlbItemConsignmentQueryResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	WlbItemConsignmentQueryResponseResult `json:"wlb_item_consignment_query_response"`
}
type WlbItemConsignmentQueryResponseResult struct {
	/* 商品信息列表 */
	ItemList []*WlbItem `json:"item_list"`
	/* 结果总数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.wlb.item.delete*/
type WlbItemDeleteRequest struct {
	values url.Values
}

func (this *WlbItemDeleteRequest) GetApiMethodName() string {
	return "taobao.wlb.item.delete"
}
func (this *WlbItemDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 商品ID */
func (this *WlbItemDeleteRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 商品所有人淘宝nick */
func (this *WlbItemDeleteRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type WlbItemDeleteResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	WlbItemDeleteResponseResult `json:"wlb_item_delete_response"`
}
type WlbItemDeleteResponseResult struct {
	/* 修改时间 */
	GmtModified string `json:"gmt_modified"`
}

/*taobao.wlb.item.get*/
type WlbItemGetRequest struct {
	values url.Values
}

func (this *WlbItemGetRequest) GetApiMethodName() string {
	return "taobao.wlb.item.get"
}
func (this *WlbItemGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品ID<br /> 支持的最大列表长度为：20 */
func (this *WlbItemGetRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

type WlbItemGetResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	WlbItemGetResponseResult `json:"wlb_item_get_response"`
}
type WlbItemGetResponseResult struct {
	/* 商品信息 */
	Item *WlbItem `json:"item"`
}

/*taobao.wlb.item.map.get*/
type WlbItemMapGetRequest struct {
	values url.Values
}

func (this *WlbItemMapGetRequest) GetApiMethodName() string {
	return "taobao.wlb.item.map.get"
}
func (this *WlbItemMapGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemMapGetRequest) GetValues() url.Values {
	return this.values
}

/* 要查询映射关系的物流宝商品id */
func (this *WlbItemMapGetRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

type WlbItemMapGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	WlbItemMapGetResponseResult `json:"wlb_item_map_get_response"`
}
type WlbItemMapGetResponseResult struct {
	/* 外部商品实体列表 */
	OutEntityItemList []*OutEntityItem `json:"out_entity_item_list"`
}

/*taobao.wlb.item.map.get.by.extentity*/
type WlbItemMapGetByExtentityRequest struct {
	values url.Values
}

func (this *WlbItemMapGetByExtentityRequest) GetApiMethodName() string {
	return "taobao.wlb.item.map.get.by.extentity"
}
func (this *WlbItemMapGetByExtentityRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemMapGetByExtentityRequest) GetValues() url.Values {
	return this.values
}

/* 外部实体类型对应的商品id */
func (this *WlbItemMapGetByExtentityRequest) SetExtEntityId(value string) {
	this.Set("ext_entity_id", value)
}

/* 外部实体类型： IC_ITEM--ic商品 IC_SKU--ic销售单元 */
func (this *WlbItemMapGetByExtentityRequest) SetExtEntityType(value string) {
	this.Set("ext_entity_type", value)
}

type WlbItemMapGetByExtentityResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	WlbItemMapGetByExtentityResponseResult `json:"wlb_item_map_get_by_extentity_response"`
}
type WlbItemMapGetByExtentityResponseResult struct {
	/* 物流宝商品id */
	ItemId int64 `json:"item_id"`
}

/*taobao.wlb.item.query*/
type WlbItemQueryRequest struct {
	values url.Values
}

func (this *WlbItemQueryRequest) GetApiMethodName() string {
	return "taobao.wlb.item.query"
}
func (this *WlbItemQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemQueryRequest) GetValues() url.Values {
	return this.values
}

/* 是否是最小库存单元，只有最小库存单元的商品才可以有库存,值只能给"true","false"来表示;
若值不在范围内，则按true处理 */
func (this *WlbItemQueryRequest) SetIsSku(value string) {
	this.Set("is_sku", value)
}

/* 商家编码<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *WlbItemQueryRequest) SetItemCode(value string) {
	this.Set("item_code", value)
}

/* ITEM类型(只允许输入以下英文或空)
NORMAL  0:普通商品;
COMBINE  1:是否是组合商品
DISTRIBUTION  2:是否是分销商品(货主是别人)
若值不在范围内，则按NORMAL处理 */
func (this *WlbItemQueryRequest) SetItemType(value string) {
	this.Set("item_type", value)
}

/* 商品名称 */
func (this *WlbItemQueryRequest) SetName(value string) {
	this.Set("name", value)
}

/* 当前页<br /> 支持最小值为：1 */
func (this *WlbItemQueryRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 分页记录个数，如果用户输入的记录数大于50，则一页显示50条记录<br /> 支持最大值为：50<br /> 支持最小值为：1 */
func (this *WlbItemQueryRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 父ID,只有is_sku=1时才能有父ID，商品也可以没有付商品 */
func (this *WlbItemQueryRequest) SetParentId(value string) {
	this.Set("parent_id", value)
}

/* 只能输入以下值或空：
ITEM_STATUS_VALID -- 1 表示 有效；
ITEM_STATUS_LOCK  -- 2 表示锁住。
若值不在范围内，按ITEM_STATUS_VALID处理 */
func (this *WlbItemQueryRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 商品前台销售名字<br /> 支持最大长度为：255<br /> 支持的最大列表长度为：255 */
func (this *WlbItemQueryRequest) SetTitle(value string) {
	this.Set("title", value)
}

type WlbItemQueryResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	WlbItemQueryResponseResult `json:"wlb_item_query_response"`
}
type WlbItemQueryResponseResult struct {
	/* 商品信息列表 */
	ItemList []*WlbItem `json:"item_list"`
	/* 结果总数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.wlb.item.synchronize*/
type WlbItemSynchronizeRequest struct {
	values url.Values
}

func (this *WlbItemSynchronizeRequest) GetApiMethodName() string {
	return "taobao.wlb.item.synchronize"
}
func (this *WlbItemSynchronizeRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemSynchronizeRequest) GetValues() url.Values {
	return this.values
}

/* 外部实体ID<br /> 支持的最大列表长度为：64 */
func (this *WlbItemSynchronizeRequest) SetExtEntityId(value string) {
	this.Set("ext_entity_id", value)
}

/* 外部实体类型.存如下值
IC_ITEM   --表示IC商品
IC_SKU    --表示IC最小单位商品
若输入其他值，则按IC_ITEM处理 */
func (this *WlbItemSynchronizeRequest) SetExtEntityType(value string) {
	this.Set("ext_entity_type", value)
}

/* 商品ID<br /> 支持的最大列表长度为：20 */
func (this *WlbItemSynchronizeRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 商品所有人淘宝nick<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *WlbItemSynchronizeRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type WlbItemSynchronizeResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	WlbItemSynchronizeResponseResult `json:"wlb_item_synchronize_response"`
}
type WlbItemSynchronizeResponseResult struct {
	/* 修改时间 */
	GmtModified string `json:"gmt_modified"`
}

/*taobao.wlb.item.synchronize.delete*/
type WlbItemSynchronizeDeleteRequest struct {
	values url.Values
}

func (this *WlbItemSynchronizeDeleteRequest) GetApiMethodName() string {
	return "taobao.wlb.item.synchronize.delete"
}
func (this *WlbItemSynchronizeDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemSynchronizeDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 外部实体ID<br /> 支持的最大列表长度为：64 */
func (this *WlbItemSynchronizeDeleteRequest) SetExtEntityId(value string) {
	this.Set("ext_entity_id", value)
}

/* 外部实体类型.存如下值 IC_ITEM --表示IC商品; IC_SKU --表示IC最小单位商品;若输入其他值，则按IC_ITEM处理 */
func (this *WlbItemSynchronizeDeleteRequest) SetExtEntityType(value string) {
	this.Set("ext_entity_type", value)
}

/* 物流宝商品ID<br /> 支持的最大列表长度为：20 */
func (this *WlbItemSynchronizeDeleteRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

type WlbItemSynchronizeDeleteResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	WlbItemSynchronizeDeleteResponseResult `json:"wlb_item_synchronize_delete_response"`
}
type WlbItemSynchronizeDeleteResponseResult struct {
	/* 修改时间 */
	GmtModified string `json:"gmt_modified"`
}

/*taobao.wlb.item.update*/
type WlbItemUpdateRequest struct {
	values url.Values
}

func (this *WlbItemUpdateRequest) GetApiMethodName() string {
	return "taobao.wlb.item.update"
}
func (this *WlbItemUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbItemUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 商品颜色 */
func (this *WlbItemUpdateRequest) SetColor(value string) {
	this.Set("color", value)
}

/* 需要删除的商品属性key列表 */
func (this *WlbItemUpdateRequest) SetDeletePropertyKeyList(value string) {
	this.Set("delete_property_key_list", value)
}

/* 商品货类 */
func (this *WlbItemUpdateRequest) SetGoodsCat(value string) {
	this.Set("goods_cat", value)
}

/* 商品高度，单位厘米 */
func (this *WlbItemUpdateRequest) SetHeight(value string) {
	this.Set("height", value)
}

/* 要修改的商品id */
func (this *WlbItemUpdateRequest) SetId(value string) {
	this.Set("id", value)
}

/* 是否危险品 */
func (this *WlbItemUpdateRequest) SetIsDangerous(value string) {
	this.Set("is_dangerous", value)
}

/* 是否易碎品 */
func (this *WlbItemUpdateRequest) SetIsFriable(value string) {
	this.Set("is_friable", value)
}

/* 商品长度，单位厘米 */
func (this *WlbItemUpdateRequest) SetLength(value string) {
	this.Set("length", value)
}

/* 要修改的商品名称 */
func (this *WlbItemUpdateRequest) SetName(value string) {
	this.Set("name", value)
}

/* 商品包装材料类型 */
func (this *WlbItemUpdateRequest) SetPackageMaterial(value string) {
	this.Set("package_material", value)
}

/* 商品计价货类 */
func (this *WlbItemUpdateRequest) SetPricingCat(value string) {
	this.Set("pricing_cat", value)
}

/* 要修改的商品备注 */
func (this *WlbItemUpdateRequest) SetRemark(value string) {
	this.Set("remark", value)
}

/* 要修改的商品标题 */
func (this *WlbItemUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 需要修改的商品属性值的列表，如果属性不存在，则新增属性 */
func (this *WlbItemUpdateRequest) SetUpdatePropertyKeyList(value string) {
	this.Set("update_property_key_list", value)
}

/* 需要修改的属性值的列表 */
func (this *WlbItemUpdateRequest) SetUpdatePropertyValueList(value string) {
	this.Set("update_property_value_list", value)
}

/* 商品体积，单位立方厘米 */
func (this *WlbItemUpdateRequest) SetVolume(value string) {
	this.Set("volume", value)
}

/* 商品重量，单位G */
func (this *WlbItemUpdateRequest) SetWeight(value string) {
	this.Set("weight", value)
}

/* 商品宽度，单位厘米 */
func (this *WlbItemUpdateRequest) SetWidth(value string) {
	this.Set("width", value)
}

type WlbItemUpdateResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	WlbItemUpdateResponseResult `json:"wlb_item_update_response"`
}
type WlbItemUpdateResponseResult struct {
	/* 修改时间 */
	GmtModified string `json:"gmt_modified"`
}

/*taobao.wlb.notify.message.confirm*/
type WlbNotifyMessageConfirmRequest struct {
	values url.Values
}

func (this *WlbNotifyMessageConfirmRequest) GetApiMethodName() string {
	return "taobao.wlb.notify.message.confirm"
}
func (this *WlbNotifyMessageConfirmRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbNotifyMessageConfirmRequest) GetValues() url.Values {
	return this.values
}

/* 物流宝通知消息的id，通过taobao.wlb.notify.message.page.get接口得到的WlbMessage数据结构中的id字段 */
func (this *WlbNotifyMessageConfirmRequest) SetMessageId(value string) {
	this.Set("message_id", value)
}

type WlbNotifyMessageConfirmResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	WlbNotifyMessageConfirmResponseResult `json:"wlb_notify_message_confirm_response"`
}
type WlbNotifyMessageConfirmResponseResult struct {
	/* 物流宝消息确认时间 */
	GmtModified string `json:"gmt_modified"`
}

/*taobao.wlb.notify.message.page.get*/
type WlbNotifyMessagePageGetRequest struct {
	values url.Values
}

func (this *WlbNotifyMessagePageGetRequest) GetApiMethodName() string {
	return "taobao.wlb.notify.message.page.get"
}
func (this *WlbNotifyMessagePageGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbNotifyMessagePageGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询条件：记录截至时间 */
func (this *WlbNotifyMessagePageGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 通知消息编码：
STOCK_IN_NOT_CONSISTENT---入库单不一致
CANCEL_ORDER_SUCCESS---取消订单成功
INVENTORY_CHECK---盘点
CANCEL_ORDER_FAILURE---取消订单失败
ORDER_REJECT--wms拒单
ORDER_CONFIRMED--订单处理成功 */
func (this *WlbNotifyMessagePageGetRequest) SetMsgCode(value string) {
	this.Set("msg_code", value)
}

/* 分页查询页数 */
func (this *WlbNotifyMessagePageGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 分页查询的每页页数 */
func (this *WlbNotifyMessagePageGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 查询条件：记录开始时间 */
func (this *WlbNotifyMessagePageGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

/* 消息状态：
不需要确认：NO_NEED_CONFIRM
已确认：CONFIRMED
待确认：TO_BE_CONFIRM */
func (this *WlbNotifyMessagePageGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

type WlbNotifyMessagePageGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	WlbNotifyMessagePageGetResponseResult `json:"wlb_notify_message_page_get_response"`
}
type WlbNotifyMessagePageGetResponseResult struct {
	/* 条件查询结果总数量 */
	TotalCount int64 `json:"total_count"`
	/* 消息结果列表 */
	WlbMessages []*WlbMessage `json:"wlb_messages"`
}

/*taobao.wlb.order.cancel*/
type WlbOrderCancelRequest struct {
	values url.Values
}

func (this *WlbOrderCancelRequest) GetApiMethodName() string {
	return "taobao.wlb.order.cancel"
}
func (this *WlbOrderCancelRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbOrderCancelRequest) GetValues() url.Values {
	return this.values
}

/* 物流宝订单编号 */
func (this *WlbOrderCancelRequest) SetWlbOrderCode(value string) {
	this.Set("wlb_order_code", value)
}

type WlbOrderCancelResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	WlbOrderCancelResponseResult `json:"wlb_order_cancel_response"`
}
type WlbOrderCancelResponseResult struct {
	/* 错误编码列表 */
	ErrorCodeList string `json:"error_code_list"`
	/* 修改时间，只有在取消成功的情况下，才可以做 */
	ModifyTime string `json:"modify_time"`
}

/*taobao.wlb.order.consign*/
type WlbOrderConsignRequest struct {
	values url.Values
}

func (this *WlbOrderConsignRequest) GetApiMethodName() string {
	return "taobao.wlb.order.consign"
}
func (this *WlbOrderConsignRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbOrderConsignRequest) GetValues() url.Values {
	return this.values
}

/* 物流宝订单编号<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *WlbOrderConsignRequest) SetWlbOrderCode(value string) {
	this.Set("wlb_order_code", value)
}

type WlbOrderConsignResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	WlbOrderConsignResponseResult `json:"wlb_order_consign_response"`
}
type WlbOrderConsignResponseResult struct {
	/* 修改时间 */
	ModifyTime string `json:"modify_time"`
}

/*taobao.wlb.order.create*/
type WlbOrderCreateRequest struct {
	values url.Values
}

func (this *WlbOrderCreateRequest) GetApiMethodName() string {
	return "taobao.wlb.order.create"
}
func (this *WlbOrderCreateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbOrderCreateRequest) GetValues() url.Values {
	return this.values
}

/* 支付宝交易号 */
func (this *WlbOrderCreateRequest) SetAlipayNo(value string) {
	this.Set("alipay_no", value)
}

/* 该字段暂时保留 */
func (this *WlbOrderCreateRequest) SetAttributes(value string) {
	this.Set("attributes", value)
}

/* 买家呢称<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *WlbOrderCreateRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 期望结束时间，在入库单会使用到 */
func (this *WlbOrderCreateRequest) SetExpectEndTime(value string) {
	this.Set("expect_end_time", value)
}

/* 计划开始送达时间  在入库单中可能会使用 */
func (this *WlbOrderCreateRequest) SetExpectStartTime(value string) {
	this.Set("expect_start_time", value)
}

/* {"invoince_info": [{"bill_type":"发票类型，必选", "bill_title":"发票抬头，必选", "bill_amount":"发票金额(单位是分)，必选","bill_content":"发票内容，可选"}]} */
func (this *WlbOrderCreateRequest) SetInvoinceInfo(value string) {
	this.Set("invoince_info", value)
}

/* 该物流宝订单是否已完成，如果完成则设置为true，如果为false，则需要等待继续创建订单商品信息。 */
func (this *WlbOrderCreateRequest) SetIsFinished(value string) {
	this.Set("is_finished", value)
}

/* 物流宝订单编号，该接口约定每次最多只能传50条order_item_list，如果一个物流宝订单超过50条商品的时候，需要批量来调用该接口，第一次调用的时候，wlb_order_code为空，如果第一次创建成功，该接口返回wlb_order_code，其后继续再该订单上添加商品条目，需要带上wlb_order_code，out_biz_code，order_item_list,is_finished四个字段。 */
func (this *WlbOrderCreateRequest) SetOrderCode(value string) {
	this.Set("order_code", value)
}

/* 用字符串格式来表示订单标记列表：比如COD^PRESELL^SPLIT^LIMIT 等，中间用“^”来隔开 ---------------------------------------- 订单标记list（所有字母全部大写）： 1: COD –货到付款 2: LIMIT-限时配送 3: PRESELL-预售 5:COMPLAIN-已投诉 7:SPLIT-拆单， 8:EXCHANGE-换货， 9:VISIT-上门 ， 10: MODIFYTRANSPORT-是否可改配送方式，
: 是否可改配送方式  默认可更改
11 CONSIGN 物流宝代理发货,自动更改发货状态
12: SELLER_AFFORD 是否卖家承担运费 默认是，即没 13: SYNC_RETURN_BILL，同时退回发票 */
func (this *WlbOrderCreateRequest) SetOrderFlag(value string) {
	this.Set("order_flag", value)
}

/* 订单商品列表： {"order_item_list":[{"trade_code":"可选,淘宝交易订单，并且不是赠品，必须要传订单来源编号"," sub_trade_code ":"可选,淘宝子交易号","item_id":"必须,商品Id","item_code":"必须,商家编码","item_name":"可选,物流宝商品名称","item_quantity":"必选,计划数量","item_price":"必选,物品价格,单位为分","owner_user_nick
":"可选,货主nick 代销模式下会存在","flag":"判断是否为赠品0 不是1是","remarks":"可选,备注","batch_remark":"可选，批次描述信息会把这个信息带给WMS，但不会跟物流宝库存相关联"，"inventory_type":"库存类型1 可销售库存 101 类型用来定义残次品 201 冻结类型库存 301 在途库存","picture_url":"图片Url","distributor_user_nick": "分销商NICK",必选"ext_order_item_code":"可选，外部商品的商家编码"]} ======================================== 如果订单中的商品条目数大于50条的时候，我们会校验，不能创建成功，需要你按照50个一批的数量传，需要分批调用该接口，第二次传的时候，需要带上wlb_order_code和is_finished和order_item_list三个字段是必传的，is_finished为true表示传输完毕，为false表示还没完全传完。 */
func (this *WlbOrderCreateRequest) SetOrderItemList(value string) {
	this.Set("order_item_list", value)
}

/* 订单子类型：
（1）OTHER： 其他
（2）TAOBAO_TRADE： 淘宝交易
（3）OTHER_TRADE：其他交易
（4）ALLCOATE： 调拨
（5）PURCHASE:采购 */
func (this *WlbOrderCreateRequest) SetOrderSubType(value string) {
	this.Set("order_sub_type", value)
}

/* 订单类型:
（1）NORMAL_OUT ：正常出库
（2）NORMAL_IN：正常入库
（3）RETURN_IN：退货入库
（4）EXCHANGE_OUT：换货出库 */
func (this *WlbOrderCreateRequest) SetOrderType(value string) {
	this.Set("order_type", value)
}

/* 外部订单业务ID，该编号在isv中是唯一编号， 用来控制并发，去重用<br /> 支持最大长度为：128<br /> 支持的最大列表长度为：128 */
func (this *WlbOrderCreateRequest) SetOutBizCode(value string) {
	this.Set("out_biz_code", value)
}

/* 包裹件数，入库单和出库单中会用到 */
func (this *WlbOrderCreateRequest) SetPackageCount(value string) {
	this.Set("package_count", value)
}

/* 应收金额，cod订单必选 */
func (this *WlbOrderCreateRequest) SetPayableAmount(value string) {
	this.Set("payable_amount", value)
}

/* 源订单编号 */
func (this *WlbOrderCreateRequest) SetPrevOrderCode(value string) {
	this.Set("prev_order_code", value)
}

/* 收货方信息，必须传， 手机和电话必选其一。
收货方信息：
邮编^^^省^^^市^^^区^^^具体地址^^^收件方名称^^^手机^^^电话

如果某一个字段的数据为空时，必须传NA */
func (this *WlbOrderCreateRequest) SetReceiverInfo(value string) {
	this.Set("receiver_info", value)
}

/* 备注<br /> 支持最大长度为：4000<br /> 支持的最大列表长度为：4000 */
func (this *WlbOrderCreateRequest) SetRemark(value string) {
	this.Set("remark", value)
}

/* 投递时间范围要求,格式'15:20'用分号隔开 */
func (this *WlbOrderCreateRequest) SetScheduleEnd(value string) {
	this.Set("schedule_end", value)
}

/* 投递时间范围要求,格式'13:20'用分号隔开 */
func (this *WlbOrderCreateRequest) SetScheduleStart(value string) {
	this.Set("schedule_start", value)
}

/* 投递时延要求:
（1）INSTANT_ARRIVED： 当日达
（2）TOMMORROY_MORNING_ARRIVED：次晨达
（3）TOMMORROY_ARRIVED：次日达
（4）工作日：WORK_DAY
（5）节假日：WEEKED_DAY */
func (this *WlbOrderCreateRequest) SetScheduleType(value string) {
	this.Set("schedule_type", value)
}

/* 发货方信息，发货方信息必须传， 手机和电话必选其一。 发货方信息：
邮编^^^省^^^市^^^区^^^具体地址^^^收件方名称^^^手机^^^电话
如果某一个字段的数据为空时，必须传NA */
func (this *WlbOrderCreateRequest) SetSenderInfo(value string) {
	this.Set("sender_info", value)
}

/* cod服务费，只有cod订单的时候，才需要这个字段 */
func (this *WlbOrderCreateRequest) SetServiceFee(value string) {
	this.Set("service_fee", value)
}

/* 仓库编码<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *WlbOrderCreateRequest) SetStoreCode(value string) {
	this.Set("store_code", value)
}

/* 出库单中可能会用到
运输公司名称^^^运输公司联系人^^^运输公司运单号^^^运输公司电话^^^运输公司联系人身份证号

========================================
如果某一个字段的数据为空时，必须传NA */
func (this *WlbOrderCreateRequest) SetTmsInfo(value string) {
	this.Set("tms_info", value)
}

/* 运单编号，退货单时可能会使用 */
func (this *WlbOrderCreateRequest) SetTmsOrderCode(value string) {
	this.Set("tms_order_code", value)
}

/* 物流公司编码<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *WlbOrderCreateRequest) SetTmsServiceCode(value string) {
	this.Set("tms_service_code", value)
}

/* 总金额 */
func (this *WlbOrderCreateRequest) SetTotalAmount(value string) {
	this.Set("total_amount", value)
}

type WlbOrderCreateResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	WlbOrderCreateResponseResult `json:"wlb_order_create_response"`
}
type WlbOrderCreateResponseResult struct {
	/* 订单创建时间 */
	CreateTime string `json:"create_time"`
	/* 物流宝订单创建成功后，返回物流宝的订单编号；如果订单创建失败，该字段为空。 */
	OrderCode string `json:"order_code"`
}

/*taobao.wlb.order.page.get*/
type WlbOrderPageGetRequest struct {
	values url.Values
}

func (this *WlbOrderPageGetRequest) GetApiMethodName() string {
	return "taobao.wlb.order.page.get"
}
func (this *WlbOrderPageGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbOrderPageGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询截止时间 */
func (this *WlbOrderPageGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 物流订单编号 */
func (this *WlbOrderPageGetRequest) SetOrderCode(value string) {
	this.Set("order_code", value)
}

/* 订单状态 */
func (this *WlbOrderPageGetRequest) SetOrderStatus(value string) {
	this.Set("order_status", value)
}

/* 订单子类型：
（1）OTHER： 其他
（2）TAOBAO_TRADE： 淘宝交易
（3）OTHER_TRADE：其他交易
（4）ALLCOATE： 调拨
（5）CHECK:  盘点单
（6）PURCHASE: 采购单 */
func (this *WlbOrderPageGetRequest) SetOrderSubType(value string) {
	this.Set("order_sub_type", value)
}

/* 订单类型:
（1）NORMAL_OUT ：正常出库
（2）NORMAL_IN：正常入库
（3）RETURN_IN：退货入库
（4）EXCHANGE_OUT：换货出库 */
func (this *WlbOrderPageGetRequest) SetOrderType(value string) {
	this.Set("order_type", value)
}

/* 分页的第几页 */
func (this *WlbOrderPageGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页多少条 */
func (this *WlbOrderPageGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 查询开始时间 */
func (this *WlbOrderPageGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type WlbOrderPageGetResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	WlbOrderPageGetResponseResult `json:"wlb_order_page_get_response"`
}
type WlbOrderPageGetResponseResult struct {
	/* 分页查询返回结果 */
	OrderList []*WlbOrder `json:"order_list"`
	/* 总条数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.wlb.order.schedule.rule.add*/
type WlbOrderScheduleRuleAddRequest struct {
	values url.Values
}

func (this *WlbOrderScheduleRuleAddRequest) GetApiMethodName() string {
	return "taobao.wlb.order.schedule.rule.add"
}
func (this *WlbOrderScheduleRuleAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbOrderScheduleRuleAddRequest) GetValues() url.Values {
	return this.values
}

/* 备用发货仓库服务id（通过taobao.wlb.subscription.query接口获得service_id） */
func (this *WlbOrderScheduleRuleAddRequest) SetBackupStoreId(value string) {
	this.Set("backup_store_id", value)
}

/* 发货仓库服务id（通过taobao.wlb.subscription.query接口获得service_id） */
func (this *WlbOrderScheduleRuleAddRequest) SetDefaultStoreId(value string) {
	this.Set("default_store_id", value)
}

/* 发货规则的额外规则设置：
REMARK_STOP--有订单留言不自动下发
COD_STOP--货到付款订单不自动下发
CHECK_WAREHOUSE_DELIVER--检查仓库的配送范围 */
func (this *WlbOrderScheduleRuleAddRequest) SetOption(value string) {
	this.Set("option", value)
}

/* 国家地区标准编码列表 */
func (this *WlbOrderScheduleRuleAddRequest) SetProvAreaIds(value string) {
	this.Set("prov_area_ids", value)
}

type WlbOrderScheduleRuleAddResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	WlbOrderScheduleRuleAddResponseResult `json:"wlb_order_schedule_rule_add_response"`
}
type WlbOrderScheduleRuleAddResponseResult struct {
	/* 新增成功的订单调度规则id */
	ScheduleRuleId int64 `json:"schedule_rule_id"`
}

/*taobao.wlb.order.schedule.rule.update*/
type WlbOrderScheduleRuleUpdateRequest struct {
	values url.Values
}

func (this *WlbOrderScheduleRuleUpdateRequest) GetApiMethodName() string {
	return "taobao.wlb.order.schedule.rule.update"
}
func (this *WlbOrderScheduleRuleUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbOrderScheduleRuleUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 备用发货仓库id */
func (this *WlbOrderScheduleRuleUpdateRequest) SetBackupStoreId(value string) {
	this.Set("backup_store_id", value)
}

/* 默认发货仓库id */
func (this *WlbOrderScheduleRuleUpdateRequest) SetDefaultStoreId(value string) {
	this.Set("default_store_id", value)
}

/* 订单调度规则的额外规则设置： REMARK_STOP--有订单留言不自动下发 COD_STOP--货到付款订单不自动下发 CHECK_WAREHOUSE_DELIVER--检查仓库的配送范围 */
func (this *WlbOrderScheduleRuleUpdateRequest) SetOption(value string) {
	this.Set("option", value)
}

/* 国家地区标准编码列表 */
func (this *WlbOrderScheduleRuleUpdateRequest) SetProvAreaIds(value string) {
	this.Set("prov_area_ids", value)
}

/* 要修改的订单调度规则明细id */
func (this *WlbOrderScheduleRuleUpdateRequest) SetScheduleRuleId(value string) {
	this.Set("schedule_rule_id", value)
}

type WlbOrderScheduleRuleUpdateResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	WlbOrderScheduleRuleUpdateResponseResult `json:"wlb_order_schedule_rule_update_response"`
}
type WlbOrderScheduleRuleUpdateResponseResult struct {
	/* 修改时间 */
	GmtModified string `json:"gmt_modified"`
}

/*taobao.wlb.orderdetail.date.get*/
type WlbOrderdetailDateGetRequest struct {
	values url.Values
}

func (this *WlbOrderdetailDateGetRequest) GetApiMethodName() string {
	return "taobao.wlb.orderdetail.date.get"
}
func (this *WlbOrderdetailDateGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbOrderdetailDateGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询条件截止日期 */
func (this *WlbOrderdetailDateGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 分页查询参数，指定查询页数，默认为1 */
func (this *WlbOrderdetailDateGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 分页查询参数，每页查询数量，默认20，最大值50,大于50时按照50条查询 */
func (this *WlbOrderdetailDateGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 查询起始日期 */
func (this *WlbOrderdetailDateGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type WlbOrderdetailDateGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	WlbOrderdetailDateGetResponseResult `json:"wlb_orderdetail_date_get_response"`
}
type WlbOrderdetailDateGetResponseResult struct {
	/* 物流宝详细订单 */
	OrderDetailList []*WlbOrderDetail `json:"order_detail_list"`
	/* 总数量 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.wlb.orderitem.page.get*/
type WlbOrderitemPageGetRequest struct {
	values url.Values
}

func (this *WlbOrderitemPageGetRequest) GetApiMethodName() string {
	return "taobao.wlb.orderitem.page.get"
}
func (this *WlbOrderitemPageGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbOrderitemPageGetRequest) GetValues() url.Values {
	return this.values
}

/* 物流宝订单编码 */
func (this *WlbOrderitemPageGetRequest) SetOrderCode(value string) {
	this.Set("order_code", value)
}

/* 分页查询参数，指定查询页数，默认为1 */
func (this *WlbOrderitemPageGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 分页查询参数，每页查询数量，默认20，最大值50,大于50时按照50条查询 */
func (this *WlbOrderitemPageGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type WlbOrderitemPageGetResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	WlbOrderitemPageGetResponseResult `json:"wlb_orderitem_page_get_response"`
}
type WlbOrderitemPageGetResponseResult struct {
	/* 物流宝订单商品列表 */
	OrderItemList []*WlbOrderItem `json:"order_item_list"`
	/* 总数量 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.wlb.orderschedulerule.delete*/
type WlbOrderscheduleruleDeleteRequest struct {
	values url.Values
}

func (this *WlbOrderscheduleruleDeleteRequest) GetApiMethodName() string {
	return "taobao.wlb.orderschedulerule.delete"
}
func (this *WlbOrderscheduleruleDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbOrderscheduleruleDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 订单调度规则ID<br /> 支持的最大列表长度为：20 */
func (this *WlbOrderscheduleruleDeleteRequest) SetId(value string) {
	this.Set("id", value)
}

/* 商品userNick<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *WlbOrderscheduleruleDeleteRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type WlbOrderscheduleruleDeleteResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	WlbOrderscheduleruleDeleteResponseResult `json:"wlb_orderschedulerule_delete_response"`
}
type WlbOrderscheduleruleDeleteResponseResult struct {
	/* 修改时间 */
	GmtModified string `json:"gmt_modified"`
}

/*taobao.wlb.orderschedulerule.query*/
type WlbOrderscheduleruleQueryRequest struct {
	values url.Values
}

func (this *WlbOrderscheduleruleQueryRequest) GetApiMethodName() string {
	return "taobao.wlb.orderschedulerule.query"
}
func (this *WlbOrderscheduleruleQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbOrderscheduleruleQueryRequest) GetValues() url.Values {
	return this.values
}

/* 当前页 */
func (this *WlbOrderscheduleruleQueryRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 分页记录个数，如果用户输入的记录数大于50，则一页显示50条记录 */
func (this *WlbOrderscheduleruleQueryRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type WlbOrderscheduleruleQueryResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	WlbOrderscheduleruleQueryResponseResult `json:"wlb_orderschedulerule_query_response"`
}
type WlbOrderscheduleruleQueryResponseResult struct {
	/* 订单调度规则列表 */
	OrderScheduleRuleList []*WlbOrderScheduleRule `json:"order_schedule_rule_list"`
	/* 结果总数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.wlb.orderstatus.get*/
type WlbOrderstatusGetRequest struct {
	values url.Values
}

func (this *WlbOrderstatusGetRequest) GetApiMethodName() string {
	return "taobao.wlb.orderstatus.get"
}
func (this *WlbOrderstatusGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbOrderstatusGetRequest) GetValues() url.Values {
	return this.values
}

/* 物流宝订单编码 */
func (this *WlbOrderstatusGetRequest) SetOrderCode(value string) {
	this.Set("order_code", value)
}

type WlbOrderstatusGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	WlbOrderstatusGetResponseResult `json:"wlb_orderstatus_get_response"`
}
type WlbOrderstatusGetResponseResult struct {
	/* 订单流转信息状态列表 */
	WlbOrderStatus []*WlbProcessStatus `json:"wlb_order_status"`
}

/*taobao.wlb.out.inventory.change.notify*/
type WlbOutInventoryChangeNotifyRequest struct {
	values url.Values
}

func (this *WlbOutInventoryChangeNotifyRequest) GetApiMethodName() string {
	return "taobao.wlb.out.inventory.change.notify"
}
func (this *WlbOutInventoryChangeNotifyRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbOutInventoryChangeNotifyRequest) GetValues() url.Values {
	return this.values
}

/* 库存变化数量 */
func (this *WlbOutInventoryChangeNotifyRequest) SetChangeCount(value string) {
	this.Set("change_count", value)
}

/* 物流宝商品id或前台宝贝id（由type类型决定） */
func (this *WlbOutInventoryChangeNotifyRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* OUT--出库
IN--入库 */
func (this *WlbOutInventoryChangeNotifyRequest) SetOpType(value string) {
	this.Set("op_type", value)
}

/* 订单号，如果source为TAOBAO_TRADE,order_source_code必须为淘宝交易号 */
func (this *WlbOutInventoryChangeNotifyRequest) SetOrderSourceCode(value string) {
	this.Set("order_source_code", value)
}

/* 库存变化唯一标识，用于去重，一个外部唯一编码唯一标识一次库存变化。 */
func (this *WlbOutInventoryChangeNotifyRequest) SetOutBizCode(value string) {
	this.Set("out_biz_code", value)
}

/* 本次库存变化后库存余额 */
func (this *WlbOutInventoryChangeNotifyRequest) SetResultCount(value string) {
	this.Set("result_count", value)
}

/* （1）OTHER： 其他
（2）TAOBAO_TRADE： 淘宝交易
（3）OTHER_TRADE：其他交易
（4）ALLCOATE： 调拨
（5）CHECK:盘点
（6）PURCHASE:采购 */
func (this *WlbOutInventoryChangeNotifyRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 目前非必须，系统会选择默认值 */
func (this *WlbOutInventoryChangeNotifyRequest) SetStoreCode(value string) {
	this.Set("store_code", value)
}

/* WLB_ITEM--物流宝商品
IC_ITEM--淘宝商品
IC_SKU--淘宝sku */
func (this *WlbOutInventoryChangeNotifyRequest) SetType(value string) {
	this.Set("type", value)
}

type WlbOutInventoryChangeNotifyResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	WlbOutInventoryChangeNotifyResponseResult `json:"wlb_out_inventory_change_notify_response"`
}
type WlbOutInventoryChangeNotifyResponseResult struct {
	/* 库存变化通知成功时间 */
	GmtModified string `json:"gmt_modified"`
}

/*taobao.wlb.replenish.statistics*/
type WlbReplenishStatisticsRequest struct {
	values url.Values
}

func (this *WlbReplenishStatisticsRequest) GetApiMethodName() string {
	return "taobao.wlb.replenish.statistics"
}
func (this *WlbReplenishStatisticsRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbReplenishStatisticsRequest) GetValues() url.Values {
	return this.values
}

/* 商品编码 */
func (this *WlbReplenishStatisticsRequest) SetItemCode(value string) {
	this.Set("item_code", value)
}

/* 商品名称 */
func (this *WlbReplenishStatisticsRequest) SetName(value string) {
	this.Set("name", value)
}

/* 分页参数，默认第一页 */
func (this *WlbReplenishStatisticsRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 分页每页页数，默认20，最大50<br /> 支持最大值为：50 */
func (this *WlbReplenishStatisticsRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 仓库编码 */
func (this *WlbReplenishStatisticsRequest) SetStoreCode(value string) {
	this.Set("store_code", value)
}

type WlbReplenishStatisticsResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	WlbReplenishStatisticsResponseResult `json:"wlb_replenish_statistics_response"`
}
type WlbReplenishStatisticsResponseResult struct {
	/* 补货统计列表 */
	ReplenishList []*WlbReplenish `json:"replenish_list"`
	/* 查询记录总数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.wlb.subscription.query*/
type WlbSubscriptionQueryRequest struct {
	values url.Values
}

func (this *WlbSubscriptionQueryRequest) GetApiMethodName() string {
	return "taobao.wlb.subscription.query"
}
func (this *WlbSubscriptionQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbSubscriptionQueryRequest) GetValues() url.Values {
	return this.values
}

/* 当前页 */
func (this *WlbSubscriptionQueryRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 分页记录个数，如果用户输入的记录数大于50，则一页显示50条记录 */
func (this *WlbSubscriptionQueryRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 状态
AUDITING 1-待审核;
CANCEL 2-撤销 ;
CHECKED 3-审核通过 ;
FAILED 4-审核未通过 ;
SYNCHRONIZING 5-同步中;
只允许输入上面指定的值，且可以为空，为空时查询所有状态。若输错了，则按AUDITING处理。 */
func (this *WlbSubscriptionQueryRequest) SetStatus(value string) {
	this.Set("status", value)
}

type WlbSubscriptionQueryResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	WlbSubscriptionQueryResponseResult `json:"wlb_subscription_query_response"`
}
type WlbSubscriptionQueryResponseResult struct {
	/* 卖家定购的服务列表 */
	SellerSubscriptionList []*WlbSellerSubscription `json:"seller_subscription_list"`
	/* 结果总数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.wlb.tmsorder.query*/
type WlbTmsorderQueryRequest struct {
	values url.Values
}

func (this *WlbTmsorderQueryRequest) GetApiMethodName() string {
	return "taobao.wlb.tmsorder.query"
}
func (this *WlbTmsorderQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbTmsorderQueryRequest) GetValues() url.Values {
	return this.values
}

/* 物流订单编号<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *WlbTmsorderQueryRequest) SetOrderCode(value string) {
	this.Set("order_code", value)
}

/* 当前页 */
func (this *WlbTmsorderQueryRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 分页记录个数，如果用户输入的记录数大于50，则一页显示50条记录 */
func (this *WlbTmsorderQueryRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type WlbTmsorderQueryResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	WlbTmsorderQueryResponseResult `json:"wlb_tmsorder_query_response"`
}
type WlbTmsorderQueryResponseResult struct {
	/* 物流订单运单信息列表 */
	TmsOrderList []*WlbTmsOrder `json:"tms_order_list"`
	/* 结果总数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.wlb.tradeorder.get*/
type WlbTradeorderGetRequest struct {
	values url.Values
}

func (this *WlbTradeorderGetRequest) GetApiMethodName() string {
	return "taobao.wlb.tradeorder.get"
}
func (this *WlbTradeorderGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbTradeorderGetRequest) GetValues() url.Values {
	return this.values
}

/* 子交易号 */
func (this *WlbTradeorderGetRequest) SetSubTradeId(value string) {
	this.Set("sub_trade_id", value)
}

/* 指定交易类型的交易号 */
func (this *WlbTradeorderGetRequest) SetTradeId(value string) {
	this.Set("trade_id", value)
}

/* 交易类型:
TAOBAO--淘宝交易
OTHER_TRADE--其它交易 */
func (this *WlbTradeorderGetRequest) SetTradeType(value string) {
	this.Set("trade_type", value)
}

type WlbTradeorderGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	WlbTradeorderGetResponseResult `json:"wlb_tradeorder_get_response"`
}
type WlbTradeorderGetResponseResult struct {
	/* 物流宝订单列表信息 */
	WlbOrderList []*WlbOrder `json:"wlb_order_list"`
}

/*taobao.wlb.waybill.get*/
type WlbWaybillGetRequest struct {
	values url.Values
}

func (this *WlbWaybillGetRequest) GetApiMethodName() string {
	return "taobao.wlb.waybill.get"
}
func (this *WlbWaybillGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbWaybillGetRequest) GetValues() url.Values {
	return this.values
}

/* 顺丰(SF)、EMS(标准快递：EMS；经济快件：EYB)、宅急送(ZJS)、圆通(YTO)、中通(ZTO)、百世汇通(HTKY)、优速(UC)、申通(STO)、天天快递 (TTKDEX)、全峰 (QFKD)、快捷(FAST) */
func (this *WlbWaybillGetRequest) SetCpCode(value string) {
	this.Set("cp_code", value)
}

/* 发货 地址 */
func (this *WlbWaybillGetRequest) SetShippingAddress(value string) {
	this.Set("shipping_address", value)
}

/* order_channels_type 订单来源：订单产生的电商平台
淘宝(TB)、天猫(TM)、京东(JD)、当当(DD)、拍拍(PP)、易讯(YX)、ebay(EBAY)、QQ网购(QQ)、亚马逊(AMAZON)、苏宁(SN)、国美(GM)、唯品会(WPH)、聚美(JM)、乐蜂(LF)、蘑菇街(MGJ)、聚尚(JS)、拍鞋(PX)、银泰(YT)、1号店(YHD)、凡客(VANCL)、邮乐(YL)、优购(YG)、阿里巴巴(1688)、其他(OTHERS) */
func (this *WlbWaybillGetRequest) SetTradeOrderInfoCols(value string) {
	this.Set("trade_order_info_cols", value)
}

type WlbWaybillGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	WlbWaybillGetResponseResult `json:"wlb_waybill_get_response"`
}
type WlbWaybillGetResponseResult struct {
	/* 结果 */
	Results []*WaybillApplyNewInfo `json:"results"`
}

/*taobao.wlb.waybill.search*/
type WlbWaybillSearchRequest struct {
	values url.Values
}

func (this *WlbWaybillSearchRequest) GetApiMethodName() string {
	return "taobao.wlb.waybill.search"
}
func (this *WlbWaybillSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbWaybillSearchRequest) GetValues() url.Values {
	return this.values
}

/* 顺丰(SF)、EMS(标准快递：EMS；经济快件：EYB)、宅急送(ZJS)、圆通(YTO)、中通(ZTO)、百世汇通(HTKY)、优速(UC)、申通(STO)、天天快递 (TTKDEX)、全峰 (QFKD)、快捷(FAST)、邮政小包(POSTB) */
func (this *WlbWaybillSearchRequest) SetCpCode(value string) {
	this.Set("cp_code", value)
}

type WlbWaybillSearchResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	WlbWaybillSearchResponseResult `json:"wlb_waybill_search_response"`
}
type WlbWaybillSearchResponseResult struct {
	/* 查询相关数据(cp_type 1是直营，2是加盟
	) */
	Results []*WaybillApplySubscriptionInfo `json:"results"`
}

/*taobao.wlb.waybill.shengxian.get*/
type WlbWaybillShengxianGetRequest struct {
	values url.Values
}

func (this *WlbWaybillShengxianGetRequest) GetApiMethodName() string {
	return "taobao.wlb.waybill.shengxian.get"
}
func (this *WlbWaybillShengxianGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbWaybillShengxianGetRequest) GetValues() url.Values {
	return this.values
}

/* 物流服务方代码，生鲜配送：YXSR<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *WlbWaybillShengxianGetRequest) SetBizCode(value string) {
	this.Set("biz_code", value)
}

/* 物流服务类型。冷链：602，常温：502<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *WlbWaybillShengxianGetRequest) SetDeliveryType(value string) {
	this.Set("delivery_type", value)
}

/* 预留扩展字段<br /> 支持最大长度为：512<br /> 支持的最大列表长度为：512 */
func (this *WlbWaybillShengxianGetRequest) SetFeature(value string) {
	this.Set("feature", value)
}

/* 订单渠道： 淘宝平台订单："TB"; 天猫平台订单："TM"; 京东："JD"; 拍拍："PP"; 易迅平台订单："YX"; 一号店平台订单："YHD"; 当当网平台订单："DD"; EBAY："EBAY"; QQ网购："QQ"; 苏宁："SN"; 国美："GM"; 唯品会："WPH"; 聚美："Jm"; 乐峰："LF"; 蘑菇街："MGJ"; 聚尚："JS"; 银泰："YT"; VANCL："VANCL"; 邮乐："YL"; 优购："YG"; 拍鞋："PX"; 1688平台："1688";<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *WlbWaybillShengxianGetRequest) SetOrderChannelsType(value string) {
	this.Set("order_channels_type", value)
}

/* 商家淘宝地址信息ID<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *WlbWaybillShengxianGetRequest) SetSenderAddressId(value string) {
	this.Set("sender_address_id", value)
}

/* 仓库的服务代码标示，代码一个仓库的实体。(可以通过taobao.wlb.stores.baseinfo.get接口查询)<br /> 支持最大长度为：128<br /> 支持的最大列表长度为：128 */
func (this *WlbWaybillShengxianGetRequest) SetServiceCode(value string) {
	this.Set("service_code", value)
}

/* 交易号，传入交易号不能存在拆单场景。<br /> 支持最大长度为：128<br /> 支持的最大列表长度为：128 */
func (this *WlbWaybillShengxianGetRequest) SetTradeId(value string) {
	this.Set("trade_id", value)
}

type WlbWaybillShengxianGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	WlbWaybillShengxianGetResponseResult `json:"wlb_waybill_shengxian_get_response"`
}
type WlbWaybillShengxianGetResponseResult struct {
	/* 成功后返回的生鲜电子面单信息 */
	FreshWaybill *FreshWaybill `json:"fresh_waybill"`
	/* 生成是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.wlb.waybill.update*/
type WlbWaybillUpdateRequest struct {
	values url.Values
}

func (this *WlbWaybillUpdateRequest) GetApiMethodName() string {
	return "taobao.wlb.waybill.update"
}
func (this *WlbWaybillUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbWaybillUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 顺丰(SF)、EMS(标准快递：EMS；经济快件：EYB)、宅急送(ZJS)、圆通(YTO)、中通(ZTO)、百世汇通(HTKY)、优速(UC)、申通(STO)、天天快递 (TTKDEX)、全峰 (QFKD)、快捷(FAST)、邮政小包(POSTB) */
func (this *WlbWaybillUpdateRequest) SetCpCode(value string) {
	this.Set("cp_code", value)
}

/* 订单数据 */
func (this *WlbWaybillUpdateRequest) SetTradeOrderInfo(value string) {
	this.Set("trade_order_info", value)
}

type WlbWaybillUpdateResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	WlbWaybillUpdateResponseResult `json:"wlb_waybill_update_response"`
}
type WlbWaybillUpdateResponseResult struct {
	/* 更新返回 */
	Results []*WaybillApplyUpdateInfo `json:"results"`
}

/*taobao.wlb.wlborder.get*/
type WlbWlborderGetRequest struct {
	values url.Values
}

func (this *WlbWlborderGetRequest) GetApiMethodName() string {
	return "taobao.wlb.wlborder.get"
}
func (this *WlbWlborderGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WlbWlborderGetRequest) GetValues() url.Values {
	return this.values
}

/* 物流宝订单编码 */
func (this *WlbWlborderGetRequest) SetWlbOrderCode(value string) {
	this.Set("wlb_order_code", value)
}

type WlbWlborderGetResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	WlbWlborderGetResponseResult `json:"wlb_wlborder_get_response"`
}
type WlbWlborderGetResponseResult struct {
	/* 物流宝订单详情 */
	WlbOrder *WlbOrder `json:"wlb_order"`
}

/*taobao.simba.account.balance.get*/
type SimbaAccountBalanceGetRequest struct {
	values url.Values
}

func (this *SimbaAccountBalanceGetRequest) GetApiMethodName() string {
	return "taobao.simba.account.balance.get"
}
func (this *SimbaAccountBalanceGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAccountBalanceGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaAccountBalanceGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaAccountBalanceGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	SimbaAccountBalanceGetResponseResult `json:"simba_account_balance_get_response"`
}
type SimbaAccountBalanceGetResponseResult struct {
	/* 实时余额，”元”为单位 */
	Balance float64 `json:"balance"`
}

/*taobao.simba.adgroup.add*/
type SimbaAdgroupAddRequest struct {
	values url.Values
}

func (this *SimbaAdgroupAddRequest) GetApiMethodName() string {
	return "taobao.simba.adgroup.add"
}
func (this *SimbaAdgroupAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupAddRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划Id */
func (this *SimbaAdgroupAddRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 推广组默认出价，单位为分，不能小于5 不能大于日最高限额<br /> 支持最小值为：5 */
func (this *SimbaAdgroupAddRequest) SetDefaultPrice(value string) {
	this.Set("default_price", value)
}

/* 创意图片地址，必须是商品的图片之一 */
func (this *SimbaAdgroupAddRequest) SetImgUrl(value string) {
	this.Set("img_url", value)
}

/* 商品Id */
func (this *SimbaAdgroupAddRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 主人昵称 */
func (this *SimbaAdgroupAddRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 创意标题，最多20个汉字<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *SimbaAdgroupAddRequest) SetTitle(value string) {
	this.Set("title", value)
}

type SimbaAdgroupAddResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	SimbaAdgroupAddResponseResult `json:"simba_adgroup_add_response"`
}
type SimbaAdgroupAddResponseResult struct {
	/* 新增加的推广组 */
	Adgroup *ADGroup `json:"adgroup"`
}

/*taobao.simba.adgroup.adgroupcatmatchs.get*/
type SimbaAdgroupAdgroupcatmatchsGetRequest struct {
	values url.Values
}

func (this *SimbaAdgroupAdgroupcatmatchsGetRequest) GetApiMethodName() string {
	return "taobao.simba.adgroup.adgroupcatmatchs.get"
}
func (this *SimbaAdgroupAdgroupcatmatchsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupAdgroupcatmatchsGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组Id列表 */
func (this *SimbaAdgroupAdgroupcatmatchsGetRequest) SetAdgroupIds(value string) {
	this.Set("adgroup_ids", value)
}

/* 主人昵称 */
func (this *SimbaAdgroupAdgroupcatmatchsGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaAdgroupAdgroupcatmatchsGetResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	SimbaAdgroupAdgroupcatmatchsGetResponseResult `json:"simba_adgroup_adgroupcatmatchs_get_response"`
}
type SimbaAdgroupAdgroupcatmatchsGetResponseResult struct {
	/* 类目出价列表 */
	AdgroupCatmatchList []*ADGroupCatmatch `json:"adgroup_catmatch_list"`
}

/*taobao.simba.adgroup.campcatmatchs.get*/
type SimbaAdgroupCampcatmatchsGetRequest struct {
	values url.Values
}

func (this *SimbaAdgroupCampcatmatchsGetRequest) GetApiMethodName() string {
	return "taobao.simba.adgroup.campcatmatchs.get"
}
func (this *SimbaAdgroupCampcatmatchsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupCampcatmatchsGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划Id */
func (this *SimbaAdgroupCampcatmatchsGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaAdgroupCampcatmatchsGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码，从1开始 */
func (this *SimbaAdgroupCampcatmatchsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 页尺寸，最大200<br /> 支持的最大列表长度为：200 */
func (this *SimbaAdgroupCampcatmatchsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type SimbaAdgroupCampcatmatchsGetResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	SimbaAdgroupCampcatmatchsGetResponseResult `json:"simba_adgroup_campcatmatchs_get_response"`
}
type SimbaAdgroupCampcatmatchsGetResponseResult struct {
	/* 一页推广组类目出价列表 */
	Adgroupcatmatchs *ADGroupCatMatchPage `json:"adgroupcatmatchs"`
}

/*taobao.simba.adgroup.catmatch.get*/
type SimbaAdgroupCatmatchGetRequest struct {
	values url.Values
}

func (this *SimbaAdgroupCatmatchGetRequest) GetApiMethodName() string {
	return "taobao.simba.adgroup.catmatch.get"
}
func (this *SimbaAdgroupCatmatchGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupCatmatchGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组Id */
func (this *SimbaAdgroupCatmatchGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 主人昵称 */
func (this *SimbaAdgroupCatmatchGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaAdgroupCatmatchGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	SimbaAdgroupCatmatchGetResponseResult `json:"simba_adgroup_catmatch_get_response"`
}
type SimbaAdgroupCatmatchGetResponseResult struct {
	/* 推广组的类目出价对象 */
	Adgroupcatmatch *ADGroupCatmatch `json:"adgroupcatmatch"`
}

/*taobao.simba.adgroup.catmatch.update*/
type SimbaAdgroupCatmatchUpdateRequest struct {
	values url.Values
}

func (this *SimbaAdgroupCatmatchUpdateRequest) GetApiMethodName() string {
	return "taobao.simba.adgroup.catmatch.update"
}
func (this *SimbaAdgroupCatmatchUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupCatmatchUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 推广组Id */
func (this *SimbaAdgroupCatmatchUpdateRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 类目出价Id */
func (this *SimbaAdgroupCatmatchUpdateRequest) SetCatmatchId(value string) {
	this.Set("catmatch_id", value)
}

/* 类目出价，单位为分，不能小于5。如果use_default_price字段为使用默认出价，则此max_price字段所传入的值不起作用。商品将会使用默认出价。<br /> 支持最小值为：5 */
func (this *SimbaAdgroupCatmatchUpdateRequest) SetMaxPrice(value string) {
	this.Set("max_price", value)
}

/* 主人昵称 */
func (this *SimbaAdgroupCatmatchUpdateRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 是否启用类目出价； offline-不启用 online-启用,如果此字段状态为offline时，则max_price,use_default_price字段值不起作用 */
func (this *SimbaAdgroupCatmatchUpdateRequest) SetOnlineStatus(value string) {
	this.Set("online_status", value)
}

/* 是否使用推广组默认出价false为不使用，true为使用 */
func (this *SimbaAdgroupCatmatchUpdateRequest) SetUseDefaultPrice(value string) {
	this.Set("use_default_price", value)
}

type SimbaAdgroupCatmatchUpdateResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	SimbaAdgroupCatmatchUpdateResponseResult `json:"simba_adgroup_catmatch_update_response"`
}
type SimbaAdgroupCatmatchUpdateResponseResult struct {
	/* 推广组的类目出价对象 */
	Adgroupcatmatch *ADGroupCatmatch `json:"adgroupcatmatch"`
}

/*taobao.simba.adgroup.catmatchforecast.get*/
type SimbaAdgroupCatmatchforecastGetRequest struct {
	values url.Values
}

func (this *SimbaAdgroupCatmatchforecastGetRequest) GetApiMethodName() string {
	return "taobao.simba.adgroup.catmatchforecast.get"
}
func (this *SimbaAdgroupCatmatchforecastGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupCatmatchforecastGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组ID */
func (this *SimbaAdgroupCatmatchforecastGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 类目出价,出价范围在5-9999之间,单位分 */
func (this *SimbaAdgroupCatmatchforecastGetRequest) SetCatmatchPrice(value string) {
	this.Set("catmatch_price", value)
}

/* 主人昵称 */
func (this *SimbaAdgroupCatmatchforecastGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaAdgroupCatmatchforecastGetResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	SimbaAdgroupCatmatchforecastGetResponseResult `json:"simba_adgroup_catmatchforecast_get_response"`
}
type SimbaAdgroupCatmatchforecastGetResponseResult struct {
	/* 类目出价预估结果信息 预测数据皆为估算结果，以实际发生为准 */
	AdgroupCatmatchForecast *ADGroupCatMatchForecast `json:"adgroup_catmatch_forecast"`
}

/*taobao.simba.adgroup.changedcatmatchs.get*/
type SimbaAdgroupChangedcatmatchsGetRequest struct {
	values url.Values
}

func (this *SimbaAdgroupChangedcatmatchsGetRequest) GetApiMethodName() string {
	return "taobao.simba.adgroup.changedcatmatchs.get"
}
func (this *SimbaAdgroupChangedcatmatchsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupChangedcatmatchsGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaAdgroupChangedcatmatchsGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 返回的第几页数据，默认为1 */
func (this *SimbaAdgroupChangedcatmatchsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回的每页数据量大小,默认200最大1000<br /> 支持的最大列表长度为：1000 */
func (this *SimbaAdgroupChangedcatmatchsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 得到此时间点之后的数据，不能大于一个月 */
func (this *SimbaAdgroupChangedcatmatchsGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type SimbaAdgroupChangedcatmatchsGetResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	SimbaAdgroupChangedcatmatchsGetResponseResult `json:"simba_adgroup_changedcatmatchs_get_response"`
}
type SimbaAdgroupChangedcatmatchsGetResponseResult struct {
	/* 一页类目出价对象 */
	ChangedCatmatchs *ADGroupCatMatchPage `json:"changed_catmatchs"`
}

/*taobao.simba.adgroup.delete*/
type SimbaAdgroupDeleteRequest struct {
	values url.Values
}

func (this *SimbaAdgroupDeleteRequest) GetApiMethodName() string {
	return "taobao.simba.adgroup.delete"
}
func (this *SimbaAdgroupDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 推广组Id */
func (this *SimbaAdgroupDeleteRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 主人昵称 */
func (this *SimbaAdgroupDeleteRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaAdgroupDeleteResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	SimbaAdgroupDeleteResponseResult `json:"simba_adgroup_delete_response"`
}
type SimbaAdgroupDeleteResponseResult struct {
	/* 被删除的推广组 */
	Adgroup *ADGroup `json:"adgroup"`
}

/*taobao.simba.adgroup.nonsearchprices.update*/
type SimbaAdgroupNonsearchpricesUpdateRequest struct {
	values url.Values
}

func (this *SimbaAdgroupNonsearchpricesUpdateRequest) GetApiMethodName() string {
	return "taobao.simba.adgroup.nonsearchprices.update"
}
func (this *SimbaAdgroupNonsearchpricesUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupNonsearchpricesUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 推广组id，通投位置价格，是否使用默认出价json 数组字符串，数组个数最多200个.
json数组中的key必须和对应实体ADGroup中的属性字段保持一致，否则对应的实体对象属性获取不到相应的值，
adgroupId,isNonsearchDefaultPrice不能为空。nonsearchMaxPrice是整数，以“分”为单位，不能小于5，不能大于日限额,不能大于9999分。 启用非搜索默认出价时nonsearchMaxPrice为0 */
func (this *SimbaAdgroupNonsearchpricesUpdateRequest) SetAdgroupidPriceJson(value string) {
	this.Set("adgroupid_price_json", value)
}

/* 推广计划ID */
func (this *SimbaAdgroupNonsearchpricesUpdateRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaAdgroupNonsearchpricesUpdateRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaAdgroupNonsearchpricesUpdateResponse struct {
	*ErrorResponse                                  `json:"error_response,omitempty"`
	SimbaAdgroupNonsearchpricesUpdateResponseResult `json:"simba_adgroup_nonsearchprices_update_response"`
}
type SimbaAdgroupNonsearchpricesUpdateResponseResult struct {
	/* 推广组列表 */
	AdgroupList []*ADGroup `json:"adgroup_list"`
}

/*taobao.simba.adgroup.nonsearchstates.update*/
type SimbaAdgroupNonsearchstatesUpdateRequest struct {
	values url.Values
}

func (this *SimbaAdgroupNonsearchstatesUpdateRequest) GetApiMethodName() string {
	return "taobao.simba.adgroup.nonsearchstates.update"
}
func (this *SimbaAdgroupNonsearchstatesUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupNonsearchstatesUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 推广组ID通投状态json数组字符串，数组个数最多200个。json数组中的key必须和对应实体ADGroup 中的属性字段保持一致，否则对应的实体对象属性获取不到相应的值推广组ID,通投状态不传默认为1 */
func (this *SimbaAdgroupNonsearchstatesUpdateRequest) SetAdgroupidNonsearchstateJson(value string) {
	this.Set("adgroupid_nonsearchstate_json", value)
}

/* 推广计划ID */
func (this *SimbaAdgroupNonsearchstatesUpdateRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaAdgroupNonsearchstatesUpdateRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaAdgroupNonsearchstatesUpdateResponse struct {
	*ErrorResponse                                  `json:"error_response,omitempty"`
	SimbaAdgroupNonsearchstatesUpdateResponseResult `json:"simba_adgroup_nonsearchstates_update_response"`
}
type SimbaAdgroupNonsearchstatesUpdateResponseResult struct {
	/* 推广组列表 */
	AdgroupList []*ADGroup `json:"adgroup_list"`
}

/*taobao.simba.adgroup.onlineitemsvon.get*/
type SimbaAdgroupOnlineitemsvonGetRequest struct {
	values url.Values
}

func (this *SimbaAdgroupOnlineitemsvonGetRequest) GetApiMethodName() string {
	return "taobao.simba.adgroup.onlineitemsvon.get"
}
func (this *SimbaAdgroupOnlineitemsvonGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupOnlineitemsvonGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaAdgroupOnlineitemsvonGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 排序，true:降序， false:升序 */
func (this *SimbaAdgroupOnlineitemsvonGetRequest) SetOrderBy(value string) {
	this.Set("order_by", value)
}

/* 排序字段，starts：按开始时间排序bidCount:按销量排序 */
func (this *SimbaAdgroupOnlineitemsvonGetRequest) SetOrderField(value string) {
	this.Set("order_field", value)
}

/* 页码，从1开始,最大50。最大只能获取1W个宝贝<br /> 支持最大值为：50 */
func (this *SimbaAdgroupOnlineitemsvonGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 页尺寸，最大200<br /> 支持最大值为：200 */
func (this *SimbaAdgroupOnlineitemsvonGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type SimbaAdgroupOnlineitemsvonGetResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	SimbaAdgroupOnlineitemsvonGetResponseResult `json:"simba_adgroup_onlineitemsvon_get_response"`
}
type SimbaAdgroupOnlineitemsvonGetResponseResult struct {
	/* 带分页的淘宝商品 */
	PageItem *SubwayItemPartition `json:"page_item"`
}

/*taobao.simba.adgroup.update*/
type SimbaAdgroupUpdateRequest struct {
	values url.Values
}

func (this *SimbaAdgroupUpdateRequest) GetApiMethodName() string {
	return "taobao.simba.adgroup.update"
}
func (this *SimbaAdgroupUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 推广组Id */
func (this *SimbaAdgroupUpdateRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 默认出价，单位是分，不能小于5<br /> 支持最小值为：5 */
func (this *SimbaAdgroupUpdateRequest) SetDefaultPrice(value string) {
	this.Set("default_price", value)
}

/* 主人昵称 */
func (this *SimbaAdgroupUpdateRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 非搜索出价，单位是分，不能小于5，如果use_nonseatch_default_price为使用默认出价，则此nonsearch_max_price字段传入的数据不起作用，商品将使用默认非搜索出价<br /> 支持最小值为：5 */
func (this *SimbaAdgroupUpdateRequest) SetNonsearchMaxPrice(value string) {
	this.Set("nonsearch_max_price", value)
}

/* 用户设置的上下线状态 offline-下线(暂停竞价)； online-上线；默认为online */
func (this *SimbaAdgroupUpdateRequest) SetOnlineStatus(value string) {
	this.Set("online_status", value)
}

/* 非搜索是否使用默认出价，false-不用；true-使用；默认为true; */
func (this *SimbaAdgroupUpdateRequest) SetUseNonsearchDefaultPrice(value string) {
	this.Set("use_nonsearch_default_price", value)
}

type SimbaAdgroupUpdateResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	SimbaAdgroupUpdateResponseResult `json:"simba_adgroup_update_response"`
}
type SimbaAdgroupUpdateResponseResult struct {
	/* 被修改的推广组 */
	Adgroup *ADGroup `json:"adgroup"`
}

/*taobao.simba.adgroupids.changed.get*/
type SimbaAdgroupidsChangedGetRequest struct {
	values url.Values
}

func (this *SimbaAdgroupidsChangedGetRequest) GetApiMethodName() string {
	return "taobao.simba.adgroupids.changed.get"
}
func (this *SimbaAdgroupidsChangedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupidsChangedGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaAdgroupidsChangedGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 返回的第几页数据，默认为1<br /> 支持最小值为：1 */
func (this *SimbaAdgroupidsChangedGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回的每页数据量大小,默认200最大1000<br /> 支持最大值为：1000<br /> 支持最小值为：1 */
func (this *SimbaAdgroupidsChangedGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 得到此时间点之后的数据，不能大于一个月 */
func (this *SimbaAdgroupidsChangedGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type SimbaAdgroupidsChangedGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	SimbaAdgroupidsChangedGetResponseResult `json:"simba_adgroupids_changed_get_response"`
}
type SimbaAdgroupidsChangedGetResponseResult struct {
	/* 推广组ID列表 */
	ChangedAdgroupids []int64 `json:"changed_adgroupids"`
}

/*taobao.simba.adgroupids.deleted.get*/
type SimbaAdgroupidsDeletedGetRequest struct {
	values url.Values
}

func (this *SimbaAdgroupidsDeletedGetRequest) GetApiMethodName() string {
	return "taobao.simba.adgroupids.deleted.get"
}
func (this *SimbaAdgroupidsDeletedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupidsDeletedGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaAdgroupidsDeletedGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 返回的第几页数据，默认为1<br /> 支持最小值为：1 */
func (this *SimbaAdgroupidsDeletedGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回的每页数据量大小,默认200最大1000<br /> 支持最大值为：1000<br /> 支持最小值为：1 */
func (this *SimbaAdgroupidsDeletedGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 得到此时间点之后的数据，不能大于一个月 */
func (this *SimbaAdgroupidsDeletedGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type SimbaAdgroupidsDeletedGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	SimbaAdgroupidsDeletedGetResponseResult `json:"simba_adgroupids_deleted_get_response"`
}
type SimbaAdgroupidsDeletedGetResponseResult struct {
	/* 推广组ID列表 */
	DeletedAdgroupIds []int64 `json:"deleted_adgroup_ids"`
}

/*taobao.simba.adgroups.changed.get*/
type SimbaAdgroupsChangedGetRequest struct {
	values url.Values
}

func (this *SimbaAdgroupsChangedGetRequest) GetApiMethodName() string {
	return "taobao.simba.adgroups.changed.get"
}
func (this *SimbaAdgroupsChangedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupsChangedGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaAdgroupsChangedGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 返回的第几页数据，默认为1<br /> 支持最小值为：1 */
func (this *SimbaAdgroupsChangedGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回的每页数据量大小,默认200最大1000<br /> 支持最大值为：1000<br /> 支持最小值为：1 */
func (this *SimbaAdgroupsChangedGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 得到此时间点之后的数据，不能大于一个月 */
func (this *SimbaAdgroupsChangedGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type SimbaAdgroupsChangedGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	SimbaAdgroupsChangedGetResponseResult `json:"simba_adgroups_changed_get_response"`
}
type SimbaAdgroupsChangedGetResponseResult struct {
	/* 推广组分页对象 */
	Adgroups *ADGroupPage `json:"adgroups"`
}

/*taobao.simba.adgroups.item.exist*/
type SimbaAdgroupsItemExistRequest struct {
	values url.Values
}

func (this *SimbaAdgroupsItemExistRequest) GetApiMethodName() string {
	return "taobao.simba.adgroups.item.exist"
}
func (this *SimbaAdgroupsItemExistRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupsItemExistRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划Id */
func (this *SimbaAdgroupsItemExistRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 商品Id */
func (this *SimbaAdgroupsItemExistRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 主人昵称 */
func (this *SimbaAdgroupsItemExistRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaAdgroupsItemExistResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	SimbaAdgroupsItemExistResponseResult `json:"simba_adgroups_item_exist_response"`
}
type SimbaAdgroupsItemExistResponseResult struct {
	/* true表示已经被推广，false表示没有被推广 */
	Exist bool `json:"exist"`
}

/*taobao.simba.adgroupsbyadgroupids.get*/
type SimbaAdgroupsbyadgroupidsGetRequest struct {
	values url.Values
}

func (this *SimbaAdgroupsbyadgroupidsGetRequest) GetApiMethodName() string {
	return "taobao.simba.adgroupsbyadgroupids.get"
}
func (this *SimbaAdgroupsbyadgroupidsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupsbyadgroupidsGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组Id列表 */
func (this *SimbaAdgroupsbyadgroupidsGetRequest) SetAdgroupIds(value string) {
	this.Set("adgroup_ids", value)
}

/* 主人昵称 */
func (this *SimbaAdgroupsbyadgroupidsGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码，从1开始<br /> 支持最小值为：1 */
func (this *SimbaAdgroupsbyadgroupidsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 页尺寸，最大200，如果入参adgroup_ids有传入值，则page_size和page_no值不起作用。如果adgrpup_ids为空而campaign_id有值，此时page_size和page_no值才是返回的页数据大小和页码<br /> 支持最大值为：200<br /> 支持最小值为：1 */
func (this *SimbaAdgroupsbyadgroupidsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type SimbaAdgroupsbyadgroupidsGetResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	SimbaAdgroupsbyadgroupidsGetResponseResult `json:"simba_adgroupsbyadgroupids_get_response"`
}
type SimbaAdgroupsbyadgroupidsGetResponseResult struct {
	/* 返回的推广组分页对象 */
	Adgroups *ADGroupPage `json:"adgroups"`
}

/*taobao.simba.adgroupsbycampaignid.get*/
type SimbaAdgroupsbycampaignidGetRequest struct {
	values url.Values
}

func (this *SimbaAdgroupsbycampaignidGetRequest) GetApiMethodName() string {
	return "taobao.simba.adgroupsbycampaignid.get"
}
func (this *SimbaAdgroupsbycampaignidGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaAdgroupsbycampaignidGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划Id */
func (this *SimbaAdgroupsbycampaignidGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaAdgroupsbycampaignidGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码，从1开始<br /> 支持最小值为：1 */
func (this *SimbaAdgroupsbycampaignidGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 页尺寸，最大200，如果入参adgroup_ids有传入值，则page_size和page_no值不起作用。如果adgrpup_ids为空而campaign_id有值，此时page_size和page_no值才是返回的页数据大小和页码<br /> 支持最大值为：200<br /> 支持最小值为：1 */
func (this *SimbaAdgroupsbycampaignidGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type SimbaAdgroupsbycampaignidGetResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	SimbaAdgroupsbycampaignidGetResponseResult `json:"simba_adgroupsbycampaignid_get_response"`
}
type SimbaAdgroupsbycampaignidGetResponseResult struct {
	/* 返回的推广组分页对象 */
	Adgroups *ADGroupPage `json:"adgroups"`
}

/*taobao.simba.campaign.add*/
type SimbaCampaignAddRequest struct {
	values url.Values
}

func (this *SimbaCampaignAddRequest) GetApiMethodName() string {
	return "taobao.simba.campaign.add"
}
func (this *SimbaCampaignAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCampaignAddRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaCampaignAddRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 推广计划名称，不能多余20个汉字，不能和客户其他推广计划同名。<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *SimbaCampaignAddRequest) SetTitle(value string) {
	this.Set("title", value)
}

type SimbaCampaignAddResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	SimbaCampaignAddResponseResult `json:"simba_campaign_add_response"`
}
type SimbaCampaignAddResponseResult struct {
	/* 创建的推广计划 */
	Campaign *Campaign `json:"campaign"`
}

/*taobao.simba.campaign.area.get*/
type SimbaCampaignAreaGetRequest struct {
	values url.Values
}

func (this *SimbaCampaignAreaGetRequest) GetApiMethodName() string {
	return "taobao.simba.campaign.area.get"
}
func (this *SimbaCampaignAreaGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCampaignAreaGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划Id */
func (this *SimbaCampaignAreaGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaCampaignAreaGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaCampaignAreaGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	SimbaCampaignAreaGetResponseResult `json:"simba_campaign_area_get_response"`
}
type SimbaCampaignAreaGetResponseResult struct {
	/* 推广计划的投放地域配置 */
	CampaignArea *CampaignArea `json:"campaign_area"`
}

/*taobao.simba.campaign.area.update*/
type SimbaCampaignAreaUpdateRequest struct {
	values url.Values
}

func (this *SimbaCampaignAreaUpdateRequest) GetApiMethodName() string {
	return "taobao.simba.campaign.area.update"
}
func (this *SimbaCampaignAreaUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCampaignAreaUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 值为：“all”；或者用“,”分割的数字，数字必须是直通车全国省市列表的AreaID； */
func (this *SimbaCampaignAreaUpdateRequest) SetArea(value string) {
	this.Set("area", value)
}

/* 推广计划Id */
func (this *SimbaCampaignAreaUpdateRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaCampaignAreaUpdateRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaCampaignAreaUpdateResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	SimbaCampaignAreaUpdateResponseResult `json:"simba_campaign_area_update_response"`
}
type SimbaCampaignAreaUpdateResponseResult struct {
	/* 修改后的推广计划投放地域 */
	CampaignArea *CampaignArea `json:"campaign_area"`
}

/*taobao.simba.campaign.areaoptions.get*/
type SimbaCampaignAreaoptionsGetRequest struct {
	values url.Values
}

func (this *SimbaCampaignAreaoptionsGetRequest) GetApiMethodName() string {
	return "taobao.simba.campaign.areaoptions.get"
}
func (this *SimbaCampaignAreaoptionsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCampaignAreaoptionsGetRequest) GetValues() url.Values {
	return this.values
}

type SimbaCampaignAreaoptionsGetResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	SimbaCampaignAreaoptionsGetResponseResult `json:"simba_campaign_areaoptions_get_response"`
}
type SimbaCampaignAreaoptionsGetResponseResult struct {
	/* 推广计划所有可设置的投放地域 */
	AreaOptions []*AreaOption `json:"area_options"`
}

/*taobao.simba.campaign.budget.get*/
type SimbaCampaignBudgetGetRequest struct {
	values url.Values
}

func (this *SimbaCampaignBudgetGetRequest) GetApiMethodName() string {
	return "taobao.simba.campaign.budget.get"
}
func (this *SimbaCampaignBudgetGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCampaignBudgetGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划Id */
func (this *SimbaCampaignBudgetGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaCampaignBudgetGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaCampaignBudgetGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	SimbaCampaignBudgetGetResponseResult `json:"simba_campaign_budget_get_response"`
}
type SimbaCampaignBudgetGetResponseResult struct {
	/* 推广计划日限额 */
	CampaignBudget *CampaignBudget `json:"campaign_budget"`
}

/*taobao.simba.campaign.budget.update*/
type SimbaCampaignBudgetUpdateRequest struct {
	values url.Values
}

func (this *SimbaCampaignBudgetUpdateRequest) GetApiMethodName() string {
	return "taobao.simba.campaign.budget.update"
}
func (this *SimbaCampaignBudgetUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCampaignBudgetUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 如果为空则取消限额；否则必须为整数，单位是元，不得小于30；<br /> 支持最大值为：99999<br /> 支持最小值为：30 */
func (this *SimbaCampaignBudgetUpdateRequest) SetBudget(value string) {
	this.Set("budget", value)
}

/* 推广计划Id */
func (this *SimbaCampaignBudgetUpdateRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaCampaignBudgetUpdateRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 是否平滑消耗：false-否，true-是 */
func (this *SimbaCampaignBudgetUpdateRequest) SetUseSmooth(value string) {
	this.Set("use_smooth", value)
}

type SimbaCampaignBudgetUpdateResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	SimbaCampaignBudgetUpdateResponseResult `json:"simba_campaign_budget_update_response"`
}
type SimbaCampaignBudgetUpdateResponseResult struct {
	/* 修改后的推广计划日限额 */
	CampaignBudget *CampaignBudget `json:"campaign_budget"`
}

/*taobao.simba.campaign.channeloptions.get*/
type SimbaCampaignChanneloptionsGetRequest struct {
	values url.Values
}

func (this *SimbaCampaignChanneloptionsGetRequest) GetApiMethodName() string {
	return "taobao.simba.campaign.channeloptions.get"
}
func (this *SimbaCampaignChanneloptionsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCampaignChanneloptionsGetRequest) GetValues() url.Values {
	return this.values
}

type SimbaCampaignChanneloptionsGetResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	SimbaCampaignChanneloptionsGetResponseResult `json:"simba_campaign_channeloptions_get_response"`
}
type SimbaCampaignChanneloptionsGetResponseResult struct {
	/* 所有推广计划可投放的频道 */
	ChannelOptions []*ChannelOption `json:"channel_options"`
}

/*taobao.simba.campaign.platform.get*/
type SimbaCampaignPlatformGetRequest struct {
	values url.Values
}

func (this *SimbaCampaignPlatformGetRequest) GetApiMethodName() string {
	return "taobao.simba.campaign.platform.get"
}
func (this *SimbaCampaignPlatformGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCampaignPlatformGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划Id */
func (this *SimbaCampaignPlatformGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaCampaignPlatformGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaCampaignPlatformGetResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	SimbaCampaignPlatformGetResponseResult `json:"simba_campaign_platform_get_response"`
}
type SimbaCampaignPlatformGetResponseResult struct {
	/* 取得的推广计划的投放平台设置 */
	CampaignPlatform *CampaignPlatform `json:"campaign_platform"`
}

/*taobao.simba.campaign.platform.update*/
type SimbaCampaignPlatformUpdateRequest struct {
	values url.Values
}

func (this *SimbaCampaignPlatformUpdateRequest) GetApiMethodName() string {
	return "taobao.simba.campaign.platform.update"
}
func (this *SimbaCampaignPlatformUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCampaignPlatformUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划Id */
func (this *SimbaCampaignPlatformUpdateRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 站内无线频道折扣。百分比，数值必须是大于等于 1小于等于200的整数 */
func (this *SimbaCampaignPlatformUpdateRequest) SetMobileDiscount(value string) {
	this.Set("mobile_discount", value)
}

/* 主人昵称 */
func (this *SimbaCampaignPlatformUpdateRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 非搜索投放频道代码数组，频道代码必须是直通车非搜索类频道列表中的值。<br /> 支持最大值为：128<br /> 支持最小值为：0 */
func (this *SimbaCampaignPlatformUpdateRequest) SetNonsearchChannels(value string) {
	this.Set("nonsearch_channels", value)
}

/* 溢价的百分比，必须是大于等于 1小于等于200的整数<br /> 支持最大值为：200<br /> 支持最小值为：1 */
func (this *SimbaCampaignPlatformUpdateRequest) SetOutsideDiscount(value string) {
	this.Set("outside_discount", value)
}

/* 搜索投放频道代码数组，频道代码必须是直通车搜索类频道列表中的值，必须包含淘宝内网。<br /> 支持最大值为：128<br /> 支持最小值为：0 */
func (this *SimbaCampaignPlatformUpdateRequest) SetSearchChannels(value string) {
	this.Set("search_channels", value)
}

type SimbaCampaignPlatformUpdateResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	SimbaCampaignPlatformUpdateResponseResult `json:"simba_campaign_platform_update_response"`
}
type SimbaCampaignPlatformUpdateResponseResult struct {
	/* 修改后的推广计划投放平台设置 */
	CampaignPlatform *CampaignPlatform `json:"campaign_platform"`
}

/*taobao.simba.campaign.schedule.get*/
type SimbaCampaignScheduleGetRequest struct {
	values url.Values
}

func (this *SimbaCampaignScheduleGetRequest) GetApiMethodName() string {
	return "taobao.simba.campaign.schedule.get"
}
func (this *SimbaCampaignScheduleGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCampaignScheduleGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划Id */
func (this *SimbaCampaignScheduleGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaCampaignScheduleGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaCampaignScheduleGetResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	SimbaCampaignScheduleGetResponseResult `json:"simba_campaign_schedule_get_response"`
}
type SimbaCampaignScheduleGetResponseResult struct {
	/* 修改后的推广计划分时折扣 */
	CampaignSchedule *CampaignSchedule `json:"campaign_schedule"`
}

/*taobao.simba.campaign.schedule.update*/
type SimbaCampaignScheduleUpdateRequest struct {
	values url.Values
}

func (this *SimbaCampaignScheduleUpdateRequest) GetApiMethodName() string {
	return "taobao.simba.campaign.schedule.update"
}
func (this *SimbaCampaignScheduleUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCampaignScheduleUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划Id */
func (this *SimbaCampaignScheduleUpdateRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaCampaignScheduleUpdateRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 值为：“all”；或者用“;”分割的每天的设置字符串，该字符串为用“,”分割的时段折扣字符串，格式为：起始时间-结束时间:折扣，其中时间是24小时格式记录，折扣是1-150整数，表示折扣百分比； */
func (this *SimbaCampaignScheduleUpdateRequest) SetSchedule(value string) {
	this.Set("schedule", value)
}

type SimbaCampaignScheduleUpdateResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	SimbaCampaignScheduleUpdateResponseResult `json:"simba_campaign_schedule_update_response"`
}
type SimbaCampaignScheduleUpdateResponseResult struct {
	/* 修改后的推广计划分时折扣 */
	CampaignSchedule *CampaignSchedule `json:"campaign_schedule"`
}

/*taobao.simba.campaign.update*/
type SimbaCampaignUpdateRequest struct {
	values url.Values
}

func (this *SimbaCampaignUpdateRequest) GetApiMethodName() string {
	return "taobao.simba.campaign.update"
}
func (this *SimbaCampaignUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCampaignUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划Id */
func (this *SimbaCampaignUpdateRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaCampaignUpdateRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 用户设置的上下限状态；offline-下线；online-上线； */
func (this *SimbaCampaignUpdateRequest) SetOnlineStatus(value string) {
	this.Set("online_status", value)
}

/* 推广计划名称，不能多余40个字符，不能和客户其他推广计划同名。<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *SimbaCampaignUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

type SimbaCampaignUpdateResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	SimbaCampaignUpdateResponseResult `json:"simba_campaign_update_response"`
}
type SimbaCampaignUpdateResponseResult struct {
	/* 修改后的推广计划 */
	Campaign *Campaign `json:"campaign"`
}

/*taobao.simba.campaigns.get*/
type SimbaCampaignsGetRequest struct {
	values url.Values
}

func (this *SimbaCampaignsGetRequest) GetApiMethodName() string {
	return "taobao.simba.campaigns.get"
}
func (this *SimbaCampaignsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCampaignsGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaCampaignsGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaCampaignsGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	SimbaCampaignsGetResponseResult `json:"simba_campaigns_get_response"`
}
type SimbaCampaignsGetResponseResult struct {
	/* 推广计划列表 */
	Campaigns []*Campaign `json:"campaigns"`
}

/*taobao.simba.catmatchids.changed.get*/
type SimbaCatmatchidsChangedGetRequest struct {
	values url.Values
}

func (this *SimbaCatmatchidsChangedGetRequest) GetApiMethodName() string {
	return "taobao.simba.catmatchids.changed.get"
}
func (this *SimbaCatmatchidsChangedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCatmatchidsChangedGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaCatmatchidsChangedGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 返回的第几页数据，默认为1 */
func (this *SimbaCatmatchidsChangedGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回的每页数据量大小,默认200最大1000 */
func (this *SimbaCatmatchidsChangedGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 得到此时间点之后的数据，不能大于一个月 */
func (this *SimbaCatmatchidsChangedGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type SimbaCatmatchidsChangedGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	SimbaCatmatchidsChangedGetResponseResult `json:"simba_catmatchids_changed_get_response"`
}
type SimbaCatmatchidsChangedGetResponseResult struct {
	/* 类目出价ID列表 */
	ChangedCatmatchIds []int64 `json:"changed_catmatch_ids"`
}

/*taobao.simba.catmatchids.deleted.get*/
type SimbaCatmatchidsDeletedGetRequest struct {
	values url.Values
}

func (this *SimbaCatmatchidsDeletedGetRequest) GetApiMethodName() string {
	return "taobao.simba.catmatchids.deleted.get"
}
func (this *SimbaCatmatchidsDeletedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCatmatchidsDeletedGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaCatmatchidsDeletedGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 返回的第几页数据，默认为1 */
func (this *SimbaCatmatchidsDeletedGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回的每页数据量大小,默认200最大1000 */
func (this *SimbaCatmatchidsDeletedGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 得到此时间点之后的数据，不能大于一个月 */
func (this *SimbaCatmatchidsDeletedGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type SimbaCatmatchidsDeletedGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	SimbaCatmatchidsDeletedGetResponseResult `json:"simba_catmatchids_deleted_get_response"`
}
type SimbaCatmatchidsDeletedGetResponseResult struct {
	/* 类目出价ID列表 */
	DeletedCatmatchIds []int64 `json:"deleted_catmatch_ids"`
}

/*taobao.simba.creative.add*/
type SimbaCreativeAddRequest struct {
	values url.Values
}

func (this *SimbaCreativeAddRequest) GetApiMethodName() string {
	return "taobao.simba.creative.add"
}
func (this *SimbaCreativeAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCreativeAddRequest) GetValues() url.Values {
	return this.values
}

/* 推广组Id */
func (this *SimbaCreativeAddRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 创意图片地址，必须是推广组对应商品的图片之一 */
func (this *SimbaCreativeAddRequest) SetImgUrl(value string) {
	this.Set("img_url", value)
}

/* 主人昵称 */
func (this *SimbaCreativeAddRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 创意标题，最多20个汉字<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *SimbaCreativeAddRequest) SetTitle(value string) {
	this.Set("title", value)
}

type SimbaCreativeAddResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	SimbaCreativeAddResponseResult `json:"simba_creative_add_response"`
}
type SimbaCreativeAddResponseResult struct {
	/* 新增加的创意对象 */
	Creative *Creative `json:"creative"`
}

/*taobao.simba.creative.delete*/
type SimbaCreativeDeleteRequest struct {
	values url.Values
}

func (this *SimbaCreativeDeleteRequest) GetApiMethodName() string {
	return "taobao.simba.creative.delete"
}
func (this *SimbaCreativeDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCreativeDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 创意Id */
func (this *SimbaCreativeDeleteRequest) SetCreativeId(value string) {
	this.Set("creative_id", value)
}

/* 主人昵称 */
func (this *SimbaCreativeDeleteRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaCreativeDeleteResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	SimbaCreativeDeleteResponseResult `json:"simba_creative_delete_response"`
}
type SimbaCreativeDeleteResponseResult struct {
	/* 被删除的创意对象 */
	Creative *Creative `json:"creative"`
}

/*taobao.simba.creative.update*/
type SimbaCreativeUpdateRequest struct {
	values url.Values
}

func (this *SimbaCreativeUpdateRequest) GetApiMethodName() string {
	return "taobao.simba.creative.update"
}
func (this *SimbaCreativeUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCreativeUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 推广组Id */
func (this *SimbaCreativeUpdateRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 创意Id */
func (this *SimbaCreativeUpdateRequest) SetCreativeId(value string) {
	this.Set("creative_id", value)
}

/* 创意图片地址，必须是推广组对应商品的图片之一 */
func (this *SimbaCreativeUpdateRequest) SetImgUrl(value string) {
	this.Set("img_url", value)
}

/* 主人昵称 */
func (this *SimbaCreativeUpdateRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 创意标题，最多20个汉字<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *SimbaCreativeUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

type SimbaCreativeUpdateResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	SimbaCreativeUpdateResponseResult `json:"simba_creative_update_response"`
}
type SimbaCreativeUpdateResponseResult struct {
	/* 创意修改记录对象 */
	Creativerecord *CreativeRecord `json:"creativerecord"`
}

/*taobao.simba.creativeids.changed.get*/
type SimbaCreativeidsChangedGetRequest struct {
	values url.Values
}

func (this *SimbaCreativeidsChangedGetRequest) GetApiMethodName() string {
	return "taobao.simba.creativeids.changed.get"
}
func (this *SimbaCreativeidsChangedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCreativeidsChangedGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaCreativeidsChangedGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 返回的第几页数据，默认为1 */
func (this *SimbaCreativeidsChangedGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回的每页数据量大小,默认200最大1000<br /> 支持最大值为：1000<br /> 支持最小值为：1 */
func (this *SimbaCreativeidsChangedGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 得到此时间点之后的数据，不能大于一个月 */
func (this *SimbaCreativeidsChangedGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type SimbaCreativeidsChangedGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	SimbaCreativeidsChangedGetResponseResult `json:"simba_creativeids_changed_get_response"`
}
type SimbaCreativeidsChangedGetResponseResult struct {
	/* 创意ID列表 */
	ChangedCreativeIds []int64 `json:"changed_creative_ids"`
}

/*taobao.simba.creativeids.deleted.get*/
type SimbaCreativeidsDeletedGetRequest struct {
	values url.Values
}

func (this *SimbaCreativeidsDeletedGetRequest) GetApiMethodName() string {
	return "taobao.simba.creativeids.deleted.get"
}
func (this *SimbaCreativeidsDeletedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCreativeidsDeletedGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaCreativeidsDeletedGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 返回的第几页数据，默认为1<br /> 支持最小值为：1 */
func (this *SimbaCreativeidsDeletedGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回的每页数据量大小,默认200最大1000<br /> 支持最大值为：1000<br /> 支持最小值为：1 */
func (this *SimbaCreativeidsDeletedGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 得到这个时间点之后的数据，不能大于一个月 */
func (this *SimbaCreativeidsDeletedGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type SimbaCreativeidsDeletedGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	SimbaCreativeidsDeletedGetResponseResult `json:"simba_creativeids_deleted_get_response"`
}
type SimbaCreativeidsDeletedGetResponseResult struct {
	/* 创意ID列表 */
	DeletedCreativeIds []int64 `json:"deleted_creative_ids"`
}

/*taobao.simba.creatives.changed.get*/
type SimbaCreativesChangedGetRequest struct {
	values url.Values
}

func (this *SimbaCreativesChangedGetRequest) GetApiMethodName() string {
	return "taobao.simba.creatives.changed.get"
}
func (this *SimbaCreativesChangedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCreativesChangedGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaCreativesChangedGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 返回的第几页数据，默认为1 */
func (this *SimbaCreativesChangedGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回的每页数据量大小,默认200最大1000<br /> 支持最大值为：1000<br /> 支持最小值为：1 */
func (this *SimbaCreativesChangedGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 得到此时间点之后的数据，不能大于一个月 */
func (this *SimbaCreativesChangedGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type SimbaCreativesChangedGetResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	SimbaCreativesChangedGetResponseResult `json:"simba_creatives_changed_get_response"`
}
type SimbaCreativesChangedGetResponseResult struct {
	/* 广告创意分页对象 */
	Creatives *CreativePage `json:"creatives"`
}

/*taobao.simba.creatives.get*/
type SimbaCreativesGetRequest struct {
	values url.Values
}

func (this *SimbaCreativesGetRequest) GetApiMethodName() string {
	return "taobao.simba.creatives.get"
}
func (this *SimbaCreativesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCreativesGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组Id */
func (this *SimbaCreativesGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 创意Id数组，最多200个 */
func (this *SimbaCreativesGetRequest) SetCreativeIds(value string) {
	this.Set("creative_ids", value)
}

/* 主人昵称 */
func (this *SimbaCreativesGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaCreativesGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	SimbaCreativesGetResponseResult `json:"simba_creatives_get_response"`
}
type SimbaCreativesGetResponseResult struct {
	/* 创意对象列表 */
	Creatives []*Creative `json:"creatives"`
}

/*taobao.simba.creatives.record.get*/
type SimbaCreativesRecordGetRequest struct {
	values url.Values
}

func (this *SimbaCreativesRecordGetRequest) GetApiMethodName() string {
	return "taobao.simba.creatives.record.get"
}
func (this *SimbaCreativesRecordGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCreativesRecordGetRequest) GetValues() url.Values {
	return this.values
}

/* 创意Id数组，最多200个 */
func (this *SimbaCreativesRecordGetRequest) SetCreativeIds(value string) {
	this.Set("creative_ids", value)
}

/* 主人昵称 */
func (this *SimbaCreativesRecordGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaCreativesRecordGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	SimbaCreativesRecordGetResponseResult `json:"simba_creatives_record_get_response"`
}
type SimbaCreativesRecordGetResponseResult struct {
	/* 创意修改对象列表 */
	Creativerecords []*CreativeRecord `json:"creativerecords"`
}

/*taobao.simba.customers.authorized.get*/
type SimbaCustomersAuthorizedGetRequest struct {
	values url.Values
}

func (this *SimbaCustomersAuthorizedGetRequest) GetApiMethodName() string {
	return "taobao.simba.customers.authorized.get"
}
func (this *SimbaCustomersAuthorizedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaCustomersAuthorizedGetRequest) GetValues() url.Values {
	return this.values
}

type SimbaCustomersAuthorizedGetResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	SimbaCustomersAuthorizedGetResponseResult `json:"simba_customers_authorized_get_response"`
}
type SimbaCustomersAuthorizedGetResponseResult struct {
	/* 授权当前登录账户为代理账户的昵称列表 */
	Nicks []string `json:"nicks"`
}

/*taobao.simba.insight.cats.get*/
type SimbaInsightCatsGetRequest struct {
	values url.Values
}

func (this *SimbaInsightCatsGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.cats.get"
}
func (this *SimbaInsightCatsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightCatsGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询类目id数组，最大长度200 */
func (this *SimbaInsightCatsGetRequest) SetCategoryIds(value string) {
	this.Set("category_ids", value)
}

/* 主人昵称 */
func (this *SimbaInsightCatsGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaInsightCatsGetResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	SimbaInsightCatsGetResponseResult `json:"simba_insight_cats_get_response"`
}
type SimbaInsightCatsGetResponseResult struct {
	/* 类目对象列表 */
	InCategoryTops []*INCategoryTop `json:"in_category_tops"`
}

/*taobao.simba.insight.catsanalysis.get*/
type SimbaInsightCatsanalysisGetRequest struct {
	values url.Values
}

func (this *SimbaInsightCatsanalysisGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.catsanalysis.get"
}
func (this *SimbaInsightCatsanalysisGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightCatsanalysisGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询类目id数组，最大长度200 */
func (this *SimbaInsightCatsanalysisGetRequest) SetCategoryIds(value string) {
	this.Set("category_ids", value)
}

/* 主人昵称 */
func (this *SimbaInsightCatsanalysisGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 结果过滤。
AREA：返回地域占比；
SOURCE：返回来源占比；
HPRICE：返回竞价分布。
stu只能是AREA、SOURCE或HPRICE中的一个 */
func (this *SimbaInsightCatsanalysisGetRequest) SetStu(value string) {
	this.Set("stu", value)
}

type SimbaInsightCatsanalysisGetResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	SimbaInsightCatsanalysisGetResponseResult `json:"simba_insight_catsanalysis_get_response"`
}
type SimbaInsightCatsanalysisGetResponseResult struct {
	/* 词分析数据列表 */
	InCategoryAnalyses []*INCategoryAnalysis `json:"in_category_analyses"`
}

/*taobao.simba.insight.catsbase.get*/
type SimbaInsightCatsbaseGetRequest struct {
	values url.Values
}

func (this *SimbaInsightCatsbaseGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.catsbase.get"
}
func (this *SimbaInsightCatsbaseGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightCatsbaseGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询类目id数组，最大长度200 */
func (this *SimbaInsightCatsbaseGetRequest) SetCategoryIds(value string) {
	this.Set("category_ids", value)
}

/* 结果过滤。PV：返回展现量；CLICK：返回点击量；AVGCPC：返回平均出价；COMPETITION ：返回竞争宝贝数;CTR 点击率。filter可由,组合 */
func (this *SimbaInsightCatsbaseGetRequest) SetFilter(value string) {
	this.Set("filter", value)
}

/* 主人昵称 */
func (this *SimbaInsightCatsbaseGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 时间格式(DAY: 最近一天； WEEK：最近一周。MONTH：最近一个月。3MONTH：最近三个月) */
func (this *SimbaInsightCatsbaseGetRequest) SetTime(value string) {
	this.Set("time", value)
}

type SimbaInsightCatsbaseGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	SimbaInsightCatsbaseGetResponseResult `json:"simba_insight_catsbase_get_response"`
}
type SimbaInsightCatsbaseGetResponseResult struct {
	/* 类目基础数据列表 */
	InCategoryBases []*INCategoryBase `json:"in_category_bases"`
}

/*taobao.simba.insight.catsdata.get*/
type SimbaInsightCatsdataGetRequest struct {
	values url.Values
}

func (this *SimbaInsightCatsdataGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.catsdata.get"
}
func (this *SimbaInsightCatsdataGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightCatsdataGetRequest) GetValues() url.Values {
	return this.values
}

/* 表示要查询的类目id */
func (this *SimbaInsightCatsdataGetRequest) SetCategoryIdList(value string) {
	this.Set("category_id_list", value)
}

/* 查询截止时间，格式：yyyy-MM-dd */
func (this *SimbaInsightCatsdataGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 开始时间，格式：yyyy-MM-dd */
func (this *SimbaInsightCatsdataGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type SimbaInsightCatsdataGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	SimbaInsightCatsdataGetResponseResult `json:"simba_insight_catsdata_get_response"`
}
type SimbaInsightCatsdataGetResponseResult struct {
	/* 类目详细数据列表 */
	CatDataList []*InsightCategoryDataDTO `json:"cat_data_list"`
}

/*taobao.simba.insight.catsforecast.get*/
type SimbaInsightCatsforecastGetRequest struct {
	values url.Values
}

func (this *SimbaInsightCatsforecastGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.catsforecast.get"
}
func (this *SimbaInsightCatsforecastGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightCatsforecastGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaInsightCatsforecastGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 查询词数组，最大长度200 */
func (this *SimbaInsightCatsforecastGetRequest) SetWords(value string) {
	this.Set("words", value)
}

type SimbaInsightCatsforecastGetResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	SimbaInsightCatsforecastGetResponseResult `json:"simba_insight_catsforecast_get_response"`
}
type SimbaInsightCatsforecastGetResponseResult struct {
	/* 类目对象列表 */
	InCategoryTops []*INCategoryTop `json:"in_category_tops"`
}

/*taobao.simba.insight.catsforecastnew.get*/
type SimbaInsightCatsforecastnewGetRequest struct {
	values url.Values
}

func (this *SimbaInsightCatsforecastnewGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.catsforecastnew.get"
}
func (this *SimbaInsightCatsforecastnewGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightCatsforecastnewGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要查询的词列表 */
func (this *SimbaInsightCatsforecastnewGetRequest) SetBidwordList(value string) {
	this.Set("bidword_list", value)
}

type SimbaInsightCatsforecastnewGetResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	SimbaInsightCatsforecastnewGetResponseResult `json:"simba_insight_catsforecastnew_get_response"`
}
type SimbaInsightCatsforecastnewGetResponseResult struct {
	/* 词的相关类目列表 */
	CategoryForecastList []*InsightCategoryForcastDTO `json:"category_forecast_list"`
}

/*taobao.simba.insight.catsinfo.get*/
type SimbaInsightCatsinfoGetRequest struct {
	values url.Values
}

func (this *SimbaInsightCatsinfoGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.catsinfo.get"
}
func (this *SimbaInsightCatsinfoGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightCatsinfoGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要查询的类目id */
func (this *SimbaInsightCatsinfoGetRequest) SetCategoryIdList(value string) {
	this.Set("category_id_list", value)
}

/* 表示请求的类型：0表示请求所有顶级类目的信息，这时可以忽略第二个参数，1表示获取给定的类目id的详细信息，2表示获取给定类目id的所有子类目的详细信息 */
func (this *SimbaInsightCatsinfoGetRequest) SetType(value string) {
	this.Set("type", value)
}

type SimbaInsightCatsinfoGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	SimbaInsightCatsinfoGetResponseResult `json:"simba_insight_catsinfo_get_response"`
}
type SimbaInsightCatsinfoGetResponseResult struct {
	/* 类目详细信息 */
	CategoryInfoList []*InsightCategoryInfoDTO `json:"category_info_list"`
}

/*taobao.simba.insight.catsrelatedword.get*/
type SimbaInsightCatsrelatedwordGetRequest struct {
	values url.Values
}

func (this *SimbaInsightCatsrelatedwordGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.catsrelatedword.get"
}
func (this *SimbaInsightCatsrelatedwordGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightCatsrelatedwordGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaInsightCatsrelatedwordGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 最大返回数量(1-10)<br /> 支持最大值为：10<br /> 支持最小值为：1 */
func (this *SimbaInsightCatsrelatedwordGetRequest) SetResultNum(value string) {
	this.Set("result_num", value)
}

/* 查询词数组，最大长度200 */
func (this *SimbaInsightCatsrelatedwordGetRequest) SetWords(value string) {
	this.Set("words", value)
}

type SimbaInsightCatsrelatedwordGetResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	SimbaInsightCatsrelatedwordGetResponseResult `json:"simba_insight_catsrelatedword_get_response"`
}
type SimbaInsightCatsrelatedwordGetResponseResult struct {
	/* 类目相关词对象列表 */
	RelatedWords []string `json:"related_words"`
}

/*taobao.simba.insight.catstopword.get*/
type SimbaInsightCatstopwordGetRequest struct {
	values url.Values
}

func (this *SimbaInsightCatstopwordGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.catstopword.get"
}
func (this *SimbaInsightCatstopwordGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightCatstopwordGetRequest) GetValues() url.Values {
	return this.values
}

/* 类目id数组，最大长度200 */
func (this *SimbaInsightCatstopwordGetRequest) SetCategoryIds(value string) {
	this.Set("category_ids", value)
}

/* 主人昵称 */
func (this *SimbaInsightCatstopwordGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 最大返回数量(1-100)<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *SimbaInsightCatstopwordGetRequest) SetResultNum(value string) {
	this.Set("result_num", value)
}

type SimbaInsightCatstopwordGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	SimbaInsightCatstopwordGetResponseResult `json:"simba_insight_catstopword_get_response"`
}
type SimbaInsightCatstopwordGetResponseResult struct {
	/* 类目TOP词查询 */
	TopWords []string `json:"top_words"`
}

/*taobao.simba.insight.catstopwordnew.get*/
type SimbaInsightCatstopwordnewGetRequest struct {
	values url.Values
}

func (this *SimbaInsightCatstopwordnewGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.catstopwordnew.get"
}
func (this *SimbaInsightCatstopwordnewGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightCatstopwordnewGetRequest) GetValues() url.Values {
	return this.values
}

/* 类目id */
func (this *SimbaInsightCatstopwordnewGetRequest) SetCatId(value string) {
	this.Set("cat_id", value)
}

/* 表示查询的维度，比如选择click，则查询该类目下点击量最大的词，可供选择的值有：impression, click, cost, ctr, cpc, coverage, transactiontotal, transactionshippingtotal, favtotal, roi */
func (this *SimbaInsightCatstopwordnewGetRequest) SetDimension(value string) {
	this.Set("dimension", value)
}

/* 查询截止时间，格式只能是：yyyy-MM-dd */
func (this *SimbaInsightCatstopwordnewGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 返回前多少条数据<br /> 支持最大值为：20<br /> 支持最小值为：1 */
func (this *SimbaInsightCatstopwordnewGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 查询开始时间，格式必须为：yyyy-MM-dd */
func (this *SimbaInsightCatstopwordnewGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type SimbaInsightCatstopwordnewGetResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	SimbaInsightCatstopwordnewGetResponseResult `json:"simba_insight_catstopwordnew_get_response"`
}
type SimbaInsightCatstopwordnewGetResponseResult struct {
	/* 类目下热门词详细数据 */
	TopwordDataList []*InsightWordDataUnderCatDTO `json:"topword_data_list"`
}

/*taobao.simba.insight.catsworddata.get*/
type SimbaInsightCatsworddataGetRequest struct {
	values url.Values
}

func (this *SimbaInsightCatsworddataGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.catsworddata.get"
}
func (this *SimbaInsightCatsworddataGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightCatsworddataGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要查询的关键词列表 */
func (this *SimbaInsightCatsworddataGetRequest) SetBidwordList(value string) {
	this.Set("bidword_list", value)
}

/* 类目id */
func (this *SimbaInsightCatsworddataGetRequest) SetCatId(value string) {
	this.Set("cat_id", value)
}

/* 结束时间，格式只能为：yyyy-MM-dd */
func (this *SimbaInsightCatsworddataGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 开始时间，格式只能为：yyyy-MM-dd */
func (this *SimbaInsightCatsworddataGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type SimbaInsightCatsworddataGetResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	SimbaInsightCatsworddataGetResponseResult `json:"simba_insight_catsworddata_get_response"`
}
type SimbaInsightCatsworddataGetResponseResult struct {
	/* 关键词在类目下的数据 */
	CatwordDataList []*InsightWordDataUnderCatDTO `json:"catword_data_list"`
}

/*taobao.simba.insight.relatedwords.get*/
type SimbaInsightRelatedwordsGetRequest struct {
	values url.Values
}

func (this *SimbaInsightRelatedwordsGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.relatedwords.get"
}
func (this *SimbaInsightRelatedwordsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightRelatedwordsGetRequest) GetValues() url.Values {
	return this.values
}

/* 要查询的词列表 */
func (this *SimbaInsightRelatedwordsGetRequest) SetBidwordList(value string) {
	this.Set("bidword_list", value)
}

/* 表示返回数据的条数<br /> 支持最大值为：10<br /> 支持最小值为：1 */
func (this *SimbaInsightRelatedwordsGetRequest) SetNumber(value string) {
	this.Set("number", value)
}

type SimbaInsightRelatedwordsGetResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	SimbaInsightRelatedwordsGetResponseResult `json:"simba_insight_relatedwords_get_response"`
}
type SimbaInsightRelatedwordsGetResponseResult struct {
	/* 相关词列表 */
	RelatedWordsResultList []*InsightRelatedWords `json:"related_words_result_list"`
}

/*taobao.simba.insight.toplevelcats.get*/
type SimbaInsightToplevelcatsGetRequest struct {
	values url.Values
}

func (this *SimbaInsightToplevelcatsGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.toplevelcats.get"
}
func (this *SimbaInsightToplevelcatsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightToplevelcatsGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaInsightToplevelcatsGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaInsightToplevelcatsGetResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	SimbaInsightToplevelcatsGetResponseResult `json:"simba_insight_toplevelcats_get_response"`
}
type SimbaInsightToplevelcatsGetResponseResult struct {
	/* 得到一级类目 */
	InCategoryTops []*INCategoryTop `json:"in_category_tops"`
}

/*taobao.simba.insight.wordsanalysis.get*/
type SimbaInsightWordsanalysisGetRequest struct {
	values url.Values
}

func (this *SimbaInsightWordsanalysisGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.wordsanalysis.get"
}
func (this *SimbaInsightWordsanalysisGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightWordsanalysisGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaInsightWordsanalysisGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 结果过滤。
AREA：  返回地域占比；
SOURCE：返回来源占比；
HPRICE：返回竞价分布。
stu只能是AREA、SOURCE或HPRICE中的一个 */
func (this *SimbaInsightWordsanalysisGetRequest) SetStu(value string) {
	this.Set("stu", value)
}

/* 查询词组，最大长度200 */
func (this *SimbaInsightWordsanalysisGetRequest) SetWords(value string) {
	this.Set("words", value)
}

type SimbaInsightWordsanalysisGetResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	SimbaInsightWordsanalysisGetResponseResult `json:"simba_insight_wordsanalysis_get_response"`
}
type SimbaInsightWordsanalysisGetResponseResult struct {
	/* 词分析列表 */
	InWordAnalyses []*INWordAnalysis `json:"in_word_analyses"`
}

/*taobao.simba.insight.wordsareadata.get*/
type SimbaInsightWordsareadataGetRequest struct {
	values url.Values
}

func (this *SimbaInsightWordsareadataGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.wordsareadata.get"
}
func (this *SimbaInsightWordsareadataGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightWordsareadataGetRequest) GetValues() url.Values {
	return this.values
}

/* 关键词 */
func (this *SimbaInsightWordsareadataGetRequest) SetBidword(value string) {
	this.Set("bidword", value)
}

/* 结束时间，格式：yyyy-MM-dd */
func (this *SimbaInsightWordsareadataGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 开始时间，格式：yyyy-MM-dd */
func (this *SimbaInsightWordsareadataGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type SimbaInsightWordsareadataGetResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	SimbaInsightWordsareadataGetResponseResult `json:"simba_insight_wordsareadata_get_response"`
}
type SimbaInsightWordsareadataGetResponseResult struct {
	/* 地域细分数据 */
	WordAreadataList []*InsightWordsAreaDistributeDataDTO `json:"word_areadata_list"`
}

/*taobao.simba.insight.wordsbase.get*/
type SimbaInsightWordsbaseGetRequest struct {
	values url.Values
}

func (this *SimbaInsightWordsbaseGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.wordsbase.get"
}
func (this *SimbaInsightWordsbaseGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightWordsbaseGetRequest) GetValues() url.Values {
	return this.values
}

/* 结果过滤。PV：返回展现量；CLICK：返回点击量；AVGCPC：返回平均出价；COMPETITION ：返回竞争宝贝数;CTR 点击率。filter可由,组合 */
func (this *SimbaInsightWordsbaseGetRequest) SetFilter(value string) {
	this.Set("filter", value)
}

/* 主人昵称 */
func (this *SimbaInsightWordsbaseGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 时间格式(DAY: 最近一天； WEEK：最近一周。MONTH：最近一个月。3MONTH：最近三个月) */
func (this *SimbaInsightWordsbaseGetRequest) SetTime(value string) {
	this.Set("time", value)
}

/* 查询词组，最大长度170 */
func (this *SimbaInsightWordsbaseGetRequest) SetWords(value string) {
	this.Set("words", value)
}

type SimbaInsightWordsbaseGetResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	SimbaInsightWordsbaseGetResponseResult `json:"simba_insight_wordsbase_get_response"`
}
type SimbaInsightWordsbaseGetResponseResult struct {
	/* 词基础数据对象列表 */
	InWordBases []*INWordBase `json:"in_word_bases"`
}

/*taobao.simba.insight.wordscats.get*/
type SimbaInsightWordscatsGetRequest struct {
	values url.Values
}

func (this *SimbaInsightWordscatsGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.wordscats.get"
}
func (this *SimbaInsightWordscatsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightWordscatsGetRequest) GetValues() url.Values {
	return this.values
}

/* 结果过滤。PV：返回展现量；CLICK：返回点击量；AVGCPC：返回平均出价；COMPETITION ：返回竞争宝贝数;CTR 点击率。filter可由,组合 */
func (this *SimbaInsightWordscatsGetRequest) SetFilter(value string) {
	this.Set("filter", value)
}

/* 主人昵称 */
func (this *SimbaInsightWordscatsGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 查询词和类目数组，最大长度200，每一个数组元素都是词+类目，以”^^”分割如下：
词^^类目 */
func (this *SimbaInsightWordscatsGetRequest) SetWordCategories(value string) {
	this.Set("word_categories", value)
}

type SimbaInsightWordscatsGetResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	SimbaInsightWordscatsGetResponseResult `json:"simba_insight_wordscats_get_response"`
}
type SimbaInsightWordscatsGetResponseResult struct {
	/* 词和类目基础信息对象列表 */
	InWordCategories []*INWordCategory `json:"in_word_categories"`
}

/*taobao.simba.insight.wordsdata.get*/
type SimbaInsightWordsdataGetRequest struct {
	values url.Values
}

func (this *SimbaInsightWordsdataGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.wordsdata.get"
}
func (this *SimbaInsightWordsdataGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightWordsdataGetRequest) GetValues() url.Values {
	return this.values
}

/* 关键词列表 */
func (this *SimbaInsightWordsdataGetRequest) SetBidwordList(value string) {
	this.Set("bidword_list", value)
}

/* 结束时间 */
func (this *SimbaInsightWordsdataGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 开始时间 */
func (this *SimbaInsightWordsdataGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type SimbaInsightWordsdataGetResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	SimbaInsightWordsdataGetResponseResult `json:"simba_insight_wordsdata_get_response"`
}
type SimbaInsightWordsdataGetResponseResult struct {
	/* 关键词大盘数据列表 */
	WordDataList []*InsightWordDataDTO `json:"word_data_list"`
}

/*taobao.simba.insight.wordspricedata.get*/
type SimbaInsightWordspricedataGetRequest struct {
	values url.Values
}

func (this *SimbaInsightWordspricedataGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.wordspricedata.get"
}
func (this *SimbaInsightWordspricedataGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightWordspricedataGetRequest) GetValues() url.Values {
	return this.values
}

/* 关键词 */
func (this *SimbaInsightWordspricedataGetRequest) SetBidword(value string) {
	this.Set("bidword", value)
}

/* 结束时间，格式：yyyy-MM-dd */
func (this *SimbaInsightWordspricedataGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 开始时间，格式：yyyy-MM-dd */
func (this *SimbaInsightWordspricedataGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type SimbaInsightWordspricedataGetResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	SimbaInsightWordspricedataGetResponseResult `json:"simba_insight_wordspricedata_get_response"`
}
type SimbaInsightWordspricedataGetResponseResult struct {
	/* 竞价区间分布数据 */
	WordPricedataList []*InsightWordPriceDistributeDataDTO `json:"word_pricedata_list"`
}

/*taobao.simba.insight.wordssubdata.get*/
type SimbaInsightWordssubdataGetRequest struct {
	values url.Values
}

func (this *SimbaInsightWordssubdataGetRequest) GetApiMethodName() string {
	return "taobao.simba.insight.wordssubdata.get"
}
func (this *SimbaInsightWordssubdataGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaInsightWordssubdataGetRequest) GetValues() url.Values {
	return this.values
}

/* 关键词列表 */
func (this *SimbaInsightWordssubdataGetRequest) SetBidwordList(value string) {
	this.Set("bidword_list", value)
}

/* 结束时间 */
func (this *SimbaInsightWordssubdataGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 开始时间 */
func (this *SimbaInsightWordssubdataGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type SimbaInsightWordssubdataGetResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	SimbaInsightWordssubdataGetResponseResult `json:"simba_insight_wordssubdata_get_response"`
}
type SimbaInsightWordssubdataGetResponseResult struct {
	/* 关键词按流量细分的数据 */
	WordSubdataList []*InsightWordSubDataDTO `json:"word_subdata_list"`
}

/*taobao.simba.keyword.keywordforecast.get*/
type SimbaKeywordKeywordforecastGetRequest struct {
	values url.Values
}

func (this *SimbaKeywordKeywordforecastGetRequest) GetApiMethodName() string {
	return "taobao.simba.keyword.keywordforecast.get"
}
func (this *SimbaKeywordKeywordforecastGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaKeywordKeywordforecastGetRequest) GetValues() url.Values {
	return this.values
}

/* 词的出价,范围在5-9999之间,单位分 */
func (this *SimbaKeywordKeywordforecastGetRequest) SetBidwordPrice(value string) {
	this.Set("bidword_price", value)
}

/* 词ID */
func (this *SimbaKeywordKeywordforecastGetRequest) SetKeywordId(value string) {
	this.Set("keyword_id", value)
}

/* 经典名表行 */
func (this *SimbaKeywordKeywordforecastGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaKeywordKeywordforecastGetResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	SimbaKeywordKeywordforecastGetResponseResult `json:"simba_keyword_keywordforecast_get_response"`
}
type SimbaKeywordKeywordforecastGetResponseResult struct {
	/* 词预估结果信息

	预测数据皆为估算结果，以实际发生为准 */
	KeywordForecast *KeywordForecast `json:"keyword_forecast"`
}

/*taobao.simba.keyword.rankingforecast.get*/
type SimbaKeywordRankingforecastGetRequest struct {
	values url.Values
}

func (this *SimbaKeywordRankingforecastGetRequest) GetApiMethodName() string {
	return "taobao.simba.keyword.rankingforecast.get"
}
func (this *SimbaKeywordRankingforecastGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaKeywordRankingforecastGetRequest) GetValues() url.Values {
	return this.values
}

/* 关键词Id列表，最多支持1个 */
func (this *SimbaKeywordRankingforecastGetRequest) SetKeywordIds(value string) {
	this.Set("keyword_ids", value)
}

/* 经典名表行 */
func (this *SimbaKeywordRankingforecastGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaKeywordRankingforecastGetResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	SimbaKeywordRankingforecastGetResponseResult `json:"simba_keyword_rankingforecast_get_response"`
}
type SimbaKeywordRankingforecastGetResponseResult struct {
	/* 词预估结果信息

	预测数据皆为估算结果，以实际发生为准 */
	KeywordRankingForecast []*Rankingforecast `json:"keyword_ranking_forecast"`
}

/*taobao.simba.keywordids.changed.get*/
type SimbaKeywordidsChangedGetRequest struct {
	values url.Values
}

func (this *SimbaKeywordidsChangedGetRequest) GetApiMethodName() string {
	return "taobao.simba.keywordids.changed.get"
}
func (this *SimbaKeywordidsChangedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaKeywordidsChangedGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaKeywordidsChangedGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 返回的第几页数据，默认为1<br /> 支持最小值为：1 */
func (this *SimbaKeywordidsChangedGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回的每页数据量大小,默认200最大1000<br /> 支持最大值为：1000<br /> 支持最小值为：1 */
func (this *SimbaKeywordidsChangedGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 得到此时间点之后的数据，不能大于一个月 */
func (this *SimbaKeywordidsChangedGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type SimbaKeywordidsChangedGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	SimbaKeywordidsChangedGetResponseResult `json:"simba_keywordids_changed_get_response"`
}
type SimbaKeywordidsChangedGetResponseResult struct {
	/* 词的ID列表 */
	ChangedKeywordIds []int64 `json:"changed_keyword_ids"`
}

/*taobao.simba.keywordids.deleted.get*/
type SimbaKeywordidsDeletedGetRequest struct {
	values url.Values
}

func (this *SimbaKeywordidsDeletedGetRequest) GetApiMethodName() string {
	return "taobao.simba.keywordids.deleted.get"
}
func (this *SimbaKeywordidsDeletedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaKeywordidsDeletedGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaKeywordidsDeletedGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 返回的第几页数据，默认为1<br /> 支持最小值为：1 */
func (this *SimbaKeywordidsDeletedGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回的每页数据量大小,默认200最大1000<br /> 支持最大值为：1000<br /> 支持最小值为：1 */
func (this *SimbaKeywordidsDeletedGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 得到此时间点之后的数据，不能大于一个月 */
func (this *SimbaKeywordidsDeletedGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type SimbaKeywordidsDeletedGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	SimbaKeywordidsDeletedGetResponseResult `json:"simba_keywordids_deleted_get_response"`
}
type SimbaKeywordidsDeletedGetResponseResult struct {
	/* 词ID列表 */
	DeletedKeywordIds []int64 `json:"deleted_keyword_ids"`
}

/*taobao.simba.keywords.changed.get*/
type SimbaKeywordsChangedGetRequest struct {
	values url.Values
}

func (this *SimbaKeywordsChangedGetRequest) GetApiMethodName() string {
	return "taobao.simba.keywords.changed.get"
}
func (this *SimbaKeywordsChangedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaKeywordsChangedGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaKeywordsChangedGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 返回的第几页数据，默认为1<br /> 支持最小值为：1 */
func (this *SimbaKeywordsChangedGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回的每页数据量大小,默认200最大1000<br /> 支持最大值为：1000<br /> 支持最小值为：1 */
func (this *SimbaKeywordsChangedGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 得到此时间点之后的数据，不能大于一个月 */
func (this *SimbaKeywordsChangedGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type SimbaKeywordsChangedGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	SimbaKeywordsChangedGetResponseResult `json:"simba_keywords_changed_get_response"`
}
type SimbaKeywordsChangedGetResponseResult struct {
	/* 关键词分页对象 */
	Keywords *KeywordPage `json:"keywords"`
}

/*taobao.simba.keywords.delete*/
type SimbaKeywordsDeleteRequest struct {
	values url.Values
}

func (this *SimbaKeywordsDeleteRequest) GetApiMethodName() string {
	return "taobao.simba.keywords.delete"
}
func (this *SimbaKeywordsDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaKeywordsDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划Id */
func (this *SimbaKeywordsDeleteRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 关键词Id数组，最多100个 */
func (this *SimbaKeywordsDeleteRequest) SetKeywordIds(value string) {
	this.Set("keyword_ids", value)
}

/* 主人昵称 */
func (this *SimbaKeywordsDeleteRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaKeywordsDeleteResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	SimbaKeywordsDeleteResponseResult `json:"simba_keywords_delete_response"`
}
type SimbaKeywordsDeleteResponseResult struct {
	/* 成功删除的关键词列表 */
	Keywords []*Keyword `json:"keywords"`
}

/*taobao.simba.keywords.pricevon.set*/
type SimbaKeywordsPricevonSetRequest struct {
	values url.Values
}

func (this *SimbaKeywordsPricevonSetRequest) GetApiMethodName() string {
	return "taobao.simba.keywords.pricevon.set"
}
func (this *SimbaKeywordsPricevonSetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaKeywordsPricevonSetRequest) GetValues() url.Values {
	return this.values
}

/* 关键词ID，出价和匹配方式json字符串，keywordId:词ID，整数。maxPrice：价格，是整数，以“分”为单位，不能小于5，不能大于日限额,当使用默认出价时必须将这个值设置为0。; isDefaultPrice：是否使用默认出价，只能是0，1(0代表不使用，1代表使用)。matchscope只能是1,2,4（1代表精确匹配，2代表子串匹配，4代表广泛匹配） */
func (this *SimbaKeywordsPricevonSetRequest) SetKeywordidPrices(value string) {
	this.Set("keywordid_prices", value)
}

/* 主人昵称 */
func (this *SimbaKeywordsPricevonSetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaKeywordsPricevonSetResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	SimbaKeywordsPricevonSetResponseResult `json:"simba_keywords_pricevon_set_response"`
}
type SimbaKeywordsPricevonSetResponseResult struct {
	/* 成功设置关键词价格的关键词列表 */
	Keywords []*Keyword `json:"keywords"`
}

/*taobao.simba.keywords.qscore.get*/
type SimbaKeywordsQscoreGetRequest struct {
	values url.Values
}

func (this *SimbaKeywordsQscoreGetRequest) GetApiMethodName() string {
	return "taobao.simba.keywords.qscore.get"
}
func (this *SimbaKeywordsQscoreGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaKeywordsQscoreGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组Id */
func (this *SimbaKeywordsQscoreGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 主人昵称 */
func (this *SimbaKeywordsQscoreGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaKeywordsQscoreGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	SimbaKeywordsQscoreGetResponseResult `json:"simba_keywords_qscore_get_response"`
}
type SimbaKeywordsQscoreGetResponseResult struct {
	/* 取得的关键词质量得分列表 */
	KeywordQscoreList []*KeywordQscore `json:"keyword_qscore_list"`
}

/*taobao.simba.keywords.recommend.get*/
type SimbaKeywordsRecommendGetRequest struct {
	values url.Values
}

func (this *SimbaKeywordsRecommendGetRequest) GetApiMethodName() string {
	return "taobao.simba.keywords.recommend.get"
}
func (this *SimbaKeywordsRecommendGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaKeywordsRecommendGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组ID */
func (this *SimbaKeywordsRecommendGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 主人昵称 */
func (this *SimbaKeywordsRecommendGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 排序方式:
搜索量 search_volume
市场平均价格 average_price
相关度 relevance
不排序 non
默认为 non */
func (this *SimbaKeywordsRecommendGetRequest) SetOrderBy(value string) {
	this.Set("order_by", value)
}

/* 返回的第几页数据，默认为1<br /> 支持最小值为：1 */
func (this *SimbaKeywordsRecommendGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回的每页数据量大小,最大200<br /> 支持最大值为：200<br /> 支持最小值为：1 */
func (this *SimbaKeywordsRecommendGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 相关度 */
func (this *SimbaKeywordsRecommendGetRequest) SetPertinence(value string) {
	this.Set("pertinence", value)
}

/* 搜索量,设置此值后返回的就是大于此搜索量的词列表 */
func (this *SimbaKeywordsRecommendGetRequest) SetSearch(value string) {
	this.Set("search", value)
}

type SimbaKeywordsRecommendGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	SimbaKeywordsRecommendGetResponseResult `json:"simba_keywords_recommend_get_response"`
}
type SimbaKeywordsRecommendGetResponseResult struct {
	/* 推荐词分页对象，当输入的页码大于最大数值时，将返回最大的page_no值，并且结果中的数据列表为空值 */
	RecommendWords *RecommendWordPage `json:"recommend_words"`
}

/*taobao.simba.keywordsbyadgroupid.get*/
type SimbaKeywordsbyadgroupidGetRequest struct {
	values url.Values
}

func (this *SimbaKeywordsbyadgroupidGetRequest) GetApiMethodName() string {
	return "taobao.simba.keywordsbyadgroupid.get"
}
func (this *SimbaKeywordsbyadgroupidGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaKeywordsbyadgroupidGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组Id */
func (this *SimbaKeywordsbyadgroupidGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 主人昵称 */
func (this *SimbaKeywordsbyadgroupidGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaKeywordsbyadgroupidGetResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	SimbaKeywordsbyadgroupidGetResponseResult `json:"simba_keywordsbyadgroupid_get_response"`
}
type SimbaKeywordsbyadgroupidGetResponseResult struct {
	/* 取得的关键词列表 */
	Keywords []*Keyword `json:"keywords"`
}

/*taobao.simba.keywordsbykeywordids.get*/
type SimbaKeywordsbykeywordidsGetRequest struct {
	values url.Values
}

func (this *SimbaKeywordsbykeywordidsGetRequest) GetApiMethodName() string {
	return "taobao.simba.keywordsbykeywordids.get"
}
func (this *SimbaKeywordsbykeywordidsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaKeywordsbykeywordidsGetRequest) GetValues() url.Values {
	return this.values
}

/* 关键词Id数组，最多200个； */
func (this *SimbaKeywordsbykeywordidsGetRequest) SetKeywordIds(value string) {
	this.Set("keyword_ids", value)
}

/* 主人昵称 */
func (this *SimbaKeywordsbykeywordidsGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaKeywordsbykeywordidsGetResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	SimbaKeywordsbykeywordidsGetResponseResult `json:"simba_keywordsbykeywordids_get_response"`
}
type SimbaKeywordsbykeywordidsGetResponseResult struct {
	/* 取得的关键词列表 */
	Keywords []*Keyword `json:"keywords"`
}

/*taobao.simba.keywordscat.qscore.get*/
type SimbaKeywordscatQscoreGetRequest struct {
	values url.Values
}

func (this *SimbaKeywordscatQscoreGetRequest) GetApiMethodName() string {
	return "taobao.simba.keywordscat.qscore.get"
}
func (this *SimbaKeywordscatQscoreGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaKeywordscatQscoreGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组Id */
func (this *SimbaKeywordscatQscoreGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 主人昵称 */
func (this *SimbaKeywordscatQscoreGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaKeywordscatQscoreGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	SimbaKeywordscatQscoreGetResponseResult `json:"simba_keywordscat_qscore_get_response"`
}
type SimbaKeywordscatQscoreGetResponseResult struct {
	/* 类目出价和词的质量得分对象 */
	Qscore *Qscore `json:"qscore"`
}

/*taobao.simba.keywordsvon.add*/
type SimbaKeywordsvonAddRequest struct {
	values url.Values
}

func (this *SimbaKeywordsvonAddRequest) GetApiMethodName() string {
	return "taobao.simba.keywordsvon.add"
}
func (this *SimbaKeywordsvonAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaKeywordsvonAddRequest) GetValues() url.Values {
	return this.values
}

/* 推广组id */
func (this *SimbaKeywordsvonAddRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 关键词，出价和匹配方式json字符串，word:词，不能有一些特殊字符。maxPrice：价格，是整数，以“分”为单位，不能小于5，不能大于日限额,当使用默认出价时必须将这个值设置为0。; isDefaultPrice：是否使用默认出价，只能是0，1(0代表不使用，1代表使用)。matchscope只能是1,2,4（1代表精确匹配，2代表子串匹配，4代表广泛匹配）。 */
func (this *SimbaKeywordsvonAddRequest) SetKeywordPrices(value string) {
	this.Set("keyword_prices", value)
}

/* 主人昵称 */
func (this *SimbaKeywordsvonAddRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaKeywordsvonAddResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	SimbaKeywordsvonAddResponseResult `json:"simba_keywordsvon_add_response"`
}
type SimbaKeywordsvonAddResponseResult struct {
	/* 关键词列表 */
	Keywords []*Keyword `json:"keywords"`
}

/*taobao.simba.login.authsign.get*/
type SimbaLoginAuthsignGetRequest struct {
	values url.Values
}

func (this *SimbaLoginAuthsignGetRequest) GetApiMethodName() string {
	return "taobao.simba.login.authsign.get"
}
func (this *SimbaLoginAuthsignGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaLoginAuthsignGetRequest) GetValues() url.Values {
	return this.values
}

/* 主人昵称 */
func (this *SimbaLoginAuthsignGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaLoginAuthsignGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	SimbaLoginAuthsignGetResponseResult `json:"simba_login_authsign_get_response"`
}
type SimbaLoginAuthsignGetResponseResult struct {
	/* 登陆签名 */
	SubwayToken string `json:"subway_token"`
}

/*taobao.simba.nonsearch.adgroupplaces.add*/
type SimbaNonsearchAdgroupplacesAddRequest struct {
	values url.Values
}

func (this *SimbaNonsearchAdgroupplacesAddRequest) GetApiMethodName() string {
	return "taobao.simba.nonsearch.adgroupplaces.add"
}
func (this *SimbaNonsearchAdgroupplacesAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaNonsearchAdgroupplacesAddRequest) GetValues() url.Values {
	return this.values
}

/* 宝贝id投放位置id json数组字符串，数组个数最多200个。其中json数组中的key必须和对应实体AdGroupPlace中的属性字段保持一致，否则对应的实体对象属性获取不到相应的值 */
func (this *SimbaNonsearchAdgroupplacesAddRequest) SetAdgroupPlacesJson(value string) {
	this.Set("adgroup_places_json", value)
}

/* 12345 */
func (this *SimbaNonsearchAdgroupplacesAddRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaNonsearchAdgroupplacesAddRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaNonsearchAdgroupplacesAddResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	SimbaNonsearchAdgroupplacesAddResponseResult `json:"simba_nonsearch_adgroupplaces_add_response"`
}
type SimbaNonsearchAdgroupplacesAddResponseResult struct {
	/* 推广组定向推广位置列表 */
	AdgroupPlaceList []*ADGroupPlace `json:"adgroup_place_list"`
}

/*taobao.simba.nonsearch.adgroupplaces.delete*/
type SimbaNonsearchAdgroupplacesDeleteRequest struct {
	values url.Values
}

func (this *SimbaNonsearchAdgroupplacesDeleteRequest) GetApiMethodName() string {
	return "taobao.simba.nonsearch.adgroupplaces.delete"
}
func (this *SimbaNonsearchAdgroupplacesDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaNonsearchAdgroupplacesDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 推广组id，投放位置id  json数组字符串，数组个数最多200个。其中json数组中的key必须和对应实体AdGroupPlace中的属性字段保持一致，否则对应的实体对象属性获取不到相应的值 */
func (this *SimbaNonsearchAdgroupplacesDeleteRequest) SetAdgroupPlacesJson(value string) {
	this.Set("adgroup_places_json", value)
}

/* 推广计划ID */
func (this *SimbaNonsearchAdgroupplacesDeleteRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaNonsearchAdgroupplacesDeleteRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaNonsearchAdgroupplacesDeleteResponse struct {
	*ErrorResponse                                  `json:"error_response,omitempty"`
	SimbaNonsearchAdgroupplacesDeleteResponseResult `json:"simba_nonsearch_adgroupplaces_delete_response"`
}
type SimbaNonsearchAdgroupplacesDeleteResponseResult struct {
	/* 推广组定向推广投放位置列表 */
	AdgroupPlaceList []*ADGroupPlace `json:"adgroup_place_list"`
}

/*taobao.simba.nonsearch.adgroupplaces.get*/
type SimbaNonsearchAdgroupplacesGetRequest struct {
	values url.Values
}

func (this *SimbaNonsearchAdgroupplacesGetRequest) GetApiMethodName() string {
	return "taobao.simba.nonsearch.adgroupplaces.get"
}
func (this *SimbaNonsearchAdgroupplacesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaNonsearchAdgroupplacesGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组ID数组 */
func (this *SimbaNonsearchAdgroupplacesGetRequest) SetAdgroupIds(value string) {
	this.Set("adgroup_ids", value)
}

/* 推广计划ID */
func (this *SimbaNonsearchAdgroupplacesGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaNonsearchAdgroupplacesGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaNonsearchAdgroupplacesGetResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	SimbaNonsearchAdgroupplacesGetResponseResult `json:"simba_nonsearch_adgroupplaces_get_response"`
}
type SimbaNonsearchAdgroupplacesGetResponseResult struct {
	/* 推广组定向推广位置关系列表 */
	AdgroupPlaceList []*ADGroupPlace `json:"adgroup_place_list"`
}

/*taobao.simba.nonsearch.adgroupplaces.update*/
type SimbaNonsearchAdgroupplacesUpdateRequest struct {
	values url.Values
}

func (this *SimbaNonsearchAdgroupplacesUpdateRequest) GetApiMethodName() string {
	return "taobao.simba.nonsearch.adgroupplaces.update"
}
func (this *SimbaNonsearchAdgroupplacesUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaNonsearchAdgroupplacesUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 推广组id，投放位置id，出价，是否默认出价 json数组字符串，数组个数最多200个。是否默认出价不能为空, 出价以“分”为单位，不能小于5分，不能大于最高日限额，不能大于9999分。
json数组中的key必须和对应实体AdGroupPlace中的属性字段保持一致，否则对应的实体对象属性获取不到相应的值 */
func (this *SimbaNonsearchAdgroupplacesUpdateRequest) SetAdgroupPlacesJson(value string) {
	this.Set("adgroup_places_json", value)
}

/* 推广计划ID */
func (this *SimbaNonsearchAdgroupplacesUpdateRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaNonsearchAdgroupplacesUpdateRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaNonsearchAdgroupplacesUpdateResponse struct {
	*ErrorResponse                                  `json:"error_response,omitempty"`
	SimbaNonsearchAdgroupplacesUpdateResponseResult `json:"simba_nonsearch_adgroupplaces_update_response"`
}
type SimbaNonsearchAdgroupplacesUpdateResponseResult struct {
	/* 推广组定向推广位置列表 */
	AdgroupPlaceList []*ADGroupPlace `json:"adgroup_place_list"`
}

/*taobao.simba.nonsearch.alldemographics.get*/
type SimbaNonsearchAlldemographicsGetRequest struct {
	values url.Values
}

func (this *SimbaNonsearchAlldemographicsGetRequest) GetApiMethodName() string {
	return "taobao.simba.nonsearch.alldemographics.get"
}
func (this *SimbaNonsearchAlldemographicsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaNonsearchAlldemographicsGetRequest) GetValues() url.Values {
	return this.values
}

type SimbaNonsearchAlldemographicsGetResponse struct {
	*ErrorResponse                                 `json:"error_response,omitempty"`
	SimbaNonsearchAlldemographicsGetResponseResult `json:"simba_nonsearch_alldemographics_get_response"`
}
type SimbaNonsearchAlldemographicsGetResponseResult struct {
	/* 定向投放人群维度列表 */
	DemographicList []*Demographic `json:"demographic_list"`
}

/*taobao.simba.nonsearch.allplaces.get*/
type SimbaNonsearchAllplacesGetRequest struct {
	values url.Values
}

func (this *SimbaNonsearchAllplacesGetRequest) GetApiMethodName() string {
	return "taobao.simba.nonsearch.allplaces.get"
}
func (this *SimbaNonsearchAllplacesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaNonsearchAllplacesGetRequest) GetValues() url.Values {
	return this.values
}

type SimbaNonsearchAllplacesGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	SimbaNonsearchAllplacesGetResponseResult `json:"simba_nonsearch_allplaces_get_response"`
}
type SimbaNonsearchAllplacesGetResponseResult struct {
	/* 定向推广投放位置列表 */
	PlaceList []*Place `json:"place_list"`
}

/*taobao.simba.nonsearch.demographics.get*/
type SimbaNonsearchDemographicsGetRequest struct {
	values url.Values
}

func (this *SimbaNonsearchDemographicsGetRequest) GetApiMethodName() string {
	return "taobao.simba.nonsearch.demographics.get"
}
func (this *SimbaNonsearchDemographicsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaNonsearchDemographicsGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划ID */
func (this *SimbaNonsearchDemographicsGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 主人昵称 */
func (this *SimbaNonsearchDemographicsGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaNonsearchDemographicsGetResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	SimbaNonsearchDemographicsGetResponseResult `json:"simba_nonsearch_demographics_get_response"`
}
type SimbaNonsearchDemographicsGetResponseResult struct {
	/* 人群维度设置列表 */
	DemographicSettingList []*DemographicSetting `json:"demographic_setting_list"`
}

/*taobao.simba.nonsearch.demographics.update*/
type SimbaNonsearchDemographicsUpdateRequest struct {
	values url.Values
}

func (this *SimbaNonsearchDemographicsUpdateRequest) GetApiMethodName() string {
	return "taobao.simba.nonsearch.demographics.update"
}
func (this *SimbaNonsearchDemographicsUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaNonsearchDemographicsUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划ID */
func (this *SimbaNonsearchDemographicsUpdateRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 投放人群维度Id，加价json数组字符串。数组长度不能超过15，json数组中的key必须和相应实体DemographicSetting中的属性字段保持一致，否则对应的实体对象属性获取不到相应的值
incrementalPrice是整数，以“分”为单位，不能小于1，不能大于日限额,不能大于9999分; 可以为0表示不加价；投放人群维度ID必须有效 */
func (this *SimbaNonsearchDemographicsUpdateRequest) SetDemographicIdPriceJson(value string) {
	this.Set("demographic_id_price_json", value)
}

/* 主人昵称 */
func (this *SimbaNonsearchDemographicsUpdateRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaNonsearchDemographicsUpdateResponse struct {
	*ErrorResponse                                 `json:"error_response,omitempty"`
	SimbaNonsearchDemographicsUpdateResponseResult `json:"simba_nonsearch_demographics_update_response"`
}
type SimbaNonsearchDemographicsUpdateResponseResult struct {
	/* 人群维度设置列表 */
	DemographicSettingList []*DemographicSetting `json:"demographic_setting_list"`
}

/*taobao.simba.rpt.adgroupbase.get*/
type SimbaRptAdgroupbaseGetRequest struct {
	values url.Values
}

func (this *SimbaRptAdgroupbaseGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.adgroupbase.get"
}
func (this *SimbaRptAdgroupbaseGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptAdgroupbaseGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组id */
func (this *SimbaRptAdgroupbaseGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 推广计划id */
func (this *SimbaRptAdgroupbaseGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 结束时间，格式yyyy-mm-dd */
func (this *SimbaRptAdgroupbaseGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 昵称 */
func (this *SimbaRptAdgroupbaseGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码<br /> 支持最小值为：1 */
func (this *SimbaRptAdgroupbaseGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小<br /> 支持最小值为：1 */
func (this *SimbaRptAdgroupbaseGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 报表类型（搜索：SEARCH,类目出价：CAT,
定向投放：NOSEARCH）可以一次取多个例如：SEARCH,CAT */
func (this *SimbaRptAdgroupbaseGetRequest) SetSearchType(value string) {
	this.Set("search_type", value)
}

/* 数据来源（站内：1，站外：2）可多选以逗号分隔，默认值为：1,2 */
func (this *SimbaRptAdgroupbaseGetRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 开始时间，格式yyyy-mm-dd */
func (this *SimbaRptAdgroupbaseGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限校验参数 */
func (this *SimbaRptAdgroupbaseGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptAdgroupbaseGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	SimbaRptAdgroupbaseGetResponseResult `json:"simba_rpt_adgroupbase_get_response"`
}
type SimbaRptAdgroupbaseGetResponseResult struct {
	/* 广告组基础数据对象 */
	RptAdgroupBaseList string `json:"rpt_adgroup_base_list"`
}

/*taobao.simba.rpt.adgroupcreativebase.get*/
type SimbaRptAdgroupcreativebaseGetRequest struct {
	values url.Values
}

func (this *SimbaRptAdgroupcreativebaseGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.adgroupcreativebase.get"
}
func (this *SimbaRptAdgroupcreativebaseGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptAdgroupcreativebaseGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组id */
func (this *SimbaRptAdgroupcreativebaseGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 查询推广计划id */
func (this *SimbaRptAdgroupcreativebaseGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 结束日期，格式yyyy-mm-dd */
func (this *SimbaRptAdgroupcreativebaseGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 昵称 */
func (this *SimbaRptAdgroupcreativebaseGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码<br /> 支持最小值为：1 */
func (this *SimbaRptAdgroupcreativebaseGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小<br /> 支持最小值为：1 */
func (this *SimbaRptAdgroupcreativebaseGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 报表类型（搜索：SEARCH,类目出价：CAT, 定向投放：NOSEARCH汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如：SEARCH,CAT */
func (this *SimbaRptAdgroupcreativebaseGetRequest) SetSearchType(value string) {
	this.Set("search_type", value)
}

/* 数据来源（站内：1，站外：2 ，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2 */
func (this *SimbaRptAdgroupcreativebaseGetRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 开始日期，格式yyyy-mm-dd */
func (this *SimbaRptAdgroupcreativebaseGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限验证信息 */
func (this *SimbaRptAdgroupcreativebaseGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptAdgroupcreativebaseGetResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	SimbaRptAdgroupcreativebaseGetResponseResult `json:"simba_rpt_adgroupcreativebase_get_response"`
}
type SimbaRptAdgroupcreativebaseGetResponseResult struct {
	/* 推广组下的创意基础数据列表 */
	RptAdgroupcreativeBaseList string `json:"rpt_adgroupcreative_base_list"`
}

/*taobao.simba.rpt.adgroupcreativeeffect.get*/
type SimbaRptAdgroupcreativeeffectGetRequest struct {
	values url.Values
}

func (this *SimbaRptAdgroupcreativeeffectGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.adgroupcreativeeffect.get"
}
func (this *SimbaRptAdgroupcreativeeffectGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptAdgroupcreativeeffectGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组id */
func (this *SimbaRptAdgroupcreativeeffectGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 查询推广计划id */
func (this *SimbaRptAdgroupcreativeeffectGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 结束日期，格式yyyy-mm-dd */
func (this *SimbaRptAdgroupcreativeeffectGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 昵称 */
func (this *SimbaRptAdgroupcreativeeffectGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码<br /> 支持最小值为：1 */
func (this *SimbaRptAdgroupcreativeeffectGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小<br /> 支持最小值为：1 */
func (this *SimbaRptAdgroupcreativeeffectGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 报表类型（搜索：SEARCH,类目出价：CAT, 定向投放：NOSEARCH汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如：SEARCH,CAT */
func (this *SimbaRptAdgroupcreativeeffectGetRequest) SetSearchType(value string) {
	this.Set("search_type", value)
}

/* 数据来源（站内：1，站外：2 ，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2 */
func (this *SimbaRptAdgroupcreativeeffectGetRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 开始日期，格式yyyy-mm-dd */
func (this *SimbaRptAdgroupcreativeeffectGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限验证信息 */
func (this *SimbaRptAdgroupcreativeeffectGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptAdgroupcreativeeffectGetResponse struct {
	*ErrorResponse                                 `json:"error_response,omitempty"`
	SimbaRptAdgroupcreativeeffectGetResponseResult `json:"simba_rpt_adgroupcreativeeffect_get_response"`
}
type SimbaRptAdgroupcreativeeffectGetResponseResult struct {
	/* 推广组下的创意效果数据列表 */
	RptAdgroupcreativeEffectList string `json:"rpt_adgroupcreative_effect_list"`
}

/*taobao.simba.rpt.adgroupeffect.get*/
type SimbaRptAdgroupeffectGetRequest struct {
	values url.Values
}

func (this *SimbaRptAdgroupeffectGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.adgroupeffect.get"
}
func (this *SimbaRptAdgroupeffectGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptAdgroupeffectGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组id */
func (this *SimbaRptAdgroupeffectGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 推广计划id */
func (this *SimbaRptAdgroupeffectGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 结束时间，格式yyyy-mm-dd */
func (this *SimbaRptAdgroupeffectGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 昵称 */
func (this *SimbaRptAdgroupeffectGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码<br /> 支持最小值为：1 */
func (this *SimbaRptAdgroupeffectGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小<br /> 支持最小值为：1 */
func (this *SimbaRptAdgroupeffectGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 报表类型（搜索：SEARCH,类目出价：CAT,
定向投放：NOSEARCH ）可以一次取多个例如：SEARCH,CAT */
func (this *SimbaRptAdgroupeffectGetRequest) SetSearchType(value string) {
	this.Set("search_type", value)
}

/* 数据来源（站内：1，站外：2）可多选以逗号分隔，默认值为：1,2 */
func (this *SimbaRptAdgroupeffectGetRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 开始时间，格式yyyy-mm-dd */
func (this *SimbaRptAdgroupeffectGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限校验参数 */
func (this *SimbaRptAdgroupeffectGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptAdgroupeffectGetResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	SimbaRptAdgroupeffectGetResponseResult `json:"simba_rpt_adgroupeffect_get_response"`
}
type SimbaRptAdgroupeffectGetResponseResult struct {
	/* 推广组效果报表数据对象 */
	RptAdgroupEffectList string `json:"rpt_adgroup_effect_list"`
}

/*taobao.simba.rpt.adgroupkeywordbase.get*/
type SimbaRptAdgroupkeywordbaseGetRequest struct {
	values url.Values
}

func (this *SimbaRptAdgroupkeywordbaseGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.adgroupkeywordbase.get"
}
func (this *SimbaRptAdgroupkeywordbaseGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptAdgroupkeywordbaseGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组ID */
func (this *SimbaRptAdgroupkeywordbaseGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 推广计划ID */
func (this *SimbaRptAdgroupkeywordbaseGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 结束时间，格式yyyy-mm-dd */
func (this *SimbaRptAdgroupkeywordbaseGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 主人昵称 */
func (this *SimbaRptAdgroupkeywordbaseGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码<br /> 支持最小值为：1 */
func (this *SimbaRptAdgroupkeywordbaseGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小<br /> 支持最小值为：1 */
func (this *SimbaRptAdgroupkeywordbaseGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 报表类型（搜索：SEARCH,类目出价：CAT, 定向投放：NOSEARCH）可多选例如：SEARCH,CAT */
func (this *SimbaRptAdgroupkeywordbaseGetRequest) SetSearchType(value string) {
	this.Set("search_type", value)
}

/* 数据来源（站内：1，站外：2 ，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2 */
func (this *SimbaRptAdgroupkeywordbaseGetRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 开始时间，格式yyyy-mm-dd */
func (this *SimbaRptAdgroupkeywordbaseGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限校验参数 */
func (this *SimbaRptAdgroupkeywordbaseGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptAdgroupkeywordbaseGetResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	SimbaRptAdgroupkeywordbaseGetResponseResult `json:"simba_rpt_adgroupkeywordbase_get_response"`
}
type SimbaRptAdgroupkeywordbaseGetResponseResult struct {
	/* 词基础数据返回结果 */
	RptAdgroupkeywordBaseList string `json:"rpt_adgroupkeyword_base_list"`
}

/*taobao.simba.rpt.adgroupkeywordeffect.get*/
type SimbaRptAdgroupkeywordeffectGetRequest struct {
	values url.Values
}

func (this *SimbaRptAdgroupkeywordeffectGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.adgroupkeywordeffect.get"
}
func (this *SimbaRptAdgroupkeywordeffectGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptAdgroupkeywordeffectGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组ID */
func (this *SimbaRptAdgroupkeywordeffectGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 推广计划ID */
func (this *SimbaRptAdgroupkeywordeffectGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 结束时间，格式yyyy-mm-dd */
func (this *SimbaRptAdgroupkeywordeffectGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 主人昵称 */
func (this *SimbaRptAdgroupkeywordeffectGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码<br /> 支持最小值为：1 */
func (this *SimbaRptAdgroupkeywordeffectGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小<br /> 支持最小值为：1 */
func (this *SimbaRptAdgroupkeywordeffectGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 报表类型（搜索：SEARCH,类目出价：CAT, 定向投放：NOSEARCH）可多选例如：SEARCH,CAT */
func (this *SimbaRptAdgroupkeywordeffectGetRequest) SetSearchType(value string) {
	this.Set("search_type", value)
}

/* 数据来源（站内：1，站外：2 ，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2 */
func (this *SimbaRptAdgroupkeywordeffectGetRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 开始时间，格式yyyy-mm-dd */
func (this *SimbaRptAdgroupkeywordeffectGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限校验参数 */
func (this *SimbaRptAdgroupkeywordeffectGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptAdgroupkeywordeffectGetResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	SimbaRptAdgroupkeywordeffectGetResponseResult `json:"simba_rpt_adgroupkeywordeffect_get_response"`
}
type SimbaRptAdgroupkeywordeffectGetResponseResult struct {
	/* 词效果数据返回结果 */
	RptAdgroupkeywordEffectList string `json:"rpt_adgroupkeyword_effect_list"`
}

/*taobao.simba.rpt.adgroupnonsearchbase.get*/
type SimbaRptAdgroupnonsearchbaseGetRequest struct {
	values url.Values
}

func (this *SimbaRptAdgroupnonsearchbaseGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.adgroupnonsearchbase.get"
}
func (this *SimbaRptAdgroupnonsearchbaseGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptAdgroupnonsearchbaseGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组id */
func (this *SimbaRptAdgroupnonsearchbaseGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 推广计划id */
func (this *SimbaRptAdgroupnonsearchbaseGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 结束时间,格式为：yyyy-mm-dd */
func (this *SimbaRptAdgroupnonsearchbaseGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 昵称 */
func (this *SimbaRptAdgroupnonsearchbaseGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码 */
func (this *SimbaRptAdgroupnonsearchbaseGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小 */
func (this *SimbaRptAdgroupnonsearchbaseGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 开始时间,格式为：yyyy-mm-dd */
func (this *SimbaRptAdgroupnonsearchbaseGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限校验参数 */
func (this *SimbaRptAdgroupnonsearchbaseGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptAdgroupnonsearchbaseGetResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	SimbaRptAdgroupnonsearchbaseGetResponseResult `json:"simba_rpt_adgroupnonsearchbase_get_response"`
}
type SimbaRptAdgroupnonsearchbaseGetResponseResult struct {
	/* 非搜索推广组基础对象 */
	RptAdgroupNonsearchBase string `json:"rpt_adgroup_nonsearch_base"`
}

/*taobao.simba.rpt.adgroupnonsearcheffect.get*/
type SimbaRptAdgroupnonsearcheffectGetRequest struct {
	values url.Values
}

func (this *SimbaRptAdgroupnonsearcheffectGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.adgroupnonsearcheffect.get"
}
func (this *SimbaRptAdgroupnonsearcheffectGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptAdgroupnonsearcheffectGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广组id */
func (this *SimbaRptAdgroupnonsearcheffectGetRequest) SetAdgroupId(value string) {
	this.Set("adgroup_id", value)
}

/* 推广计划id */
func (this *SimbaRptAdgroupnonsearcheffectGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 结束时间,格式为：yyyy-mm-dd */
func (this *SimbaRptAdgroupnonsearcheffectGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 昵称 */
func (this *SimbaRptAdgroupnonsearcheffectGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码 */
func (this *SimbaRptAdgroupnonsearcheffectGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小 */
func (this *SimbaRptAdgroupnonsearcheffectGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 开始时间,格式为：yyyy-mm-dd */
func (this *SimbaRptAdgroupnonsearcheffectGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限校验参数 */
func (this *SimbaRptAdgroupnonsearcheffectGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptAdgroupnonsearcheffectGetResponse struct {
	*ErrorResponse                                  `json:"error_response,omitempty"`
	SimbaRptAdgroupnonsearcheffectGetResponseResult `json:"simba_rpt_adgroupnonsearcheffect_get_response"`
}
type SimbaRptAdgroupnonsearcheffectGetResponseResult struct {
	/* 非搜索推广组效果对象 */
	RptAdgroupNonsearchEffect string `json:"rpt_adgroup_nonsearch_effect"`
}

/*taobao.simba.rpt.campadgroupbase.get*/
type SimbaRptCampadgroupbaseGetRequest struct {
	values url.Values
}

func (this *SimbaRptCampadgroupbaseGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.campadgroupbase.get"
}
func (this *SimbaRptCampadgroupbaseGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptCampadgroupbaseGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询推广计划id */
func (this *SimbaRptCampadgroupbaseGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 结束日期,格式yyyy-mm-dd */
func (this *SimbaRptCampadgroupbaseGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 昵称 */
func (this *SimbaRptCampadgroupbaseGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码<br /> 支持最小值为：1 */
func (this *SimbaRptCampadgroupbaseGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小<br /> 支持最小值为：1 */
func (this *SimbaRptCampadgroupbaseGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 报表类型（搜索：SEARCH,类目出价：CAT, 定向投放：NOSEARCH汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如：SEARCH,CAT */
func (this *SimbaRptCampadgroupbaseGetRequest) SetSearchType(value string) {
	this.Set("search_type", value)
}

/* 数据来源（站内：1，站外：2 ，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2 */
func (this *SimbaRptCampadgroupbaseGetRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 开始日期,格式yyyy-mm-dd */
func (this *SimbaRptCampadgroupbaseGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限验证信息 */
func (this *SimbaRptCampadgroupbaseGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptCampadgroupbaseGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	SimbaRptCampadgroupbaseGetResponseResult `json:"simba_rpt_campadgroupbase_get_response"`
}
type SimbaRptCampadgroupbaseGetResponseResult struct {
	/* 推广计划下推广组的基础数据列表 */
	RptCampadgroupBaseList string `json:"rpt_campadgroup_base_list"`
}

/*taobao.simba.rpt.campadgroupeffect.get*/
type SimbaRptCampadgroupeffectGetRequest struct {
	values url.Values
}

func (this *SimbaRptCampadgroupeffectGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.campadgroupeffect.get"
}
func (this *SimbaRptCampadgroupeffectGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptCampadgroupeffectGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询推广计划id */
func (this *SimbaRptCampadgroupeffectGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 结束日期，格式yyyy-mm-dd */
func (this *SimbaRptCampadgroupeffectGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 昵称 */
func (this *SimbaRptCampadgroupeffectGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码<br /> 支持最小值为：1 */
func (this *SimbaRptCampadgroupeffectGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小<br /> 支持最小值为：1 */
func (this *SimbaRptCampadgroupeffectGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 报表类型（搜索：SEARCH,类目出价：CAT, 定向投放：NOSEARCH汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如：SEARCH,CAT */
func (this *SimbaRptCampadgroupeffectGetRequest) SetSearchType(value string) {
	this.Set("search_type", value)
}

/* 数据来源（站内：1，站外：2 ，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2 */
func (this *SimbaRptCampadgroupeffectGetRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 开始日期，格式yyyy-mm-dd */
func (this *SimbaRptCampadgroupeffectGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限验证信息 */
func (this *SimbaRptCampadgroupeffectGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptCampadgroupeffectGetResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	SimbaRptCampadgroupeffectGetResponseResult `json:"simba_rpt_campadgroupeffect_get_response"`
}
type SimbaRptCampadgroupeffectGetResponseResult struct {
	/* 推广计划下推广组的效果数据列表 */
	RptCampadgroupEffectList string `json:"rpt_campadgroup_effect_list"`
}

/*taobao.simba.rpt.campaignbase.get*/
type SimbaRptCampaignbaseGetRequest struct {
	values url.Values
}

func (this *SimbaRptCampaignbaseGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.campaignbase.get"
}
func (this *SimbaRptCampaignbaseGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptCampaignbaseGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划id */
func (this *SimbaRptCampaignbaseGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 结束时间，格式yyyy-mm-dd */
func (this *SimbaRptCampaignbaseGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 昵称 */
func (this *SimbaRptCampaignbaseGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码<br /> 支持最小值为：1 */
func (this *SimbaRptCampaignbaseGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小<br /> 支持最小值为：1 */
func (this *SimbaRptCampaignbaseGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 报表类型（搜索：SEARCH,类目出价：CAT, 定向投放：NOSEARCH 全部：ALL）可以一次取多个例如：SEARCH,CAT */
func (this *SimbaRptCampaignbaseGetRequest) SetSearchType(value string) {
	this.Set("search_type", value)
}

/* 数据来源（站内：1，站外：2）可多选以逗号分隔，默认值为：1,2 */
func (this *SimbaRptCampaignbaseGetRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 开始时间，格式yyyy-mm-dd */
func (this *SimbaRptCampaignbaseGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限校验参数 */
func (this *SimbaRptCampaignbaseGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptCampaignbaseGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	SimbaRptCampaignbaseGetResponseResult `json:"simba_rpt_campaignbase_get_response"`
}
type SimbaRptCampaignbaseGetResponseResult struct {
	/* 推广计划查询结果 */
	RptCampaignBaseList string `json:"rpt_campaign_base_list"`
}

/*taobao.simba.rpt.campaigneffect.get*/
type SimbaRptCampaigneffectGetRequest struct {
	values url.Values
}

func (this *SimbaRptCampaigneffectGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.campaigneffect.get"
}
func (this *SimbaRptCampaigneffectGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptCampaigneffectGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划id */
func (this *SimbaRptCampaigneffectGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 结束时间，格式yyyy-mm-dd */
func (this *SimbaRptCampaigneffectGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 昵称 */
func (this *SimbaRptCampaigneffectGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码<br /> 支持最小值为：1 */
func (this *SimbaRptCampaigneffectGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小<br /> 支持最小值为：1 */
func (this *SimbaRptCampaigneffectGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 报表类型（搜索：SEARCH,类目出价：CAT,
定向投放：NOSEARCH 全部：ALL）可以一次取多个例如：SEARCH,CAT */
func (this *SimbaRptCampaigneffectGetRequest) SetSearchType(value string) {
	this.Set("search_type", value)
}

/* 数据来源（站内：1，站外：2）可多选以逗号分隔，默认值为：1,2 */
func (this *SimbaRptCampaigneffectGetRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 开始时间，格式yyyy-mm-dd */
func (this *SimbaRptCampaigneffectGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限校验参数 */
func (this *SimbaRptCampaigneffectGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptCampaigneffectGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	SimbaRptCampaigneffectGetResponseResult `json:"simba_rpt_campaigneffect_get_response"`
}
type SimbaRptCampaigneffectGetResponseResult struct {
	/* 推广计划效果报表数据对象 */
	RptCampaignEffectList string `json:"rpt_campaign_effect_list"`
}

/*taobao.simba.rpt.custbase.get*/
type SimbaRptCustbaseGetRequest struct {
	values url.Values
}

func (this *SimbaRptCustbaseGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.custbase.get"
}
func (this *SimbaRptCustbaseGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptCustbaseGetRequest) GetValues() url.Values {
	return this.values
}

/* 结束日期，格式yyyy-mm-dd */
func (this *SimbaRptCustbaseGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 昵称 */
func (this *SimbaRptCustbaseGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码<br /> 支持最小值为：1 */
func (this *SimbaRptCustbaseGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小<br /> 支持最小值为：1 */
func (this *SimbaRptCustbaseGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 数据来源（站内：1，站外：2 ，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2 */
func (this *SimbaRptCustbaseGetRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 开始日期，格式yyyy-mm-dd */
func (this *SimbaRptCustbaseGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限验证信息 */
func (this *SimbaRptCustbaseGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptCustbaseGetResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	SimbaRptCustbaseGetResponseResult `json:"simba_rpt_custbase_get_response"`
}
type SimbaRptCustbaseGetResponseResult struct {
	/* 用户帐户结果 */
	RptCustBaseList string `json:"rpt_cust_base_list"`
}

/*taobao.simba.rpt.custeffect.get*/
type SimbaRptCusteffectGetRequest struct {
	values url.Values
}

func (this *SimbaRptCusteffectGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.custeffect.get"
}
func (this *SimbaRptCusteffectGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptCusteffectGetRequest) GetValues() url.Values {
	return this.values
}

/* 结束时间，格式yyyy-mm-dd */
func (this *SimbaRptCusteffectGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 主人昵称 */
func (this *SimbaRptCusteffectGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码<br /> 支持最小值为：1 */
func (this *SimbaRptCusteffectGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小<br /> 支持最小值为：1 */
func (this *SimbaRptCusteffectGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 数据来源（站内：1，站外：2 ，汇总：SUMMARY）SUMMARY必须单选，其他值可多选例如1,2 */
func (this *SimbaRptCusteffectGetRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 开始时间，格式yyyy-mm-dd */
func (this *SimbaRptCusteffectGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限校验参数 */
func (this *SimbaRptCusteffectGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptCusteffectGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	SimbaRptCusteffectGetResponseResult `json:"simba_rpt_custeffect_get_response"`
}
type SimbaRptCusteffectGetResponseResult struct {
	/* 账户效果数据返回结果 */
	RptCustEffectList string `json:"rpt_cust_effect_list"`
}

/*taobao.simba.rpt.demographicbase.get*/
type SimbaRptDemographicbaseGetRequest struct {
	values url.Values
}

func (this *SimbaRptDemographicbaseGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.demographicbase.get"
}
func (this *SimbaRptDemographicbaseGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptDemographicbaseGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划id */
func (this *SimbaRptDemographicbaseGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 结束时间,格式为：yyyy-mm-dd */
func (this *SimbaRptDemographicbaseGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 昵称 */
func (this *SimbaRptDemographicbaseGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码 */
func (this *SimbaRptDemographicbaseGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小 */
func (this *SimbaRptDemographicbaseGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 开始时间,格式为：yyyy-mm-dd */
func (this *SimbaRptDemographicbaseGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限校验参数 */
func (this *SimbaRptDemographicbaseGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptDemographicbaseGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	SimbaRptDemographicbaseGetResponseResult `json:"simba_rpt_demographicbase_get_response"`
}
type SimbaRptDemographicbaseGetResponseResult struct {
	/* 非搜索推广计划基础数据对象 */
	RptDemographicBase string `json:"rpt_demographic_base"`
}

/*taobao.simba.rpt.demographiceffect.get*/
type SimbaRptDemographiceffectGetRequest struct {
	values url.Values
}

func (this *SimbaRptDemographiceffectGetRequest) GetApiMethodName() string {
	return "taobao.simba.rpt.demographiceffect.get"
}
func (this *SimbaRptDemographiceffectGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaRptDemographiceffectGetRequest) GetValues() url.Values {
	return this.values
}

/* 推广计划id */
func (this *SimbaRptDemographiceffectGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 结束时间,格式为：yyyy-mm-dd */
func (this *SimbaRptDemographiceffectGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 昵称 */
func (this *SimbaRptDemographiceffectGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码 */
func (this *SimbaRptDemographiceffectGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小 */
func (this *SimbaRptDemographiceffectGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 开始时间,格式为：yyyy-mm-dd */
func (this *SimbaRptDemographiceffectGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 权限校验参数 */
func (this *SimbaRptDemographiceffectGetRequest) SetSubwayToken(value string) {
	this.Set("subway_token", value)
}

type SimbaRptDemographiceffectGetResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	SimbaRptDemographiceffectGetResponseResult `json:"simba_rpt_demographiceffect_get_response"`
}
type SimbaRptDemographiceffectGetResponseResult struct {
	/* 推广计划下的人群维度效果数据查询 */
	RptDemographicEffect string `json:"rpt_demographic_effect"`
}

/*taobao.simba.tools.items.top.get*/
type SimbaToolsItemsTopGetRequest struct {
	values url.Values
}

func (this *SimbaToolsItemsTopGetRequest) GetApiMethodName() string {
	return "taobao.simba.tools.items.top.get"
}
func (this *SimbaToolsItemsTopGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SimbaToolsItemsTopGetRequest) GetValues() url.Values {
	return this.values
}

/* 输入的必须是一个符合ipv4或者ipv6格式的IP地址 */
func (this *SimbaToolsItemsTopGetRequest) SetIp(value string) {
	this.Set("ip", value)
}

/* 关键词 */
func (this *SimbaToolsItemsTopGetRequest) SetKeyword(value string) {
	this.Set("keyword", value)
}

/* 主人昵称 */
func (this *SimbaToolsItemsTopGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SimbaToolsItemsTopGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	SimbaToolsItemsTopGetResponseResult `json:"simba_tools_items_top_get_response"`
}
type SimbaToolsItemsTopGetResponseResult struct {
	/* 推广组信息列表 */
	Rankeditems []*RankedItem `json:"rankeditems"`
}

/*taobao.topats.simba.campkeywordbase.get*/
type TopatsSimbaCampkeywordbaseGetRequest struct {
	values url.Values
}

func (this *TopatsSimbaCampkeywordbaseGetRequest) GetApiMethodName() string {
	return "taobao.topats.simba.campkeywordbase.get"
}
func (this *TopatsSimbaCampkeywordbaseGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TopatsSimbaCampkeywordbaseGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询推广计划ID */
func (this *TopatsSimbaCampkeywordbaseGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 查询的昵称 */
func (this *TopatsSimbaCampkeywordbaseGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 报表类型。可选值：SEARCH（搜索）、CAT（类目出价）、 NOSEARCH（定向投放），可多选，如：SEARCH,CAT */
func (this *TopatsSimbaCampkeywordbaseGetRequest) SetSearchType(value string) {
	this.Set("search_type", value)
}

/* 数据来源。可选值：1（站内）、2（站外）、SUMMARY（汇总），其中SUMMARY必须单选，其它值可多选，如：1,2 */
func (this *TopatsSimbaCampkeywordbaseGetRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 时间参数（昨天：DAY、 前一周：7DAY 、前15天：15DAY 、前30天：30DAY 、前90天：90DAY）单选 */
func (this *TopatsSimbaCampkeywordbaseGetRequest) SetTimeSlot(value string) {
	this.Set("time_slot", value)
}

type TopatsSimbaCampkeywordbaseGetResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	TopatsSimbaCampkeywordbaseGetResponseResult `json:"topats_simba_campkeywordbase_get_response"`
}
type TopatsSimbaCampkeywordbaseGetResponseResult struct {
	/* 创建任务信息。里面只包含task_id和created */
	Task *Task `json:"task"`
}

/*taobao.topats.simba.campkeywordeffect.get*/
type TopatsSimbaCampkeywordeffectGetRequest struct {
	values url.Values
}

func (this *TopatsSimbaCampkeywordeffectGetRequest) GetApiMethodName() string {
	return "taobao.topats.simba.campkeywordeffect.get"
}
func (this *TopatsSimbaCampkeywordeffectGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TopatsSimbaCampkeywordeffectGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询推广计划ID */
func (this *TopatsSimbaCampkeywordeffectGetRequest) SetCampaignId(value string) {
	this.Set("campaign_id", value)
}

/* 查询的昵称 */
func (this *TopatsSimbaCampkeywordeffectGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 报表类型。可选值：SEARCH（搜索）、CAT（类目出价）、 NOSEARCH（定向投放），可多选，如：SEARCH,CAT */
func (this *TopatsSimbaCampkeywordeffectGetRequest) SetSearchType(value string) {
	this.Set("search_type", value)
}

/* 数据来源。可选值：1（站内）、2（站外）、SUMMARY（汇总），其中SUMMARY必须单选，其它值可多选，如：1,2 */
func (this *TopatsSimbaCampkeywordeffectGetRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 时间参数（昨天：DAY、 前一周：7DAY、 前15天：15DAY、 前30天：30DAY 、前90天：90DAY）单选 */
func (this *TopatsSimbaCampkeywordeffectGetRequest) SetTimeSlot(value string) {
	this.Set("time_slot", value)
}

type TopatsSimbaCampkeywordeffectGetResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	TopatsSimbaCampkeywordeffectGetResponseResult `json:"topats_simba_campkeywordeffect_get_response"`
}
type TopatsSimbaCampkeywordeffectGetResponseResult struct {
	/* 创建任务信息。里面只包含task_id和created */
	Task *Task `json:"task"`
}

/*taobao.favorite.add*/
type FavoriteAddRequest struct {
	values url.Values
}

func (this *FavoriteAddRequest) GetApiMethodName() string {
	return "taobao.favorite.add"
}
func (this *FavoriteAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FavoriteAddRequest) GetValues() url.Values {
	return this.values
}

/* ITEM表示宝贝，SHOP表示店铺，只能传入这两者之一 */
func (this *FavoriteAddRequest) SetCollectType(value string) {
	this.Set("collect_type", value)
}

/* 如果收藏的是商品，就传num_iid，如果是店铺，就传入sid<br /> 支持最大值为：9223372036854775807<br /> 支持最小值为：1 */
func (this *FavoriteAddRequest) SetItemNumid(value string) {
	this.Set("item_numid", value)
}

/* 该收藏是否公开 */
func (this *FavoriteAddRequest) SetShared(value string) {
	this.Set("shared", value)
}

type FavoriteAddResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	FavoriteAddResponseResult `json:"favorite_add_response"`
}
type FavoriteAddResponseResult struct {
	/* 是否收藏成功 */
	Success bool `json:"success"`
}

/*taobao.favorite.search*/
type FavoriteSearchRequest struct {
	values url.Values
}

func (this *FavoriteSearchRequest) GetApiMethodName() string {
	return "taobao.favorite.search"
}
func (this *FavoriteSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FavoriteSearchRequest) GetValues() url.Values {
	return this.values
}

/* ITEM表示宝贝，SHOP表示商铺，collect_type只能为这两者之一<br /> 支持最大长度为：4<br /> 支持的最大列表长度为：4 */
func (this *FavoriteSearchRequest) SetCollectType(value string) {
	this.Set("collect_type", value)
}

/* 页码。取值范围:大于零的整数; 默认值:1。一页20条记录。<br /> 支持最大值为：100<br /> 支持最小值为：1<br /> 支持的最大列表长度为：20 */
func (this *FavoriteSearchRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

type FavoriteSearchResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	FavoriteSearchResponseResult `json:"favorite_search_response"`
}
type FavoriteSearchResponseResult struct {
	/* 返回查询到的商品或店铺的数字id列表 */
	CollectItems []*CollectItem `json:"collect_items"`
	/* 查询到的宝贝的收藏总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.jipiao.agent.order.detail*/
type JipiaoAgentOrderDetailRequest struct {
	values url.Values
}

func (this *JipiaoAgentOrderDetailRequest) GetApiMethodName() string {
	return "taobao.jipiao.agent.order.detail"
}
func (this *JipiaoAgentOrderDetailRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JipiaoAgentOrderDetailRequest) GetValues() url.Values {
	return this.values
}

/* 淘宝订单id列表，当前支持列表长度为1，即当前只支持单个订单详情查询 */
func (this *JipiaoAgentOrderDetailRequest) SetOrderIds(value string) {
	this.Set("order_ids", value)
}

type JipiaoAgentOrderDetailResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	JipiaoAgentOrderDetailResponseResult `json:"jipiao_agent_order_detail_response"`
}
type JipiaoAgentOrderDetailResponseResult struct {
	/* 失败时的错误信息 */
	ErrorMessage string `json:"error_message"`
	/* 返回操作成功失败信息 */
	IsSuccess bool `json:"is_success"`
	/* 机票订单的详情列表，当前支持返回一个订单 */
	Orders []*TripOrder `json:"orders"`
}

/*taobao.jipiao.agent.order.product.snapshot*/
type JipiaoAgentOrderProductSnapshotRequest struct {
	values url.Values
}

func (this *JipiaoAgentOrderProductSnapshotRequest) GetApiMethodName() string {
	return "taobao.jipiao.agent.order.product.snapshot"
}
func (this *JipiaoAgentOrderProductSnapshotRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JipiaoAgentOrderProductSnapshotRequest) GetValues() url.Values {
	return this.values
}

/* 订单号 */
func (this *JipiaoAgentOrderProductSnapshotRequest) SetOrderId(value string) {
	this.Set("order_id", value)
}

type JipiaoAgentOrderProductSnapshotResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	JipiaoAgentOrderProductSnapshotResponseResult `json:"jipiao_agent_order_product_snapshot_response"`
}
type JipiaoAgentOrderProductSnapshotResponseResult struct {
	/* {
		"pnr_id": {
			"passengers": ["用户姓名"],
			"isAutoBook": false,
			"segments": [{
				"depTime": "2014-04-04 15:25:00.0",
				"filghtNO": "KN5856",
				"flightSegment": "SZX-NAY"
			}],
			"pnr": "-",
			"policyMemo": "-",
			"fareMemo": "-",
			"channel": "渠道"
		}
	}

	pnr_id:淘宝内部pnr id 例如72749001
	isAutoBook：是否使用淘宝自动出票
	passengers：乘客姓名，可包含多个
	segments：航段信息
	pnr：pnr值 如果没有值，则返回"-"
	policyMemo：政策备注，如果没有值，则返回"-"
	fareMemo：运价备注，如果没有值，则返回"-"
	channel：渠道 例如51book:300001 */
	Data string `json:"data"`
	/* 失败时的错误信息 */
	ErrorMessage string `json:"error_message"`
	/* 返回操作成功失败信息 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.jipiao.agent.order.search*/
type JipiaoAgentOrderSearchRequest struct {
	values url.Values
}

func (this *JipiaoAgentOrderSearchRequest) GetApiMethodName() string {
	return "taobao.jipiao.agent.order.search"
}
func (this *JipiaoAgentOrderSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JipiaoAgentOrderSearchRequest) GetValues() url.Values {
	return this.values
}

/* 创建订单时间范围的开始时间，注意：当前搜索条件开始结束时间范围不能超过三天，默认开始时间为当前时间往前推三天 （具体天数可能调整） */
func (this *JipiaoAgentOrderSearchRequest) SetBeginTime(value string) {
	this.Set("begin_time", value)
}

/* 创建订单时间范围的结束时间，注意：当前搜索条件开始结束时间范围不能超过三天，默认为当前时间 （具体天数可能调整） */
func (this *JipiaoAgentOrderSearchRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 是否需要行程单，true表示需要行程单；false表示不许要 */
func (this *JipiaoAgentOrderSearchRequest) SetHasItinerary(value string) {
	this.Set("has_itinerary", value)
}

/* 页码，默认第一页；注意：页大小固定，搜索结果中返回页大小pageSize，和是否包含下一页hasNext */
func (this *JipiaoAgentOrderSearchRequest) SetPage(value string) {
	this.Set("page", value)
}

/* 订单状态，默认为空，查询所有状态的订单
1:待确认
2:待出票
3:强制成功
4:未付款
5:预订成功
6:已失效 */
func (this *JipiaoAgentOrderSearchRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 航程类型： 0.单程；1.往返 */
func (this *JipiaoAgentOrderSearchRequest) SetTripType(value string) {
	this.Set("trip_type", value)
}

type JipiaoAgentOrderSearchResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	JipiaoAgentOrderSearchResponseResult `json:"jipiao_agent_order_search_response"`
}
type JipiaoAgentOrderSearchResponseResult struct {
	/* 失败时的错误信息 */
	ErrorMessage string `json:"error_message"`
	/* 返回操作成功失败信息 */
	IsSuccess bool `json:"is_success"`
	/* 机票订单搜索返回结果对象 */
	SearchResult *SearchOrderResult `json:"search_result"`
}

/*taobao.jipiao.agent.order.ticket*/
type JipiaoAgentOrderTicketRequest struct {
	values url.Values
}

func (this *JipiaoAgentOrderTicketRequest) GetApiMethodName() string {
	return "taobao.jipiao.agent.order.ticket"
}
func (this *JipiaoAgentOrderTicketRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JipiaoAgentOrderTicketRequest) GetValues() url.Values {
	return this.values
}

/* 淘宝系统订单id */
func (this *JipiaoAgentOrderTicketRequest) SetOrderId(value string) {
	this.Set("order_id", value)
}

/* 成功订单参数：列表元素结构为——
1.航班号（注：是订单里的航班号，非实际承运航班号）;
2.旧乘机人姓名;
3.新乘机人姓名;
4.票号 （乘机人、航段对应的票号）
说明：
1.往返订单，2段航班对应1个票号的，需要2条success_info记录，分别对应去程、回程；
2.有时用户输入的乘机人姓名输入错误或者有生僻字，代理商必须输入新的名字以保证验真通过；即旧乘机人姓名和新乘机人姓名不需要变化时可以相同 */
func (this *JipiaoAgentOrderTicketRequest) SetSuccessInfo(value string) {
	this.Set("success_info", value)
}

type JipiaoAgentOrderTicketResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	JipiaoAgentOrderTicketResponseResult `json:"jipiao_agent_order_ticket_response"`
}
type JipiaoAgentOrderTicketResponseResult struct {
	/* 失败时的错误信息 */
	ErrorMessage string `json:"error_message"`
	/* 返回接口调用完成后，整个订单是否成功 */
	IsOrderSuccess bool `json:"is_order_success"`
	/* 返回操作成功失败信息 */
	IsSuccess bool `json:"is_success"`
	/* 返回回填票号操作成功失败信息 */
	IsTicketSuccess bool `json:"is_ticket_success"`
}

/*taobao.jipiao.policiesstatus.update*/
type JipiaoPoliciesstatusUpdateRequest struct {
	values url.Values
}

func (this *JipiaoPoliciesstatusUpdateRequest) GetApiMethodName() string {
	return "taobao.jipiao.policiesstatus.update"
}
func (this *JipiaoPoliciesstatusUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JipiaoPoliciesstatusUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 航空公司二字码<br /> 支持最大长度为：5<br /> 支持的最大列表长度为：5 */
func (this *JipiaoPoliciesstatusUpdateRequest) SetAirline(value string) {
	this.Set("airline", value)
}

/* 到达机场三字码,此项必需与出发机场同时为空或不为空<br /> 支持最大长度为：3<br /> 支持的最大列表长度为：3 */
func (this *JipiaoPoliciesstatusUpdateRequest) SetArrAirport(value string) {
	this.Set("arr_airport", value)
}

/* 出发机场三字码,此项必需与到达机场同时为空或不为空<br /> 支持最大长度为：3<br /> 支持的最大列表长度为：3 */
func (this *JipiaoPoliciesstatusUpdateRequest) SetDepAirport(value string) {
	this.Set("dep_airport", value)
}

/* 外部产品id集,最多支持1000个,后续调大,其中的out_product_id含有空格将不会处理 */
func (this *JipiaoPoliciesstatusUpdateRequest) SetOutProductIds(value string) {
	this.Set("out_product_ids", value)
}

/* 产品id集,最多支持1000个，后续调大，其中单个的policy_id含有留空格或不是数字将会忽略不处理 */
func (this *JipiaoPoliciesstatusUpdateRequest) SetPolicyIds(value string) {
	this.Set("policy_ids", value)
}

/* 发布日期 */
func (this *JipiaoPoliciesstatusUpdateRequest) SetPublishDate(value string) {
	this.Set("publish_date", value)
}

/* 发布来源, 通过接口taobao.jipiao.policy.process添加的政策会自动加上source为TOP,代理商后台页面录入的source为PC,excel上传的source为UPLOAD,通过接口taobao.jipiao.policies.fulladd,taobao.jipiao.policies.add的自定义source也可以<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *JipiaoPoliciesstatusUpdateRequest) SetSource(value string) {
	this.Set("source", value)
}

/* 0：按policy_ids更新；1：按out_product_ids更新；2:按其它条件更新 */
func (this *JipiaoPoliciesstatusUpdateRequest) SetType(value string) {
	this.Set("type", value)
}

type JipiaoPoliciesstatusUpdateResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	JipiaoPoliciesstatusUpdateResponseResult `json:"jipiao_policiesstatus_update_response"`
}
type JipiaoPoliciesstatusUpdateResponseResult struct {
	/* 代理商核对接收处理信息的时间序号 */
	InvokeId string `json:"invoke_id"`
	/* 机票政策状态更新任务提交结果，true，成功；false，失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.trip.jipiao.agent.itinerary.send*/
type TripJipiaoAgentItinerarySendRequest struct {
	values url.Values
}

func (this *TripJipiaoAgentItinerarySendRequest) GetApiMethodName() string {
	return "taobao.trip.jipiao.agent.itinerary.send"
}
func (this *TripJipiaoAgentItinerarySendRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TripJipiaoAgentItinerarySendRequest) GetValues() url.Values {
	return this.values
}

/* 物流公司代码CODE，如不清楚，请找运营提供<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *TripJipiaoAgentItinerarySendRequest) SetCompanyCode(value string) {
	this.Set("company_code", value)
}

/* 邮寄单号，长度不能超过32字节<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *TripJipiaoAgentItinerarySendRequest) SetExpressCode(value string) {
	this.Set("express_code", value)
}

/* 淘宝系统行程单唯一键 */
func (this *TripJipiaoAgentItinerarySendRequest) SetItineraryId(value string) {
	this.Set("itinerary_id", value)
}

/* 行程单号<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *TripJipiaoAgentItinerarySendRequest) SetItineraryNo(value string) {
	this.Set("itinerary_no", value)
}

/* 邮寄日期，格式yyyy-mm-dd */
func (this *TripJipiaoAgentItinerarySendRequest) SetSendDate(value string) {
	this.Set("send_date", value)
}

type TripJipiaoAgentItinerarySendResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	TripJipiaoAgentItinerarySendResponseResult `json:"trip_jipiao_agent_itinerary_send_response"`
}
type TripJipiaoAgentItinerarySendResponseResult struct {
	/* 成功或者失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.trip.jipiao.agent.order.confirm*/
type TripJipiaoAgentOrderConfirmRequest struct {
	values url.Values
}

func (this *TripJipiaoAgentOrderConfirmRequest) GetApiMethodName() string {
	return "taobao.trip.jipiao.agent.order.confirm"
}
func (this *TripJipiaoAgentOrderConfirmRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TripJipiaoAgentOrderConfirmRequest) GetValues() url.Values {
	return this.values
}

/* 国内机票订单id */
func (this *TripJipiaoAgentOrderConfirmRequest) SetOrderId(value string) {
	this.Set("order_id", value)
}

/* hk（占座）时需要的信息列表，元素结构：乘机人姓名;pnr (以分号进行分隔) */
func (this *TripJipiaoAgentOrderConfirmRequest) SetPnrInfo(value string) {
	this.Set("pnr_info", value)
}

type TripJipiaoAgentOrderConfirmResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	TripJipiaoAgentOrderConfirmResponseResult `json:"trip_jipiao_agent_order_confirm_response"`
}
type TripJipiaoAgentOrderConfirmResponseResult struct {
	/* 确认成功失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.trip.jipiao.agent.order.fail*/
type TripJipiaoAgentOrderFailRequest struct {
	values url.Values
}

func (this *TripJipiaoAgentOrderFailRequest) GetApiMethodName() string {
	return "taobao.trip.jipiao.agent.order.fail"
}
func (this *TripJipiaoAgentOrderFailRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TripJipiaoAgentOrderFailRequest) GetValues() url.Values {
	return this.values
}

/* 失败类型为0，说明备注原因<br /> 支持最大长度为：200<br /> 支持的最大列表长度为：200 */
func (this *TripJipiaoAgentOrderFailRequest) SetFailMemo(value string) {
	this.Set("fail_memo", value)
}

/* 失败原因：1．客户要求失败订单；2．此舱位已售完（经济舱或特舱）；3．剩余座位少于用户购买数量；4．特价管理里录入的特价票已经售完；5．假舱（请及时通过旺旺或者电话反馈给淘宝工作人员）；0．其它（请在备注中说明原因） */
func (this *TripJipiaoAgentOrderFailRequest) SetFailType(value string) {
	this.Set("fail_type", value)
}

/* 国内机票订单id */
func (this *TripJipiaoAgentOrderFailRequest) SetOrderId(value string) {
	this.Set("order_id", value)
}

type TripJipiaoAgentOrderFailResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	TripJipiaoAgentOrderFailResponseResult `json:"trip_jipiao_agent_order_fail_response"`
}
type TripJipiaoAgentOrderFailResponseResult struct {
	/* 失败订单操作成功失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.trip.jipiao.agent.order.find*/
type TripJipiaoAgentOrderFindRequest struct {
	values url.Values
}

func (this *TripJipiaoAgentOrderFindRequest) GetApiMethodName() string {
	return "taobao.trip.jipiao.agent.order.find"
}
func (this *TripJipiaoAgentOrderFindRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TripJipiaoAgentOrderFindRequest) GetValues() url.Values {
	return this.values
}

/* 创建订单时间范围的开始时间，注意：当前搜索条件开始结束时间范围不能超过三天，默认开始时间为当前时间往前推三天 （具体天数可能调整） */
func (this *TripJipiaoAgentOrderFindRequest) SetBeginTime(value string) {
	this.Set("begin_time", value)
}

/* 创建订单时间范围的结束时间，注意：当前搜索条件开始结束时间范围不能超过三天，默认为当前时间 （具体天数可能调整） */
func (this *TripJipiaoAgentOrderFindRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 页码，默认第一页；注意：页大小固定，搜索结果中返回页大小pageSize，和是否包含下一页hasNext */
func (this *TripJipiaoAgentOrderFindRequest) SetPage(value string) {
	this.Set("page", value)
}

/* 淘宝机票政策id */
func (this *TripJipiaoAgentOrderFindRequest) SetPolicyId(value string) {
	this.Set("policy_id", value)
}

type TripJipiaoAgentOrderFindResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	TripJipiaoAgentOrderFindResponseResult `json:"trip_jipiao_agent_order_find_response"`
}
type TripJipiaoAgentOrderFindResponseResult struct {
	/* 国内机票订单搜索返回结果对象 */
	SearchResult *SearchOrderResult `json:"search_result"`
}

/*taobao.trip.jipiao.agent.order.get*/
type TripJipiaoAgentOrderGetRequest struct {
	values url.Values
}

func (this *TripJipiaoAgentOrderGetRequest) GetApiMethodName() string {
	return "taobao.trip.jipiao.agent.order.get"
}
func (this *TripJipiaoAgentOrderGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TripJipiaoAgentOrderGetRequest) GetValues() url.Values {
	return this.values
}

/* 淘宝政策id列表，当前支持列表长度为1，即当前只支持单个订单详情查询 */
func (this *TripJipiaoAgentOrderGetRequest) SetOrderIds(value string) {
	this.Set("order_ids", value)
}

type TripJipiaoAgentOrderGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	TripJipiaoAgentOrderGetResponseResult `json:"trip_jipiao_agent_order_get_response"`
}
type TripJipiaoAgentOrderGetResponseResult struct {
	/* 返回订单详细列表 */
	Orders []*AtOrder `json:"orders"`
}

/*taobao.trip.jipiao.agent.order.hk*/
type TripJipiaoAgentOrderHkRequest struct {
	values url.Values
}

func (this *TripJipiaoAgentOrderHkRequest) GetApiMethodName() string {
	return "taobao.trip.jipiao.agent.order.hk"
}
func (this *TripJipiaoAgentOrderHkRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TripJipiaoAgentOrderHkRequest) GetValues() url.Values {
	return this.values
}

/* 国内机票订单id */
func (this *TripJipiaoAgentOrderHkRequest) SetOrderId(value string) {
	this.Set("order_id", value)
}

/* hk（占座）时需要的信息信息列表，元素结构：乘机人姓名;pnr (以分号进行分隔). */
func (this *TripJipiaoAgentOrderHkRequest) SetPnrInfo(value string) {
	this.Set("pnr_info", value)
}

type TripJipiaoAgentOrderHkResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	TripJipiaoAgentOrderHkResponseResult `json:"trip_jipiao_agent_order_hk_response"`
}
type TripJipiaoAgentOrderHkResponseResult struct {
	/* 手工HK成功失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.trip.jipiao.agent.order.search*/
type TripJipiaoAgentOrderSearchRequest struct {
	values url.Values
}

func (this *TripJipiaoAgentOrderSearchRequest) GetApiMethodName() string {
	return "taobao.trip.jipiao.agent.order.search"
}
func (this *TripJipiaoAgentOrderSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TripJipiaoAgentOrderSearchRequest) GetValues() url.Values {
	return this.values
}

/* 创建订单时间范围的开始时间，注意：当前搜索条件开始结束时间范围不能超过三天，默认开始时间为当前时间往前推三天 （具体天数可能调整） */
func (this *TripJipiaoAgentOrderSearchRequest) SetBeginTime(value string) {
	this.Set("begin_time", value)
}

/* 创建订单时间范围的结束时间，注意：当前搜索条件开始结束时间范围不能超过三天，默认为当前时间 （具体天数可能调整） */
func (this *TripJipiaoAgentOrderSearchRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 是否需要行程单，true表示需要行程单；false表示不许要 （必须设置，且不能为null） */
func (this *TripJipiaoAgentOrderSearchRequest) SetHasItinerary(value string) {
	this.Set("has_itinerary", value)
}

/* 页码，默认第一页；注意：页大小固定，搜索结果中返回页大小pageSize，和是否包含下一页hasNext */
func (this *TripJipiaoAgentOrderSearchRequest) SetPage(value string) {
	this.Set("page", value)
}

/* 订单状态，默认为空，查询所有状态的订单 */
func (this *TripJipiaoAgentOrderSearchRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 航程类型： 0.单程和普通往返；2.多程（暂时没有使用）；3.特价往返 */
func (this *TripJipiaoAgentOrderSearchRequest) SetTripType(value string) {
	this.Set("trip_type", value)
}

type TripJipiaoAgentOrderSearchResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	TripJipiaoAgentOrderSearchResponseResult `json:"trip_jipiao_agent_order_search_response"`
}
type TripJipiaoAgentOrderSearchResponseResult struct {
	/* 国内机票订单搜索返回结果对象 */
	SearchResult *SearchOrderResult `json:"search_result"`
}

/*taobao.trip.jipiao.agent.order.success*/
type TripJipiaoAgentOrderSuccessRequest struct {
	values url.Values
}

func (this *TripJipiaoAgentOrderSuccessRequest) GetApiMethodName() string {
	return "taobao.trip.jipiao.agent.order.success"
}
func (this *TripJipiaoAgentOrderSuccessRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TripJipiaoAgentOrderSuccessRequest) GetValues() url.Values {
	return this.values
}

/* 淘宝系统订单id */
func (this *TripJipiaoAgentOrderSuccessRequest) SetOrderId(value string) {
	this.Set("order_id", value)
}

/* 成功订单参数：列表元素结构为——旧乘机人姓名;新乘机人姓名;pnr;票号 (以分号进行分隔)。说明：有时用户输入的乘机人姓名输入错误或者有生僻字，代理商必须输入新的名字以保证验真通过；即旧乘机人姓名和新乘机人姓名不需要变化时可以相同 */
func (this *TripJipiaoAgentOrderSuccessRequest) SetSuccessInfo(value string) {
	this.Set("success_info", value)
}

type TripJipiaoAgentOrderSuccessResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	TripJipiaoAgentOrderSuccessResponseResult `json:"trip_jipiao_agent_order_success_response"`
}
type TripJipiaoAgentOrderSuccessResponseResult struct {
	/* 返回操作成功失败信息 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.trip.jipiao.nsearch.ow.search*/
type TripJipiaoNsearchOwSearchRequest struct {
	values url.Values
}

func (this *TripJipiaoNsearchOwSearchRequest) GetApiMethodName() string {
	return "taobao.trip.jipiao.nsearch.ow.search"
}
func (this *TripJipiaoNsearchOwSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TripJipiaoNsearchOwSearchRequest) GetValues() url.Values {
	return this.values
}

/* 到达城市三字码<br /> 支持最大长度为：3<br /> 支持的最大列表长度为：3 */
func (this *TripJipiaoNsearchOwSearchRequest) SetArrCityCode(value string) {
	this.Set("arr_city_code", value)
}

/* 舱位等级，0，默认-全部；1，经济舱；2，商务舱；3，头等舱；4，头等和商务舱；5，经济和商务舱；6，经济和头等舱<br /> 支持最大值为：6<br /> 支持最小值为：0 */
func (this *TripJipiaoNsearchOwSearchRequest) SetCabinClass(value string) {
	this.Set("cabin_class", value)
}

/* 出发城市三字码<br /> 支持最大长度为：3<br /> 支持的最大列表长度为：3 */
func (this *TripJipiaoNsearchOwSearchRequest) SetDepCityCode(value string) {
	this.Set("dep_city_code", value)
}

/* 航班日期：格式要求 "yyyy-MM-dd"<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *TripJipiaoNsearchOwSearchRequest) SetDepDate(value string) {
	this.Set("dep_date", value)
}

/* 指定航班号：获取指定航班低价舱位列表或者获取指定航班高大上舱位折扣使用<br /> 支持最大长度为：7<br /> 支持的最大列表长度为：7 */
func (this *TripJipiaoNsearchOwSearchRequest) SetFlightNo(value string) {
	this.Set("flight_no", value)
}

/* 1-9分别表示乘机人数为1-9；乘机人数小于0即相当无限制，默认值-1<br /> 支持最大值为：9<br /> 支持最小值为：-1 */
func (this *TripJipiaoNsearchOwSearchRequest) SetPassengerNum(value string) {
	this.Set("passenger_num", value)
}

/* 淘宝推广者pid */
func (this *TripJipiaoNsearchOwSearchRequest) SetPid(value string) {
	this.Set("pid", value)
}

/* 搜索类型：支持三个类型，1. outbound，表示搜索航段最低价，每个航班一个最低价；2. lowprice，表示搜索指定航班topN最低价；3. gaoduan，表示搜索指定航班下高端大气上档次价格列表<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *TripJipiaoNsearchOwSearchRequest) SetSearchType(value string) {
	this.Set("search_type", value)
}

/* 是否提供报销凭证(行程单),0.不提供和提供报销凭证的都查询出来,1.只查询提供报销凭证的<br /> 支持最小值为：0 */
func (this *TripJipiaoNsearchOwSearchRequest) SetSupplyItinerary(value string) {
	this.Set("supply_itinerary", value)
}

type TripJipiaoNsearchOwSearchResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	TripJipiaoNsearchOwSearchResponseResult `json:"trip_jipiao_nsearch_ow_search_response"`
}
type TripJipiaoNsearchOwSearchResponseResult struct {
	/* 航班搜索结果对象 */
	Result *AtNSearchResult `json:"result"`
}

/*taobao.marketing.promotion.kfc*/
type MarketingPromotionKfcRequest struct {
	values url.Values
}

func (this *MarketingPromotionKfcRequest) GetApiMethodName() string {
	return "taobao.marketing.promotion.kfc"
}
func (this *MarketingPromotionKfcRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *MarketingPromotionKfcRequest) GetValues() url.Values {
	return this.values
}

/* 活动描述 */
func (this *MarketingPromotionKfcRequest) SetPromotionDesc(value string) {
	this.Set("promotion_desc", value)
}

/* 活动名称 */
func (this *MarketingPromotionKfcRequest) SetPromotionTitle(value string) {
	this.Set("promotion_title", value)
}

type MarketingPromotionKfcResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	MarketingPromotionKfcResponseResult `json:"marketing_promotion_kfc_response"`
}
type MarketingPromotionKfcResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.marketing.promotions.get*/
type MarketingPromotionsGetRequest struct {
	values url.Values
}

func (this *MarketingPromotionsGetRequest) GetApiMethodName() string {
	return "taobao.marketing.promotions.get"
}
func (this *MarketingPromotionsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *MarketingPromotionsGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的优惠策略结构字段列表。可选值为Promotion中所有字段，如：promotion_id, promotion_title, item_id, status, tag_id等等 */
func (this *MarketingPromotionsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 是否新标签标识 */
func (this *MarketingPromotionsGetRequest) SetIsNewTag(value string) {
	this.Set("is_new_tag", value)
}

/* 商品数字ID。根据该ID查询商品下通过第三方工具设置的所有优惠策略 */
func (this *MarketingPromotionsGetRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* 优惠策略状态。可选值：ACTIVE(有效)，UNACTIVE(无效)，若不传或者传入其他值，则默认查询全部 */
func (this *MarketingPromotionsGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 标签ID */
func (this *MarketingPromotionsGetRequest) SetTagId(value string) {
	this.Set("tag_id", value)
}

type MarketingPromotionsGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	MarketingPromotionsGetResponseResult `json:"marketing_promotions_get_response"`
}
type MarketingPromotionsGetResponseResult struct {
	/* 商品对应的所有优惠列表 */
	Promotions []*Promotion `json:"promotions"`
	/* 结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.promotion.activity.get*/
type PromotionActivityGetRequest struct {
	values url.Values
}

func (this *PromotionActivityGetRequest) GetApiMethodName() string {
	return "taobao.promotion.activity.get"
}
func (this *PromotionActivityGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionActivityGetRequest) GetValues() url.Values {
	return this.values
}

/* 活动的id */
func (this *PromotionActivityGetRequest) SetActivityId(value string) {
	this.Set("activity_id", value)
}

type PromotionActivityGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	PromotionActivityGetResponseResult `json:"promotion_activity_get_response"`
}
type PromotionActivityGetResponseResult struct {
	/* 活动列表 */
	Activitys []*Activity `json:"activitys"`
}

/*taobao.promotion.coupon.add*/
type PromotionCouponAddRequest struct {
	values url.Values
}

func (this *PromotionCouponAddRequest) GetApiMethodName() string {
	return "taobao.promotion.coupon.add"
}
func (this *PromotionCouponAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionCouponAddRequest) GetValues() url.Values {
	return this.values
}

/* 订单满多少元才能用这个优惠券，500就是满500元才能使用 */
func (this *PromotionCouponAddRequest) SetCondition(value string) {
	this.Set("condition", value)
}

/* 优惠券的面额，必须是3，5，10，20，50，100<br /> 支持最大值为：100<br /> 支持最小值为：3 */
func (this *PromotionCouponAddRequest) SetDenominations(value string) {
	this.Set("denominations", value)
}

/* 优惠券的截止日期 */
func (this *PromotionCouponAddRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 优惠券的生效时间 */
func (this *PromotionCouponAddRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type PromotionCouponAddResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	PromotionCouponAddResponseResult `json:"promotion_coupon_add_response"`
}
type PromotionCouponAddResponseResult struct {
	/* 优惠券的id */
	CouponId int64 `json:"coupon_id"`
}

/*taobao.promotion.coupon.send*/
type PromotionCouponSendRequest struct {
	values url.Values
}

func (this *PromotionCouponSendRequest) GetApiMethodName() string {
	return "taobao.promotion.coupon.send"
}
func (this *PromotionCouponSendRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionCouponSendRequest) GetValues() url.Values {
	return this.values
}

/* 买家昵称用半角','号分割 */
func (this *PromotionCouponSendRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 优惠券的id */
func (this *PromotionCouponSendRequest) SetCouponId(value string) {
	this.Set("coupon_id", value)
}

type PromotionCouponSendResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	PromotionCouponSendResponseResult `json:"promotion_coupon_send_response"`
}
type PromotionCouponSendResponseResult struct {
	/* 发送成功的买家的昵称和优惠券的number */
	CouponResults []*CouponResult `json:"coupon_results"`
	/* 没有发送成功的买家 */
	FailureBuyers []*ErrorMessage `json:"failure_buyers"`
	/* true 成功，false失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.promotion.coupon.sns.send*/
type PromotionCouponSnsSendRequest struct {
	values url.Values
}

func (this *PromotionCouponSnsSendRequest) GetApiMethodName() string {
	return "taobao.promotion.coupon.sns.send"
}
func (this *PromotionCouponSnsSendRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionCouponSnsSendRequest) GetValues() url.Values {
	return this.values
}

/* 买家昵称用半角','号分割 */
func (this *PromotionCouponSnsSendRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 优惠券的id */
func (this *PromotionCouponSnsSendRequest) SetCouponId(value string) {
	this.Set("coupon_id", value)
}

type PromotionCouponSnsSendResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	PromotionCouponSnsSendResponseResult `json:"promotion_coupon_sns_send_response"`
}
type PromotionCouponSnsSendResponseResult struct {
	/* 发送成功的买家的昵称和优惠券的number */
	CouponResults []*CouponResult `json:"coupon_results"`
	/* 没有发送成功的买家 */
	FailureBuyers []*ErrorMessage `json:"failure_buyers"`
	/* true 成功，false失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.promotion.coupons.get*/
type PromotionCouponsGetRequest struct {
	values url.Values
}

func (this *PromotionCouponsGetRequest) GetApiMethodName() string {
	return "taobao.promotion.coupons.get"
}
func (this *PromotionCouponsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionCouponsGetRequest) GetValues() url.Values {
	return this.values
}

/* 优惠券的id，唯一标识这个优惠券 */
func (this *PromotionCouponsGetRequest) SetCouponId(value string) {
	this.Set("coupon_id", value)
}

/* 优惠券的面额，必须是3，5，10，20，50,100<br /> 支持最大值为：100<br /> 支持最小值为：3 */
func (this *PromotionCouponsGetRequest) SetDenominations(value string) {
	this.Set("denominations", value)
}

/* 优惠券的截止日期 */
func (this *PromotionCouponsGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 查询的页号，结果集是分页返回的，每页20条<br /> 支持最小值为：1 */
func (this *PromotionCouponsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数<br /> 支持的最大列表长度为：20 */
func (this *PromotionCouponsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type PromotionCouponsGetResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	PromotionCouponsGetResponseResult `json:"promotion_coupons_get_response"`
}
type PromotionCouponsGetResponseResult struct {
	/* 优惠券列表 */
	Coupons []*Coupon `json:"coupons"`
	/* 查询的总数量 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.promotion.limitdiscount.detail.get*/
type PromotionLimitdiscountDetailGetRequest struct {
	values url.Values
}

func (this *PromotionLimitdiscountDetailGetRequest) GetApiMethodName() string {
	return "taobao.promotion.limitdiscount.detail.get"
}
func (this *PromotionLimitdiscountDetailGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionLimitdiscountDetailGetRequest) GetValues() url.Values {
	return this.values
}

/* 限时打折ID。这个针对查询唯一限时打折情况。 */
func (this *PromotionLimitdiscountDetailGetRequest) SetLimitDiscountId(value string) {
	this.Set("limit_discount_id", value)
}

type PromotionLimitdiscountDetailGetResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	PromotionLimitdiscountDetailGetResponseResult `json:"promotion_limitdiscount_detail_get_response"`
}
type PromotionLimitdiscountDetailGetResponseResult struct {
	/* 限时打折对应的商品详情列表。 */
	ItemDiscountDetailList []*LimitDiscountDetail `json:"item_discount_detail_list"`
}

/*taobao.promotion.limitdiscount.get*/
type PromotionLimitdiscountGetRequest struct {
	values url.Values
}

func (this *PromotionLimitdiscountGetRequest) GetApiMethodName() string {
	return "taobao.promotion.limitdiscount.get"
}
func (this *PromotionLimitdiscountGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionLimitdiscountGetRequest) GetValues() url.Values {
	return this.values
}

/* 限时打折结束时间。输入的时间会被截取，年月日有效，时分秒忽略。 */
func (this *PromotionLimitdiscountGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 限时打折ID。这个针对查询唯一限时打折情况。若此字段不为空，则说明操作为单条限时打折记录查询，其他字段忽略。若想分页按条件查询，这个字段置为空。 */
func (this *PromotionLimitdiscountGetRequest) SetLimitDiscountId(value string) {
	this.Set("limit_discount_id", value)
}

/* 分页页号。默认1。当页数大于最大页数时，结果为最大页数的数据。 */
func (this *PromotionLimitdiscountGetRequest) SetPageNumber(value string) {
	this.Set("page_number", value)
}

/* 限时打折开始时间。输入的时间会被截取，年月日有效，时分秒忽略。 */
func (this *PromotionLimitdiscountGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 限时打折活动状态。ALL:全部状态;OVER:已结束;DOING:进行中;PROPARE:未开始(只支持大写)。当limit_discount_id为空时，为空时，默认为全部的状态。 */
func (this *PromotionLimitdiscountGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

type PromotionLimitdiscountGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	PromotionLimitdiscountGetResponseResult `json:"promotion_limitdiscount_get_response"`
}
type PromotionLimitdiscountGetResponseResult struct {
	/* 限时打折列表。 */
	LimitDiscountList []*LimitDiscount `json:"limit_discount_list"`
	/* 满足该查询条件的限时打折总数量。 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.promotion.meal.get*/
type PromotionMealGetRequest struct {
	values url.Values
}

func (this *PromotionMealGetRequest) GetApiMethodName() string {
	return "taobao.promotion.meal.get"
}
func (this *PromotionMealGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionMealGetRequest) GetValues() url.Values {
	return this.values
}

/* 搭配套餐id */
func (this *PromotionMealGetRequest) SetMealId(value string) {
	this.Set("meal_id", value)
}

/* 套餐状态。有效：VALID;失效：INVALID(有效套餐为可使用的套餐,无效套餐为套餐中有商品下架或库存为0时)。默认时两种情况都会查询。 */
func (this *PromotionMealGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

type PromotionMealGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	PromotionMealGetResponseResult `json:"promotion_meal_get_response"`
}
type PromotionMealGetResponseResult struct {
	/* 搭配套餐列表。 */
	MealList []*Meal `json:"meal_list"`
}

/*taobao.promotionmisc.activity.range.add*/
type PromotionmiscActivityRangeAddRequest struct {
	values url.Values
}

func (this *PromotionmiscActivityRangeAddRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.activity.range.add"
}
func (this *PromotionmiscActivityRangeAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscActivityRangeAddRequest) GetValues() url.Values {
	return this.values
}

/* 活动id。<br /> 支持最小值为：0 */
func (this *PromotionmiscActivityRangeAddRequest) SetActivityId(value string) {
	this.Set("activity_id", value)
}

/* 商品id,多个id用逗号隔开，一次不超过50个。 */
func (this *PromotionmiscActivityRangeAddRequest) SetIds(value string) {
	this.Set("ids", value)
}

type PromotionmiscActivityRangeAddResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	PromotionmiscActivityRangeAddResponseResult `json:"promotionmisc_activity_range_add_response"`
}
type PromotionmiscActivityRangeAddResponseResult struct {
	/* 增加商品范围是否成功。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.promotionmisc.activity.range.all.remove*/
type PromotionmiscActivityRangeAllRemoveRequest struct {
	values url.Values
}

func (this *PromotionmiscActivityRangeAllRemoveRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.activity.range.all.remove"
}
func (this *PromotionmiscActivityRangeAllRemoveRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscActivityRangeAllRemoveRequest) GetValues() url.Values {
	return this.values
}

/* 活动id。 */
func (this *PromotionmiscActivityRangeAllRemoveRequest) SetActivityId(value string) {
	this.Set("activity_id", value)
}

type PromotionmiscActivityRangeAllRemoveResponse struct {
	*ErrorResponse                                    `json:"error_response,omitempty"`
	PromotionmiscActivityRangeAllRemoveResponseResult `json:"promotionmisc_activity_range_all_remove_response"`
}
type PromotionmiscActivityRangeAllRemoveResponseResult struct {
	/* 清空活动参与商品是否成功。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.promotionmisc.activity.range.list.get*/
type PromotionmiscActivityRangeListGetRequest struct {
	values url.Values
}

func (this *PromotionmiscActivityRangeListGetRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.activity.range.list.get"
}
func (this *PromotionmiscActivityRangeListGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscActivityRangeListGetRequest) GetValues() url.Values {
	return this.values
}

/* 活动id<br /> 支持最小值为：0 */
func (this *PromotionmiscActivityRangeListGetRequest) SetActivityId(value string) {
	this.Set("activity_id", value)
}

type PromotionmiscActivityRangeListGetResponse struct {
	*ErrorResponse                                  `json:"error_response,omitempty"`
	PromotionmiscActivityRangeListGetResponseResult `json:"promotionmisc_activity_range_list_get_response"`
}
type PromotionmiscActivityRangeListGetResponseResult struct {
	/* 活动参与的商品列表 */
	PromotionRangeList []*PromotionRange `json:"promotion_range_list"`
}

/*taobao.promotionmisc.activity.range.remove*/
type PromotionmiscActivityRangeRemoveRequest struct {
	values url.Values
}

func (this *PromotionmiscActivityRangeRemoveRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.activity.range.remove"
}
func (this *PromotionmiscActivityRangeRemoveRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscActivityRangeRemoveRequest) GetValues() url.Values {
	return this.values
}

/* 活动id。<br /> 支持最小值为：0 */
func (this *PromotionmiscActivityRangeRemoveRequest) SetActivityId(value string) {
	this.Set("activity_id", value)
}

/* 商品id,多个id用逗号隔开。 */
func (this *PromotionmiscActivityRangeRemoveRequest) SetIds(value string) {
	this.Set("ids", value)
}

type PromotionmiscActivityRangeRemoveResponse struct {
	*ErrorResponse                                 `json:"error_response,omitempty"`
	PromotionmiscActivityRangeRemoveResponseResult `json:"promotionmisc_activity_range_remove_response"`
}
type PromotionmiscActivityRangeRemoveResponseResult struct {
	/* 去除活动参与的商品是否成功。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.promotionmisc.item.activity.add*/
type PromotionmiscItemActivityAddRequest struct {
	values url.Values
}

func (this *PromotionmiscItemActivityAddRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.item.activity.add"
}
func (this *PromotionmiscItemActivityAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscItemActivityAddRequest) GetValues() url.Values {
	return this.values
}

/* 减多少钱。当is_decrease_money为true时，该值才有意义。注意：该值单位为分，即100表示1元。<br /> 支持最小值为：0 */
func (this *PromotionmiscItemActivityAddRequest) SetDecreaseAmount(value string) {
	this.Set("decrease_amount", value)
}

/* 折扣值。当is_discount为true时，该值才有意义。注意：800表示8折。<br /> 支持最小值为：0 */
func (this *PromotionmiscItemActivityAddRequest) SetDiscountRate(value string) {
	this.Set("discount_rate", value)
}

/* 活动结束时间。 */
func (this *PromotionmiscItemActivityAddRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 是否有减钱行为。 */
func (this *PromotionmiscItemActivityAddRequest) SetIsDecreaseMoney(value string) {
	this.Set("is_decrease_money", value)
}

/* 是否有打折行为。 */
func (this *PromotionmiscItemActivityAddRequest) SetIsDiscount(value string) {
	this.Set("is_discount", value)
}

/* 是否指定用户标签。 */
func (this *PromotionmiscItemActivityAddRequest) SetIsUserTag(value string) {
	this.Set("is_user_tag", value)
}

/* 活动名称，超过5个汉字时，商品详情中显示的优惠名称为：卖家优惠。<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *PromotionmiscItemActivityAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 活动范围：0表示全部参与； 1表示部分商品参与。<br /> 支持最大值为：1<br /> 支持最小值为：0<br /> 支持的最大列表长度为：1 */
func (this *PromotionmiscItemActivityAddRequest) SetParticipateRange(value string) {
	this.Set("participate_range", value)
}

/* 活动开始时间。 */
func (this *PromotionmiscItemActivityAddRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 用户标签。当is_user_tag为true时，该值才有意义。 */
func (this *PromotionmiscItemActivityAddRequest) SetUserTag(value string) {
	this.Set("user_tag", value)
}

type PromotionmiscItemActivityAddResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	PromotionmiscItemActivityAddResponseResult `json:"promotionmisc_item_activity_add_response"`
}
type PromotionmiscItemActivityAddResponseResult struct {
	/* 活动id。 */
	ActivityId int64 `json:"activity_id"`
	/* 是否保存成功。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.promotionmisc.item.activity.delete*/
type PromotionmiscItemActivityDeleteRequest struct {
	values url.Values
}

func (this *PromotionmiscItemActivityDeleteRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.item.activity.delete"
}
func (this *PromotionmiscItemActivityDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscItemActivityDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 活动id。<br /> 支持最小值为：0 */
func (this *PromotionmiscItemActivityDeleteRequest) SetActivityId(value string) {
	this.Set("activity_id", value)
}

type PromotionmiscItemActivityDeleteResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	PromotionmiscItemActivityDeleteResponseResult `json:"promotionmisc_item_activity_delete_response"`
}
type PromotionmiscItemActivityDeleteResponseResult struct {
	/* 是否成功删除活动。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.promotionmisc.item.activity.get*/
type PromotionmiscItemActivityGetRequest struct {
	values url.Values
}

func (this *PromotionmiscItemActivityGetRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.item.activity.get"
}
func (this *PromotionmiscItemActivityGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscItemActivityGetRequest) GetValues() url.Values {
	return this.values
}

/* 活动id。<br /> 支持最小值为：0 */
func (this *PromotionmiscItemActivityGetRequest) SetActivityId(value string) {
	this.Set("activity_id", value)
}

type PromotionmiscItemActivityGetResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	PromotionmiscItemActivityGetResponseResult `json:"promotionmisc_item_activity_get_response"`
}
type PromotionmiscItemActivityGetResponseResult struct {
	/* 单品优惠活动信息。 */
	ItemPromotion *ItemPromotion `json:"item_promotion"`
}

/*taobao.promotionmisc.item.activity.list.get*/
type PromotionmiscItemActivityListGetRequest struct {
	values url.Values
}

func (this *PromotionmiscItemActivityListGetRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.item.activity.list.get"
}
func (this *PromotionmiscItemActivityListGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscItemActivityListGetRequest) GetValues() url.Values {
	return this.values
}

/* 页码。<br /> 支持最小值为：1 */
func (this *PromotionmiscItemActivityListGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页记录数，最大支持50 。<br /> 支持最小值为：1 */
func (this *PromotionmiscItemActivityListGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type PromotionmiscItemActivityListGetResponse struct {
	*ErrorResponse                                 `json:"error_response,omitempty"`
	PromotionmiscItemActivityListGetResponseResult `json:"promotionmisc_item_activity_list_get_response"`
}
type PromotionmiscItemActivityListGetResponseResult struct {
	/* 只包含活动的主要信息，如activity_id，name，description，start_time，end_time，participate_range。优惠的其他详细信息，请通过taobao.promotionmisc.item.activity.get获取。 */
	ItemPromotionList []*ItemPromotion `json:"item_promotion_list"`
	/* 记录总条数。 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.promotionmisc.item.activity.update*/
type PromotionmiscItemActivityUpdateRequest struct {
	values url.Values
}

func (this *PromotionmiscItemActivityUpdateRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.item.activity.update"
}
func (this *PromotionmiscItemActivityUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscItemActivityUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 活动id。<br /> 支持最小值为：0 */
func (this *PromotionmiscItemActivityUpdateRequest) SetActivityId(value string) {
	this.Set("activity_id", value)
}

/* 减多少钱。当is_decrease_money为true时，该值才有意义。注意：该值单位为分，即100表示1元。<br /> 支持最小值为：0 */
func (this *PromotionmiscItemActivityUpdateRequest) SetDecreaseAmount(value string) {
	this.Set("decrease_amount", value)
}

/* 折扣值。当is_discount为true时，该值才有意义。注意：800表示8折。<br /> 支持最小值为：0 */
func (this *PromotionmiscItemActivityUpdateRequest) SetDiscountRate(value string) {
	this.Set("discount_rate", value)
}

/* 活动结束时间。 */
func (this *PromotionmiscItemActivityUpdateRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 是否有减钱行为。 */
func (this *PromotionmiscItemActivityUpdateRequest) SetIsDecreaseMoney(value string) {
	this.Set("is_decrease_money", value)
}

/* 是否有打折行为。 */
func (this *PromotionmiscItemActivityUpdateRequest) SetIsDiscount(value string) {
	this.Set("is_discount", value)
}

/* 是否指定用户标签。 */
func (this *PromotionmiscItemActivityUpdateRequest) SetIsUserTag(value string) {
	this.Set("is_user_tag", value)
}

/* 活动名称。<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *PromotionmiscItemActivityUpdateRequest) SetName(value string) {
	this.Set("name", value)
}

/* 活动范围：0表示全部参与； 1表示部分商品参与。<br /> 支持最大值为：1<br /> 支持最小值为：0<br /> 支持的最大列表长度为：1 */
func (this *PromotionmiscItemActivityUpdateRequest) SetParticipateRange(value string) {
	this.Set("participate_range", value)
}

/* 活动开始时间。 */
func (this *PromotionmiscItemActivityUpdateRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 用户标签。当is_user_tag为true时，该值才有意义。 */
func (this *PromotionmiscItemActivityUpdateRequest) SetUserTag(value string) {
	this.Set("user_tag", value)
}

type PromotionmiscItemActivityUpdateResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	PromotionmiscItemActivityUpdateResponseResult `json:"promotionmisc_item_activity_update_response"`
}
type PromotionmiscItemActivityUpdateResponseResult struct {
	/* 修改是否成功。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.promotionmisc.mjs.activity.add*/
type PromotionmiscMjsActivityAddRequest struct {
	values url.Values
}

func (this *PromotionmiscMjsActivityAddRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.mjs.activity.add"
}
func (this *PromotionmiscMjsActivityAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscMjsActivityAddRequest) GetValues() url.Values {
	return this.values
}

/* 减多少钱。当is_decrease_money为true时，该值才有意义。注意：该值单位为分，即100表示1元。<br /> 支持最小值为：0 */
func (this *PromotionmiscMjsActivityAddRequest) SetDecreaseAmount(value string) {
	this.Set("decrease_amount", value)
}

/* 折扣值。当is_discount为true时，该值才有意义。注意：800表示8折。<br /> 支持最小值为：0 */
func (this *PromotionmiscMjsActivityAddRequest) SetDiscountRate(value string) {
	this.Set("discount_rate", value)
}

/* 活动结束时间。 */
func (this *PromotionmiscMjsActivityAddRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 免邮的排除地区，即，除指定地区外，其他地区包邮。当is_free_post为true时，该值才有意义。代码使用*链接，代码为行政区划代码。 */
func (this *PromotionmiscMjsActivityAddRequest) SetExcludeArea(value string) {
	this.Set("exclude_area", value)
}

/* 礼品id，当is_send_gift为true时，该值才有意义。 1）只有填写真实的淘宝商品id时，才能生成物流单，并且在确定订单的页面上可以点击该商品名称跳转到商品详情页面。2）当礼物为实物商品时(有宝贝id),礼物必须为上架商品,不能为虚拟商品,不能为拍卖商品,不能有sku,不符合条件的,不做为礼物。 */
func (this *PromotionmiscMjsActivityAddRequest) SetGiftId(value string) {
	this.Set("gift_id", value)
}

/* 礼品名称。当is_send_gift为true时，该值才有意义。<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *PromotionmiscMjsActivityAddRequest) SetGiftName(value string) {
	this.Set("gift_name", value)
}

/* 商品详情的url，当is_send_gift为true时，该值才有效。 */
func (this *PromotionmiscMjsActivityAddRequest) SetGiftUrl(value string) {
	this.Set("gift_url", value)
}

/* 满元是否上不封顶。当is_amount_over为true时，该值才有意义。当该值为true时，表示满元上不封顶，例如满100元减10元，当满200时，则减20元。。。默认为false。 */
func (this *PromotionmiscMjsActivityAddRequest) SetIsAmountMultiple(value string) {
	this.Set("is_amount_multiple", value)
}

/* 是否有满元条件。 */
func (this *PromotionmiscMjsActivityAddRequest) SetIsAmountOver(value string) {
	this.Set("is_amount_over", value)
}

/* 是否有减钱行为。 */
func (this *PromotionmiscMjsActivityAddRequest) SetIsDecreaseMoney(value string) {
	this.Set("is_decrease_money", value)
}

/* 是否有打折行为。 */
func (this *PromotionmiscMjsActivityAddRequest) SetIsDiscount(value string) {
	this.Set("is_discount", value)
}

/* 是否有免邮行为。 */
func (this *PromotionmiscMjsActivityAddRequest) SetIsFreePost(value string) {
	this.Set("is_free_post", value)
}

/* 是否有满件条件。 */
func (this *PromotionmiscMjsActivityAddRequest) SetIsItemCountOver(value string) {
	this.Set("is_item_count_over", value)
}

/* 满件是否上不封顶。当is_amount_multiple为true时，该值才有意义。当该值为true时，表示满件上不封顶，例如满10件减2元，当满20件时，则减4元。。。 默认为false。 */
func (this *PromotionmiscMjsActivityAddRequest) SetIsItemMultiple(value string) {
	this.Set("is_item_multiple", value)
}

/* 是否有送礼品行为。 */
func (this *PromotionmiscMjsActivityAddRequest) SetIsSendGift(value string) {
	this.Set("is_send_gift", value)
}

/* 是否有店铺会员等级条件。 */
func (this *PromotionmiscMjsActivityAddRequest) SetIsShopMember(value string) {
	this.Set("is_shop_member", value)
}

/* 是否指定用户标签。 */
func (this *PromotionmiscMjsActivityAddRequest) SetIsUserTag(value string) {
	this.Set("is_user_tag", value)
}

/* 满多少件。当is_item_count_over为true时，该值才有意义。<br /> 支持最小值为：0 */
func (this *PromotionmiscMjsActivityAddRequest) SetItemCount(value string) {
	this.Set("item_count", value)
}

/* 活动名称。<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *PromotionmiscMjsActivityAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 活动范围：0表示全部参与； 1表示部分商品参与。<br /> 支持最大值为：1<br /> 支持最小值为：0<br /> 支持的最大列表长度为：1 */
func (this *PromotionmiscMjsActivityAddRequest) SetParticipateRange(value string) {
	this.Set("participate_range", value)
}

/* 店铺会员等级，当is_shop_member为true时，该值才有意义。0：店铺客户；1：普通客户；2：高级会员；3：VIP会员； 4：至尊VIP会员。<br /> 支持最大值为：9<br /> 支持最小值为：0 */
func (this *PromotionmiscMjsActivityAddRequest) SetShopMemberLevel(value string) {
	this.Set("shop_member_level", value)
}

/* 活动开始时间。 */
func (this *PromotionmiscMjsActivityAddRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 满多少元。当is_amount_over为true时，该才字段有意义。注意：单位是分，即10000表示100元。<br /> 支持最小值为：0 */
func (this *PromotionmiscMjsActivityAddRequest) SetTotalPrice(value string) {
	this.Set("total_price", value)
}

/* 活动类型： 1表示商品级别的活动；2表示店铺级别的活动<br /> 支持最大值为：2<br /> 支持最小值为：1<br /> 支持的最大列表长度为：1 */
func (this *PromotionmiscMjsActivityAddRequest) SetType(value string) {
	this.Set("type", value)
}

/* 用户标签。当is_user_tag为true时，该值才有意义。 */
func (this *PromotionmiscMjsActivityAddRequest) SetUserTag(value string) {
	this.Set("user_tag", value)
}

type PromotionmiscMjsActivityAddResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	PromotionmiscMjsActivityAddResponseResult `json:"promotionmisc_mjs_activity_add_response"`
}
type PromotionmiscMjsActivityAddResponseResult struct {
	/* 活动id。 */
	ActivityId int64 `json:"activity_id"`
	/* 是否保存成功。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.promotionmisc.mjs.activity.delete*/
type PromotionmiscMjsActivityDeleteRequest struct {
	values url.Values
}

func (this *PromotionmiscMjsActivityDeleteRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.mjs.activity.delete"
}
func (this *PromotionmiscMjsActivityDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscMjsActivityDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 活动id。<br /> 支持最小值为：0 */
func (this *PromotionmiscMjsActivityDeleteRequest) SetActivityId(value string) {
	this.Set("activity_id", value)
}

type PromotionmiscMjsActivityDeleteResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	PromotionmiscMjsActivityDeleteResponseResult `json:"promotionmisc_mjs_activity_delete_response"`
}
type PromotionmiscMjsActivityDeleteResponseResult struct {
	/* 是否成功删除活动。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.promotionmisc.mjs.activity.get*/
type PromotionmiscMjsActivityGetRequest struct {
	values url.Values
}

func (this *PromotionmiscMjsActivityGetRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.mjs.activity.get"
}
func (this *PromotionmiscMjsActivityGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscMjsActivityGetRequest) GetValues() url.Values {
	return this.values
}

/* 活动id。<br /> 支持最小值为：0 */
func (this *PromotionmiscMjsActivityGetRequest) SetActivityId(value string) {
	this.Set("activity_id", value)
}

type PromotionmiscMjsActivityGetResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	PromotionmiscMjsActivityGetResponseResult `json:"promotionmisc_mjs_activity_get_response"`
}
type PromotionmiscMjsActivityGetResponseResult struct {
	/* 满就送活动信息。 */
	MjsPromotion *MjsPromotion `json:"mjs_promotion"`
}

/*taobao.promotionmisc.mjs.activity.list.get*/
type PromotionmiscMjsActivityListGetRequest struct {
	values url.Values
}

func (this *PromotionmiscMjsActivityListGetRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.mjs.activity.list.get"
}
func (this *PromotionmiscMjsActivityListGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscMjsActivityListGetRequest) GetValues() url.Values {
	return this.values
}

/* 活动类型： 1表示商品级别的活动；2表示店铺级别的活动。<br /> 支持最大值为：2<br /> 支持最小值为：1<br /> 支持的最大列表长度为：1 */
func (this *PromotionmiscMjsActivityListGetRequest) SetActivityType(value string) {
	this.Set("activity_type", value)
}

/* 页码。<br /> 支持最小值为：1 */
func (this *PromotionmiscMjsActivityListGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页记录数，最大支持50 。<br /> 支持最小值为：1 */
func (this *PromotionmiscMjsActivityListGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type PromotionmiscMjsActivityListGetResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	PromotionmiscMjsActivityListGetResponseResult `json:"promotionmisc_mjs_activity_list_get_response"`
}
type PromotionmiscMjsActivityListGetResponseResult struct {
	/* 只包含活动的主要信息，如activity_id，aame，description，start_time，end_time，type，participate_range。优惠的其他详细信息，请通过taobao.promotionmisc.mjs.activity.get获取。 */
	MjsPromotionList []*MjsPromotion `json:"mjs_promotion_list"`
	/* 记录总条数。 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.promotionmisc.mjs.activity.update*/
type PromotionmiscMjsActivityUpdateRequest struct {
	values url.Values
}

func (this *PromotionmiscMjsActivityUpdateRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.mjs.activity.update"
}
func (this *PromotionmiscMjsActivityUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscMjsActivityUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 活动id。<br /> 支持最小值为：0 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetActivityId(value string) {
	this.Set("activity_id", value)
}

/* 减多少钱。当is_decrease_money为true时，该值才有意义。注意：该值单位为分，即100表示1元。<br /> 支持最小值为：0 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetDecreaseAmount(value string) {
	this.Set("decrease_amount", value)
}

/* 折扣值。当is_discount为true时，该值才有意义。注意：800表示8折。<br /> 支持最小值为：0 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetDiscountRate(value string) {
	this.Set("discount_rate", value)
}

/* 活动结束时间。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 免邮的排除地区，即，除指定地区外，其他地区包邮。当is_free_post为true时，该值才有意义。代码使用*链接，代码为行政区划代码。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetExcludeArea(value string) {
	this.Set("exclude_area", value)
}

/* 礼品id，当is_send_gift为true时，该值才有意义。 1）只有填写真实的淘宝商品id时，才能生成物流单，并且在确定订单的页面上可以点击该商品名称跳转到商品详情页面。2）当礼物为实物商品时(有宝贝id),礼物必须为上架商品,不能为虚拟商品,不能为拍卖商品,不能有sku,不符合条件的,不做为礼物。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetGiftId(value string) {
	this.Set("gift_id", value)
}

/* 礼品名称。当is_send_gift为true时，该值才有意义。<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetGiftName(value string) {
	this.Set("gift_name", value)
}

/* 商品详情的url，当is_send_gift为true时，该值才有效。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetGiftUrl(value string) {
	this.Set("gift_url", value)
}

/* 满元是否上不封顶。当is_amount_over为true时，该值才有意义。当该值为true时，表示满元上不封顶，例如满100元减10元，当满200时，则减20元。。。默认为false。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetIsAmountMultiple(value string) {
	this.Set("is_amount_multiple", value)
}

/* 是否有满元条件。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetIsAmountOver(value string) {
	this.Set("is_amount_over", value)
}

/* 是否有减钱行为。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetIsDecreaseMoney(value string) {
	this.Set("is_decrease_money", value)
}

/* 是否有打折行为。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetIsDiscount(value string) {
	this.Set("is_discount", value)
}

/* 是否有免邮行为。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetIsFreePost(value string) {
	this.Set("is_free_post", value)
}

/* 是否有满件条件。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetIsItemCountOver(value string) {
	this.Set("is_item_count_over", value)
}

/* 满件是否上不封顶。当is_amount_multiple为true时，该值才有意义。当该值为true时，表示满件上不封顶，例如满10件减2元，当满20件时，则减4元。。。 默认为false。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetIsItemMultiple(value string) {
	this.Set("is_item_multiple", value)
}

/* 是否有送礼品行为。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetIsSendGift(value string) {
	this.Set("is_send_gift", value)
}

/* 是否有店铺会员等级条件。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetIsShopMember(value string) {
	this.Set("is_shop_member", value)
}

/* 是否指定用户标签。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetIsUserTag(value string) {
	this.Set("is_user_tag", value)
}

/* 满多少件。当is_item_count_over为true时，该值才有意义。<br /> 支持最小值为：0 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetItemCount(value string) {
	this.Set("item_count", value)
}

/* 活动名称。<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetName(value string) {
	this.Set("name", value)
}

/* 活动范围：0表示全部参与； 1表示部分商品参与。<br /> 支持最大值为：1<br /> 支持最小值为：0<br /> 支持的最大列表长度为：1 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetParticipateRange(value string) {
	this.Set("participate_range", value)
}

/* 店铺会员等级，当is_shop_member为true时，该值才有意义。0：店铺客户；1：普通客户；2：高级会员；3：VIP会员； 4：至尊VIP会员。<br /> 支持最大值为：9<br /> 支持最小值为：0 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetShopMemberLevel(value string) {
	this.Set("shop_member_level", value)
}

/* 活动开始时间。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 满多少元。当is_amount_over为true时，该才字段有意义。注意：单位是分，即10000表示100元。<br /> 支持最小值为：0 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetTotalPrice(value string) {
	this.Set("total_price", value)
}

/* 用户标签。当is_user_tag为true时，该值才有意义。 */
func (this *PromotionmiscMjsActivityUpdateRequest) SetUserTag(value string) {
	this.Set("user_tag", value)
}

type PromotionmiscMjsActivityUpdateResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	PromotionmiscMjsActivityUpdateResponseResult `json:"promotionmisc_mjs_activity_update_response"`
}
type PromotionmiscMjsActivityUpdateResponseResult struct {
	/* 修改是否成功。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.promotionmisc.tool.check*/
type PromotionmiscToolCheckRequest struct {
	values url.Values
}

func (this *PromotionmiscToolCheckRequest) GetApiMethodName() string {
	return "taobao.promotionmisc.tool.check"
}
func (this *PromotionmiscToolCheckRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PromotionmiscToolCheckRequest) GetValues() url.Values {
	return this.values
}

/* 可使用的元数据。PRD审核后，会告诉isv可使用的元数据。 */
func (this *PromotionmiscToolCheckRequest) SetMetaAllow(value string) {
	this.Set("meta_allow", value)
}

/* 工具ID, taobao.ump.tool.add成功后返回的id。<br /> 支持最小值为：10 */
func (this *PromotionmiscToolCheckRequest) SetToolId(value string) {
	this.Set("tool_id", value)
}

type PromotionmiscToolCheckResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	PromotionmiscToolCheckResponseResult `json:"promotionmisc_tool_check_response"`
}
type PromotionmiscToolCheckResponseResult struct {
	/* 工具审核结果。 */
	CheckToolModule *CheckToolModule `json:"check_tool_module"`
	/* 接口调用错误信息描述。 */
	ErrorMessage string `json:"error_message"`
	/* 工具检测动作是否成功。检测是否通过请查看返回值default_model里的is_pass。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.ump.activities.get*/
type UmpActivitiesGetRequest struct {
	values url.Values
}

func (this *UmpActivitiesGetRequest) GetApiMethodName() string {
	return "taobao.ump.activities.get"
}
func (this *UmpActivitiesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpActivitiesGetRequest) GetValues() url.Values {
	return this.values
}

/* 分页的页码<br /> 支持最小值为：0 */
func (this *UmpActivitiesGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页的最大条数<br /> 支持最大值为：50<br /> 支持最小值为：1 */
func (this *UmpActivitiesGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 工具id */
func (this *UmpActivitiesGetRequest) SetToolId(value string) {
	this.Set("tool_id", value)
}

type UmpActivitiesGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	UmpActivitiesGetResponseResult `json:"ump_activities_get_response"`
}
type UmpActivitiesGetResponseResult struct {
	/* 营销活动内容，可以通过ump sdk来进行处理 */
	Contents []string `json:"contents"`
	/* 记录总数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.ump.activities.list.get*/
type UmpActivitiesListGetRequest struct {
	values url.Values
}

func (this *UmpActivitiesListGetRequest) GetApiMethodName() string {
	return "taobao.ump.activities.list.get"
}
func (this *UmpActivitiesListGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpActivitiesListGetRequest) GetValues() url.Values {
	return this.values
}

/* 营销活动id列表。 */
func (this *UmpActivitiesListGetRequest) SetIds(value string) {
	this.Set("ids", value)
}

type UmpActivitiesListGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	UmpActivitiesListGetResponseResult `json:"ump_activities_list_get_response"`
}
type UmpActivitiesListGetResponseResult struct {
	/* 营销活动列表！ */
	Activities []string `json:"activities"`
}

/*taobao.ump.activity.add*/
type UmpActivityAddRequest struct {
	values url.Values
}

func (this *UmpActivityAddRequest) GetApiMethodName() string {
	return "taobao.ump.activity.add"
}
func (this *UmpActivityAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpActivityAddRequest) GetValues() url.Values {
	return this.values
}

/* 活动内容，通过ump sdk里面的MarkeitngTool来生成 */
func (this *UmpActivityAddRequest) SetContent(value string) {
	this.Set("content", value)
}

/* 工具id */
func (this *UmpActivityAddRequest) SetToolId(value string) {
	this.Set("tool_id", value)
}

type UmpActivityAddResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	UmpActivityAddResponseResult `json:"ump_activity_add_response"`
}
type UmpActivityAddResponseResult struct {
	/* 活动id */
	ActId int64 `json:"act_id"`
}

/*taobao.ump.activity.delete*/
type UmpActivityDeleteRequest struct {
	values url.Values
}

func (this *UmpActivityDeleteRequest) GetApiMethodName() string {
	return "taobao.ump.activity.delete"
}
func (this *UmpActivityDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpActivityDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 活动id */
func (this *UmpActivityDeleteRequest) SetActId(value string) {
	this.Set("act_id", value)
}

type UmpActivityDeleteResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	UmpActivityDeleteResponseResult `json:"ump_activity_delete_response"`
}
type UmpActivityDeleteResponseResult struct {
	/* 调用是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.ump.activity.get*/
type UmpActivityGetRequest struct {
	values url.Values
}

func (this *UmpActivityGetRequest) GetApiMethodName() string {
	return "taobao.ump.activity.get"
}
func (this *UmpActivityGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpActivityGetRequest) GetValues() url.Values {
	return this.values
}

/* 活动id */
func (this *UmpActivityGetRequest) SetActId(value string) {
	this.Set("act_id", value)
}

type UmpActivityGetResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	UmpActivityGetResponseResult `json:"ump_activity_get_response"`
}
type UmpActivityGetResponseResult struct {
	/* 营销活动的内容，可以通过ump sdk中的marketingTool来完成对该内容的处理 */
	Content string `json:"content"`
}

/*taobao.ump.activity.update*/
type UmpActivityUpdateRequest struct {
	values url.Values
}

func (this *UmpActivityUpdateRequest) GetApiMethodName() string {
	return "taobao.ump.activity.update"
}
func (this *UmpActivityUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpActivityUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 活动id */
func (this *UmpActivityUpdateRequest) SetActId(value string) {
	this.Set("act_id", value)
}

/* 营销活动内容，json格式，通过ump sdk 的marketingTool来生成 */
func (this *UmpActivityUpdateRequest) SetContent(value string) {
	this.Set("content", value)
}

type UmpActivityUpdateResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	UmpActivityUpdateResponseResult `json:"ump_activity_update_response"`
}
type UmpActivityUpdateResponseResult struct {
	/* 调用是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.ump.detail.add*/
type UmpDetailAddRequest struct {
	values url.Values
}

func (this *UmpDetailAddRequest) GetApiMethodName() string {
	return "taobao.ump.detail.add"
}
func (this *UmpDetailAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpDetailAddRequest) GetValues() url.Values {
	return this.values
}

/* 增加工具详情 */
func (this *UmpDetailAddRequest) SetActId(value string) {
	this.Set("act_id", value)
}

/* 活动详情内容，json格式，可以通过ump sdk中的MarketingTool来进行处理 */
func (this *UmpDetailAddRequest) SetContent(value string) {
	this.Set("content", value)
}

type UmpDetailAddResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	UmpDetailAddResponseResult `json:"ump_detail_add_response"`
}
type UmpDetailAddResponseResult struct {
	/* 活动详情的id */
	DetailId int64 `json:"detail_id"`
}

/*taobao.ump.detail.delete*/
type UmpDetailDeleteRequest struct {
	values url.Values
}

func (this *UmpDetailDeleteRequest) GetApiMethodName() string {
	return "taobao.ump.detail.delete"
}
func (this *UmpDetailDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpDetailDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 活动详情id */
func (this *UmpDetailDeleteRequest) SetDetailId(value string) {
	this.Set("detail_id", value)
}

type UmpDetailDeleteResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	UmpDetailDeleteResponseResult `json:"ump_detail_delete_response"`
}
type UmpDetailDeleteResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.ump.detail.get*/
type UmpDetailGetRequest struct {
	values url.Values
}

func (this *UmpDetailGetRequest) GetApiMethodName() string {
	return "taobao.ump.detail.get"
}
func (this *UmpDetailGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpDetailGetRequest) GetValues() url.Values {
	return this.values
}

/* 活动详情的id */
func (this *UmpDetailGetRequest) SetDetailId(value string) {
	this.Set("detail_id", value)
}

type UmpDetailGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	UmpDetailGetResponseResult `json:"ump_detail_get_response"`
}
type UmpDetailGetResponseResult struct {
	/* 活动详情信息，可以通过ump sdk中的MarketingTool来进行处理 */
	Content string `json:"content"`
}

/*taobao.ump.detail.list.add*/
type UmpDetailListAddRequest struct {
	values url.Values
}

func (this *UmpDetailListAddRequest) GetApiMethodName() string {
	return "taobao.ump.detail.list.add"
}
func (this *UmpDetailListAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpDetailListAddRequest) GetValues() url.Values {
	return this.values
}

/* 营销活动id。 */
func (this *UmpDetailListAddRequest) SetActId(value string) {
	this.Set("act_id", value)
}

/* 营销详情的列表。此列表由detail的json字符串组成。最多插入为10个。 */
func (this *UmpDetailListAddRequest) SetDetails(value string) {
	this.Set("details", value)
}

type UmpDetailListAddResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	UmpDetailListAddResponseResult `json:"ump_detail_list_add_response"`
}
type UmpDetailListAddResponseResult struct {
	/* 返回对应的营销详情的id列表！若有某一条插入失败，会将插入成功的detail_id放到errorMessage里面返回，此时errorMessage里面会包含格式为(id1,id2,id3)的插入成功id列表。这些ids会对交易产生影响，通过截取此信息，将对应detail删除！ */
	DetailIdList []int64 `json:"detail_id_list"`
}

/*taobao.ump.detail.update*/
type UmpDetailUpdateRequest struct {
	values url.Values
}

func (this *UmpDetailUpdateRequest) GetApiMethodName() string {
	return "taobao.ump.detail.update"
}
func (this *UmpDetailUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpDetailUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 活动详情内容，可以通过ump sdk中的MarketingTool来生成这个内容 */
func (this *UmpDetailUpdateRequest) SetContent(value string) {
	this.Set("content", value)
}

/* 活动详情id */
func (this *UmpDetailUpdateRequest) SetDetailId(value string) {
	this.Set("detail_id", value)
}

type UmpDetailUpdateResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	UmpDetailUpdateResponseResult `json:"ump_detail_update_response"`
}
type UmpDetailUpdateResponseResult struct {
	/* 调用是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.ump.details.get*/
type UmpDetailsGetRequest struct {
	values url.Values
}

func (this *UmpDetailsGetRequest) GetApiMethodName() string {
	return "taobao.ump.details.get"
}
func (this *UmpDetailsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpDetailsGetRequest) GetValues() url.Values {
	return this.values
}

/* 营销活动id */
func (this *UmpDetailsGetRequest) SetActId(value string) {
	this.Set("act_id", value)
}

/* 分页的页码<br /> 支持最小值为：0 */
func (this *UmpDetailsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页的最大条数<br /> 支持最大值为：50<br /> 支持最小值为：1 */
func (this *UmpDetailsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type UmpDetailsGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	UmpDetailsGetResponseResult `json:"ump_details_get_response"`
}
type UmpDetailsGetResponseResult struct {
	/* 活动详情的信息 */
	Contents []string `json:"contents"`
	/* 记录总数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.ump.mbb.getbycode*/
type UmpMbbGetbycodeRequest struct {
	values url.Values
}

func (this *UmpMbbGetbycodeRequest) GetApiMethodName() string {
	return "taobao.ump.mbb.getbycode"
}
func (this *UmpMbbGetbycodeRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpMbbGetbycodeRequest) GetValues() url.Values {
	return this.values
}

/* 营销积木块code */
func (this *UmpMbbGetbycodeRequest) SetCode(value string) {
	this.Set("code", value)
}

type UmpMbbGetbycodeResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	UmpMbbGetbycodeResponseResult `json:"ump_mbb_getbycode_response"`
}
type UmpMbbGetbycodeResponseResult struct {
	/* 营销积木块的内容，通过ump sdk来进行处理 */
	Mbb string `json:"mbb"`
}

/*taobao.ump.mbb.getbyid*/
type UmpMbbGetbyidRequest struct {
	values url.Values
}

func (this *UmpMbbGetbyidRequest) GetApiMethodName() string {
	return "taobao.ump.mbb.getbyid"
}
func (this *UmpMbbGetbyidRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpMbbGetbyidRequest) GetValues() url.Values {
	return this.values
}

/* 积木块的id */
func (this *UmpMbbGetbyidRequest) SetId(value string) {
	this.Set("id", value)
}

type UmpMbbGetbyidResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	UmpMbbGetbyidResponseResult `json:"ump_mbb_getbyid_response"`
}
type UmpMbbGetbyidResponseResult struct {
	/* 营销积木块定义信息，可以通过ump sdk里面的MBB.fromJson来处理 */
	Mbb string `json:"mbb"`
}

/*taobao.ump.mbbs.get*/
type UmpMbbsGetRequest struct {
	values url.Values
}

func (this *UmpMbbsGetRequest) GetApiMethodName() string {
	return "taobao.ump.mbbs.get"
}
func (this *UmpMbbsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpMbbsGetRequest) GetValues() url.Values {
	return this.values
}

/* 积木块类型。如果该字段为空表示查出所有类型的
现在有且仅有如下几种：resource,condition,action,target */
func (this *UmpMbbsGetRequest) SetType(value string) {
	this.Set("type", value)
}

type UmpMbbsGetResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	UmpMbbsGetResponseResult `json:"ump_mbbs_get_response"`
}
type UmpMbbsGetResponseResult struct {
	/* 营销积木块内容列表，内容为json格式的，可以通过ump sdk里面的MBB.fromJson来处理 */
	Mbbs []string `json:"mbbs"`
}

/*taobao.ump.mbbs.list.get*/
type UmpMbbsListGetRequest struct {
	values url.Values
}

func (this *UmpMbbsListGetRequest) GetApiMethodName() string {
	return "taobao.ump.mbbs.list.get"
}
func (this *UmpMbbsListGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpMbbsListGetRequest) GetValues() url.Values {
	return this.values
}

/* 营销积木块id组成的字符串。 */
func (this *UmpMbbsListGetRequest) SetIds(value string) {
	this.Set("ids", value)
}

type UmpMbbsListGetResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	UmpMbbsListGetResponseResult `json:"ump_mbbs_list_get_response"`
}
type UmpMbbsListGetResponseResult struct {
	/* 营销积木块内容列表，内容为json格式的，可以通过ump sdk里面的MBB.fromJson来处理 */
	Mbbs []string `json:"mbbs"`
}

/*taobao.ump.range.add*/
type UmpRangeAddRequest struct {
	values url.Values
}

func (this *UmpRangeAddRequest) GetApiMethodName() string {
	return "taobao.ump.range.add"
}
func (this *UmpRangeAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpRangeAddRequest) GetValues() url.Values {
	return this.values
}

/* 活动id */
func (this *UmpRangeAddRequest) SetActId(value string) {
	this.Set("act_id", value)
}

/* id列表，当范围类型为商品时，该id为商品id；当范围类型为类目时，该id为类目id.多个id用逗号隔开，一次不超过50个 */
func (this *UmpRangeAddRequest) SetIds(value string) {
	this.Set("ids", value)
}

/* 范围的类型，比如是全店，商品，类目
见：MarketingConstants.PARTICIPATE_TYPE_* */
func (this *UmpRangeAddRequest) SetType(value string) {
	this.Set("type", value)
}

type UmpRangeAddResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	UmpRangeAddResponseResult `json:"ump_range_add_response"`
}
type UmpRangeAddResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.ump.range.delete*/
type UmpRangeDeleteRequest struct {
	values url.Values
}

func (this *UmpRangeDeleteRequest) GetApiMethodName() string {
	return "taobao.ump.range.delete"
}
func (this *UmpRangeDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpRangeDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 活动id */
func (this *UmpRangeDeleteRequest) SetActId(value string) {
	this.Set("act_id", value)
}

/* id列表，当范围类型为商品时，该id为商品id；当范围类型为类目时，该id为类目id */
func (this *UmpRangeDeleteRequest) SetIds(value string) {
	this.Set("ids", value)
}

/* 范围的类型，比如是全店，商品，类目见：MarketingConstants.PARTICIPATE_TYPE_* */
func (this *UmpRangeDeleteRequest) SetType(value string) {
	this.Set("type", value)
}

type UmpRangeDeleteResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	UmpRangeDeleteResponseResult `json:"ump_range_delete_response"`
}
type UmpRangeDeleteResponseResult struct {
	/* 调用是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.ump.range.get*/
type UmpRangeGetRequest struct {
	values url.Values
}

func (this *UmpRangeGetRequest) GetApiMethodName() string {
	return "taobao.ump.range.get"
}
func (this *UmpRangeGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpRangeGetRequest) GetValues() url.Values {
	return this.values
}

/* 活动id */
func (this *UmpRangeGetRequest) SetActId(value string) {
	this.Set("act_id", value)
}

type UmpRangeGetResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	UmpRangeGetResponseResult `json:"ump_range_get_response"`
}
type UmpRangeGetResponseResult struct {
	/* 营销范围类列表！ */
	Ranges []*Range `json:"ranges"`
}

/*taobao.ump.tool.add*/
type UmpToolAddRequest struct {
	values url.Values
}

func (this *UmpToolAddRequest) GetApiMethodName() string {
	return "taobao.ump.tool.add"
}
func (this *UmpToolAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpToolAddRequest) GetValues() url.Values {
	return this.values
}

/* 工具内容，由sdk里面的MarketingTool生成的json字符串 */
func (this *UmpToolAddRequest) SetContent(value string) {
	this.Set("content", value)
}

type UmpToolAddResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	UmpToolAddResponseResult `json:"ump_tool_add_response"`
}
type UmpToolAddResponseResult struct {
	/* 工具id */
	ToolId int64 `json:"tool_id"`
}

/*taobao.ump.tool.delete*/
type UmpToolDeleteRequest struct {
	values url.Values
}

func (this *UmpToolDeleteRequest) GetApiMethodName() string {
	return "taobao.ump.tool.delete"
}
func (this *UmpToolDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpToolDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 营销工具id */
func (this *UmpToolDeleteRequest) SetToolId(value string) {
	this.Set("tool_id", value)
}

type UmpToolDeleteResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	UmpToolDeleteResponseResult `json:"ump_tool_delete_response"`
}
type UmpToolDeleteResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.ump.tool.get*/
type UmpToolGetRequest struct {
	values url.Values
}

func (this *UmpToolGetRequest) GetApiMethodName() string {
	return "taobao.ump.tool.get"
}
func (this *UmpToolGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpToolGetRequest) GetValues() url.Values {
	return this.values
}

/* 工具的id */
func (this *UmpToolGetRequest) SetToolId(value string) {
	this.Set("tool_id", value)
}

type UmpToolGetResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	UmpToolGetResponseResult `json:"ump_tool_get_response"`
}
type UmpToolGetResponseResult struct {
	/* 工具信息内容，格式为json，可以通过提供给的sdk里面的MarketingBuilder来处理这个内容 */
	Content string `json:"content"`
}

/*taobao.ump.tool.update*/
type UmpToolUpdateRequest struct {
	values url.Values
}

func (this *UmpToolUpdateRequest) GetApiMethodName() string {
	return "taobao.ump.tool.update"
}
func (this *UmpToolUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpToolUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 工具的内容，由sdk的marketingBuilder生成 */
func (this *UmpToolUpdateRequest) SetContent(value string) {
	this.Set("content", value)
}

/* 工具id */
func (this *UmpToolUpdateRequest) SetToolId(value string) {
	this.Set("tool_id", value)
}

type UmpToolUpdateResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	UmpToolUpdateResponseResult `json:"ump_tool_update_response"`
}
type UmpToolUpdateResponseResult struct {
	/* 更新后生成的新的工具id */
	ToolId int64 `json:"tool_id"`
}

/*taobao.ump.tools.get*/
type UmpToolsGetRequest struct {
	values url.Values
}

func (this *UmpToolsGetRequest) GetApiMethodName() string {
	return "taobao.ump.tools.get"
}
func (this *UmpToolsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UmpToolsGetRequest) GetValues() url.Values {
	return this.values
}

/* 工具编码 */
func (this *UmpToolsGetRequest) SetToolCode(value string) {
	this.Set("tool_code", value)
}

type UmpToolsGetResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	UmpToolsGetResponseResult `json:"ump_tools_get_response"`
}
type UmpToolsGetResponseResult struct {
	/* 工具列表，单个内容为json格式，需要通过ump的sdk提供的MarketingBuilder来进行处理 */
	Tools []string `json:"tools"`
}

/*taobao.upp.seller.pointrecord.get*/
type UppSellerPointrecordGetRequest struct {
	values url.Values
}

func (this *UppSellerPointrecordGetRequest) GetApiMethodName() string {
	return "taobao.upp.seller.pointrecord.get"
}
func (this *UppSellerPointrecordGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UppSellerPointrecordGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询的页数 */
func (this *UppSellerPointrecordGetRequest) SetCurrentPage(value string) {
	this.Set("current_page", value)
}

/* 每页记录数，最大30条，默认20<br /> 支持最大值为：30<br /> 支持最小值为：1 */
func (this *UppSellerPointrecordGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 记录状态 1成功 0冻结  -1失败 */
func (this *UppSellerPointrecordGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* upp内部业务ID，由预扣或预发积分接口返回，ISV可以直接使用，或映射自己的业务ID。<br /> 支持的最大列表长度为：32 */
func (this *UppSellerPointrecordGetRequest) SetTransactionId(value string) {
	this.Set("transaction_id", value)
}

/* 业务发生的开始时间 */
func (this *UppSellerPointrecordGetRequest) SetTransactionTimeBegin(value string) {
	this.Set("transaction_time_begin", value)
}

/* 业务发生的结束时间 */
func (this *UppSellerPointrecordGetRequest) SetTransactionTimeEnd(value string) {
	this.Set("transaction_time_end", value)
}

/* 卖家积分活动的类型
3：发送积分
4：扣减积分<br /> 支持的最大列表长度为：1 */
func (this *UppSellerPointrecordGetRequest) SetType(value string) {
	this.Set("type", value)
}

type UppSellerPointrecordGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	UppSellerPointrecordGetResponseResult `json:"upp_seller_pointrecord_get_response"`
}
type UppSellerPointrecordGetResponseResult struct {
	/* 是否调用成功 */
	IsSuccess bool `json:"is_success"`
	/* 卖家积分明细记录列表 */
	SellerPointRecordList []*SellerPointRecordModule `json:"seller_point_record_list"`
	/* 记录总数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.upp.shoppoint.deduct*/
type UppShoppointDeductRequest struct {
	values url.Values
}

func (this *UppShoppointDeductRequest) GetApiMethodName() string {
	return "taobao.upp.shoppoint.deduct"
}
func (this *UppShoppointDeductRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UppShoppointDeductRequest) GetValues() url.Values {
	return this.values
}

/* 处理的店铺积分数量 */
func (this *UppShoppointDeductRequest) SetPointNum(value string) {
	this.Set("point_num", value)
}

/* 卖家NICK */
func (this *UppShoppointDeductRequest) SetSellerNick(value string) {
	this.Set("seller_nick", value)
}

/* 用于实际扣减的时候关联系统发放记录，由预扣减接口返回<br /> 支持的最大列表长度为：32 */
func (this *UppShoppointDeductRequest) SetTransactionId(value string) {
	this.Set("transaction_id", value)
}

/* 6:业务成功
4:业务失败<br /> 支持的最大列表长度为：1 */
func (this *UppShoppointDeductRequest) SetTransactionStatus(value string) {
	this.Set("transaction_status", value)
}

/* 业务发生的时间 */
func (this *UppShoppointDeductRequest) SetTransactionTime(value string) {
	this.Set("transaction_time", value)
}

type UppShoppointDeductResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	UppShoppointDeductResponseResult `json:"upp_shoppoint_deduct_response"`
}
type UppShoppointDeductResponseResult struct {
	/* 是否调用成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.upp.shoppoint.prededuct*/
type UppShoppointPredeductRequest struct {
	values url.Values
}

func (this *UppShoppointPredeductRequest) GetApiMethodName() string {
	return "taobao.upp.shoppoint.prededuct"
}
func (this *UppShoppointPredeductRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UppShoppointPredeductRequest) GetValues() url.Values {
	return this.values
}

/* 业务扩展信息 ，用于ISV描述积分记录的具体业务信息。
禁止含有“:”或“;”或“~”禁用字符 或者淘宝违禁词库中的其他字符。<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *UppShoppointPredeductRequest) SetBusinessInfo(value string) {
	this.Set("business_info", value)
}

/* 处理的店铺积分数量 */
func (this *UppShoppointPredeductRequest) SetPointNum(value string) {
	this.Set("point_num", value)
}

/* 卖家家nick */
func (this *UppShoppointPredeductRequest) SetSellerNick(value string) {
	this.Set("seller_nick", value)
}

/* 业务发生的时间 */
func (this *UppShoppointPredeductRequest) SetTransactionTime(value string) {
	this.Set("transaction_time", value)
}

type UppShoppointPredeductResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	UppShoppointPredeductResponseResult `json:"upp_shoppoint_prededuct_response"`
}
type UppShoppointPredeductResponseResult struct {
	/* 是否调用成功 */
	IsSuccess bool `json:"is_success"`
	/* 用于实际扣减的时候关联系统扣减记录,需要调用方保存。 */
	TransactionId int64 `json:"transaction_id"`
}

/*taobao.upp.shoppoint.presend*/
type UppShoppointPresendRequest struct {
	values url.Values
}

func (this *UppShoppointPresendRequest) GetApiMethodName() string {
	return "taobao.upp.shoppoint.presend"
}
func (this *UppShoppointPresendRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UppShoppointPresendRequest) GetValues() url.Values {
	return this.values
}

/* 业务扩展信息 ，用于ISV描述积分记录的具体业务信息。
禁止含有“:”或“;”或“~”禁用字符 或者淘宝违禁词库中的其他字符。<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *UppShoppointPresendRequest) SetBusinessInfo(value string) {
	this.Set("business_info", value)
}

/* 买家nick */
func (this *UppShoppointPresendRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 处理的店铺积分数量 */
func (this *UppShoppointPresendRequest) SetPointNum(value string) {
	this.Set("point_num", value)
}

/* 业务发生的时间 */
func (this *UppShoppointPresendRequest) SetTransactionTime(value string) {
	this.Set("transaction_time", value)
}

type UppShoppointPresendResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	UppShoppointPresendResponseResult `json:"upp_shoppoint_presend_response"`
}
type UppShoppointPresendResponseResult struct {
	/* 是否调用成功 */
	IsSuccess bool `json:"is_success"`
	/* 用于实际发放的时候关联系统发放记录,需要调用方保存 */
	TransactionId int64 `json:"transaction_id"`
}

/*taobao.upp.shoppoint.send*/
type UppShoppointSendRequest struct {
	values url.Values
}

func (this *UppShoppointSendRequest) GetApiMethodName() string {
	return "taobao.upp.shoppoint.send"
}
func (this *UppShoppointSendRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UppShoppointSendRequest) GetValues() url.Values {
	return this.values
}

/* 买家nick */
func (this *UppShoppointSendRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 处理的店铺积分数量 */
func (this *UppShoppointSendRequest) SetPointNum(value string) {
	this.Set("point_num", value)
}

/* 用于实际发放的时候关联系统发放记录，由预发放接口返回<br /> 支持的最大列表长度为：32 */
func (this *UppShoppointSendRequest) SetTransactionId(value string) {
	this.Set("transaction_id", value)
}

/* 6:业务成功
4:业务失败<br /> 支持的最大列表长度为：1 */
func (this *UppShoppointSendRequest) SetTransactionStatus(value string) {
	this.Set("transaction_status", value)
}

/* 业务发生的时间 */
func (this *UppShoppointSendRequest) SetTransactionTime(value string) {
	this.Set("transaction_time", value)
}

type UppShoppointSendResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	UppShoppointSendResponseResult `json:"upp_shoppoint_send_response"`
}
type UppShoppointSendResponseResult struct {
	/* 是否调用成功 */
	IsSuccess bool `json:"is_success"`
}

/*tmall.promotag.tag.apply*/
type TmallPromotagTagApplyRequest struct {
	values url.Values
}

func (this *TmallPromotagTagApplyRequest) GetApiMethodName() string {
	return "tmall.promotag.tag.apply"
}
func (this *TmallPromotagTagApplyRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallPromotagTagApplyRequest) GetValues() url.Values {
	return this.values
}

/* 标签结束时间 */
func (this *TmallPromotagTagApplyRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 标签开始时间 */
func (this *TmallPromotagTagApplyRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 标签用途描述 */
func (this *TmallPromotagTagApplyRequest) SetTagDesc(value string) {
	this.Set("tag_desc", value)
}

/* 标签名称。
注意在UMP中使用新人群标签top变成大写的“NEW_” 如：老标签是top1234，新标签是NEW_1234 。 */
func (this *TmallPromotagTagApplyRequest) SetTagName(value string) {
	this.Set("tag_name", value)
}

type TmallPromotagTagApplyResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	TmallPromotagTagApplyResponseResult `json:"tmall_promotag_tag_apply_response"`
}
type TmallPromotagTagApplyResponseResult struct {
	/* 是否设置成功 */
	IsSuccess bool `json:"is_success"`
	/* 优惠标签ID */
	TagId int64 `json:"tag_id"`
}

/*tmall.promotag.tag.find*/
type TmallPromotagTagFindRequest struct {
	values url.Values
}

func (this *TmallPromotagTagFindRequest) GetApiMethodName() string {
	return "tmall.promotag.tag.find"
}
func (this *TmallPromotagTagFindRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallPromotagTagFindRequest) GetValues() url.Values {
	return this.values
}

/* 当前页码<br /> 支持的最大列表长度为：10 */
func (this *TmallPromotagTagFindRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页显示个数<br /> 支持最大值为：100<br /> 支持最小值为：1<br /> 支持的最大列表长度为：100 */
func (this *TmallPromotagTagFindRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 标签ID */
func (this *TmallPromotagTagFindRequest) SetTagId(value string) {
	this.Set("tag_id", value)
}

/* 标签名称，查询时可选项 */
func (this *TmallPromotagTagFindRequest) SetTagName(value string) {
	this.Set("tag_name", value)
}

type TmallPromotagTagFindResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	TmallPromotagTagFindResponseResult `json:"tmall_promotag_tag_find_response"`
}
type TmallPromotagTagFindResponseResult struct {
	/* 查询结果类型 */
	QueryResult *PromotionTagQuery `json:"query_result"`
}

/*tmall.promotag.tag.removetag*/
type TmallPromotagTagRemovetagRequest struct {
	values url.Values
}

func (this *TmallPromotagTagRemovetagRequest) GetApiMethodName() string {
	return "tmall.promotag.tag.removetag"
}
func (this *TmallPromotagTagRemovetagRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallPromotagTagRemovetagRequest) GetValues() url.Values {
	return this.values
}

/* 需要删除的标签id */
func (this *TmallPromotagTagRemovetagRequest) SetTagId(value string) {
	this.Set("tag_id", value)
}

type TmallPromotagTagRemovetagResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	TmallPromotagTagRemovetagResponseResult `json:"tmall_promotag_tag_removetag_response"`
}
type TmallPromotagTagRemovetagResponseResult struct {
	/* 删除操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*tmall.promotag.taguser.judge*/
type TmallPromotagTaguserJudgeRequest struct {
	values url.Values
}

func (this *TmallPromotagTaguserJudgeRequest) GetApiMethodName() string {
	return "tmall.promotag.taguser.judge"
}
func (this *TmallPromotagTaguserJudgeRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallPromotagTaguserJudgeRequest) GetValues() url.Values {
	return this.values
}

/* 买家昵称 */
func (this *TmallPromotagTaguserJudgeRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 标签ID */
func (this *TmallPromotagTaguserJudgeRequest) SetTagId(value string) {
	this.Set("tag_id", value)
}

type TmallPromotagTaguserJudgeResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	TmallPromotagTaguserJudgeResponseResult `json:"tmall_promotag_taguser_judge_response"`
}
type TmallPromotagTaguserJudgeResponseResult struct {
	/* 用户是否有标签 */
	HasTag bool `json:"has_tag"`
	/* 服务调用是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*tmall.promotag.taguser.remove*/
type TmallPromotagTaguserRemoveRequest struct {
	values url.Values
}

func (this *TmallPromotagTaguserRemoveRequest) GetApiMethodName() string {
	return "tmall.promotag.taguser.remove"
}
func (this *TmallPromotagTaguserRemoveRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallPromotagTaguserRemoveRequest) GetValues() url.Values {
	return this.values
}

/* 买家昵称 */
func (this *TmallPromotagTaguserRemoveRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 标签ID */
func (this *TmallPromotagTaguserRemoveRequest) SetTagId(value string) {
	this.Set("tag_id", value)
}

type TmallPromotagTaguserRemoveResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	TmallPromotagTaguserRemoveResponseResult `json:"tmall_promotag_taguser_remove_response"`
}
type TmallPromotagTaguserRemoveResponseResult struct {
	/* 打标结果是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*tmall.promotag.taguser.save*/
type TmallPromotagTaguserSaveRequest struct {
	values url.Values
}

func (this *TmallPromotagTaguserSaveRequest) GetApiMethodName() string {
	return "tmall.promotag.taguser.save"
}
func (this *TmallPromotagTaguserSaveRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallPromotagTaguserSaveRequest) GetValues() url.Values {
	return this.values
}

/* 买家昵称 */
func (this *TmallPromotagTaguserSaveRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 标签ID */
func (this *TmallPromotagTaguserSaveRequest) SetTagId(value string) {
	this.Set("tag_id", value)
}

type TmallPromotagTaguserSaveResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	TmallPromotagTaguserSaveResponseResult `json:"tmall_promotag_taguser_save_response"`
}
type TmallPromotagTaguserSaveResponseResult struct {
	/* 打标结果是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.hotel.add*/
type HotelAddRequest struct {
	values url.Values
}

func (this *HotelAddRequest) GetApiMethodName() string {
	return "taobao.hotel.add"
}
func (this *HotelAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelAddRequest) GetValues() url.Values {
	return this.values
}

/* 酒店地址。长度不能超过120<br /> 支持最大长度为：120<br /> 支持的最大列表长度为：120 */
func (this *HotelAddRequest) SetAddress(value string) {
	this.Set("address", value)
}

/* 城市编码。参见：http://kezhan.trip.taobao.com/area.html，domestic为false时，输入对应国家的海外城市编码，可调用海外城市查询接口获取<br /> 支持最大值为：999999<br /> 支持最小值为：0<br /> 支持的最大列表长度为：6 */
func (this *HotelAddRequest) SetCity(value string) {
	this.Set("city", value)
}

/* domestic为true时，固定China；
domestic为false时，必须传定义的海外国家编码值。参见：http://kezhan.trip.taobao.com/countrys.html */
func (this *HotelAddRequest) SetCountry(value string) {
	this.Set("country", value)
}

/* 装修年份。长度不能超过4。<br /> 支持最大长度为：4<br /> 支持的最大列表长度为：4 */
func (this *HotelAddRequest) SetDecorateTime(value string) {
	this.Set("decorate_time", value)
}

/* 酒店介绍。不超过25000个汉字<br /> 支持最大长度为：50000<br /> 支持的最大列表长度为：50000 */
func (this *HotelAddRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 区域（县级市）编码。参见：http://kezhan.trip.taobao.com/area.html<br /> 支持最大值为：999999<br /> 支持最小值为：0<br /> 支持的最大列表长度为：6 */
func (this *HotelAddRequest) SetDistrict(value string) {
	this.Set("district", value)
}

/* 是否国内酒店。可选值：true，false */
func (this *HotelAddRequest) SetDomestic(value string) {
	this.Set("domestic", value)
}

/* 酒店级别。可选值：A,B,C,D,E,F。代表客栈公寓、经济连锁、二星级/以下、三星级/舒适、四星级/高档、五星级/豪华<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelAddRequest) SetLevel(value string) {
	this.Set("level", value)
}

/* 酒店名称。不能超过60<br /> 支持最大长度为：60<br /> 支持的最大列表长度为：60 */
func (this *HotelAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 开业年份。长度不能超过4。<br /> 支持最大长度为：4<br /> 支持的最大列表长度为：4 */
func (this *HotelAddRequest) SetOpeningTime(value string) {
	this.Set("opening_time", value)
}

/* 酒店定位。可选值：T,B。代表旅游度假、商务出行<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelAddRequest) SetOrientation(value string) {
	this.Set("orientation", value)
}

/* 酒店图片。最大长度:500K。支持的文件类型：gif,jpg,png<br /> 支持的文件类型为：jpg,png,gif<br /> 支持的最大列表长度为：512000 */
func (this *HotelAddRequest) SetPic(value string) {
	this.Set("pic", value)
}

/* 省份编码。参见：http://kezhan.trip.taobao.com/area.html，domestic为false时默认为0<br /> 支持最大值为：999999<br /> 支持最小值为：0<br /> 支持的最大列表长度为：6 */
func (this *HotelAddRequest) SetProvince(value string) {
	this.Set("province", value)
}

/* 房间数。长度不能超过4。<br /> 支持最大值为：9999<br /> 支持最小值为：0<br /> 支持的最大列表长度为：4 */
func (this *HotelAddRequest) SetRooms(value string) {
	this.Set("rooms", value)
}

/* 交通距离与设施服务。JSON格式。cityCenterDistance、railwayDistance、airportDistance分别代表距离市中心、距离火车站、距离机场公里数，为不超过3位正整数，默认-1代表无数据。
其他key值true代表有此服务，false代表没有。
parking：停车场，airportShuttle：机场接送，rentCar：租车，meetingRoom：会议室，businessCenter：商务中心，swimmingPool：游泳池，fitnessClub：健身中心，laundry：洗衣服务，morningCall：叫早服务，bankCard：接受银行卡，creditCard：接受信用卡，chineseRestaurant：中餐厅，westernRestaurant：西餐厅，cafe：咖啡厅，bar：酒吧，ktv：KTV。 */
func (this *HotelAddRequest) SetService(value string) {
	this.Set("service", value)
}

/* 接入卖家数据主键<br /> 支持最大长度为：100<br /> 支持的最大列表长度为：100 */
func (this *HotelAddRequest) SetSiteParam(value string) {
	this.Set("site_param", value)
}

/* 楼层数。长度不能超过4。<br /> 支持最大值为：9999<br /> 支持最小值为：0<br /> 支持的最大列表长度为：4 */
func (this *HotelAddRequest) SetStoreys(value string) {
	this.Set("storeys", value)
}

/* 酒店电话。格式：国家代码（最长6位）#区号（最长4位）#电话（最长20位）。国家代码提示：中国大陆0086、香港00852、澳门00853、台湾00886<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *HotelAddRequest) SetTel(value string) {
	this.Set("tel", value)
}

type HotelAddResponse struct {
	*ErrorResponse         `json:"error_response,omitempty"`
	HotelAddResponseResult `json:"hotel_add_response"`
}
type HotelAddResponseResult struct {
	/* 酒店结构 */
	Hotel *Hotel `json:"hotel"`
}

/*taobao.hotel.city.get*/
type HotelCityGetRequest struct {
	values url.Values
}

func (this *HotelCityGetRequest) GetApiMethodName() string {
	return "taobao.hotel.city.get"
}
func (this *HotelCityGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelCityGetRequest) GetValues() url.Values {
	return this.values
}

/* 国家编码 */
func (this *HotelCityGetRequest) SetCountry(value string) {
	this.Set("country", value)
}

type HotelCityGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	HotelCityGetResponseResult `json:"hotel_city_get_response"`
}
type HotelCityGetResponseResult struct {
	/* 返回结果 */
	Result string `json:"result"`
}

/*taobao.hotel.get*/
type HotelGetRequest struct {
	values url.Values
}

func (this *HotelGetRequest) GetApiMethodName() string {
	return "taobao.hotel.get"
}
func (this *HotelGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelGetRequest) GetValues() url.Values {
	return this.values
}

/* true表示查询酒店审核状态，false表示查询已审核通过酒店详细信息 */
func (this *HotelGetRequest) SetCheckAudit(value string) {
	this.Set("check_audit", value)
}

/* 要查询的酒店id。必须为数字 */
func (this *HotelGetRequest) SetHid(value string) {
	this.Set("hid", value)
}

/* 是否需要返回该酒店的房型列表。可选值：true，false。 */
func (this *HotelGetRequest) SetNeedRoomType(value string) {
	this.Set("need_room_type", value)
}

type HotelGetResponse struct {
	*ErrorResponse         `json:"error_response,omitempty"`
	HotelGetResponseResult `json:"hotel_get_response"`
}
type HotelGetResponseResult struct {
	/* 酒店结构 */
	Hotel *Hotel `json:"hotel"`
}

/*taobao.hotel.image.upload*/
type HotelImageUploadRequest struct {
	values url.Values
}

func (this *HotelImageUploadRequest) GetApiMethodName() string {
	return "taobao.hotel.image.upload"
}
func (this *HotelImageUploadRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelImageUploadRequest) GetValues() url.Values {
	return this.values
}

/* 酒店id<br /> 支持的最大列表长度为：20 */
func (this *HotelImageUploadRequest) SetHid(value string) {
	this.Set("hid", value)
}

/* 上传的图片<br /> 支持的文件类型为：jpg,png,gif<br /> 支持的最大列表长度为：512000 */
func (this *HotelImageUploadRequest) SetPic(value string) {
	this.Set("pic", value)
}

type HotelImageUploadResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	HotelImageUploadResponseResult `json:"hotel_image_upload_response"`
}
type HotelImageUploadResponseResult struct {
	/* 酒店图片 */
	HotelImage *HotelImage `json:"hotel_image"`
}

/*taobao.hotel.match.feedback*/
type HotelMatchFeedbackRequest struct {
	values url.Values
}

func (this *HotelMatchFeedbackRequest) GetApiMethodName() string {
	return "taobao.hotel.match.feedback"
}
func (this *HotelMatchFeedbackRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelMatchFeedbackRequest) GetValues() url.Values {
	return this.values
}

/* 需进行匹配的酒店id<br /> 支持最小值为：1 */
func (this *HotelMatchFeedbackRequest) SetHaid(value string) {
	this.Set("haid", value)
}

/* 匹配命中的酒店id<br /> 支持最小值为：0 */
func (this *HotelMatchFeedbackRequest) SetHid(value string) {
	this.Set("hid", value)
}

/* 匹配结果 0:未匹配，1:匹配<br /> 支持最大值为：1<br /> 支持最小值为：0 */
func (this *HotelMatchFeedbackRequest) SetMatchResult(value string) {
	this.Set("match_result", value)
}

type HotelMatchFeedbackResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	HotelMatchFeedbackResponseResult `json:"hotel_match_feedback_response"`
}
type HotelMatchFeedbackResponseResult struct {
	/* 结果回传是否成功 */
	Succ bool `json:"succ"`
}

/*taobao.hotel.name.get*/
type HotelNameGetRequest struct {
	values url.Values
}

func (this *HotelNameGetRequest) GetApiMethodName() string {
	return "taobao.hotel.name.get"
}
func (this *HotelNameGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelNameGetRequest) GetValues() url.Values {
	return this.values
}

/* 城市编码。参见：http://kezhan.trip.taobao.com/area.html。
domestic为true时，province,city,district不能同时为空或为0<br /> 支持的最大列表长度为：6 */
func (this *HotelNameGetRequest) SetCity(value string) {
	this.Set("city", value)
}

/* domestic为true时，固定China；
domestic为false时，必须传定义的海外国家编码值，是必填项。参见：http://kezhan.trip.taobao.com/countrys.html */
func (this *HotelNameGetRequest) SetCountry(value string) {
	this.Set("country", value)
}

/* 区域（县级市）编码。参见：http://kezhan.trip.taobao.com/area.html。
domestic为true时，province,city,district不能同时为空或为0<br /> 支持的最大列表长度为：6 */
func (this *HotelNameGetRequest) SetDistrict(value string) {
	this.Set("district", value)
}

/* 是否国内酒店。可选值：true，false */
func (this *HotelNameGetRequest) SetDomestic(value string) {
	this.Set("domestic", value)
}

/* 酒店全部名称/别名。不能超过60字节<br /> 支持最大长度为：60<br /> 支持的最大列表长度为：60 */
func (this *HotelNameGetRequest) SetName(value string) {
	this.Set("name", value)
}

/* 省份编码。参见：http://kezhan.trip.taobao.com/area.html。
domestic为true时，province,city,district不能同时为空或为0<br /> 支持的最大列表长度为：6 */
func (this *HotelNameGetRequest) SetProvince(value string) {
	this.Set("province", value)
}

type HotelNameGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	HotelNameGetResponseResult `json:"hotel_name_get_response"`
}
type HotelNameGetResponseResult struct {
	/* 酒店结构 */
	Hotel *Hotel `json:"hotel"`
}

/*taobao.hotel.order.face.check*/
type HotelOrderFaceCheckRequest struct {
	values url.Values
}

func (this *HotelOrderFaceCheckRequest) GetApiMethodName() string {
	return "taobao.hotel.order.face.check"
}
func (this *HotelOrderFaceCheckRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelOrderFaceCheckRequest) GetValues() url.Values {
	return this.values
}

/* 核实已入住或者未入住，true：已入住，false：未入住 */
func (this *HotelOrderFaceCheckRequest) SetChecked(value string) {
	this.Set("checked", value)
}

/* 实际入住时间 */
func (this *HotelOrderFaceCheckRequest) SetCheckinDate(value string) {
	this.Set("checkin_date", value)
}

/* 实际离店时间 */
func (this *HotelOrderFaceCheckRequest) SetCheckoutDate(value string) {
	this.Set("checkout_date", value)
}

/* 酒店订单id */
func (this *HotelOrderFaceCheckRequest) SetOid(value string) {
	this.Set("oid", value)
}

type HotelOrderFaceCheckResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	HotelOrderFaceCheckResponseResult `json:"hotel_order_face_check_response"`
}
type HotelOrderFaceCheckResponseResult struct {
	/* 处理结果 */
	Result string `json:"result"`
}

/*taobao.hotel.order.face.deal*/
type HotelOrderFaceDealRequest struct {
	values url.Values
}

func (this *HotelOrderFaceDealRequest) GetApiMethodName() string {
	return "taobao.hotel.order.face.deal"
}
func (this *HotelOrderFaceDealRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelOrderFaceDealRequest) GetValues() url.Values {
	return this.values
}

/* 酒店订单oid */
func (this *HotelOrderFaceDealRequest) SetOid(value string) {
	this.Set("oid", value)
}

/* 操作类型，1：确认预订，2：取消订单<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelOrderFaceDealRequest) SetOperType(value string) {
	this.Set("oper_type", value)
}

/* 取消订单时的取消原因备注信息<br /> 支持最大长度为：500<br /> 支持的最大列表长度为：500 */
func (this *HotelOrderFaceDealRequest) SetReasonText(value string) {
	this.Set("reason_text", value)
}

/* 取消订单时的取消原因，可选值：1,2,3,4；
1：无房，2：价格变动，3：买家原因，4：其它原因<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelOrderFaceDealRequest) SetReasonType(value string) {
	this.Set("reason_type", value)
}

type HotelOrderFaceDealResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	HotelOrderFaceDealResponseResult `json:"hotel_order_face_deal_response"`
}
type HotelOrderFaceDealResponseResult struct {
	/* 处理结果 */
	Result string `json:"result"`
}

/*taobao.hotel.order.get*/
type HotelOrderGetRequest struct {
	values url.Values
}

func (this *HotelOrderGetRequest) GetApiMethodName() string {
	return "taobao.hotel.order.get"
}
func (this *HotelOrderGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelOrderGetRequest) GetValues() url.Values {
	return this.values
}

/* 是否需要返回该订单的入住人列表。可选值：true，false。 */
func (this *HotelOrderGetRequest) SetNeedGuest(value string) {
	this.Set("need_guest", value)
}

/* 是否显示买家留言，可选值true、false */
func (this *HotelOrderGetRequest) SetNeedMessage(value string) {
	this.Set("need_message", value)
}

/* 酒店订单oid，必须为数字。oid，tid必须传一项，同时传递的情况下，作为查询条件的优先级由高到低依次为oid，tid。 */
func (this *HotelOrderGetRequest) SetOid(value string) {
	this.Set("oid", value)
}

/* 淘宝订单tid，必须为数字。oid，tid必须传一项，同时传递的情况下，作为查询条件的优先级由高到低依次为oid，tid。 */
func (this *HotelOrderGetRequest) SetTid(value string) {
	this.Set("tid", value)
}

type HotelOrderGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	HotelOrderGetResponseResult `json:"hotel_order_get_response"`
}
type HotelOrderGetResponseResult struct {
	/* 订单结构，是否返回入住人列表根据参数决定 */
	HotelOrder *HotelOrder `json:"hotel_order"`
}

/*taobao.hotel.orders.search*/
type HotelOrdersSearchRequest struct {
	values url.Values
}

func (this *HotelOrdersSearchRequest) GetApiMethodName() string {
	return "taobao.hotel.orders.search"
}
func (this *HotelOrdersSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelOrdersSearchRequest) GetValues() url.Values {
	return this.values
}

/* 入住时间查询结束时间，格式为：yyyy-MM-dd。不能早于checkin_date_start，间隔不能大于30 */
func (this *HotelOrdersSearchRequest) SetCheckinDateEnd(value string) {
	this.Set("checkin_date_end", value)
}

/* 入住时间查询起始时间，格式为：yyyy-MM-dd */
func (this *HotelOrdersSearchRequest) SetCheckinDateStart(value string) {
	this.Set("checkin_date_start", value)
}

/* 离店时间查询结束时间，格式为：yyyy-MM-dd。不能早于checkout_date_start，间隔不能大于30 */
func (this *HotelOrdersSearchRequest) SetCheckoutDateEnd(value string) {
	this.Set("checkout_date_end", value)
}

/* 离店时间查询起始时间，格式为：yyyy-MM-dd */
func (this *HotelOrdersSearchRequest) SetCheckoutDateStart(value string) {
	this.Set("checkout_date_start", value)
}

/* 订单创建时间查询结束时间，格式为：yyyy-MM-dd。不能早于created_start，间隔不能大于30 */
func (this *HotelOrdersSearchRequest) SetCreatedEnd(value string) {
	this.Set("created_end", value)
}

/* 订单创建时间查询起始时间，格式为：yyyy-MM-dd */
func (this *HotelOrdersSearchRequest) SetCreatedStart(value string) {
	this.Set("created_start", value)
}

/* 商品gid列表，多个gid用英文逗号隔开，一次不超过5个 */
func (this *HotelOrdersSearchRequest) SetGids(value string) {
	this.Set("gids", value)
}

/* 酒店hid列表，多个hid用英文逗号隔开，一次不超过5个 */
func (this *HotelOrdersSearchRequest) SetHids(value string) {
	this.Set("hids", value)
}

/* 是否需要返回该订单的入住人列表。可选值：true，false。 */
func (this *HotelOrdersSearchRequest) SetNeedGuest(value string) {
	this.Set("need_guest", value)
}

/* 是否显示买家留言，可选值true、false */
func (this *HotelOrdersSearchRequest) SetNeedMessage(value string) {
	this.Set("need_message", value)
}

/* 酒店订单oids列表，多个oid用英文逗号隔开，一次不超过20个。oids，tids，hids，rids，gids，（checkin_date_start，checkin_date_end），（checkout_date_start，checkout_date_end），（created_start，created_end）必须传入一项，括号表示需同时存在才做为查询条件。
oids，tids，hids，rids，gids同时出现时，优先级按此顺序由高到低只取一项。其他同时出现时，并列使用。 */
func (this *HotelOrdersSearchRequest) SetOids(value string) {
	this.Set("oids", value)
}

/* 分页页码。取值范围，大于零的整数，默认值1，即返回第一页的数据。页面大小为20 */
func (this *HotelOrdersSearchRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 房型rid列表，多个rid用英文逗号隔开，一次不超过5个 */
func (this *HotelOrdersSearchRequest) SetRids(value string) {
	this.Set("rids", value)
}

/* 订单状态。A：等待买家付款。B：买家已付款待卖家发货。C：卖家已发货待买家确认。D：交易成功。E：交易关闭<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelOrdersSearchRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 淘宝订单tid列表，多个tid用英文逗号隔开，一次不超过20个。 */
func (this *HotelOrdersSearchRequest) SetTids(value string) {
	this.Set("tids", value)
}

type HotelOrdersSearchResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	HotelOrdersSearchResponseResult `json:"hotel_orders_search_response"`
}
type HotelOrdersSearchResponseResult struct {
	/* 多个订单结构，是否返回入住人列表根据参数决定 */
	HotelOrders []*HotelOrder `json:"hotel_orders"`
	/* 符合条件的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.hotel.room.add*/
type HotelRoomAddRequest struct {
	values url.Values
}

func (this *HotelRoomAddRequest) GetApiMethodName() string {
	return "taobao.hotel.room.add"
}
func (this *HotelRoomAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelRoomAddRequest) GetValues() url.Values {
	return this.values
}

/* 面积。可选值：A,B,C,D。分别代表：
A：15平米以下，B：16－30平米，C：31－50平米，D：50平米以上<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomAddRequest) SetArea(value string) {
	this.Set("area", value)
}

/* 宽带服务。A,B,C,D。分别代表：
A：无宽带，B：免费宽带，C：收费宽带，D：部分收费宽带<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomAddRequest) SetBbn(value string) {
	this.Set("bbn", value)
}

/* 床型。可选值：A,B,C,D,E,F,G,H,I。分别代表：A：单人床，B：大床，C：双床，D：双床/大床，E：子母床，F：上下床，G：圆形床，H：多床，I：其他床型<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomAddRequest) SetBedType(value string) {
	this.Set("bed_type", value)
}

/* 早餐。A,B,C,D,E。分别代表：
A：无早，B：单早，C：双早，D：三早，E：多早<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomAddRequest) SetBreakfast(value string) {
	this.Set("breakfast", value)
}

/* 订金。0～99999900的正整数。在payment_type为订金时必须输入，存储的单位是分。不能带角分。<br /> 支持最大值为：99999900<br /> 支持最小值为：0 */
func (this *HotelRoomAddRequest) SetDeposit(value string) {
	this.Set("deposit", value)
}

/* 商品描述。不能超过25000个汉字（50000个字符）。<br /> 支持最大长度为：50000<br /> 支持的最大列表长度为：50000 */
func (this *HotelRoomAddRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 手续费。0～99999900的正整数。在payment_type为手续费或手续费/间夜时必须输入，存储的单位是分。不能带角分。<br /> 支持最大值为：99999900<br /> 支持最小值为：0 */
func (this *HotelRoomAddRequest) SetFee(value string) {
	this.Set("fee", value)
}

/* 购买须知。不能超过300个字。<br /> 支持最大长度为：300<br /> 支持的最大列表长度为：300 */
func (this *HotelRoomAddRequest) SetGuide(value string) {
	this.Set("guide", value)
}

/* 酒店商品是否提供发票 */
func (this *HotelRoomAddRequest) SetHasReceipt(value string) {
	this.Set("has_receipt", value)
}

/* 酒店id。必须为数字。 */
func (this *HotelRoomAddRequest) SetHid(value string) {
	this.Set("hid", value)
}

/* 为到店支付卖家特殊使用，代表多种支付类型的房态。room_quotas可选，如果有值，也会处理。 */
func (this *HotelRoomAddRequest) SetMultiRoomQuotas(value string) {
	this.Set("multi_room_quotas", value)
}

/* 支付类型。可选值：A,B,C,D,E。分别代表：
A：全额支付，B：手续费，C：订金，D：手续费/间夜，E：前台面付<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomAddRequest) SetPaymentType(value string) {
	this.Set("payment_type", value)
}

/* 酒店商品图片。类型:JPG,GIF;最大长度:500K。支持的文件类型：gif,jpg,jpeg,png。发布的时候只能发布一张图片。如需再发图片，需要调用商品图片上传接口，1个商品最多5张图片。<br /> 支持的文件类型为：jpg,png,gif<br /> 支持的最大列表长度为：512000 */
func (this *HotelRoomAddRequest) SetPic(value string) {
	this.Set("pic", value)
}

/* 商品主图需要关联的图片空间的相对url。这个url所对应的图片必须要属于当前用户。pic_path和image只需要传入一个,如果两个都传，默认选择pic_path */
func (this *HotelRoomAddRequest) SetPicPath(value string) {
	this.Set("pic_path", value)
}

/* 价格类型。可选值：A,B。分别代表：A：参考预订价，B实时预订价 。未选该参数默认为参考预订价。选择实时预订价的情况下，支付类型必须选择为A(全额支付)<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomAddRequest) SetPriceType(value string) {
	this.Set("price_type", value)
}

/* 发票说明，不能超过100个汉字,200个字符。 */
func (this *HotelRoomAddRequest) SetReceiptInfo(value string) {
	this.Set("receipt_info", value)
}

/* 发票类型为其他时的发票描述,不能超过30个汉字，60个字符。 */
func (this *HotelRoomAddRequest) SetReceiptOtherTypeDesc(value string) {
	this.Set("receipt_other_type_desc", value)
}

/* 发票类型。A,B。分别代表： A:酒店住宿发票,B:其他 */
func (this *HotelRoomAddRequest) SetReceiptType(value string) {
	this.Set("receipt_type", value)
}

/* 1. 全额支付类型必填
2. t代表类别(1表示任意退;2表示不能退;3表示阶梯退)，p代表退款规则（数组）， d代表天数，r代表扣除手续费比率。示例代表的意思就是"阶梯退:提前3天内退订，收取订单总额10%的违约金;提前2天内退订，收取订单总额20%的违约金，提前1天内退订，收取订单总额30%的违约金"。
3. 任意退、不能退不能指定退款规则;阶梯退不能没有退款规则;阶梯退规则最多10条,且每条规则天数、费率不能相同;阶梯退遵循天数越短,违约金越大的业务规则;天数需为整数,且90>天数>=0;费率需为整数且100<=费率<=0;阶梯退规则只有一条时,费率不能设置为100%;阶梯退规则只有一条时,不能设定0天收取0%; */
func (this *HotelRoomAddRequest) SetRefundPolicyInfo(value string) {
	this.Set("refund_policy_info", value)
}

/* 房型id。必须为数字。 */
func (this *HotelRoomAddRequest) SetRid(value string) {
	this.Set("rid", value)
}

/* 房态信息。可以传今天开始90天内的房态信息。日期必须连续。JSON格式传递。
date：代表房态日期，格式为YYYY-MM-DD，
price：代表当天房价，0～99999999，存储的单位是分，
num：代表当天可售间数，0～999。
如：
[{"date":2011-01-28,"price":10000, "num":10},{"date":2011-01-29,"price":12000,"num":10}] */
func (this *HotelRoomAddRequest) SetRoomQuotas(value string) {
	this.Set("room_quotas", value)
}

/* 设施服务。JSON格式。
value值true有此服务，false没有。
bar：吧台，catv：有线电视，ddd：国内长途电话，idd：国际长途电话，toilet：独立卫生间，pubtoliet：公共卫生间。
如：
{"bar":false,"catv":false,"ddd":false,"idd":false,"pubtoilet":false,"toilet":false} */
func (this *HotelRoomAddRequest) SetService(value string) {
	this.Set("service", value)
}

/* 接入卖家数据主键<br /> 支持最大长度为：100<br /> 支持的最大列表长度为：100 */
func (this *HotelRoomAddRequest) SetSiteParam(value string) {
	this.Set("site_param", value)
}

/* 床宽。可选值：A,B,C,D,E,F,G,H。分别代表：A：1米及以下，B：1.1米，C：1.2米，D：1.35米，E：1.5米，F：1.8米，G：2米，H：2.2米及以上<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomAddRequest) SetSize(value string) {
	this.Set("size", value)
}

/* 楼层。长度不超过8<br /> 支持最大长度为：8<br /> 支持的最大列表长度为：8 */
func (this *HotelRoomAddRequest) SetStorey(value string) {
	this.Set("storey", value)
}

/* 酒店商品名称。不能超过60字节<br /> 支持最大长度为：90<br /> 支持的最大列表长度为：90 */
func (this *HotelRoomAddRequest) SetTitle(value string) {
	this.Set("title", value)
}

type HotelRoomAddResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	HotelRoomAddResponseResult `json:"hotel_room_add_response"`
}
type HotelRoomAddResponseResult struct {
	/* 商品结构 */
	Room *Room `json:"room"`
}

/*taobao.hotel.room.get*/
type HotelRoomGetRequest struct {
	values url.Values
}

func (this *HotelRoomGetRequest) GetApiMethodName() string {
	return "taobao.hotel.room.get"
}
func (this *HotelRoomGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelRoomGetRequest) GetValues() url.Values {
	return this.values
}

/* 酒店房间商品gid。必须为数字。gid和item_id至少要传一个。 */
func (this *HotelRoomGetRequest) SetGid(value string) {
	this.Set("gid", value)
}

/* 酒店房间商品item_id。必须为数字。item_id和gid至少要传一个。 */
func (this *HotelRoomGetRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 是否需要返回该商品的酒店信息。可选值：true，false。 */
func (this *HotelRoomGetRequest) SetNeedHotel(value string) {
	this.Set("need_hotel", value)
}

/* 是否需要返回该商品的宝贝描述。可选值：true，false。 */
func (this *HotelRoomGetRequest) SetNeedRoomDesc(value string) {
	this.Set("need_room_desc", value)
}

/* 是否需要返回该商品的房态列表。可选值：true，false。 */
func (this *HotelRoomGetRequest) SetNeedRoomQuotas(value string) {
	this.Set("need_room_quotas", value)
}

/* 是否需要返回该商品的房型信息。可选值：true，false。 */
func (this *HotelRoomGetRequest) SetNeedRoomType(value string) {
	this.Set("need_room_type", value)
}

type HotelRoomGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	HotelRoomGetResponseResult `json:"hotel_room_get_response"`
}
type HotelRoomGetResponseResult struct {
	/* 商品结构。是否返回酒店信息、房型信息、房态列表、宝贝描述根据参数决定 */
	Room *Room `json:"room"`
}

/*taobao.hotel.room.img.delete*/
type HotelRoomImgDeleteRequest struct {
	values url.Values
}

func (this *HotelRoomImgDeleteRequest) GetApiMethodName() string {
	return "taobao.hotel.room.img.delete"
}
func (this *HotelRoomImgDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelRoomImgDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 酒店房间商品gid。必须为数字。 */
func (this *HotelRoomImgDeleteRequest) SetGid(value string) {
	this.Set("gid", value)
}

/* 图片序号，可选值：1，2，3，4，5。
如果原图片个数小于等于1，则报错，不能删除图片。
如果原图片个数小于待删除的图片序号，则报错，图片序号错误。<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomImgDeleteRequest) SetPosition(value string) {
	this.Set("position", value)
}

type HotelRoomImgDeleteResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	HotelRoomImgDeleteResponseResult `json:"hotel_room_img_delete_response"`
}
type HotelRoomImgDeleteResponseResult struct {
	/* 商品图片结构 */
	RoomImage *RoomImage `json:"room_image"`
}

/*taobao.hotel.room.img.upload*/
type HotelRoomImgUploadRequest struct {
	values url.Values
}

func (this *HotelRoomImgUploadRequest) GetApiMethodName() string {
	return "taobao.hotel.room.img.upload"
}
func (this *HotelRoomImgUploadRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelRoomImgUploadRequest) GetValues() url.Values {
	return this.values
}

/* 酒店房间商品gid。必须为数字。 */
func (this *HotelRoomImgUploadRequest) SetGid(value string) {
	this.Set("gid", value)
}

/* 酒店商品图片。类型:JPG,GIF;最大长度:500K。支持的文件类型：gif,jpg,jpeg,png。
如果原图片少于5张，若没传序号或序号大于原图片个数，则在原图片最后添加，否则按序号插入到原图片中去，自动后移。
如果原图片大于5张，若没传序号，则替换最后一张图片，否则在序号位置插入，图片向后移，最后一张被删除。<br /> 支持的文件类型为：jpg,png,gif<br /> 支持的最大列表长度为：512000 */
func (this *HotelRoomImgUploadRequest) SetPic(value string) {
	this.Set("pic", value)
}

/* 图片序号，可选值：1，2，3，4，5<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomImgUploadRequest) SetPosition(value string) {
	this.Set("position", value)
}

type HotelRoomImgUploadResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	HotelRoomImgUploadResponseResult `json:"hotel_room_img_upload_response"`
}
type HotelRoomImgUploadResponseResult struct {
	/* 商品图片结构 */
	RoomImage *RoomImage `json:"room_image"`
}

/*taobao.hotel.room.update*/
type HotelRoomUpdateRequest struct {
	values url.Values
}

func (this *HotelRoomUpdateRequest) GetApiMethodName() string {
	return "taobao.hotel.room.update"
}
func (this *HotelRoomUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelRoomUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 面积。可选值：A,B,C,D。分别代表：
A：15平米以下，B：16－30平米，C：31－50平米，D：50平米以上<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomUpdateRequest) SetArea(value string) {
	this.Set("area", value)
}

/* 宽带服务。A,B,C,D。分别代表：
A：无宽带，B：免费宽带，C：收费宽带，D：部分收费宽带<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomUpdateRequest) SetBbn(value string) {
	this.Set("bbn", value)
}

/* 床型。可选值：A,B,C,D,E,F,G,H,I。分别代表：A：单人床，B：大床，C：双床，D：双床/大床，E：子母床，F：上下床，G：圆形床，H：多床，I：其他床型<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomUpdateRequest) SetBedType(value string) {
	this.Set("bed_type", value)
}

/* 早餐。A,B,C,D,E。分别代表：
A：无早，B：单早，C：双早，D：三早，E：多早<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomUpdateRequest) SetBreakfast(value string) {
	this.Set("breakfast", value)
}

/* 订金。0～99999900的正整数。在payment_type为订金时必须输入，存储的单位是分。不能带角分。<br /> 支持最大值为：99999900<br /> 支持最小值为：0 */
func (this *HotelRoomUpdateRequest) SetDeposit(value string) {
	this.Set("deposit", value)
}

/* 商品描述。不能超过25000个汉字（50000个字符）。<br /> 支持最大长度为：50000<br /> 支持的最大列表长度为：50000 */
func (this *HotelRoomUpdateRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 手续费。0～99999900的正整数。在payment_type为手续费或手续费/间夜时必须输入，存储的单位是分。不能带角分。<br /> 支持最大值为：99999900<br /> 支持最小值为：0 */
func (this *HotelRoomUpdateRequest) SetFee(value string) {
	this.Set("fee", value)
}

/* 酒店房间商品gid。必须为数字。 */
func (this *HotelRoomUpdateRequest) SetGid(value string) {
	this.Set("gid", value)
}

/* 购买须知。不能超过300个字。<br /> 支持最大长度为：300<br /> 支持的最大列表长度为：300 */
func (this *HotelRoomUpdateRequest) SetGuide(value string) {
	this.Set("guide", value)
}

/* 酒店商品是否提供发票 */
func (this *HotelRoomUpdateRequest) SetHasReceipt(value string) {
	this.Set("has_receipt", value)
}

/* 为到店支付卖家特殊使用，代表多种支付类型的房态。room_quotas可选，如果有值，也会处理。 */
func (this *HotelRoomUpdateRequest) SetMultiRoomQuotas(value string) {
	this.Set("multi_room_quotas", value)
}

/* 支付类型。可选值：A,B,C,D,E。分别代表：
A：全额支付，B：手续费，C：订金，D：手续费/间夜，E：前台面付<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomUpdateRequest) SetPaymentType(value string) {
	this.Set("payment_type", value)
}

/* 酒店商品图片。类型:JPG,GIF;最大长度:500K。支持的文件类型：gif,jpg,jpeg,png。更新的时候只能更新一张图片，此图片覆盖原有所有图片。如果不传则使用原有所有图片。
如需再发图片，需要调用商品图片上传接口，1个商品最多5张图片。<br /> 支持的文件类型为：jpg,png,gif<br /> 支持的最大列表长度为：512000 */
func (this *HotelRoomUpdateRequest) SetPic(value string) {
	this.Set("pic", value)
}

/* 商品主图需要关联的图片空间的相对url。这个url所对应的图片必须要属于当前用户。pic_path和image只需要传入一个,如果两个都传，默认选择pic_path */
func (this *HotelRoomUpdateRequest) SetPicPath(value string) {
	this.Set("pic_path", value)
}

/* 价格类型。可选值：A,B。分别代表：A：参考预订价，B实时预订价 。未选该参数默认为参考预订价。选择实时预订价的情况下，支付类型必须选择为A(全额支付)<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomUpdateRequest) SetPriceType(value string) {
	this.Set("price_type", value)
}

/* 发票说明，不能超过100个汉字,200个字符。 */
func (this *HotelRoomUpdateRequest) SetReceiptInfo(value string) {
	this.Set("receipt_info", value)
}

/* 发票类型为其他时的发票描述,不能超过30个汉字，60个字符。 */
func (this *HotelRoomUpdateRequest) SetReceiptOtherTypeDesc(value string) {
	this.Set("receipt_other_type_desc", value)
}

/* 发票类型。A,B。分别代表： A:酒店住宿发票,B:其他 */
func (this *HotelRoomUpdateRequest) SetReceiptType(value string) {
	this.Set("receipt_type", value)
}

/* 1. 全额支付类型必填 2. t代表类别(1表示任意退;2表示不能退;3表示阶梯退)，p代表退款规则（数组）， d代表天数，r代表扣除手续费比率。示例代表的意思就是"阶梯退:提前3天内退订，收取订单总额10%的违约金;提前2天内退订，收取订单总额20%的违约金，提前1天内退订，收取订单总额30%的违约金"。 3. 任意退、不能退不能指定退款规则;阶梯退不能没有退款规则;阶梯退规则最多10条,且每条规则天数、费率不能相同;阶梯退遵循天数越短,违约金越大的业务规则;天数需为整数,且90>天数>=0;费率需为整数且100<=费率<=0;阶梯退规则只有一条时,费率不能设置为100%;阶梯退规则只有一条时,不能设定0天收取0%; */
func (this *HotelRoomUpdateRequest) SetRefundPolicyInfo(value string) {
	this.Set("refund_policy_info", value)
}

/* 房态信息。可以传今天开始90天内的房态信息。日期必须连续。JSON格式传递。
date：代表房态日期，格式为YYYY-MM-DD，
price：代表当天房价，0～99999999，存储的单位是分,
num：代表当天可售间数，0～999。
如：
[{"date":2011-01-28,"price":10000, "num":10},{"date":2011-01-29,"price":12000,"num":10}] */
func (this *HotelRoomUpdateRequest) SetRoomQuotas(value string) {
	this.Set("room_quotas", value)
}

/* 设施服务。JSON格式。
value值true有此服务，false没有。
bar：吧台，catv：有线电视，ddd：国内长途电话，idd：国际长途电话，toilet：独立卫生间，pubtoliet：公共卫生间。
如：
{"bar":false,"catv":false,"ddd":false,"idd":false,"pubtoilet":false,"toilet":false} */
func (this *HotelRoomUpdateRequest) SetService(value string) {
	this.Set("service", value)
}

/* 商品的site_param */
func (this *HotelRoomUpdateRequest) SetSiteParam(value string) {
	this.Set("site_param", value)
}

/* 床宽。可选值：A,B,C,D,E,F,G,H。分别代表：A：1米及以下，B：1.1米，C：1.2米，D：1.35米，E：1.5米，F：1.8米，G：2米，H：2.2米及以上<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomUpdateRequest) SetSize(value string) {
	this.Set("size", value)
}

/* 状态。可选值1，2，3。1：上架。2：下架。3：删除。传入相应状态代表去执行相应的操作。<br /> 支持的最大列表长度为：1 */
func (this *HotelRoomUpdateRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 楼层。长度不超过8<br /> 支持最大长度为：8<br /> 支持的最大列表长度为：8 */
func (this *HotelRoomUpdateRequest) SetStorey(value string) {
	this.Set("storey", value)
}

/* 酒店商品名称。不能超过60字节<br /> 支持最大长度为：90<br /> 支持的最大列表长度为：90 */
func (this *HotelRoomUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

type HotelRoomUpdateResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	HotelRoomUpdateResponseResult `json:"hotel_room_update_response"`
}
type HotelRoomUpdateResponseResult struct {
	/* 商品结构 */
	Room *Room `json:"room"`
}

/*taobao.hotel.rooms.search*/
type HotelRoomsSearchRequest struct {
	values url.Values
}

func (this *HotelRoomsSearchRequest) GetApiMethodName() string {
	return "taobao.hotel.rooms.search"
}
func (this *HotelRoomsSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelRoomsSearchRequest) GetValues() url.Values {
	return this.values
}

/* 酒店房间商品gid列表，多个gid用英文逗号隔开，一次不超过20个。gids，item_ids , hids，rids四项必须传一项，同时传递的情况下，作为查询条件的优先级由高到低依次为gids，item_ids , hids，rids。 */
func (this *HotelRoomsSearchRequest) SetGids(value string) {
	this.Set("gids", value)
}

/* 酒店hid列表，多个hid用英文逗号隔开，一次不超过5个。gids，item_ids , hids，rids四项必须传一项，同时传递的情况下，作为查询条件的优先级由高到低依次为gids，item_ids , hids，rids。 */
func (this *HotelRoomsSearchRequest) SetHids(value string) {
	this.Set("hids", value)
}

/* 酒店房间商品item_id列表，多个item_id用英文逗号隔开，一次不超过20个。gids，item_ids , hids，rids四项必须传一项，同时传递的情况下，作为查询条件的优先级由高到低依次为gids，item_ids , hids，rids。当item_ids参数值为-1，gids项不传值时，会返回卖家所有商品列表 */
func (this *HotelRoomsSearchRequest) SetItemIds(value string) {
	this.Set("item_ids", value)
}

/* 是否需要返回该商品的酒店信息。可选值：true，false。 */
func (this *HotelRoomsSearchRequest) SetNeedHotel(value string) {
	this.Set("need_hotel", value)
}

/* 是否需要返回该商品的宝贝描述。可选值：true，false。 */
func (this *HotelRoomsSearchRequest) SetNeedRoomDesc(value string) {
	this.Set("need_room_desc", value)
}

/* 是否需要返回该商品的房态列表。可选值：true，false。 */
func (this *HotelRoomsSearchRequest) SetNeedRoomQuotas(value string) {
	this.Set("need_room_quotas", value)
}

/* 是否需要返回该商品的房型信息。可选值：true，false。 */
func (this *HotelRoomsSearchRequest) SetNeedRoomType(value string) {
	this.Set("need_room_type", value)
}

/* 分页页码。取值范围，大于零的整数，默认值1，即返回第一页的数据。页面大小为20 */
func (this *HotelRoomsSearchRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 房型rid列表，多个rid用英文逗号隔开，一次不超过20个。gids，item_ids , hids，rids四项必须传一项，同时传递的情况下，作为查询条件的优先级由高到低依次为gids，item_ids , hids，rids。 */
func (this *HotelRoomsSearchRequest) SetRids(value string) {
	this.Set("rids", value)
}

type HotelRoomsSearchResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	HotelRoomsSearchResponseResult `json:"hotel_rooms_search_response"`
}
type HotelRoomsSearchResponseResult struct {
	/* 多个商品结构。是否返回酒店信息、房型信息、房态列表、宝贝描述根据参数决定 */
	Rooms []*Room `json:"rooms"`
	/* 符合条件的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.hotel.rooms.update*/
type HotelRoomsUpdateRequest struct {
	values url.Values
}

func (this *HotelRoomsUpdateRequest) GetApiMethodName() string {
	return "taobao.hotel.rooms.update"
}
func (this *HotelRoomsUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelRoomsUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 多商品房态信息。json encode。每个商品房态参考单商品更新中的room_quota字段。反序列化后入：array(( 'gid'=>1, 'roomQuota'=>array(('date'=>'2011-01-29', 'price'=>100, 'num'=>1),('date'=>'2011-01-30', 'price'=>100, 'num'=>1)),( 'gid'=>2, 'roomQuota'=>array(('date'=>'2011-01-29', 'price'=>100, 'num'=>1),('date'=>'2011-01-30', 'price'=>100, 'num'=>1))) */
func (this *HotelRoomsUpdateRequest) SetGidRoomQuotaMap(value string) {
	this.Set("gid_room_quota_map", value)
}

/* 为到店支付卖家特殊使用，可传入多种支付类型的房态信息。
该参数有值时，忽略gid_room_quota_map参数；
该参数无值时，使用gid_room_quota_map参数 */
func (this *HotelRoomsUpdateRequest) SetMultiRoomQuotas(value string) {
	this.Set("multi_room_quotas", value)
}

type HotelRoomsUpdateResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	HotelRoomsUpdateResponseResult `json:"hotel_rooms_update_response"`
}
type HotelRoomsUpdateResponseResult struct {
	/* 成功的gid list */
	Gids []string `json:"gids"`
}

/*taobao.hotel.sold.hotels.increment.get*/
type HotelSoldHotelsIncrementGetRequest struct {
	values url.Values
}

func (this *HotelSoldHotelsIncrementGetRequest) GetApiMethodName() string {
	return "taobao.hotel.sold.hotels.increment.get"
}
func (this *HotelSoldHotelsIncrementGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelSoldHotelsIncrementGetRequest) GetValues() url.Values {
	return this.values
}

/* 【不推荐使用，现在总是返回从修改开始时间到目前为止的所有记录，与修改结束时间不再相关】查询修改结束时间，必须大于修改开始时间（修改时间跨度不能大于1天）。格式：yyyy-MM-dd HH:mm:ss。 */
func (this *HotelSoldHotelsIncrementGetRequest) SetEndModified(value string) {
	this.Set("end_modified", value)
}

/* 分页页码。取值范围，大于零的整数，默认值1，即返回第一页的数据 */
func (this *HotelSoldHotelsIncrementGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 页面大小，取值范围1-100，默认大小20 */
func (this *HotelSoldHotelsIncrementGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 查询修改开始时间（修改时间跨度不能大于1天）。格式：yyyy-MM-dd HH:mm:ss */
func (this *HotelSoldHotelsIncrementGetRequest) SetStartModified(value string) {
	this.Set("start_modified", value)
}

/* 【不推荐使用，现在返回结果总会包含总记录数和是否存在下一页】是否使用has_next的分页方式，如果指定true，则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的字段，效率比总记录数高 */
func (this *HotelSoldHotelsIncrementGetRequest) SetUseHasNext(value string) {
	this.Set("use_has_next", value)
}

type HotelSoldHotelsIncrementGetResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	HotelSoldHotelsIncrementGetResponseResult `json:"hotel_sold_hotels_increment_get_response"`
}
type HotelSoldHotelsIncrementGetResponseResult struct {
	/* 是否存在下一页 */
	HasNext bool `json:"has_next"`
	/* 多个酒店结构 */
	Hotels []*Hotel `json:"hotels"`
	/* 符合条件的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.hotel.sold.orders.increment.get*/
type HotelSoldOrdersIncrementGetRequest struct {
	values url.Values
}

func (this *HotelSoldOrdersIncrementGetRequest) GetApiMethodName() string {
	return "taobao.hotel.sold.orders.increment.get"
}
func (this *HotelSoldOrdersIncrementGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelSoldOrdersIncrementGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询修改结束时间，必须大于修改开始时间（修改时间跨度不能大于1天）。格式：yyyy-MM-dd HH:mm:ss。 */
func (this *HotelSoldOrdersIncrementGetRequest) SetEndModified(value string) {
	this.Set("end_modified", value)
}

/* 是否需要返回该订单的入住人列表。可选值：true，false。 */
func (this *HotelSoldOrdersIncrementGetRequest) SetNeedGuest(value string) {
	this.Set("need_guest", value)
}

/* 是否返回买家留言，可选值true、false */
func (this *HotelSoldOrdersIncrementGetRequest) SetNeedMessage(value string) {
	this.Set("need_message", value)
}

/* 分页页码。取值范围，大于零的整数，默认值1，即返回第一页的数据。 */
func (this *HotelSoldOrdersIncrementGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 页面大小，取值范围1-100，默认大小20。 */
func (this *HotelSoldOrdersIncrementGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 查询修改开始时间（修改时间跨度不能大于1天）。格式：yyyy-MM-dd HH:mm:ss */
func (this *HotelSoldOrdersIncrementGetRequest) SetStartModified(value string) {
	this.Set("start_modified", value)
}

/* 交易状态，默认查询所有交易状态的数据，除了默认值外每次只能查询一种状态。可选值：A：等待买家付款。B：买家已付款待卖家发货。C：卖家已发货待买家确认。D：交易成功。E：交易关闭<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelSoldOrdersIncrementGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 是否使用has_next的分页方式，如果指定true，则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的字段，效率比总记录数高 */
func (this *HotelSoldOrdersIncrementGetRequest) SetUseHasNext(value string) {
	this.Set("use_has_next", value)
}

type HotelSoldOrdersIncrementGetResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	HotelSoldOrdersIncrementGetResponseResult `json:"hotel_sold_orders_increment_get_response"`
}
type HotelSoldOrdersIncrementGetResponseResult struct {
	/* 是否存在下一页 */
	HasNext bool `json:"has_next"`
	/* 多个订单结构，是否返回入住人列表根据参数决定 */
	HotelOrders []*HotelOrder `json:"hotel_orders"`
	/* 搜索到的交易信息总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.hotel.sold.types.increment.get*/
type HotelSoldTypesIncrementGetRequest struct {
	values url.Values
}

func (this *HotelSoldTypesIncrementGetRequest) GetApiMethodName() string {
	return "taobao.hotel.sold.types.increment.get"
}
func (this *HotelSoldTypesIncrementGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelSoldTypesIncrementGetRequest) GetValues() url.Values {
	return this.values
}

/* 【不推荐使用，现在总是返回从修改开始时间到目前为止的所有记录，与修改结束时间不再相关】查询修改结束时间，必须大于修改开始时间（修改时间跨度不能大于1天）。格式：yyyy-MM-dd HH:mm:ss。 */
func (this *HotelSoldTypesIncrementGetRequest) SetEndModified(value string) {
	this.Set("end_modified", value)
}

/* 分页页码。取值范围，大于零的整数，默认值1，即返回第一页的数据。 */
func (this *HotelSoldTypesIncrementGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 页面大小，取值范围1-100，默认大小20。 */
func (this *HotelSoldTypesIncrementGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 查询修改开始时间（修改时间跨度不能大于1天）。格式：yyyy-MM-dd HH:mm:ss */
func (this *HotelSoldTypesIncrementGetRequest) SetStartModified(value string) {
	this.Set("start_modified", value)
}

/* 【不推荐使用，现在返回结果总会包含总记录数和是否存在下一页】是否使用has_next的分页方式，如果指定true，则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的字段，效率比总记录数高 */
func (this *HotelSoldTypesIncrementGetRequest) SetUseHasNext(value string) {
	this.Set("use_has_next", value)
}

type HotelSoldTypesIncrementGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	HotelSoldTypesIncrementGetResponseResult `json:"hotel_sold_types_increment_get_response"`
}
type HotelSoldTypesIncrementGetResponseResult struct {
	/* 是否存在下一页 */
	HasNext bool `json:"has_next"`
	/* 多个房型结构 */
	RoomTypes []*RoomType `json:"room_types"`
	/* 符合条件的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.hotel.type.add*/
type HotelTypeAddRequest struct {
	values url.Values
}

func (this *HotelTypeAddRequest) GetApiMethodName() string {
	return "taobao.hotel.type.add"
}
func (this *HotelTypeAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelTypeAddRequest) GetValues() url.Values {
	return this.values
}

/* 酒店id。必须为数字<br /> 支持最小值为：0 */
func (this *HotelTypeAddRequest) SetHid(value string) {
	this.Set("hid", value)
}

/* 房型名称。长度不能超过30<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *HotelTypeAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 接入卖家数据主键,格式为“接入方酒店id-接入方房型id”<br /> 支持最大长度为：100<br /> 支持的最大列表长度为：100 */
func (this *HotelTypeAddRequest) SetSiteParam(value string) {
	this.Set("site_param", value)
}

type HotelTypeAddResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	HotelTypeAddResponseResult `json:"hotel_type_add_response"`
}
type HotelTypeAddResponseResult struct {
	/* 房型结构 */
	RoomType *RoomType `json:"room_type"`
}

/*taobao.hotel.type.name.get*/
type HotelTypeNameGetRequest struct {
	values url.Values
}

func (this *HotelTypeNameGetRequest) GetApiMethodName() string {
	return "taobao.hotel.type.name.get"
}
func (this *HotelTypeNameGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelTypeNameGetRequest) GetValues() url.Values {
	return this.values
}

/* 要查询的酒店id。必须为数字 */
func (this *HotelTypeNameGetRequest) SetHid(value string) {
	this.Set("hid", value)
}

/* 房型全部名称/别名。不能超过60字节<br /> 支持最大长度为：60<br /> 支持的最大列表长度为：60 */
func (this *HotelTypeNameGetRequest) SetName(value string) {
	this.Set("name", value)
}

type HotelTypeNameGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	HotelTypeNameGetResponseResult `json:"hotel_type_name_get_response"`
}
type HotelTypeNameGetResponseResult struct {
	/* 房型结构 */
	RoomType *RoomType `json:"room_type"`
}

/*taobao.hotel.update*/
type HotelUpdateRequest struct {
	values url.Values
}

func (this *HotelUpdateRequest) GetApiMethodName() string {
	return "taobao.hotel.update"
}
func (this *HotelUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 酒店地址。长度不能超过120<br /> 支持最大长度为：120<br /> 支持的最大列表长度为：120 */
func (this *HotelUpdateRequest) SetAddress(value string) {
	this.Set("address", value)
}

/* 城市编码。参见：http://kezhan.trip.taobao.com/area.html，domestic为false时，输入对应国家的海外城市编码，可调用海外城市查询接口获取<br /> 支持最大值为：999999<br /> 支持最小值为：0<br /> 支持的最大列表长度为：6 */
func (this *HotelUpdateRequest) SetCity(value string) {
	this.Set("city", value)
}

/* domestic为true时，固定China；
domestic为false时，传海外国家编码。参见：http://kezhan.trip.taobao.com/countrys.html */
func (this *HotelUpdateRequest) SetCountry(value string) {
	this.Set("country", value)
}

/* 装修时间。长度不能超过4。<br /> 支持最大长度为：4<br /> 支持的最大列表长度为：4 */
func (this *HotelUpdateRequest) SetDecorateTime(value string) {
	this.Set("decorate_time", value)
}

/* 酒店介绍。不超过25000个汉字<br /> 支持最大长度为：50000<br /> 支持的最大列表长度为：50000 */
func (this *HotelUpdateRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 区域（县级市）编码。参见：http://kezhan.trip.taobao.com/area.html<br /> 支持最大值为：999999<br /> 支持最小值为：0<br /> 支持的最大列表长度为：6 */
func (this *HotelUpdateRequest) SetDistrict(value string) {
	this.Set("district", value)
}

/* 是否国内酒店。可选值：true，false */
func (this *HotelUpdateRequest) SetDomestic(value string) {
	this.Set("domestic", value)
}

/* 酒店id。必须为数字。 */
func (this *HotelUpdateRequest) SetHid(value string) {
	this.Set("hid", value)
}

/* 酒店级别。可选值：A,B,C,D,E,F。代表客栈公寓、经济连锁、二星级/以下、三星级/舒适、四星级/高档、五星级/豪华<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelUpdateRequest) SetLevel(value string) {
	this.Set("level", value)
}

/* 酒店名称。不能超过60字节<br /> 支持最大长度为：60<br /> 支持的最大列表长度为：60 */
func (this *HotelUpdateRequest) SetName(value string) {
	this.Set("name", value)
}

/* 开业时间。长度不能超过4。<br /> 支持最大长度为：4<br /> 支持的最大列表长度为：4 */
func (this *HotelUpdateRequest) SetOpeningTime(value string) {
	this.Set("opening_time", value)
}

/* 酒店定位。可选值：T,B。代表旅游度假、商务出行<br /> 支持最大长度为：1<br /> 支持的最大列表长度为：1 */
func (this *HotelUpdateRequest) SetOrientation(value string) {
	this.Set("orientation", value)
}

/* 酒店图片。类型:JPG,GIF;最大长度:500K。支持的文件类型：gif,jpg,jpeg,png。
图片没有传，则代表不更新图片，使用原来的图片<br /> 支持的文件类型为：jpg,png,gif<br /> 支持的最大列表长度为：512000 */
func (this *HotelUpdateRequest) SetPic(value string) {
	this.Set("pic", value)
}

/* 省份编码。参见：http://kezhan.trip.taobao.com/area.html，domestic为false时默认为0<br /> 支持最大值为：999999<br /> 支持最小值为：0<br /> 支持的最大列表长度为：6 */
func (this *HotelUpdateRequest) SetProvince(value string) {
	this.Set("province", value)
}

/* 房间数。长度不能超过4。<br /> 支持最大值为：9999<br /> 支持最小值为：0<br /> 支持的最大列表长度为：4 */
func (this *HotelUpdateRequest) SetRooms(value string) {
	this.Set("rooms", value)
}

/* 交通距离与设施服务。JSON格式。cityCenterDistance、railwayDistance、airportDistance分别代表距离市中心、距离火车站、距离机场公里数，为不超过3位正整数，默认-1代表无数据。
其他key值true代表有此服务，false代表没有。
parking：停车场，airportShuttle：机场接送，rentCar：租车，meetingRoom：会议室，businessCenter：商务中心，swimmingPool：游泳池，fitnessClub：健身中心，laundry：洗衣服务，morningCall：叫早服务，bankCard：接受银行卡，creditCard：接受信用卡，chineseRestaurant：中餐厅，westernRestaurant：西餐厅，cafe：咖啡厅，bar：酒吧，ktv：KTV。
如：
{"airportShuttle":true,"parking":false,"fitnessClub":false,"chineseRestaurant":false,"rentCar":false,"laundry":false,"bankCard":false,"cityCenterDistance":-1,"creditCard":false,"westernRestaurant":false,"ktv":false,"railwayDistance":-1,"swimmingPool":false,"cafe":false,"businessCenter":false,"morningCall":false,"bar":false,"meetingRoom":false,"airportDistance":-1} */
func (this *HotelUpdateRequest) SetService(value string) {
	this.Set("service", value)
}

/* 楼层数。长度不能超过4。<br /> 支持最大值为：9999<br /> 支持最小值为：0<br /> 支持的最大列表长度为：4 */
func (this *HotelUpdateRequest) SetStoreys(value string) {
	this.Set("storeys", value)
}

/* 酒店电话。格式：国家代码（最长6位）#区号（最长4位）#电话（最长20位）。国家代码提示：中国大陆0086、香港00852、澳门00853、台湾00886<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *HotelUpdateRequest) SetTel(value string) {
	this.Set("tel", value)
}

type HotelUpdateResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	HotelUpdateResponseResult `json:"hotel_update_response"`
}
type HotelUpdateResponseResult struct {
	/* 酒店结构 */
	Hotel *Hotel `json:"hotel"`
}

/*taobao.hotels.search*/
type HotelsSearchRequest struct {
	values url.Values
}

func (this *HotelsSearchRequest) GetApiMethodName() string {
	return "taobao.hotels.search"
}
func (this *HotelsSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *HotelsSearchRequest) GetValues() url.Values {
	return this.values
}

/* 城市编码。参见：http://kezhan.trip.taobao.com/area.html。
domestic为true时，province,city,district不能同时为空或为0<br /> 支持的最大列表长度为：6 */
func (this *HotelsSearchRequest) SetCity(value string) {
	this.Set("city", value)
}

/* domestic为true时，固定China；
domestic为false时，必须传定义的海外国家编码值，是必填项。参见：http://kezhan.trip.taobao.com/countrys.html */
func (this *HotelsSearchRequest) SetCountry(value string) {
	this.Set("country", value)
}

/* 区域（县级市）编码。参见：http://kezhan.trip.taobao.com/area.html。
domestic为true时，province,city,district不能同时为空或为0<br /> 支持的最大列表长度为：6 */
func (this *HotelsSearchRequest) SetDistrict(value string) {
	this.Set("district", value)
}

/* 是否国内酒店。可选值：true，false */
func (this *HotelsSearchRequest) SetDomestic(value string) {
	this.Set("domestic", value)
}

/* 酒店名称。不能超过60字节<br /> 支持最大长度为：60<br /> 支持的最大列表长度为：60 */
func (this *HotelsSearchRequest) SetName(value string) {
	this.Set("name", value)
}

/* 分页页码。取值范围，大于零的整数，默认值1，即返回第一页的数据。页面大小为20 */
func (this *HotelsSearchRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 省份编码。参见：http://kezhan.trip.taobao.com/area.html。
domestic为true时，province,city,district不能同时为空或为0<br /> 支持的最大列表长度为：6 */
func (this *HotelsSearchRequest) SetProvince(value string) {
	this.Set("province", value)
}

type HotelsSearchResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	HotelsSearchResponseResult `json:"hotels_search_response"`
}
type HotelsSearchResponseResult struct {
	/* 多个酒店结构<br></br><font color = red>不返回房型信息，需要查看房型信息，请调用taobao.hotel.get</font> */
	Hotels []*Hotel `json:"hotels"`
	/* 符合条件的结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.ju.catitemids.get*/
type JuCatitemidsGetRequest struct {
	values url.Values
}

func (this *JuCatitemidsGetRequest) GetApiMethodName() string {
	return "taobao.ju.catitemids.get"
}
func (this *JuCatitemidsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JuCatitemidsGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品子类目ID。男装:100001,女装:100002。 */
func (this *JuCatitemidsGetRequest) SetChildCategoryid(value string) {
	this.Set("child_categoryid", value)
}

/* 查询本地生活团商品时需要用city进行过滤，如果city是all的话，则查询所有城市的本地生活团商品。如果为空，则查询普通商品 */
func (this *JuCatitemidsGetRequest) SetCity(value string) {
	this.Set("city", value)
}

/* 分页获取商品信息页序号，代表第几页。page_no=0代表第一页。<br /> 支持最小值为：0 */
func (this *JuCatitemidsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每次获取商品列表的数量。最大是100个，如果超出则报41错。<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *JuCatitemidsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 商品父类目ID。服装:100000,保险:1000000。 */
func (this *JuCatitemidsGetRequest) SetParentCategoryid(value string) {
	this.Set("parent_categoryid", value)
}

/* 平台ID。搜狗:1008,聚划算:1001,商城:1002,无线WAP:1007,支付宝:1003,淘宝天下:1004,嗨淘:1006 */
func (this *JuCatitemidsGetRequest) SetPlatformId(value string) {
	this.Set("platform_id", value)
}

/* IPHONE,WAP,ANDROID,SINA,163 各种终端类型 */
func (this *JuCatitemidsGetRequest) SetTerminalType(value string) {
	this.Set("terminal_type", value)
}

type JuCatitemidsGetResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	JuCatitemidsGetResponseResult `json:"ju_catitemids_get_response"`
}
type JuCatitemidsGetResponseResult struct {
	/* 返回的商品ID列表 */
	ItemIds []int64 `json:"item_ids"`
}

/*taobao.ju.cities.get*/
type JuCitiesGetRequest struct {
	values url.Values
}

func (this *JuCitiesGetRequest) GetApiMethodName() string {
	return "taobao.ju.cities.get"
}
func (this *JuCitiesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JuCitiesGetRequest) GetValues() url.Values {
	return this.values
}

type JuCitiesGetResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	JuCitiesGetResponseResult `json:"ju_cities_get_response"`
}
type JuCitiesGetResponseResult struct {
	/* 返回城市名称列表类似 "上海","成都" */
	Cities []string `json:"cities"`
}

/*taobao.ju.citygroup.get*/
type JuCitygroupGetRequest struct {
	values url.Values
}

func (this *JuCitygroupGetRequest) GetApiMethodName() string {
	return "taobao.ju.citygroup.get"
}
func (this *JuCitygroupGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JuCitygroupGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要获取生活服务商品的城市名称（中文） */
func (this *JuCitygroupGetRequest) SetCity(value string) {
	this.Set("city", value)
}

/* 代表需要返回的商品对象字段。可选值：ItemData商品结构体中所有字段均可返回；多个字段用“,”分隔。如果fields为空，或者不传该参数，就默认获得所有的字段 */
func (this *JuCitygroupGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

type JuCitygroupGetResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	JuCitygroupGetResponseResult `json:"ju_citygroup_get_response"`
}
type JuCitygroupGetResponseResult struct {
	/* 生活服务团信息 */
	Group *GroupData `json:"group"`
}

/*taobao.ju.cityitems.get*/
type JuCityitemsGetRequest struct {
	values url.Values
}

func (this *JuCityitemsGetRequest) GetApiMethodName() string {
	return "taobao.ju.cityitems.get"
}
func (this *JuCityitemsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JuCityitemsGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要获取生活服务商品的城市名称（中文） */
func (this *JuCityitemsGetRequest) SetCity(value string) {
	this.Set("city", value)
}

/* 代表需要返回的商品对象字段。可选值：ItemData商品结构体中所有字段均可返回；多个字段用","分隔。如果fields为空，或者不传该参数，就默认获得所有的字段 */
func (this *JuCityitemsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 分页获取商品信息页序号，代表第几页<br /> 支持最小值为：0 */
func (this *JuCityitemsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每次获取商品列表的数量<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *JuCityitemsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type JuCityitemsGetResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	JuCityitemsGetResponseResult `json:"ju_cityitems_get_response"`
}
type JuCityitemsGetResponseResult struct {
	/* 聚划算商品对象列表 */
	ItemList []*ItemData `json:"item_list"`
}

/*taobao.ju.group.assign*/
type JuGroupAssignRequest struct {
	values url.Values
}

func (this *JuGroupAssignRequest) GetApiMethodName() string {
	return "taobao.ju.group.assign"
}
func (this *JuGroupAssignRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JuGroupAssignRequest) GetValues() url.Values {
	return this.values
}

/* 代表需要返回的商品对象字段。可选值：ItemData商品结构体中所有字段均可返回；多个字段用“,”分隔。如果fields为空，或者不传该参数，就默认获得所有的字段 */
func (this *JuGroupAssignRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* IPHONE,WAP,ANDROID,SINA,163 各种终端类型 */
func (this *JuGroupAssignRequest) SetTerminalType(value string) {
	this.Set("terminal_type", value)
}

/* 终端的唯一标识，web可以用cookie，手机使用手机号码等，确保唯一性即可，用于分配商品组 */
func (this *JuGroupAssignRequest) SetUuid(value string) {
	this.Set("uuid", value)
}

type JuGroupAssignResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	JuGroupAssignResponseResult `json:"ju_group_assign_response"`
}
type JuGroupAssignResponseResult struct {
	/* 返回单个组信息 */
	Group *GroupData `json:"group"`
}

/*taobao.ju.group.get*/
type JuGroupGetRequest struct {
	values url.Values
}

func (this *JuGroupGetRequest) GetApiMethodName() string {
	return "taobao.ju.group.get"
}
func (this *JuGroupGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JuGroupGetRequest) GetValues() url.Values {
	return this.values
}

/* 代表需要返回的商品对象字段。可选值：ItemData商品结构体中所有字段均可返回；多个字段用“,”分隔。如果fields为空，或者不传该参数，就默认获得所有的字段 */
func (this *JuGroupGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 聚划算组的编号<br /> 支持最小值为：1<br /> 支持的最大列表长度为：22 */
func (this *JuGroupGetRequest) SetGroupId(value string) {
	this.Set("group_id", value)
}

type JuGroupGetResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	JuGroupGetResponseResult `json:"ju_group_get_response"`
}
type JuGroupGetResponseResult struct {
	/* 组信息的返回对象 */
	Group *GroupData `json:"group"`
}

/*taobao.ju.groupids.get*/
type JuGroupidsGetRequest struct {
	values url.Values
}

func (this *JuGroupidsGetRequest) GetApiMethodName() string {
	return "taobao.ju.groupids.get"
}
func (this *JuGroupidsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JuGroupidsGetRequest) GetValues() url.Values {
	return this.values
}

/* 分页获取团信息页序号，代表第几页<br /> 支持最小值为：0 */
func (this *JuGroupidsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每次获取团id列表的数量<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *JuGroupidsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* IPHONE,WAP,ANDROID,SINA,163 各种终端类型 */
func (this *JuGroupidsGetRequest) SetTerminalType(value string) {
	this.Set("terminal_type", value)
}

type JuGroupidsGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	JuGroupidsGetResponseResult `json:"ju_groupids_get_response"`
}
type JuGroupidsGetResponseResult struct {
	/* 获得商品组id列表 */
	GroupIds []int64 `json:"group_ids"`
}

/*taobao.ju.itemids.get*/
type JuItemidsGetRequest struct {
	values url.Values
}

func (this *JuItemidsGetRequest) GetApiMethodName() string {
	return "taobao.ju.itemids.get"
}
func (this *JuItemidsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JuItemidsGetRequest) GetValues() url.Values {
	return this.values
}

/* 分页获取商品信息页序号，代表第几页<br /> 支持最小值为：0 */
func (this *JuItemidsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每次获取商品列表的数量<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *JuItemidsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 平台ID。搜狗:1008,聚划算:1001,商城:1002,无线WAP:1007,支付宝:1003,淘宝天下:1004,嗨淘:1006 */
func (this *JuItemidsGetRequest) SetPlatformId(value string) {
	this.Set("platform_id", value)
}

/* IPHONE,WAP,ANDROID,SINA,163 各种终端类型 */
func (this *JuItemidsGetRequest) SetTerminalType(value string) {
	this.Set("terminal_type", value)
}

type JuItemidsGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	JuItemidsGetResponseResult `json:"ju_itemids_get_response"`
}
type JuItemidsGetResponseResult struct {
	/* 返回的商品ID列表 */
	ItemIds []int64 `json:"item_ids"`
}

/*taobao.ju.items.get*/
type JuItemsGetRequest struct {
	values url.Values
}

func (this *JuItemsGetRequest) GetApiMethodName() string {
	return "taobao.ju.items.get"
}
func (this *JuItemsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JuItemsGetRequest) GetValues() url.Values {
	return this.values
}

/* 代表需要返回的商品对象字段。可选值：ItemData商品结构体中所有字段均可返回；多个字段用","分隔。如果fields为空，或者不传该参数，就默认获得所有的字段 */
func (this *JuItemsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 商品ID列表。id列表超过6条也只返回前6条的商品 */
func (this *JuItemsGetRequest) SetIds(value string) {
	this.Set("ids", value)
}

type JuItemsGetResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	JuItemsGetResponseResult `json:"ju_items_get_response"`
}
type JuItemsGetResponseResult struct {
	/* 聚划算商品对象列表 */
	ItemList []*ItemData `json:"item_list"`
}

/*taobao.ju.todayitems.get*/
type JuTodayitemsGetRequest struct {
	values url.Values
}

func (this *JuTodayitemsGetRequest) GetApiMethodName() string {
	return "taobao.ju.todayitems.get"
}
func (this *JuTodayitemsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JuTodayitemsGetRequest) GetValues() url.Values {
	return this.values
}

/* 代表需要返回的商品对象字段。可选值：ItemData商品结构体中所有字段均可返回；多个字段用","分隔。如果fields为空，或者不传该参数，就默认获得所有的字段 */
func (this *JuTodayitemsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* IPHONE,WAP,ANDROID,SINA,163 各种终端类型 */
func (this *JuTodayitemsGetRequest) SetTerminalType(value string) {
	this.Set("terminal_type", value)
}

/* 终端的唯一标识，web可以用cookie，手机使用手机号码等，确保唯一性即可，用于分配商品组 */
func (this *JuTodayitemsGetRequest) SetUuid(value string) {
	this.Set("uuid", value)
}

type JuTodayitemsGetResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	JuTodayitemsGetResponseResult `json:"ju_todayitems_get_response"`
}
type JuTodayitemsGetResponseResult struct {
	/* 聚划算商品对象列表 */
	ItemList []*ItemData `json:"item_list"`
}

/*taobao.crm.grade.get*/
type CrmGradeGetRequest struct {
	values url.Values
}

func (this *CrmGradeGetRequest) GetApiMethodName() string {
	return "taobao.crm.grade.get"
}
func (this *CrmGradeGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGradeGetRequest) GetValues() url.Values {
	return this.values
}

type CrmGradeGetResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	CrmGradeGetResponseResult `json:"crm_grade_get_response"`
}
type CrmGradeGetResponseResult struct {
	/* 等级信息集合 */
	GradePromotions []*GradePromotion `json:"grade_promotions"`
}

/*taobao.crm.grade.set*/
type CrmGradeSetRequest struct {
	values url.Values
}

func (this *CrmGradeSetRequest) GetApiMethodName() string {
	return "taobao.crm.grade.set"
}
func (this *CrmGradeSetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGradeSetRequest) GetValues() url.Values {
	return this.values
}

/* 只对设置的层级等级有效，必须要在amount和count参数中选择一个<br>
amount参数的填写规范：升级到下一个级别的需要的交易额，单位为分,必须全部填写.例如10000,20000,30000，其中10000表示非会员升级到普通的所需的交易额，20000表示普通升级到高级所需的交易额，层级等级中最高等级的下一个等级默认为0。会员等级越高，所需交易额必须越高。<br /> 支持最小值为：0 */
func (this *CrmGradeSetRequest) SetAmount(value string) {
	this.Set("amount", value)
}

/* 只对设置的层级等级有效，必须要在amount和count参数中选择一个<br>
count参数的填写规范：
升级到下一个级别的需要的交易量,必须全部填写. 以逗号分隔,例如100,200,300，其中100表示非会员升级到普通会员交易量。层级等级中最高等级的下一个等级的交易量默认为0。会员等级越高，交易量必须越高。<br /> 支持最小值为：0 */
func (this *CrmGradeSetRequest) SetCount(value string) {
	this.Set("count", value)
}

/* 会员级别折扣率。会员等级越高，折扣必须越低。
950即9.5折，888折即8.88折。出于安全原因，折扣现最低只能设置到700即7折。<br /> 支持最大值为：1000<br /> 支持最小值为：700 */
func (this *CrmGradeSetRequest) SetDiscount(value string) {
	this.Set("discount", value)
}

/* 会员等级，用逗号分隔。买家会员级别0：店铺客户 1：普通会员 2 ：高级会员 3：VIP会员 4：至尊VIP<br /> 支持最大值为：4<br /> 支持最小值为：1 */
func (this *CrmGradeSetRequest) SetGrade(value string) {
	this.Set("grade", value)
}

/* 是否设置达到某一会员等级的交易量和交易额，必填。4个级别都需要设置，如入参为true,true,true,false时，表示设置达到高级会员、VIP会员的交易量或者交易额，不设置达到至尊会员的交易量和交易额 */
func (this *CrmGradeSetRequest) SetHierarchy(value string) {
	this.Set("hierarchy", value)
}

type CrmGradeSetResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	CrmGradeSetResponseResult `json:"crm_grade_set_response"`
}
type CrmGradeSetResponseResult struct {
	/* true：成功 false：失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.crm.grademkt.member.add*/
type CrmGrademktMemberAddRequest struct {
	values url.Values
}

func (this *CrmGrademktMemberAddRequest) GetApiMethodName() string {
	return "taobao.crm.grademkt.member.add"
}
func (this *CrmGrademktMemberAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGrademktMemberAddRequest) GetValues() url.Values {
	return this.values
}

/* 会员nick */
func (this *CrmGrademktMemberAddRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 系统属性，json格式 */
func (this *CrmGrademktMemberAddRequest) SetFeather(value string) {
	this.Set("feather", value)
}

/* 会员属性-json format
生成方法见http://open.taobao.com/doc/detail.htm?id=101281 */
func (this *CrmGrademktMemberAddRequest) SetParameter(value string) {
	this.Set("parameter", value)
}

type CrmGrademktMemberAddResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	CrmGrademktMemberAddResponseResult `json:"crm_grademkt_member_add_response"`
}
type CrmGrademktMemberAddResponseResult struct {
	/* 返回操作是否成功 */
	Model bool `json:"model"`
}

/*taobao.crm.grademkt.member.detail.create*/
type CrmGrademktMemberDetailCreateRequest struct {
	values url.Values
}

func (this *CrmGrademktMemberDetailCreateRequest) GetApiMethodName() string {
	return "taobao.crm.grademkt.member.detail.create"
}
func (this *CrmGrademktMemberDetailCreateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGrademktMemberDetailCreateRequest) GetValues() url.Values {
	return this.values
}

/* 扩展字段 */
func (this *CrmGrademktMemberDetailCreateRequest) SetFeather(value string) {
	this.Set("feather", value)
}

/* 创建营销详情，生成方法见http://open.taobao.com/doc/detail.htm?id=101281 */
func (this *CrmGrademktMemberDetailCreateRequest) SetParameter(value string) {
	this.Set("parameter", value)
}

type CrmGrademktMemberDetailCreateResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	CrmGrademktMemberDetailCreateResponseResult `json:"crm_grademkt_member_detail_create_response"`
}
type CrmGrademktMemberDetailCreateResponseResult struct {
	/* json格式 */
	Module bool `json:"module"`
}

/*taobao.crm.grademkt.member.detail.delete*/
type CrmGrademktMemberDetailDeleteRequest struct {
	values url.Values
}

func (this *CrmGrademktMemberDetailDeleteRequest) GetApiMethodName() string {
	return "taobao.crm.grademkt.member.detail.delete"
}
func (this *CrmGrademktMemberDetailDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGrademktMemberDetailDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 扩展字段 */
func (this *CrmGrademktMemberDetailDeleteRequest) SetFeather(value string) {
	this.Set("feather", value)
}

/* 创建营销详情，生成方法见http://open.taobao.com/doc/detail.htm?id=101281 */
func (this *CrmGrademktMemberDetailDeleteRequest) SetParameter(value string) {
	this.Set("parameter", value)
}

type CrmGrademktMemberDetailDeleteResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	CrmGrademktMemberDetailDeleteResponseResult `json:"crm_grademkt_member_detail_delete_response"`
}
type CrmGrademktMemberDetailDeleteResponseResult struct {
	/* 操作是否成功 */
	Module bool `json:"module"`
}

/*taobao.crm.grademkt.member.detail.query*/
type CrmGrademktMemberDetailQueryRequest struct {
	values url.Values
}

func (this *CrmGrademktMemberDetailQueryRequest) GetApiMethodName() string {
	return "taobao.crm.grademkt.member.detail.query"
}
func (this *CrmGrademktMemberDetailQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGrademktMemberDetailQueryRequest) GetValues() url.Values {
	return this.values
}

/* 扩展字段 */
func (this *CrmGrademktMemberDetailQueryRequest) SetFeather(value string) {
	this.Set("feather", value)
}

/* 创建营销详情，生成方法见http://open.taobao.com/doc/detail.htm?id=101281 */
func (this *CrmGrademktMemberDetailQueryRequest) SetParameter(value string) {
	this.Set("parameter", value)
}

type CrmGrademktMemberDetailQueryResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	CrmGrademktMemberDetailQueryResponseResult `json:"crm_grademkt_member_detail_query_response"`
}
type CrmGrademktMemberDetailQueryResponseResult struct {
	/* totalCount为记录总数 */
	Model string `json:"model"`
}

/*taobao.crm.grademkt.member.gradeactivity.init*/
type CrmGrademktMemberGradeactivityInitRequest struct {
	values url.Values
}

func (this *CrmGrademktMemberGradeactivityInitRequest) GetApiMethodName() string {
	return "taobao.crm.grademkt.member.gradeactivity.init"
}
func (this *CrmGrademktMemberGradeactivityInitRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGrademktMemberGradeactivityInitRequest) GetValues() url.Values {
	return this.values
}

/* 扩展字段 */
func (this *CrmGrademktMemberGradeactivityInitRequest) SetFeather(value string) {
	this.Set("feather", value)
}

/* 活动名称，不传默认为“等级营销” */
func (this *CrmGrademktMemberGradeactivityInitRequest) SetParameter(value string) {
	this.Set("parameter", value)
}

type CrmGrademktMemberGradeactivityInitResponse struct {
	*ErrorResponse                                   `json:"error_response,omitempty"`
	CrmGrademktMemberGradeactivityInitResponseResult `json:"crm_grademkt_member_gradeactivity_init_response"`
}
type CrmGrademktMemberGradeactivityInitResponseResult struct {
	/* json格式 */
	Module bool `json:"module"`
}

/*taobao.crm.grademkt.member.query*/
type CrmGrademktMemberQueryRequest struct {
	values url.Values
}

func (this *CrmGrademktMemberQueryRequest) GetApiMethodName() string {
	return "taobao.crm.grademkt.member.query"
}
func (this *CrmGrademktMemberQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGrademktMemberQueryRequest) GetValues() url.Values {
	return this.values
}

/* 会员nick */
func (this *CrmGrademktMemberQueryRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 系统属性，json格式 */
func (this *CrmGrademktMemberQueryRequest) SetFeather(value string) {
	this.Set("feather", value)
}

/* 会员属性-json format
生成方法见http://open.taobao.com/doc/detail.htm?id=101281 */
func (this *CrmGrademktMemberQueryRequest) SetParameter(value string) {
	this.Set("parameter", value)
}

type CrmGrademktMemberQueryResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	CrmGrademktMemberQueryResponseResult `json:"crm_grademkt_member_query_response"`
}
type CrmGrademktMemberQueryResponseResult struct {
	/* json格式 */
	Module string `json:"module"`
}

/*taobao.crm.group.add*/
type CrmGroupAddRequest struct {
	values url.Values
}

func (this *CrmGroupAddRequest) GetApiMethodName() string {
	return "taobao.crm.group.add"
}
func (this *CrmGroupAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGroupAddRequest) GetValues() url.Values {
	return this.values
}

/* 分组名称，每个卖家最多可以拥有100个分组<br /> 支持最大长度为：15<br /> 支持的最大列表长度为：15 */
func (this *CrmGroupAddRequest) SetGroupName(value string) {
	this.Set("group_name", value)
}

type CrmGroupAddResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	CrmGroupAddResponseResult `json:"crm_group_add_response"`
}
type CrmGroupAddResponseResult struct {
	/* 新增分组的id */
	GroupId int64 `json:"group_id"`
	/* 添加分组是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.crm.group.append*/
type CrmGroupAppendRequest struct {
	values url.Values
}

func (this *CrmGroupAppendRequest) GetApiMethodName() string {
	return "taobao.crm.group.append"
}
func (this *CrmGroupAppendRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGroupAppendRequest) GetValues() url.Values {
	return this.values
}

/* 添加的来源分组<br /> 支持最小值为：1<br /> 支持的最大列表长度为：19 */
func (this *CrmGroupAppendRequest) SetFromGroupId(value string) {
	this.Set("from_group_id", value)
}

/* 添加的目标分组<br /> 支持最小值为：1<br /> 支持的最大列表长度为：19 */
func (this *CrmGroupAppendRequest) SetToGroupId(value string) {
	this.Set("to_group_id", value)
}

type CrmGroupAppendResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	CrmGroupAppendResponseResult `json:"crm_group_append_response"`
}
type CrmGroupAppendResponseResult struct {
	/* 异步任务请求成功，添加任务是否完成通过taobao.crm.grouptask.check检测 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.crm.group.delete*/
type CrmGroupDeleteRequest struct {
	values url.Values
}

func (this *CrmGroupDeleteRequest) GetApiMethodName() string {
	return "taobao.crm.group.delete"
}
func (this *CrmGroupDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGroupDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 要删除的分组id<br /> 支持最小值为：1<br /> 支持的最大列表长度为：19 */
func (this *CrmGroupDeleteRequest) SetGroupId(value string) {
	this.Set("group_id", value)
}

type CrmGroupDeleteResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	CrmGroupDeleteResponseResult `json:"crm_group_delete_response"`
}
type CrmGroupDeleteResponseResult struct {
	/* 异步任务请求成功，是否执行完毕需要通过taobao.crm.grouptask.check检测 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.crm.group.move*/
type CrmGroupMoveRequest struct {
	values url.Values
}

func (this *CrmGroupMoveRequest) GetApiMethodName() string {
	return "taobao.crm.group.move"
}
func (this *CrmGroupMoveRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGroupMoveRequest) GetValues() url.Values {
	return this.values
}

/* 需要移动的分组<br /> 支持最小值为：1<br /> 支持的最大列表长度为：19 */
func (this *CrmGroupMoveRequest) SetFromGroupId(value string) {
	this.Set("from_group_id", value)
}

/* 目的分组<br /> 支持最小值为：1<br /> 支持的最大列表长度为：19 */
func (this *CrmGroupMoveRequest) SetToGroupId(value string) {
	this.Set("to_group_id", value)
}

type CrmGroupMoveResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	CrmGroupMoveResponseResult `json:"crm_group_move_response"`
}
type CrmGroupMoveResponseResult struct {
	/* 异步任务请求成功，是否执行完毕需要通过taobao.crm.grouptask.check检测 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.crm.group.update*/
type CrmGroupUpdateRequest struct {
	values url.Values
}

func (this *CrmGroupUpdateRequest) GetApiMethodName() string {
	return "taobao.crm.group.update"
}
func (this *CrmGroupUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGroupUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 分组的id<br /> 支持最小值为：1<br /> 支持的最大列表长度为：19 */
func (this *CrmGroupUpdateRequest) SetGroupId(value string) {
	this.Set("group_id", value)
}

/* 新的分组名，分组名称不能包含|或者：<br /> 支持最大长度为：15<br /> 支持的最大列表长度为：15 */
func (this *CrmGroupUpdateRequest) SetNewGroupName(value string) {
	this.Set("new_group_name", value)
}

type CrmGroupUpdateResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	CrmGroupUpdateResponseResult `json:"crm_group_update_response"`
}
type CrmGroupUpdateResponseResult struct {
	/* 分组修改是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.crm.groups.get*/
type CrmGroupsGetRequest struct {
	values url.Values
}

func (this *CrmGroupsGetRequest) GetApiMethodName() string {
	return "taobao.crm.groups.get"
}
func (this *CrmGroupsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGroupsGetRequest) GetValues() url.Values {
	return this.values
}

/* 显示第几页的分组，如果输入的页码大于总共的页码数，例如总共10页，但是current_page的值为11，则返回空白页，最小页码为1<br /> 支持最大值为：1000000<br /> 支持最小值为：1<br /> 支持的最大列表长度为：3 */
func (this *CrmGroupsGetRequest) SetCurrentPage(value string) {
	this.Set("current_page", value)
}

/* 每页显示的记录数，其最大值不能超过100条，最小值为1，默认20条<br /> 支持最大值为：100<br /> 支持最小值为：1<br /> 支持的最大列表长度为：3 */
func (this *CrmGroupsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type CrmGroupsGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	CrmGroupsGetResponseResult `json:"crm_groups_get_response"`
}
type CrmGroupsGetResponseResult struct {
	/* 查询到的当前卖家的当前页的会员 */
	Groups []*Group `json:"groups"`
	/* 记录总数 */
	TotalResult int64 `json:"total_result"`
}

/*taobao.crm.grouptask.check*/
type CrmGrouptaskCheckRequest struct {
	values url.Values
}

func (this *CrmGrouptaskCheckRequest) GetApiMethodName() string {
	return "taobao.crm.grouptask.check"
}
func (this *CrmGrouptaskCheckRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmGrouptaskCheckRequest) GetValues() url.Values {
	return this.values
}

/* 分组id */
func (this *CrmGrouptaskCheckRequest) SetGroupId(value string) {
	this.Set("group_id", value)
}

type CrmGrouptaskCheckResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	CrmGrouptaskCheckResponseResult `json:"crm_grouptask_check_response"`
}
type CrmGrouptaskCheckResponseResult struct {
	/* 异步任务是否完成，true表示完成 */
	IsFinished bool `json:"is_finished"`
}

/*taobao.crm.member.group.get*/
type CrmMemberGroupGetRequest struct {
	values url.Values
}

func (this *CrmMemberGroupGetRequest) GetApiMethodName() string {
	return "taobao.crm.member.group.get"
}
func (this *CrmMemberGroupGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmMemberGroupGetRequest) GetValues() url.Values {
	return this.values
}

/* 会员Nick */
func (this *CrmMemberGroupGetRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

type CrmMemberGroupGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	CrmMemberGroupGetResponseResult `json:"crm_member_group_get_response"`
}
type CrmMemberGroupGetResponseResult struct {
	/* 查询到的当前卖家的当前页的会员 */
	Groups []*Group `json:"groups"`
}

/*taobao.crm.membergrade.set*/
type CrmMembergradeSetRequest struct {
	values url.Values
}

func (this *CrmMembergradeSetRequest) GetApiMethodName() string {
	return "taobao.crm.membergrade.set"
}
func (this *CrmMembergradeSetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmMembergradeSetRequest) GetValues() url.Values {
	return this.values
}

/* 买家昵称 */
func (this *CrmMembergradeSetRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 买家会员级别有四种1：普通会员。2：高级会员。 3VIP会员。 4：至尊VIP<br /> 支持最大值为：4<br /> 支持最小值为：1 */
func (this *CrmMembergradeSetRequest) SetGrade(value string) {
	this.Set("grade", value)
}

type CrmMembergradeSetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	CrmMembergradeSetResponseResult `json:"crm_membergrade_set_response"`
}
type CrmMembergradeSetResponseResult struct {
	/* 是否保存成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.crm.memberinfo.update*/
type CrmMemberinfoUpdateRequest struct {
	values url.Values
}

func (this *CrmMemberinfoUpdateRequest) GetApiMethodName() string {
	return "taobao.crm.memberinfo.update"
}
func (this *CrmMemberinfoUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmMemberinfoUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 买家昵称<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *CrmMemberinfoUpdateRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 城市.
请注意:从2014.4.15之后,省市将采用地区标准码,请通过物流API taobao.areas.get接口获取,参考:http://api.taobao.com/apidoc/api.htm?spm=0.0.0.0.nOOF9g&path=cid:7-apiId:59.API对于老的省市代码兼容会逐步下线 */
func (this *CrmMemberinfoUpdateRequest) SetCity(value string) {
	this.Set("city", value)
}

/* 交易关闭金额，单位：分 */
func (this *CrmMemberinfoUpdateRequest) SetCloseTradeAmount(value string) {
	this.Set("close_trade_amount", value)
}

/* 交易关闭次数 */
func (this *CrmMemberinfoUpdateRequest) SetCloseTradeCount(value string) {
	this.Set("close_trade_count", value)
}

/* 会员等级，1：普通客户，2：高级会员，3：高级会员 ，4：至尊vip

只有正常会员才给予升级，对于status blacklist的会员升级无效<br /> 支持最大值为：4<br /> 支持最小值为：1<br /> 支持的最大列表长度为：32 */
func (this *CrmMemberinfoUpdateRequest) SetGrade(value string) {
	this.Set("grade", value)
}

/* 分组的id集合字符串 */
func (this *CrmMemberinfoUpdateRequest) SetGroupIds(value string) {
	this.Set("group_ids", value)
}

/* 宝贝件数 */
func (this *CrmMemberinfoUpdateRequest) SetItemNum(value string) {
	this.Set("item_num", value)
}

/* 北京=1,天津=2,河北省=3,山西省=4,内蒙古自治区=5,辽宁省=6,吉林省=7,黑龙江省=8,上海=9,江苏省=10,浙江省=11,安徽省=12,福建省=13,江西省=14,山东省=15,河南省=16,湖北省=17,湖南省=18, 广东省=19,广西壮族自治区=20,海南省=21,重庆=22,四川省=23,贵州省=24,云南省=25,西藏自治区=26,陕西省=27,甘肃省=28,青海省=29,宁夏回族自治区=30,新疆维吾尔自治区=31,台湾省=32,香港特别行政区=33,澳门特别行政区=34,海外=35，约定36为清除Province设置.
请注意:从2014.4.15之后,省市将采用地区标准码,请通过物流API taobao.areas.get接口获取,参考:http://api.taobao.com/apidoc/api.htm?spm=0.0.0.0.nOOF9g&path=cid:7-apiId:59.API对于老的省市代码兼容会逐步下线. */
func (this *CrmMemberinfoUpdateRequest) SetProvince(value string) {
	this.Set("province", value)
}

/* 用于描述会员的状态，normal表示正常，blacklist表示黑名单(不享受会员折扣).<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *CrmMemberinfoUpdateRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 交易金额，单位：分 */
func (this *CrmMemberinfoUpdateRequest) SetTradeAmount(value string) {
	this.Set("trade_amount", value)
}

/* 交易笔数 */
func (this *CrmMemberinfoUpdateRequest) SetTradeCount(value string) {
	this.Set("trade_count", value)
}

type CrmMemberinfoUpdateResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	CrmMemberinfoUpdateResponseResult `json:"crm_memberinfo_update_response"`
}
type CrmMemberinfoUpdateResponseResult struct {
	/* 会员信息修改是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.crm.members.get*/
type CrmMembersGetRequest struct {
	values url.Values
}

func (this *CrmMembersGetRequest) GetApiMethodName() string {
	return "taobao.crm.members.get"
}
func (this *CrmMembersGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmMembersGetRequest) GetValues() url.Values {
	return this.values
}

/* 买家的昵称<br /> 支持最大长度为：1000<br /> 支持的最大列表长度为：1000 */
func (this *CrmMembersGetRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 显示第几页的会员，如果输入的页码大于总共的页码数，例如总共10页，但是current_page的值为11，则返回空白页，最小页数为1，最大页数为1000<br /> 支持最大值为：1000<br /> 支持最小值为：1 */
func (this *CrmMembersGetRequest) SetCurrentPage(value string) {
	this.Set("current_page", value)
}

/* 会员等级，0：店铺客户，1：普通会员，2：高级会员，3：VIP会员， 4：至尊VIP会员。如果不传入值则默认为全部等级。<br /> 支持最大值为：4<br /> 支持最小值为：-1<br /> 支持的最大列表长度为：32 */
func (this *CrmMembersGetRequest) SetGrade(value string) {
	this.Set("grade", value)
}

/* 最迟上次交易时间 */
func (this *CrmMembersGetRequest) SetMaxLastTradeTime(value string) {
	this.Set("max_last_trade_time", value)
}

/* 最大交易额，单位为元 */
func (this *CrmMembersGetRequest) SetMaxTradeAmount(value string) {
	this.Set("max_trade_amount", value)
}

/* 最大交易量<br /> 支持最小值为：0 */
func (this *CrmMembersGetRequest) SetMaxTradeCount(value string) {
	this.Set("max_trade_count", value)
}

/* 最早上次交易时间 */
func (this *CrmMembersGetRequest) SetMinLastTradeTime(value string) {
	this.Set("min_last_trade_time", value)
}

/* 最小交易额,单位为元 */
func (this *CrmMembersGetRequest) SetMinTradeAmount(value string) {
	this.Set("min_trade_amount", value)
}

/* 最小交易量<br /> 支持最小值为：0 */
func (this *CrmMembersGetRequest) SetMinTradeCount(value string) {
	this.Set("min_trade_count", value)
}

/* 表示每页显示的会员数量,page_size的最大值不能超过100条,最小值不能低于1，<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *CrmMembersGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type CrmMembersGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	CrmMembersGetResponseResult `json:"crm_members_get_response"`
}
type CrmMembersGetResponseResult struct {
	/* 根据一定条件查询到卖家的会员 */
	Members []*BasicMember `json:"members"`
	/* 记录总数 */
	TotalResult int64 `json:"total_result"`
}

/*taobao.crm.members.group.batchadd*/
type CrmMembersGroupBatchaddRequest struct {
	values url.Values
}

func (this *CrmMembersGroupBatchaddRequest) GetApiMethodName() string {
	return "taobao.crm.members.group.batchadd"
}
func (this *CrmMembersGroupBatchaddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmMembersGroupBatchaddRequest) GetValues() url.Values {
	return this.values
}

/* 会员的id（一次最多传入10个）<br /> 支持最小值为：1 */
func (this *CrmMembersGroupBatchaddRequest) SetBuyerIds(value string) {
	this.Set("buyer_ids", value)
}

/* 分组id<br /> 支持最小值为：1 */
func (this *CrmMembersGroupBatchaddRequest) SetGroupIds(value string) {
	this.Set("group_ids", value)
}

type CrmMembersGroupBatchaddResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	CrmMembersGroupBatchaddResponseResult `json:"crm_members_group_batchadd_response"`
}
type CrmMembersGroupBatchaddResponseResult struct {
	/* 添加操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.crm.members.groups.batchdelete*/
type CrmMembersGroupsBatchdeleteRequest struct {
	values url.Values
}

func (this *CrmMembersGroupsBatchdeleteRequest) GetApiMethodName() string {
	return "taobao.crm.members.groups.batchdelete"
}
func (this *CrmMembersGroupsBatchdeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmMembersGroupsBatchdeleteRequest) GetValues() url.Values {
	return this.values
}

/* 买家的Id集合<br /> 支持最小值为：1 */
func (this *CrmMembersGroupsBatchdeleteRequest) SetBuyerIds(value string) {
	this.Set("buyer_ids", value)
}

/* 会员需要删除的分组<br /> 支持最小值为：1 */
func (this *CrmMembersGroupsBatchdeleteRequest) SetGroupIds(value string) {
	this.Set("group_ids", value)
}

type CrmMembersGroupsBatchdeleteResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	CrmMembersGroupsBatchdeleteResponseResult `json:"crm_members_groups_batchdelete_response"`
}
type CrmMembersGroupsBatchdeleteResponseResult struct {
	/* 删除是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.crm.members.increment.get*/
type CrmMembersIncrementGetRequest struct {
	values url.Values
}

func (this *CrmMembersIncrementGetRequest) GetApiMethodName() string {
	return "taobao.crm.members.increment.get"
}
func (this *CrmMembersIncrementGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmMembersIncrementGetRequest) GetValues() url.Values {
	return this.values
}

/* 显示第几页的会员，如果输入的页码大于总共的页码数，例如总共10页，但是current_page的值为11，则返回空白页，最小页数为1<br /> 支持最小值为：1 */
func (this *CrmMembersIncrementGetRequest) SetCurrentPage(value string) {
	this.Set("current_page", value)
}

/* 卖家修改会员信息的时间终点.如果不填写此字段,默认为当前时间. */
func (this *CrmMembersIncrementGetRequest) SetEndModify(value string) {
	this.Set("end_modify", value)
}

/* 会员等级，0：店铺客户，1：普通会员，2：高级会员，3：VIP会员， 4：至尊VIP会员<br /> 支持最大值为：4<br /> 支持最小值为：-1<br /> 支持的最大列表长度为：32 */
func (this *CrmMembersIncrementGetRequest) SetGrade(value string) {
	this.Set("grade", value)
}

/* 每页显示的会员数，page_size的值不能超过100，最小值要大于1<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *CrmMembersIncrementGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 卖家修改会员信息的时间起点. */
func (this *CrmMembersIncrementGetRequest) SetStartModify(value string) {
	this.Set("start_modify", value)
}

type CrmMembersIncrementGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	CrmMembersIncrementGetResponseResult `json:"crm_members_increment_get_response"`
}
type CrmMembersIncrementGetResponseResult struct {
	/* 返回当前页的会员列表 */
	Members []*BasicMember `json:"members"`
	/* 记录的总条数 */
	TotalResult int64 `json:"total_result"`
}

/*taobao.crm.members.search*/
type CrmMembersSearchRequest struct {
	values url.Values
}

func (this *CrmMembersSearchRequest) GetApiMethodName() string {
	return "taobao.crm.members.search"
}
func (this *CrmMembersSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmMembersSearchRequest) GetValues() url.Values {
	return this.values
}

/* 买家昵称<br /> 支持最大长度为：1000<br /> 支持的最大列表长度为：1000 */
func (this *CrmMembersSearchRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 城市.
请注意:该字段从2014-4-23之后不再支持作为搜索条件检索. */
func (this *CrmMembersSearchRequest) SetCity(value string) {
	this.Set("city", value)
}

/* 显示第几页的会员，如果输入的页码大于总共的页码数，例如总共10页，但是current_page的值为11，则返回空白页，最小页数为1.最大1000页<br /> 支持最大值为：1000<br /> 支持最小值为：1 */
func (this *CrmMembersSearchRequest) SetCurrentPage(value string) {
	this.Set("current_page", value)
}

/* 会员等级，0：店铺客户，1：普通客户，2：高级会员，3：VIP会员, 4：至尊VIP会员<br /> 支持最大值为：4<br /> 支持最小值为：-1<br /> 支持的最大列表长度为：32 */
func (this *CrmMembersSearchRequest) SetGrade(value string) {
	this.Set("grade", value)
}

/* 分组id<br /> 支持的最大列表长度为：19 */
func (this *CrmMembersSearchRequest) SetGroupId(value string) {
	this.Set("group_id", value)
}

/* 最大平均客单价，单位为元.
请注意:该字段从2014-4-23之后不再支持作为搜索条件检索. */
func (this *CrmMembersSearchRequest) SetMaxAvgPrice(value string) {
	this.Set("max_avg_price", value)
}

/* 最大交易关闭笔数.
请注意:该字段从2014-4-23之后不再支持作为搜索条件检索.<br /> 支持最小值为：0 */
func (this *CrmMembersSearchRequest) SetMaxCloseTradeNum(value string) {
	this.Set("max_close_trade_num", value)
}

/* 最大交易宝贝件数<br /> 支持最小值为：0 */
func (this *CrmMembersSearchRequest) SetMaxItemNum(value string) {
	this.Set("max_item_num", value)
}

/* 最迟上次交易时间 */
func (this *CrmMembersSearchRequest) SetMaxLastTradeTime(value string) {
	this.Set("max_last_trade_time", value)
}

/* 最大交易额，单位为元 */
func (this *CrmMembersSearchRequest) SetMaxTradeAmount(value string) {
	this.Set("max_trade_amount", value)
}

/* 最大交易量<br /> 支持最小值为：0 */
func (this *CrmMembersSearchRequest) SetMaxTradeCount(value string) {
	this.Set("max_trade_count", value)
}

/* 最少平均客单价，单位为元.
请注意:该字段从2014-4-23之后不再支持作为搜索条件检索. */
func (this *CrmMembersSearchRequest) SetMinAvgPrice(value string) {
	this.Set("min_avg_price", value)
}

/* 最小交易关闭的笔数.
请注意:该字段从2014-4-23之后不再支持作为搜索条件检索.<br /> 支持最小值为：0 */
func (this *CrmMembersSearchRequest) SetMinCloseTradeNum(value string) {
	this.Set("min_close_trade_num", value)
}

/* 最小交易宝贝件数<br /> 支持最小值为：0 */
func (this *CrmMembersSearchRequest) SetMinItemNum(value string) {
	this.Set("min_item_num", value)
}

/* 最早上次交易时间 */
func (this *CrmMembersSearchRequest) SetMinLastTradeTime(value string) {
	this.Set("min_last_trade_time", value)
}

/* 最小交易额，单位为元 */
func (this *CrmMembersSearchRequest) SetMinTradeAmount(value string) {
	this.Set("min_trade_amount", value)
}

/* 最小交易量<br /> 支持最小值为：0 */
func (this *CrmMembersSearchRequest) SetMinTradeCount(value string) {
	this.Set("min_trade_count", value)
}

/* 每页显示的会员数量，page_size的最大值不能超过100，最小值不能小于1<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *CrmMembersSearchRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 北京=1,天津=2,河北省=3,山西省=4,内蒙古自治区=5,辽宁省=6,吉林省=7,黑龙江省=8,上海=9,江苏省=10,浙江省=11,安徽省=12,福建省=13,江西省=14,山东省=15,河南省=16,湖北省=17,湖南省=18, 广东省=19,广西壮族自治区=20,海南省=21,重庆=22,四川省=23,贵州省=24,云南省=25,西藏自治区26,陕西省=27,甘肃省=28,青海省=29,宁夏回族自治区=30,新疆维吾尔自治区=31,台湾省=32,香港特别行政区=33,澳门特别行政区=34,海外=35.
注:请注意:从2014.4.23之后,省市将采用地区标准码,请通过物流API taobao.areas.get接口获取,参考:http://api.taobao.com/apidoc/api.htm?spm=0.0.0.0.nOOF9g&path=cid:7-apiId:59.API对于老的省市代码兼容会逐步下线.<br /> 支持最大值为：1000000<br /> 支持最小值为：1 */
func (this *CrmMembersSearchRequest) SetProvince(value string) {
	this.Set("province", value)
}

/* 关系来源，1交易成功，2未成交，3卖家手动吸纳<br /> 支持最大值为：3<br /> 支持最小值为：1<br /> 支持的最大列表长度为：32 */
func (this *CrmMembersSearchRequest) SetRelationSource(value string) {
	this.Set("relation_source", value)
}

type CrmMembersSearchResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	CrmMembersSearchResponseResult `json:"crm_members_search_response"`
}
type CrmMembersSearchResponseResult struct {
	/* 根据一定条件查询的卖家会员 */
	Members []*CrmMember `json:"members"`
	/* 记录的总条数 */
	TotalResult int64 `json:"total_result"`
}

/*taobao.crm.qn.labels.seller.get*/
type CrmQnLabelsSellerGetRequest struct {
	values url.Values
}

func (this *CrmQnLabelsSellerGetRequest) GetApiMethodName() string {
	return "taobao.crm.qn.labels.seller.get"
}
func (this *CrmQnLabelsSellerGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmQnLabelsSellerGetRequest) GetValues() url.Values {
	return this.values
}

type CrmQnLabelsSellerGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	CrmQnLabelsSellerGetResponseResult `json:"crm_qn_labels_seller_get_response"`
}
type CrmQnLabelsSellerGetResponseResult struct {
	/* 查询到的当前卖家的当前页的会员 */
	Groups []*Group `json:"groups"`
}

/*taobao.crm.shopvip.cancel*/
type CrmShopvipCancelRequest struct {
	values url.Values
}

func (this *CrmShopvipCancelRequest) GetApiMethodName() string {
	return "taobao.crm.shopvip.cancel"
}
func (this *CrmShopvipCancelRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CrmShopvipCancelRequest) GetValues() url.Values {
	return this.values
}

type CrmShopvipCancelResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	CrmShopvipCancelResponseResult `json:"crm_shopvip_cancel_response"`
}
type CrmShopvipCancelResponseResult struct {
	/* 返回操作是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*tmall.crm.equity.get*/
type TmallCrmEquityGetRequest struct {
	values url.Values
}

func (this *TmallCrmEquityGetRequest) GetApiMethodName() string {
	return "tmall.crm.equity.get"
}
func (this *TmallCrmEquityGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallCrmEquityGetRequest) GetValues() url.Values {
	return this.values
}

type TmallCrmEquityGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	TmallCrmEquityGetResponseResult `json:"tmall_crm_equity_get_response"`
}
type TmallCrmEquityGetResponseResult struct {
	/* 天猫卖家设置的等级权益 */
	GradeEquitys []*GradeEquity `json:"grade_equitys"`
}

/*tmall.crm.equity.set*/
type TmallCrmEquitySetRequest struct {
	values url.Values
}

func (this *TmallCrmEquitySetRequest) GetApiMethodName() string {
	return "tmall.crm.equity.set"
}
func (this *TmallCrmEquitySetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallCrmEquitySetRequest) GetValues() url.Values {
	return this.values
}

/* 不免邮区域，只在包邮条件设置的时候生效。要和等级一一对应。包邮条件为false的时候不起作用。 */
func (this *TmallCrmEquitySetRequest) SetExcludeArea(value string) {
	this.Set("exclude_area", value)
}

/* 会员等级，用逗号分隔。买家会员级别0：店铺客户 1：普通会员 2 ：高级会员 3：VIP会员 4：至尊VIP<br /> 支持最大值为：4<br /> 支持最小值为：1 */
func (this *TmallCrmEquitySetRequest) SetGrade(value string) {
	this.Set("grade", value)
}

/* 返几倍天猫积分，可以不设置。如果设置则要和等级一一对应。不设置代表清空。 */
func (this *TmallCrmEquitySetRequest) SetPoint(value string) {
	this.Set("point", value)
}

/* 是否包邮，可以不设置，如果设置则要和等级一一对应。不设置代表清空 */
func (this *TmallCrmEquitySetRequest) SetPostage(value string) {
	this.Set("postage", value)
}

type TmallCrmEquitySetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	TmallCrmEquitySetResponseResult `json:"tmall_crm_equity_set_response"`
}
type TmallCrmEquitySetResponseResult struct {
	/* true：成功 false：失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.dd.auction.rule.add*/
type DdAuctionRuleAddRequest struct {
	values url.Values
}

func (this *DdAuctionRuleAddRequest) GetApiMethodName() string {
	return "taobao.dd.auction.rule.add"
}
func (this *DdAuctionRuleAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *DdAuctionRuleAddRequest) GetValues() url.Values {
	return this.values
}

/* 每天的结束时间 ， 格式：10000*hh+100*mm+ss */
func (this *DdAuctionRuleAddRequest) SetDayEnd(value string) {
	this.Set("day_end", value)
}

/* 每天的开始时间， 格式：10000*hh+100*mm+ss */
func (this *DdAuctionRuleAddRequest) SetDayStart(value string) {
	this.Set("day_start", value)
}

/* 扩展属性 */
func (this *DdAuctionRuleAddRequest) SetFeatures(value string) {
	this.Set("features", value)
}

/* 是否是点点商品规则 */
func (this *DdAuctionRuleAddRequest) SetIsDiandian(value string) {
	this.Set("is_diandian", value)
}

/* 是否是外卖商品规则 */
func (this *DdAuctionRuleAddRequest) SetIsTakeout(value string) {
	this.Set("is_takeout", value)
}

/* 商户规则名称 */
func (this *DdAuctionRuleAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 规则结束时间 */
func (this *DdAuctionRuleAddRequest) SetRuleEnd(value string) {
	this.Set("rule_end", value)
}

/* 规则开始时间 */
func (this *DdAuctionRuleAddRequest) SetRuleStart(value string) {
	this.Set("rule_start", value)
}

/* 排序 */
func (this *DdAuctionRuleAddRequest) SetSort(value string) {
	this.Set("sort", value)
}

/* 状态 */
func (this *DdAuctionRuleAddRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 商户ID */
func (this *DdAuctionRuleAddRequest) SetStoreId(value string) {
	this.Set("store_id", value)
}

/* 周期轮询0,1,2,3通过逗号间隔 */
func (this *DdAuctionRuleAddRequest) SetWeeklys(value string) {
	this.Set("weeklys", value)
}

type DdAuctionRuleAddResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	DdAuctionRuleAddResponseResult `json:"dd_auction_rule_add_response"`
}
type DdAuctionRuleAddResponseResult struct {
	/* 新增add规则ID */
	Result int64 `json:"result"`
}

/*taobao.dd.auction.rule.delete*/
type DdAuctionRuleDeleteRequest struct {
	values url.Values
}

func (this *DdAuctionRuleDeleteRequest) GetApiMethodName() string {
	return "taobao.dd.auction.rule.delete"
}
func (this *DdAuctionRuleDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *DdAuctionRuleDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 规则ID */
func (this *DdAuctionRuleDeleteRequest) SetId(value string) {
	this.Set("id", value)
}

/* 是否是外卖 */
func (this *DdAuctionRuleDeleteRequest) SetIsTakeout(value string) {
	this.Set("is_takeout", value)
}

/* 店铺id */
func (this *DdAuctionRuleDeleteRequest) SetStoreId(value string) {
	this.Set("store_id", value)
}

type DdAuctionRuleDeleteResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	DdAuctionRuleDeleteResponseResult `json:"dd_auction_rule_delete_response"`
}
type DdAuctionRuleDeleteResponseResult struct {
	/* 操作结果 */
	Result bool `json:"result"`
}

/*taobao.dd.auction.rule.query*/
type DdAuctionRuleQueryRequest struct {
	values url.Values
}

func (this *DdAuctionRuleQueryRequest) GetApiMethodName() string {
	return "taobao.dd.auction.rule.query"
}
func (this *DdAuctionRuleQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *DdAuctionRuleQueryRequest) GetValues() url.Values {
	return this.values
}

/* 当前日期时间 */
func (this *DdAuctionRuleQueryRequest) SetCurrentDate(value string) {
	this.Set("current_date", value)
}

/* 时间 */
func (this *DdAuctionRuleQueryRequest) SetDayTime(value string) {
	this.Set("day_time", value)
}

/* 规则id */
func (this *DdAuctionRuleQueryRequest) SetId(value string) {
	this.Set("id", value)
}

/* 是否是到店 */
func (this *DdAuctionRuleQueryRequest) SetIsDiandian(value string) {
	this.Set("is_diandian", value)
}

/* 是否是外卖 */
func (this *DdAuctionRuleQueryRequest) SetIsTakeout(value string) {
	this.Set("is_takeout", value)
}

/* 规则名 */
func (this *DdAuctionRuleQueryRequest) SetName(value string) {
	this.Set("name", value)
}

/* 状态数组string */
func (this *DdAuctionRuleQueryRequest) SetStatusArray(value string) {
	this.Set("status_array", value)
}

/* 商铺ID */
func (this *DdAuctionRuleQueryRequest) SetStoreId(value string) {
	this.Set("store_id", value)
}

/* 轮询周期 */
func (this *DdAuctionRuleQueryRequest) SetWeekly(value string) {
	this.Set("weekly", value)
}

type DdAuctionRuleQueryResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	DdAuctionRuleQueryResponseResult `json:"dd_auction_rule_query_response"`
}
type DdAuctionRuleQueryResponseResult struct {
	/* auction rule vo */
	Result []*DdTopAuctionRuleVO `json:"result"`
}

/*taobao.dd.auction.rule.update*/
type DdAuctionRuleUpdateRequest struct {
	values url.Values
}

func (this *DdAuctionRuleUpdateRequest) GetApiMethodName() string {
	return "taobao.dd.auction.rule.update"
}
func (this *DdAuctionRuleUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *DdAuctionRuleUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 每天的结束时间 ， 格式：10000*hh+100*mm+ss */
func (this *DdAuctionRuleUpdateRequest) SetDayEnd(value string) {
	this.Set("day_end", value)
}

/* 每天的开始时间， 格式：10000*hh+100*mm+ss */
func (this *DdAuctionRuleUpdateRequest) SetDayStart(value string) {
	this.Set("day_start", value)
}

/* 扩展属性 */
func (this *DdAuctionRuleUpdateRequest) SetFeatures(value string) {
	this.Set("features", value)
}

/* 规则ID */
func (this *DdAuctionRuleUpdateRequest) SetId(value string) {
	this.Set("id", value)
}

/* 是否是点点商品规则 */
func (this *DdAuctionRuleUpdateRequest) SetIsDiandian(value string) {
	this.Set("is_diandian", value)
}

/* 是否是外卖商品规则 */
func (this *DdAuctionRuleUpdateRequest) SetIsTakeout(value string) {
	this.Set("is_takeout", value)
}

/* 商户规则名称 */
func (this *DdAuctionRuleUpdateRequest) SetName(value string) {
	this.Set("name", value)
}

/* 规则结束时间 */
func (this *DdAuctionRuleUpdateRequest) SetRuleEnd(value string) {
	this.Set("rule_end", value)
}

/* 规则开始时间 */
func (this *DdAuctionRuleUpdateRequest) SetRuleStart(value string) {
	this.Set("rule_start", value)
}

/* 排序 */
func (this *DdAuctionRuleUpdateRequest) SetSort(value string) {
	this.Set("sort", value)
}

/* 状态 */
func (this *DdAuctionRuleUpdateRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 商户ID */
func (this *DdAuctionRuleUpdateRequest) SetStoreId(value string) {
	this.Set("store_id", value)
}

/* 周期轮询0,1,2,3通过逗号间隔 */
func (this *DdAuctionRuleUpdateRequest) SetWeeklys(value string) {
	this.Set("weeklys", value)
}

type DdAuctionRuleUpdateResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	DdAuctionRuleUpdateResponseResult `json:"dd_auction_rule_update_response"`
}
type DdAuctionRuleUpdateResponseResult struct {
	/* 规则id */
	Result int64 `json:"result"`
}

/*taobao.dd.menu.detail*/
type DdMenuDetailRequest struct {
	values url.Values
}

func (this *DdMenuDetailRequest) GetApiMethodName() string {
	return "taobao.dd.menu.detail"
}
func (this *DdMenuDetailRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *DdMenuDetailRequest) GetValues() url.Values {
	return this.values
}

/* 菜单编号 */
func (this *DdMenuDetailRequest) SetMenuId(value string) {
	this.Set("menu_id", value)
}

/* 支付订单ID */
func (this *DdMenuDetailRequest) SetOrderId(value string) {
	this.Set("order_id", value)
}

/* 外部门店编码 */
func (this *DdMenuDetailRequest) SetOutStoreId(value string) {
	this.Set("out_store_id", value)
}

/* 淘宝商户id */
func (this *DdMenuDetailRequest) SetStoreId(value string) {
	this.Set("store_id", value)
}

type DdMenuDetailResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	DdMenuDetailResponseResult `json:"dd_menu_detail_response"`
}
type DdMenuDetailResponseResult struct {
	/* 点菜单订单详情 */
	Result *DdTopMenuDetailVO `json:"result"`
}

/*taobao.dd.reserved.list*/
type DdReservedListRequest struct {
	values url.Values
}

func (this *DdReservedListRequest) GetApiMethodName() string {
	return "taobao.dd.reserved.list"
}
func (this *DdReservedListRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *DdReservedListRequest) GetValues() url.Values {
	return this.values
}

/* 买家称呼 */
func (this *DdReservedListRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 买家预定手机号 */
func (this *DdReservedListRequest) SetBuyerPhone(value string) {
	this.Set("buyer_phone", value)
}

/* 下单结束时间 */
func (this *DdReservedListRequest) SetCreateEnd(value string) {
	this.Set("create_end", value)
}

/* 下单开始时间 */
func (this *DdReservedListRequest) SetCreateStart(value string) {
	this.Set("create_start", value)
}

/* 预定结束时间 */
func (this *DdReservedListRequest) SetEnds(value string) {
	this.Set("ends", value)
}

/* 打印状态
 * 0 : 未打印
 * 1 : 已打印
 * 2 : 已处理 */
func (this *DdReservedListRequest) SetOption(value string) {
	this.Set("option", value)
}

/* 翻页游码 */
func (this *DdReservedListRequest) SetPn(value string) {
	this.Set("pn", value)
}

/* 页面大小 */
func (this *DdReservedListRequest) SetPs(value string) {
	this.Set("ps", value)
}

/* 预定开始时间 */
func (this *DdReservedListRequest) SetStarts(value string) {
	this.Set("starts", value)
}

/* 店铺哪个字段标明：前支付，基础，高级？ */
func (this *DdReservedListRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 淘宝商户id */
func (this *DdReservedListRequest) SetStoreId(value string) {
	this.Set("store_id", value)
}

type DdReservedListResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	DdReservedListResponseResult `json:"dd_reserved_list_response"`
}
type DdReservedListResponseResult struct {
	/* 订单列表翻页对象 */
	Result *DdTopPagination `json:"result"`
}

/*taobao.dd.reserved.update*/
type DdReservedUpdateRequest struct {
	values url.Values
}

func (this *DdReservedUpdateRequest) GetApiMethodName() string {
	return "taobao.dd.reserved.update"
}
func (this *DdReservedUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *DdReservedUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 预定订单编号 */
func (this *DdReservedUpdateRequest) SetId(value string) {
	this.Set("id", value)
}

/* 0-未标注 1-已到店 2-未到店 3-不来了 */
func (this *DdReservedUpdateRequest) SetMark(value string) {
	this.Set("mark", value)
}

/* 打印状态
 * 0 : 未打印
 * 1 : 已打印
 * 2 : 已处理 */
func (this *DdReservedUpdateRequest) SetOption(value string) {
	this.Set("option", value)
}

/* 卖家备注 */
func (this *DdReservedUpdateRequest) SetSellerMemo(value string) {
	this.Set("seller_memo", value)
}

/* 淘宝店铺id */
func (this *DdReservedUpdateRequest) SetStoreId(value string) {
	this.Set("store_id", value)
}

type DdReservedUpdateResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	DdReservedUpdateResponseResult `json:"dd_reserved_update_response"`
}
type DdReservedUpdateResponseResult struct {
	/* 是否更新成功 */
	Result bool `json:"result"`
}

/*taobao.trade.waimai.confirm*/
type TradeWaimaiConfirmRequest struct {
	values url.Values
}

func (this *TradeWaimaiConfirmRequest) GetApiMethodName() string {
	return "taobao.trade.waimai.confirm"
}
func (this *TradeWaimaiConfirmRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeWaimaiConfirmRequest) GetValues() url.Values {
	return this.values
}

/* 代送商ID */
func (this *TradeWaimaiConfirmRequest) SetAgentId(value string) {
	this.Set("agent_id", value)
}

/* 未确认发货的订单编号 */
func (this *TradeWaimaiConfirmRequest) SetOrderId(value string) {
	this.Set("order_id", value)
}

type TradeWaimaiConfirmResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	TradeWaimaiConfirmResponseResult `json:"trade_waimai_confirm_response"`
}
type TradeWaimaiConfirmResponseResult struct {
	/* 0:失败 1:成功 */
	RetCode string `json:"ret_code"`
}

/*taobao.trade.waimai.get*/
type TradeWaimaiGetRequest struct {
	values url.Values
}

func (this *TradeWaimaiGetRequest) GetApiMethodName() string {
	return "taobao.trade.waimai.get"
}
func (this *TradeWaimaiGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeWaimaiGetRequest) GetValues() url.Values {
	return this.values
}

/* true-查询仅按商家维度
false-查询按商家下所属店铺维度 */
func (this *TradeWaimaiGetRequest) SetIsAll(value string) {
	this.Set("is_all", value)
}

/* 返回记录数，超过20按20条返回数据<br /> 支持最大值为：20<br /> 支持最小值为：1 */
func (this *TradeWaimaiGetRequest) SetMaxSize(value string) {
	this.Set("max_size", value)
}

/* 外卖分店ID */
func (this *TradeWaimaiGetRequest) SetStoreId(value string) {
	this.Set("store_id", value)
}

type TradeWaimaiGetResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	TradeWaimaiGetResponseResult `json:"trade_waimai_get_response"`
}
type TradeWaimaiGetResponseResult struct {
	/* 查询到的订单列表对象 */
	Result *ListResult `json:"result"`
}

/*taobao.trade.waimai.orders.get*/
type TradeWaimaiOrdersGetRequest struct {
	values url.Values
}

func (this *TradeWaimaiOrdersGetRequest) GetApiMethodName() string {
	return "taobao.trade.waimai.orders.get"
}
func (this *TradeWaimaiOrdersGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeWaimaiOrdersGetRequest) GetValues() url.Values {
	return this.values
}

/* true 仅有支付宝订单,false 包括所有类型订单(货到付款,支付券等) */
func (this *TradeWaimaiOrdersGetRequest) SetIsAllOrder(value string) {
	this.Set("is_all_order", value)
}

/* true-查询仅按商家维度
false-查询按商家下所属店铺维度 */
func (this *TradeWaimaiOrdersGetRequest) SetIsAllShop(value string) {
	this.Set("is_all_shop", value)
}

/* 买家昵称/订单ID 搜索 */
func (this *TradeWaimaiOrdersGetRequest) SetKeyword(value string) {
	this.Set("keyword", value)
}

/* 订单状态 待确认订单2 , 退款中订单4 , 已发货12 关闭20 交易成功21 */
func (this *TradeWaimaiOrdersGetRequest) SetOrderStatus(value string) {
	this.Set("order_status", value)
}

/* 页码<br /> 支持的最大列表长度为：100 */
func (this *TradeWaimaiOrdersGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回记录数，超过20按20条返回数据<br /> 支持最大值为：20<br /> 支持最小值为：1 */
func (this *TradeWaimaiOrdersGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 外卖分店ID */
func (this *TradeWaimaiOrdersGetRequest) SetShopId(value string) {
	this.Set("shop_id", value)
}

type TradeWaimaiOrdersGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	TradeWaimaiOrdersGetResponseResult `json:"trade_waimai_orders_get_response"`
}
type TradeWaimaiOrdersGetResponseResult struct {
	/* 查询到的订单列表对象 */
	Result *ListResult `json:"result"`
}

/*taobao.trade.waimai.refuse*/
type TradeWaimaiRefuseRequest struct {
	values url.Values
}

func (this *TradeWaimaiRefuseRequest) GetApiMethodName() string {
	return "taobao.trade.waimai.refuse"
}
func (this *TradeWaimaiRefuseRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TradeWaimaiRefuseRequest) GetValues() url.Values {
	return this.values
}

/* 买家付款未发货订单号 */
func (this *TradeWaimaiRefuseRequest) SetOrderId(value string) {
	this.Set("order_id", value)
}

/* 拒单理由 */
func (this *TradeWaimaiRefuseRequest) SetReason(value string) {
	this.Set("reason", value)
}

type TradeWaimaiRefuseResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	TradeWaimaiRefuseResponseResult `json:"trade_waimai_refuse_response"`
}
type TradeWaimaiRefuseResponseResult struct {
	/* 0:失败 1:成功 */
	RetCode string `json:"ret_code"`
}

/*taobao.waimai.address.get*/
type WaimaiAddressGetRequest struct {
	values url.Values
}

func (this *WaimaiAddressGetRequest) GetApiMethodName() string {
	return "taobao.waimai.address.get"
}
func (this *WaimaiAddressGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiAddressGetRequest) GetValues() url.Values {
	return this.values
}

type WaimaiAddressGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	WaimaiAddressGetResponseResult `json:"waimai_address_get_response"`
}
type WaimaiAddressGetResponseResult struct {
	/* 返回结果 */
	Result string `json:"result"`
}

/*taobao.waimai.address.operate*/
type WaimaiAddressOperateRequest struct {
	values url.Values
}

func (this *WaimaiAddressOperateRequest) GetApiMethodName() string {
	return "taobao.waimai.address.operate"
}
func (this *WaimaiAddressOperateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiAddressOperateRequest) GetValues() url.Values {
	return this.values
}

/* 详细地址 */
func (this *WaimaiAddressOperateRequest) SetAddress(value string) {
	this.Set("address", value)
}

/* 城市汉字名称 */
func (this *WaimaiAddressOperateRequest) SetCity(value string) {
	this.Set("city", value)
}

/* 是否是默认地址 */
func (this *WaimaiAddressOperateRequest) SetDefaulted(value string) {
	this.Set("defaulted", value)
}

/* 地址ID */
func (this *WaimaiAddressOperateRequest) SetId(value string) {
	this.Set("id", value)
}

/* 收货人姓名 */
func (this *WaimaiAddressOperateRequest) SetName(value string) {
	this.Set("name", value)
}

/* 电话 */
func (this *WaimaiAddressOperateRequest) SetPhone(value string) {
	this.Set("phone", value)
}

/* 经度保留8位有效整数 */
func (this *WaimaiAddressOperateRequest) SetX(value string) {
	this.Set("x", value)
}

/* 纬度保留7位有效整数 */
func (this *WaimaiAddressOperateRequest) SetY(value string) {
	this.Set("y", value)
}

type WaimaiAddressOperateResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	WaimaiAddressOperateResponseResult `json:"waimai_address_operate_response"`
}
type WaimaiAddressOperateResponseResult struct {
	/* 是一个JSON */
	Result string `json:"result"`
}

/*taobao.waimai.agent.orderlist.get*/
type WaimaiAgentOrderlistGetRequest struct {
	values url.Values
}

func (this *WaimaiAgentOrderlistGetRequest) GetApiMethodName() string {
	return "taobao.waimai.agent.orderlist.get"
}
func (this *WaimaiAgentOrderlistGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiAgentOrderlistGetRequest) GetValues() url.Values {
	return this.values
}

/* 结束时间，格式: yyyy-mm-dd hh:mm:ss */
func (this *WaimaiAgentOrderlistGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 订单状态 */
func (this *WaimaiAgentOrderlistGetRequest) SetOrderStatus(value string) {
	this.Set("order_status", value)
}

/* 页数，默认第一页 */
func (this *WaimaiAgentOrderlistGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页数，最大不超过30 */
func (this *WaimaiAgentOrderlistGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 店铺ID */
func (this *WaimaiAgentOrderlistGetRequest) SetShopId(value string) {
	this.Set("shop_id", value)
}

/* 开始时间，格式：yyyy-mm-dd hh:mm:ss */
func (this *WaimaiAgentOrderlistGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type WaimaiAgentOrderlistGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	WaimaiAgentOrderlistGetResponseResult `json:"waimai_agent_orderlist_get_response"`
}
type WaimaiAgentOrderlistGetResponseResult struct {
	/* 代送商订单分页结果 */
	Result *DdTopPaginationForAgentOrder `json:"result"`
}

/*taobao.waimai.bcategory.get*/
type WaimaiBcategoryGetRequest struct {
	values url.Values
}

func (this *WaimaiBcategoryGetRequest) GetApiMethodName() string {
	return "taobao.waimai.bcategory.get"
}
func (this *WaimaiBcategoryGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiBcategoryGetRequest) GetValues() url.Values {
	return this.values
}

type WaimaiBcategoryGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	WaimaiBcategoryGetResponseResult `json:"waimai_bcategory_get_response"`
}
type WaimaiBcategoryGetResponseResult struct {
	/* 类目对象集合 */
	Result *CategoryResult `json:"result"`
}

/*taobao.waimai.category.operate*/
type WaimaiCategoryOperateRequest struct {
	values url.Values
}

func (this *WaimaiCategoryOperateRequest) GetApiMethodName() string {
	return "taobao.waimai.category.operate"
}
func (this *WaimaiCategoryOperateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiCategoryOperateRequest) GetValues() url.Values {
	return this.values
}

/* 2，新增
	参数：storeId ; 0=1 ; d=json数组

	如：{"cates":[{"name":"test1","cid":111,"order":2,"user":"test","pid":111,"rid":1111,"bid":12346}]}


{
  "cates": [
    {
      "name": "test1",   // 类目名， 必选
      "order": 2				// 排序值，升序,可选
    }
  ]
}

3, 修改

{
  "cates": [
    {
      "name": "test1",
      "cid": 111,			// 类目id，必须
      "order": 2			// 排序值，升序
    }
  ]
}

4, 删除
{
  "cates": [
    {
      "cid": 111,			// 类目id，必须
    }
  ]
} */
func (this *WaimaiCategoryOperateRequest) SetData(value string) {
	this.Set("data", value)
}

/* 0 查询 1 创建 2 更新 3 删除 */
func (this *WaimaiCategoryOperateRequest) SetOperate(value string) {
	this.Set("operate", value)
}

/* 店铺ID */
func (this *WaimaiCategoryOperateRequest) SetShopId(value string) {
	this.Set("shop_id", value)
}

type WaimaiCategoryOperateResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	WaimaiCategoryOperateResponseResult `json:"waimai_category_operate_response"`
}
type WaimaiCategoryOperateResponseResult struct {
	/* 是一个JSON */
	Result string `json:"result"`
}

/*taobao.waimai.item.add*/
type WaimaiItemAddRequest struct {
	values url.Values
}

func (this *WaimaiItemAddRequest) GetApiMethodName() string {
	return "taobao.waimai.item.add"
}
func (this *WaimaiItemAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiItemAddRequest) GetValues() url.Values {
	return this.values
}

/* 商品描述，至少输入5个字 */
func (this *WaimaiItemAddRequest) SetAuctiondesc(value string) {
	this.Set("auctiondesc", value)
}

/* 商品状态(0立即出售,-2放入仓库) */
func (this *WaimaiItemAddRequest) SetAuctionstatus(value string) {
	this.Set("auctionstatus", value)
}

/* 宝贝所属后台类目 */
func (this *WaimaiItemAddRequest) SetCategoryid(value string) {
	this.Set("categoryid", value)
}

/* 自定义类目,一个商品对应一个自定义类目 */
func (this *WaimaiItemAddRequest) SetCategoryids(value string) {
	this.Set("categoryids", value)
}

/* 商品外部编码，没有则为空 */
func (this *WaimaiItemAddRequest) SetGoodsno(value string) {
	this.Set("goodsno", value)
}

/* 限购数量,不输入则表示该宝贝无限购数 */
func (this *WaimaiItemAddRequest) SetLimitbuy(value string) {
	this.Set("limitbuy", value)
}

/* 宝贝原价，最多两位小数 */
func (this *WaimaiItemAddRequest) SetOriprice(value string) {
	this.Set("oriprice", value)
}

/* 宝贝图片 */
func (this *WaimaiItemAddRequest) SetPicurl(value string) {
	this.Set("picurl", value)
}

/* 宝贝现在价格,最多两位小数<br /> 支持最大长度为：8<br /> 支持的最大列表长度为：8 */
func (this *WaimaiItemAddRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 菜品库存(范围1-999999)<br /> 支持的最大列表长度为：6 */
func (this *WaimaiItemAddRequest) SetQuantity(value string) {
	this.Set("quantity", value)
}

/* 商品规则ID */
func (this *WaimaiItemAddRequest) SetRuleId(value string) {
	this.Set("rule_id", value)
}

/* 外卖店铺id，多个以英文逗号分隔 */
func (this *WaimaiItemAddRequest) SetShopids(value string) {
	this.Set("shopids", value)
}

/* [{"pv":[{"pText":"颜色","vText":"红色"},{"pText":"尺寸","vText":"8寸"},{"pText":"辣度","vText":"重辣"}],
   "quantity":"10","price":"100.00","outSkuId":"XXXXXID"}] */
func (this *WaimaiItemAddRequest) SetSkuInfo(value string) {
	this.Set("sku_info", value)
}

/* 菜名<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *WaimaiItemAddRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 宝贝副图，最多可上传4张 */
func (this *WaimaiItemAddRequest) SetViceimage(value string) {
	this.Set("viceimage", value)
}

type WaimaiItemAddResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	WaimaiItemAddResponseResult `json:"waimai_item_add_response"`
}
type WaimaiItemAddResponseResult struct {
	/* 返回新增成功的宝贝id */
	Result *CreateResult `json:"result"`
}

/*taobao.waimai.item.get*/
type WaimaiItemGetRequest struct {
	values url.Values
}

func (this *WaimaiItemGetRequest) GetApiMethodName() string {
	return "taobao.waimai.item.get"
}
func (this *WaimaiItemGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiItemGetRequest) GetValues() url.Values {
	return this.values
}

/* 只返回对应的字段信息，可输入(itemid,title,price,oriprice,goods_no,auction_status,quantity,auction_desc,pic_url,category_id,limit_buy,viceImage,sku,recommend,create_time,modify_time)，多个以英文逗号分隔 */
func (this *WaimaiItemGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 外卖宝贝数字id */
func (this *WaimaiItemGetRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

type WaimaiItemGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	WaimaiItemGetResponseResult `json:"waimai_item_get_response"`
}
type WaimaiItemGetResponseResult struct {
	/* 外卖宝贝详情 */
	Result *TopAuction `json:"result"`
}

/*taobao.waimai.item.operate*/
type WaimaiItemOperateRequest struct {
	values url.Values
}

func (this *WaimaiItemOperateRequest) GetApiMethodName() string {
	return "taobao.waimai.item.operate"
}
func (this *WaimaiItemOperateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiItemOperateRequest) GetValues() url.Values {
	return this.values
}

/* 待操作宝贝id，多个以英文逗号分隔 */
func (this *WaimaiItemOperateRequest) SetIds(value string) {
	this.Set("ids", value)
}

/* 操作类型(1上架2下架3删除) */
func (this *WaimaiItemOperateRequest) SetO(value string) {
	this.Set("o", value)
}

type WaimaiItemOperateResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	WaimaiItemOperateResponseResult `json:"waimai_item_operate_response"`
}
type WaimaiItemOperateResponseResult struct {
	/* 批量操作结果 */
	BatchOperateResult *BatchOperateResult `json:"batch_operate_result"`
}

/*taobao.waimai.item.pic.upload*/
type WaimaiItemPicUploadRequest struct {
	values url.Values
}

func (this *WaimaiItemPicUploadRequest) GetApiMethodName() string {
	return "taobao.waimai.item.pic.upload"
}
func (this *WaimaiItemPicUploadRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiItemPicUploadRequest) GetValues() url.Values {
	return this.values
}

/* 图片文件字节数组<br /> 支持的最大列表长度为：512000 */
func (this *WaimaiItemPicUploadRequest) SetPicbytes(value string) {
	this.Set("picbytes", value)
}

type WaimaiItemPicUploadResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	WaimaiItemPicUploadResponseResult `json:"waimai_item_pic_upload_response"`
}
type WaimaiItemPicUploadResponseResult struct {
	/* 返回图片地址及提示信息及code.
	返回结果result_data为完整图片地址,例如:
	http://img.taobaocdn.com/bao/uploaded/i1/T1uTCUXExiXXcK5RZ8 */
	Result *CreateResult `json:"result"`
}

/*taobao.waimai.item.update*/
type WaimaiItemUpdateRequest struct {
	values url.Values
}

func (this *WaimaiItemUpdateRequest) GetApiMethodName() string {
	return "taobao.waimai.item.update"
}
func (this *WaimaiItemUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiItemUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 商品描述，至少输入5个字 */
func (this *WaimaiItemUpdateRequest) SetAuctiondesc(value string) {
	this.Set("auctiondesc", value)
}

/* 商品状态(0立即出售,-2放入仓库) */
func (this *WaimaiItemUpdateRequest) SetAuctionstatus(value string) {
	this.Set("auctionstatus", value)
}

/* 宝贝所属后台类目 */
func (this *WaimaiItemUpdateRequest) SetCategoryid(value string) {
	this.Set("categoryid", value)
}

/* 商品自定义分类 */
func (this *WaimaiItemUpdateRequest) SetCategoryids(value string) {
	this.Set("categoryids", value)
}

/* 目前个字段为空，以后需要更新sku的话传sku */
func (this *WaimaiItemUpdateRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 商品外部编码，没有则为空 */
func (this *WaimaiItemUpdateRequest) SetGoodsno(value string) {
	this.Set("goodsno", value)
}

/* 当前外卖店铺id */
func (this *WaimaiItemUpdateRequest) SetInShopId(value string) {
	this.Set("in_shop_id", value)
}

/* 宝贝id */
func (this *WaimaiItemUpdateRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 限购数量,不输入则表示该宝贝无限购数 */
func (this *WaimaiItemUpdateRequest) SetLimitbuy(value string) {
	this.Set("limitbuy", value)
}

/* 宝贝原价，最多两位小数 */
func (this *WaimaiItemUpdateRequest) SetOriprice(value string) {
	this.Set("oriprice", value)
}

/* 宝贝图片 */
func (this *WaimaiItemUpdateRequest) SetPicurl(value string) {
	this.Set("picurl", value)
}

/* 宝贝现在价格,最多两位小数<br /> 支持最大长度为：8<br /> 支持的最大列表长度为：8 */
func (this *WaimaiItemUpdateRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 菜品库存(范围1-999999)<br /> 支持的最大列表长度为：6 */
func (this *WaimaiItemUpdateRequest) SetQuantity(value string) {
	this.Set("quantity", value)
}

/* 商品规则ID */
func (this *WaimaiItemUpdateRequest) SetRuleId(value string) {
	this.Set("rule_id", value)
}

/* [{"pv":[{"pText":"颜色","vText":"红色"},{"pText":"尺寸","vText":"8寸"},{"pText":"辣度","vText":"重辣"}],
   "quantity":"10","price":"100.00","outSkuId":"XXXXXID"}] */
func (this *WaimaiItemUpdateRequest) SetSkuInfo(value string) {
	this.Set("sku_info", value)
}

/* 菜名<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *WaimaiItemUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 宝贝副图，最多可上传4张 */
func (this *WaimaiItemUpdateRequest) SetViceimage(value string) {
	this.Set("viceimage", value)
}

type WaimaiItemUpdateResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	WaimaiItemUpdateResponseResult `json:"waimai_item_update_response"`
}
type WaimaiItemUpdateResponseResult struct {
	/* 返回新增成功的宝贝id */
	Result *CreateResult `json:"result"`
}

/*taobao.waimai.itemlist.get*/
type WaimaiItemlistGetRequest struct {
	values url.Values
}

func (this *WaimaiItemlistGetRequest) GetApiMethodName() string {
	return "taobao.waimai.itemlist.get"
}
func (this *WaimaiItemlistGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiItemlistGetRequest) GetValues() url.Values {
	return this.values
}

/* 外卖前台类目id<br /> 支持的最大列表长度为：11 */
func (this *WaimaiItemlistGetRequest) SetCategoryId(value string) {
	this.Set("category_id", value)
}

/* 商品截止修改时间格式如(2013-10-25 00:00：00) */
func (this *WaimaiItemlistGetRequest) SetEndModified(value string) {
	this.Set("end_modified", value)
}

/* 只返回对应的字段信息，可输入(itemid,title,price,oriprice,goods_no,auction_status,quantity,auction_desc,pic_url,category_id,limit_buy,viceImage,sku,recommend,create_time,modify_time)，多个以英文逗号分隔 */
func (this *WaimaiItemlistGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 外卖宝贝标题关键字 */
func (this *WaimaiItemlistGetRequest) SetKeyword(value string) {
	this.Set("keyword", value)
}

/* 格式为column:asc/desc ，column可选值:modify_time(修改时间),price(宝贝价格); 默认修改降序(即最新上架及修改的排在前面)。如按照上架时间降序排序方式为modify_time:desc */
func (this *WaimaiItemlistGetRequest) SetOrderBy(value string) {
	this.Set("order_by", value)
}

/* 查询菜品的页码。1则为第一页<br /> 支持最大值为：500<br /> 支持最小值为：1<br /> 支持的最大列表长度为：3 */
func (this *WaimaiItemlistGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每一次查询返回的条数<br /> 支持最大值为：500<br /> 支持最小值为：1 */
func (this *WaimaiItemlistGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 出售中宝贝1,仓库中宝贝2,所有宝贝0<br /> 支持最大值为：2<br /> 支持最小值为：0<br /> 支持的最大列表长度为：1 */
func (this *WaimaiItemlistGetRequest) SetSalesStatus(value string) {
	this.Set("sales_status", value)
}

/* 外卖数字型店铺id<br /> 支持的最大列表长度为：9 */
func (this *WaimaiItemlistGetRequest) SetShopid(value string) {
	this.Set("shopid", value)
}

/* 商品起始的修改时间格式如(2013-10-22 00:00：00) */
func (this *WaimaiItemlistGetRequest) SetStartModified(value string) {
	this.Set("start_modified", value)
}

type WaimaiItemlistGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	WaimaiItemlistGetResponseResult `json:"waimai_itemlist_get_response"`
}
type WaimaiItemlistGetResponseResult struct {
	/* 返回外卖宝贝列表 */
	DataList []*TopAuction `json:"data_list"`
	/* 符合条件的外卖宝贝总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.waimai.order.index.get*/
type WaimaiOrderIndexGetRequest struct {
	values url.Values
}

func (this *WaimaiOrderIndexGetRequest) GetApiMethodName() string {
	return "taobao.waimai.order.index.get"
}
func (this *WaimaiOrderIndexGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiOrderIndexGetRequest) GetValues() url.Values {
	return this.values
}

/* 订单创建时间的结束时间,格式为 yyyy-MM-dd HH:mm:ss */
func (this *WaimaiOrderIndexGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 获取最近一定秒数的订单 */
func (this *WaimaiOrderIndexGetRequest) SetInterval(value string) {
	this.Set("interval", value)
}

/* 订单状态 待确认订单2 , 退款中订单4 , 已发货12 关闭20 交易成功21 */
func (this *WaimaiOrderIndexGetRequest) SetOrderStatus(value string) {
	this.Set("order_status", value)
}

/* 订单类型 */
func (this *WaimaiOrderIndexGetRequest) SetOrderType(value string) {
	this.Set("order_type", value)
}

/* 页码<br /> 支持的最大列表长度为：100 */
func (this *WaimaiOrderIndexGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 返回记录数，超过200按200条返回数据<br /> 支持最大值为：200<br /> 支持最小值为：1 */
func (this *WaimaiOrderIndexGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 外卖分店ID */
func (this *WaimaiOrderIndexGetRequest) SetShopId(value string) {
	this.Set("shop_id", value)
}

/* 订单创建时间的起点时间,格式为 yyyy-MM-dd HH:mm:ss */
func (this *WaimaiOrderIndexGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type WaimaiOrderIndexGetResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	WaimaiOrderIndexGetResponseResult `json:"waimai_order_index_get_response"`
}
type WaimaiOrderIndexGetResponseResult struct {
	/* 查询到的订单列表对象 */
	Result *ListResult `json:"result"`
}

/*taobao.waimai.order.single.get*/
type WaimaiOrderSingleGetRequest struct {
	values url.Values
}

func (this *WaimaiOrderSingleGetRequest) GetApiMethodName() string {
	return "taobao.waimai.order.single.get"
}
func (this *WaimaiOrderSingleGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiOrderSingleGetRequest) GetValues() url.Values {
	return this.values
}

/* 订单ID */
func (this *WaimaiOrderSingleGetRequest) SetOrderId(value string) {
	this.Set("order_id", value)
}

type WaimaiOrderSingleGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	WaimaiOrderSingleGetResponseResult `json:"waimai_order_single_get_response"`
}
type WaimaiOrderSingleGetResponseResult struct {
	/* 订单详情 */
	Result *TakeoutThirdOrder `json:"result"`
}

/*taobao.waimai.shop.businessrules.get*/
type WaimaiShopBusinessrulesGetRequest struct {
	values url.Values
}

func (this *WaimaiShopBusinessrulesGetRequest) GetApiMethodName() string {
	return "taobao.waimai.shop.businessrules.get"
}
func (this *WaimaiShopBusinessrulesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiShopBusinessrulesGetRequest) GetValues() url.Values {
	return this.values
}

/* 外卖店铺id */
func (this *WaimaiShopBusinessrulesGetRequest) SetShopid(value string) {
	this.Set("shopid", value)
}

type WaimaiShopBusinessrulesGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	WaimaiShopBusinessrulesGetResponseResult `json:"waimai_shop_businessrules_get_response"`
}
type WaimaiShopBusinessrulesGetResponseResult struct {
	/* 外卖店铺信息 */
	Result *TakeoutOption `json:"result"`
}

/*taobao.waimai.shop.businessrules.update*/
type WaimaiShopBusinessrulesUpdateRequest struct {
	values url.Values
}

func (this *WaimaiShopBusinessrulesUpdateRequest) GetApiMethodName() string {
	return "taobao.waimai.shop.businessrules.update"
}
func (this *WaimaiShopBusinessrulesUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiShopBusinessrulesUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 配送范围地图标注 */
func (this *WaimaiShopBusinessrulesUpdateRequest) SetAreaRange(value string) {
	this.Set("area_range", value)
}

/* 配送费 */
func (this *WaimaiShopBusinessrulesUpdateRequest) SetDeliveryAmount(value string) {
	this.Set("delivery_amount", value)
}

/* 配送范围文字说明 */
func (this *WaimaiShopBusinessrulesUpdateRequest) SetDeliveryArea(value string) {
	this.Set("delivery_area", value)
}

/* 配送时间 */
func (this *WaimaiShopBusinessrulesUpdateRequest) SetDeliveryTime(value string) {
	this.Set("delivery_time", value)
}

/* 送货预留时间 */
func (this *WaimaiShopBusinessrulesUpdateRequest) SetEarlyMinutes(value string) {
	this.Set("early_minutes", value)
}

/* 满多少就免配送费 */
func (this *WaimaiShopBusinessrulesUpdateRequest) SetFullAmount(value string) {
	this.Set("full_amount", value)
}

/* 起送金额 */
func (this *WaimaiShopBusinessrulesUpdateRequest) SetMinimumAmount(value string) {
	this.Set("minimum_amount", value)
}

/* 外卖商家电话 */
func (this *WaimaiShopBusinessrulesUpdateRequest) SetMobile(value string) {
	this.Set("mobile", value)
}

/* 店铺id */
func (this *WaimaiShopBusinessrulesUpdateRequest) SetShopid(value string) {
	this.Set("shopid", value)
}

/* 支持预定, 当天：1，三天内：3，七天内：7 */
func (this *WaimaiShopBusinessrulesUpdateRequest) SetSupportDays(value string) {
	this.Set("support_days", value)
}

type WaimaiShopBusinessrulesUpdateResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	WaimaiShopBusinessrulesUpdateResponseResult `json:"waimai_shop_businessrules_update_response"`
}
type WaimaiShopBusinessrulesUpdateResponseResult struct {
	/* 成功：0，失败：1 */
	RetCode string `json:"ret_code"`
}

/*taobao.waimai.shop.close*/
type WaimaiShopCloseRequest struct {
	values url.Values
}

func (this *WaimaiShopCloseRequest) GetApiMethodName() string {
	return "taobao.waimai.shop.close"
}
func (this *WaimaiShopCloseRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiShopCloseRequest) GetValues() url.Values {
	return this.values
}

/* 外卖店铺id */
func (this *WaimaiShopCloseRequest) SetShopid(value string) {
	this.Set("shopid", value)
}

type WaimaiShopCloseResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	WaimaiShopCloseResponseResult `json:"waimai_shop_close_response"`
}
type WaimaiShopCloseResponseResult struct {
	/* 成功：0,失败：1 */
	RetCode string `json:"ret_code"`
}

/*taobao.waimai.shop.get*/
type WaimaiShopGetRequest struct {
	values url.Values
}

func (this *WaimaiShopGetRequest) GetApiMethodName() string {
	return "taobao.waimai.shop.get"
}
func (this *WaimaiShopGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiShopGetRequest) GetValues() url.Values {
	return this.values
}

/* 外卖店铺id */
func (this *WaimaiShopGetRequest) SetShopid(value string) {
	this.Set("shopid", value)
}

type WaimaiShopGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	WaimaiShopGetResponseResult `json:"waimai_shop_get_response"`
}
type WaimaiShopGetResponseResult struct {
	/* 外卖店信息 */
	Result *TakeoutShop `json:"result"`
}

/*taobao.waimai.shop.list*/
type WaimaiShopListRequest struct {
	values url.Values
}

func (this *WaimaiShopListRequest) GetApiMethodName() string {
	return "taobao.waimai.shop.list"
}
func (this *WaimaiShopListRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiShopListRequest) GetValues() url.Values {
	return this.values
}

/* 查询关键字 */
func (this *WaimaiShopListRequest) SetKeywords(value string) {
	this.Set("keywords", value)
}

/* 页码<br /> 支持最小值为：1 */
func (this *WaimaiShopListRequest) SetPage(value string) {
	this.Set("page", value)
}

/* 每页条数<br /> 支持最大值为：20<br /> 支持最小值为：1 */
func (this *WaimaiShopListRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 店铺状态，歇业：0，营业：1，所有：-1 */
func (this *WaimaiShopListRequest) SetStatus(value string) {
	this.Set("status", value)
}

type WaimaiShopListResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	WaimaiShopListResponseResult `json:"waimai_shop_list_response"`
}
type WaimaiShopListResponseResult struct {
	/* 数据结果集 */
	Result *TakeoutShopPage `json:"result"`
}

/*taobao.waimai.shop.open*/
type WaimaiShopOpenRequest struct {
	values url.Values
}

func (this *WaimaiShopOpenRequest) GetApiMethodName() string {
	return "taobao.waimai.shop.open"
}
func (this *WaimaiShopOpenRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiShopOpenRequest) GetValues() url.Values {
	return this.values
}

/* 外卖店铺id */
func (this *WaimaiShopOpenRequest) SetShopid(value string) {
	this.Set("shopid", value)
}

type WaimaiShopOpenResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	WaimaiShopOpenResponseResult `json:"waimai_shop_open_response"`
}
type WaimaiShopOpenResponseResult struct {
	/* 成功：0，失败：1 */
	RetCode string `json:"ret_code"`
}

/*taobao.waimai.shop.update*/
type WaimaiShopUpdateRequest struct {
	values url.Values
}

func (this *WaimaiShopUpdateRequest) GetApiMethodName() string {
	return "taobao.waimai.shop.update"
}
func (this *WaimaiShopUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiShopUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 店铺地址 */
func (this *WaimaiShopUpdateRequest) SetAddress(value string) {
	this.Set("address", value)
}

/* 外卖店名称 */
func (this *WaimaiShopUpdateRequest) SetName(value string) {
	this.Set("name", value)
}

/* 店铺电话号码 */
func (this *WaimaiShopUpdateRequest) SetPhone(value string) {
	this.Set("phone", value)
}

/* 店铺标志

注意：这里传递的图片url是通过taobao.waimai.item.pic.upload接口上传获得的 */
func (this *WaimaiShopUpdateRequest) SetPicUrl(value string) {
	this.Set("pic_url", value)
}

/* 店铺坐标x
注意：这里是大坐标，即是乘以100000后的值 */
func (this *WaimaiShopUpdateRequest) SetPosx(value string) {
	this.Set("posx", value)
}

/* 店铺坐标y
注意：这里是大坐标，即是乘以100000后的值 */
func (this *WaimaiShopUpdateRequest) SetPosy(value string) {
	this.Set("posy", value)
}

/* 外卖店铺id */
func (this *WaimaiShopUpdateRequest) SetShopid(value string) {
	this.Set("shopid", value)
}

/* 店铺与ISV的关联关系 */
func (this *WaimaiShopUpdateRequest) SetShopoutid(value string) {
	this.Set("shopoutid", value)
}

type WaimaiShopUpdateResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	WaimaiShopUpdateResponseResult `json:"waimai_shop_update_response"`
}
type WaimaiShopUpdateResponseResult struct {
	/* 成功：0，失败：1 */
	RetCode string `json:"ret_code"`
}

/*taobao.waimai.shopbycity.get*/
type WaimaiShopbycityGetRequest struct {
	values url.Values
}

func (this *WaimaiShopbycityGetRequest) GetApiMethodName() string {
	return "taobao.waimai.shopbycity.get"
}
func (this *WaimaiShopbycityGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WaimaiShopbycityGetRequest) GetValues() url.Values {
	return this.values
}

type WaimaiShopbycityGetResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	WaimaiShopbycityGetResponseResult `json:"waimai_shopbycity_get_response"`
}
type WaimaiShopbycityGetResponseResult struct {
	/* 以city维度分的店铺list */
	Result *ShopCityResult `json:"result"`
}

/*taobao.media.file.add*/
type MediaFileAddRequest struct {
	values url.Values
}

func (this *MediaFileAddRequest) GetApiMethodName() string {
	return "taobao.media.file.add"
}
func (this *MediaFileAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *MediaFileAddRequest) GetValues() url.Values {
	return this.values
}

/* 接入多媒体平台的业务code
每个应用有一个特有的业务code */
func (this *MediaFileAddRequest) SetBizCode(value string) {
	this.Set("biz_code", value)
}

/* 文件属于的那个目录的目录编号<br /> 支持最小值为：0 */
func (this *MediaFileAddRequest) SetDirId(value string) {
	this.Set("dir_id", value)
}

/* 额外信息 */
func (this *MediaFileAddRequest) SetExt(value string) {
	this.Set("ext", value)
}

/* 文件 */
func (this *MediaFileAddRequest) SetFileData(value string) {
	this.Set("file_data", value)
}

/* 上传文件的名称<br /> 支持最大长度为：50<br /> 支持的最大列表长度为：50 */
func (this *MediaFileAddRequest) SetName(value string) {
	this.Set("name", value)
}

type MediaFileAddResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	MediaFileAddResponseResult `json:"media_file_add_response"`
}
type MediaFileAddResponseResult struct {
	/* 上传到多媒体平台的文件 */
	File *File `json:"file"`
}

/*taobao.media.file.delete*/
type MediaFileDeleteRequest struct {
	values url.Values
}

func (this *MediaFileDeleteRequest) GetApiMethodName() string {
	return "taobao.media.file.delete"
}
func (this *MediaFileDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *MediaFileDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 接入多媒体平台的业务code 每个应用有一个特有的业务code */
func (this *MediaFileDeleteRequest) SetBizCode(value string) {
	this.Set("biz_code", value)
}

/* 文件ID字符串,可以一个也可以一组,用英文逗号间隔,如450,120,155 */
func (this *MediaFileDeleteRequest) SetFileIds(value string) {
	this.Set("file_ids", value)
}

type MediaFileDeleteResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	MediaFileDeleteResponseResult `json:"media_file_delete_response"`
}
type MediaFileDeleteResponseResult struct {
	/* 全部删除成功返回“”，部分删除成功返回没有删除成功的id */
	Result string `json:"result"`
}

/*taobao.media.file.get*/
type MediaFileGetRequest struct {
	values url.Values
}

func (this *MediaFileGetRequest) GetApiMethodName() string {
	return "taobao.media.file.get"
}
func (this *MediaFileGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *MediaFileGetRequest) GetValues() url.Values {
	return this.values
}

/* 多媒体应用接入biz_code */
func (this *MediaFileGetRequest) SetBizCode(value string) {
	this.Set("biz_code", value)
}

/* 分类id<br /> 支持最大值为：9223372036854775807 */
func (this *MediaFileGetRequest) SetDirId(value string) {
	this.Set("dir_id", value)
}

/* 查询上传结束时间点,格式:yyyy-MM-dd HH:mm:ss */
func (this *MediaFileGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 文件id<br /> 支持最大值为：9223372036854775807 */
func (this *MediaFileGetRequest) SetFileId(value string) {
	this.Set("file_id", value)
}

/* 文件名称查询，like查询 */
func (this *MediaFileGetRequest) SetName(value string) {
	this.Set("name", value)
}

/* 图片查询结果排序,time:desc按上传时间从晚到早(默认), time:asc按上传时间从早到晚,sizes:desc按图片从大到小，sizes:asc按图片从小到大,默认time:desc */
func (this *MediaFileGetRequest) SetOrderBy(value string) {
	this.Set("order_by", value)
}

/* 页码.传入值为1代表第一页,传入值为2代表第二页,依此类推,默认值为1 */
func (this *MediaFileGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数.每页返回最多返回100条,默认值40 */
func (this *MediaFileGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 查询上传开始时间点,格式:yyyy-MM-dd HH:mm:ss */
func (this *MediaFileGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

/* 图片url查询接口 */
func (this *MediaFileGetRequest) SetUrls(value string) {
	this.Set("urls", value)
}

type MediaFileGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	MediaFileGetResponseResult `json:"media_file_get_response"`
}
type MediaFileGetResponseResult struct {
	/* 查询分页数据对象 */
	Result []*File `json:"result"`
	/* 文件总数 */
	Total int64 `json:"total"`
}

/*taobao.picture.category.add*/
type PictureCategoryAddRequest struct {
	values url.Values
}

func (this *PictureCategoryAddRequest) GetApiMethodName() string {
	return "taobao.picture.category.add"
}
func (this *PictureCategoryAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PictureCategoryAddRequest) GetValues() url.Values {
	return this.values
}

/* 图片分类的父分类,一级分类的parent_id为0,二级分类的则为其父分类的picture_category_id */
func (this *PictureCategoryAddRequest) SetParentId(value string) {
	this.Set("parent_id", value)
}

/* 图片分类名称，最大长度20字符，中文字符算2个字符，不能为空 */
func (this *PictureCategoryAddRequest) SetPictureCategoryName(value string) {
	this.Set("picture_category_name", value)
}

type PictureCategoryAddResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	PictureCategoryAddResponseResult `json:"picture_category_add_response"`
}
type PictureCategoryAddResponseResult struct {
	/* 图片分类信息 */
	PictureCategory *PictureCategory `json:"picture_category"`
}

/*taobao.picture.category.get*/
type PictureCategoryGetRequest struct {
	values url.Values
}

func (this *PictureCategoryGetRequest) GetApiMethodName() string {
	return "taobao.picture.category.get"
}
func (this *PictureCategoryGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PictureCategoryGetRequest) GetValues() url.Values {
	return this.values
}

/* 图片分类的修改时间点，格式:yyyy-MM-dd HH:mm:ss。查询此修改时间点之后到目前的图片分类。 */
func (this *PictureCategoryGetRequest) SetModifiedTime(value string) {
	this.Set("modified_time", value)
}

/* 取二级分类时设置为对应父分类id
取一级分类时父分类id设为0
取全部分类的时候不设或设为-1 */
func (this *PictureCategoryGetRequest) SetParentId(value string) {
	this.Set("parent_id", value)
}

/* 图片分类ID */
func (this *PictureCategoryGetRequest) SetPictureCategoryId(value string) {
	this.Set("picture_category_id", value)
}

/* 图片分类名，不支持模糊查询 */
func (this *PictureCategoryGetRequest) SetPictureCategoryName(value string) {
	this.Set("picture_category_name", value)
}

/* 分类类型,fixed代表店铺装修分类类别，auction代表宝贝分类类别，user-define代表用户自定义分类类别 */
func (this *PictureCategoryGetRequest) SetType(value string) {
	this.Set("type", value)
}

type PictureCategoryGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	PictureCategoryGetResponseResult `json:"picture_category_get_response"`
}
type PictureCategoryGetResponseResult struct {
	/* 图片分类 */
	PictureCategories []*PictureCategory `json:"picture_categories"`
}

/*taobao.picture.category.update*/
type PictureCategoryUpdateRequest struct {
	values url.Values
}

func (this *PictureCategoryUpdateRequest) GetApiMethodName() string {
	return "taobao.picture.category.update"
}
func (this *PictureCategoryUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PictureCategoryUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 要更新的图片分类的id */
func (this *PictureCategoryUpdateRequest) SetCategoryId(value string) {
	this.Set("category_id", value)
}

/* 图片分类的新名字，最大长度20字符，不能为空<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *PictureCategoryUpdateRequest) SetCategoryName(value string) {
	this.Set("category_name", value)
}

/* 图片分类的新父分类id */
func (this *PictureCategoryUpdateRequest) SetParentId(value string) {
	this.Set("parent_id", value)
}

type PictureCategoryUpdateResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	PictureCategoryUpdateResponseResult `json:"picture_category_update_response"`
}
type PictureCategoryUpdateResponseResult struct {
	/* 更新图片分类是否成功 */
	Done bool `json:"done"`
}

/*taobao.picture.delete*/
type PictureDeleteRequest struct {
	values url.Values
}

func (this *PictureDeleteRequest) GetApiMethodName() string {
	return "taobao.picture.delete"
}
func (this *PictureDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PictureDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 图片ID字符串,可以一个也可以一组,用英文逗号间隔,如450,120,155.限制数量是100 */
func (this *PictureDeleteRequest) SetPictureIds(value string) {
	this.Set("picture_ids", value)
}

type PictureDeleteResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	PictureDeleteResponseResult `json:"picture_delete_response"`
}
type PictureDeleteResponseResult struct {
	/* 是否删除 */
	Success bool `json:"success"`
}

/*taobao.picture.get*/
type PictureGetRequest struct {
	values url.Values
}

func (this *PictureGetRequest) GetApiMethodName() string {
	return "taobao.picture.get"
}
func (this *PictureGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PictureGetRequest) GetValues() url.Values {
	return this.values
}

/* 图片使用，如果是pc宝贝detail使用，设置为client:computer，查询出来的图片是符合pc的宝贝detail显示的
如果是手机宝贝detail使用，设置为client:phone，查询出来的图片是符合手机的宝贝detail显示的,默认值是全部 */
func (this *PictureGetRequest) SetClientType(value string) {
	this.Set("client_type", value)
}

/* 是否删除,unfroze代表没有删除 */
func (this *PictureGetRequest) SetDeleted(value string) {
	this.Set("deleted", value)
}

/* 查询上传结束时间点,格式:yyyy-MM-dd HH:mm:ss */
func (this *PictureGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 图片被修改的时间点，格式:yyyy-MM-dd HH:mm:ss。查询此修改时间点之后到目前的图片。 */
func (this *PictureGetRequest) SetModifiedTime(value string) {
	this.Set("modified_time", value)
}

/* 图片查询结果排序,time:desc按上传时间从晚到早(默认), time:asc按上传时间从早到晚,sizes:desc按图片从大到小，sizes:asc按图片从小到大,默认time:desc */
func (this *PictureGetRequest) SetOrderBy(value string) {
	this.Set("order_by", value)
}

/* 页码.传入值为1代表第一页,传入值为2代表第二页,依此类推,默认值为1 */
func (this *PictureGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数.每页返回最多返回100条,默认值40 */
func (this *PictureGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 图片分类ID */
func (this *PictureGetRequest) SetPictureCategoryId(value string) {
	this.Set("picture_category_id", value)
}

/* 图片ID */
func (this *PictureGetRequest) SetPictureId(value string) {
	this.Set("picture_id", value)
}

/* 查询上传开始时间点,格式:yyyy-MM-dd HH:mm:ss */
func (this *PictureGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

/* 图片标题,最大长度50字符,中英文都算一字符 */
func (this *PictureGetRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 图片url查询接口 */
func (this *PictureGetRequest) SetUrls(value string) {
	this.Set("urls", value)
}

type PictureGetResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	PictureGetResponseResult `json:"picture_get_response"`
}
type PictureGetResponseResult struct {
	/* 图片信息列表 */
	Pictures []*Picture `json:"pictures"`
	/* 总的结果数 */
	TotalResults int64 `json:"totalResults"`
}

/*taobao.picture.isreferenced.get*/
type PictureIsreferencedGetRequest struct {
	values url.Values
}

func (this *PictureIsreferencedGetRequest) GetApiMethodName() string {
	return "taobao.picture.isreferenced.get"
}
func (this *PictureIsreferencedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PictureIsreferencedGetRequest) GetValues() url.Values {
	return this.values
}

/* 图片id */
func (this *PictureIsreferencedGetRequest) SetPictureId(value string) {
	this.Set("picture_id", value)
}

type PictureIsreferencedGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	PictureIsreferencedGetResponseResult `json:"picture_isreferenced_get_response"`
}
type PictureIsreferencedGetResponseResult struct {
	/* 图片是否被引用 */
	IsReferenced bool `json:"is_referenced"`
}

/*taobao.picture.replace*/
type PictureReplaceRequest struct {
	values url.Values
}

func (this *PictureReplaceRequest) GetApiMethodName() string {
	return "taobao.picture.replace"
}
func (this *PictureReplaceRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PictureReplaceRequest) GetValues() url.Values {
	return this.values
}

/* 图片二进制文件流,不能为空,允许png、jpg、gif图片格式 */
func (this *PictureReplaceRequest) SetImageData(value string) {
	this.Set("image_data", value)
}

/* 要替换的图片的id，必须大于0 */
func (this *PictureReplaceRequest) SetPictureId(value string) {
	this.Set("picture_id", value)
}

type PictureReplaceResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	PictureReplaceResponseResult `json:"picture_replace_response"`
}
type PictureReplaceResponseResult struct {
	/* 图片替换是否成功 */
	Done bool `json:"done"`
}

/*taobao.picture.update*/
type PictureUpdateRequest struct {
	values url.Values
}

func (this *PictureUpdateRequest) GetApiMethodName() string {
	return "taobao.picture.update"
}
func (this *PictureUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PictureUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 新的图片名，最大长度50字符，不能为空<br /> 支持最大长度为：50<br /> 支持的最大列表长度为：50 */
func (this *PictureUpdateRequest) SetNewName(value string) {
	this.Set("new_name", value)
}

/* 要更改名字的图片的id */
func (this *PictureUpdateRequest) SetPictureId(value string) {
	this.Set("picture_id", value)
}

type PictureUpdateResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	PictureUpdateResponseResult `json:"picture_update_response"`
}
type PictureUpdateResponseResult struct {
	/* 更新是否成功 */
	Done bool `json:"done"`
}

/*taobao.picture.upload*/
type PictureUploadRequest struct {
	values url.Values
}

func (this *PictureUploadRequest) GetApiMethodName() string {
	return "taobao.picture.upload"
}
func (this *PictureUploadRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PictureUploadRequest) GetValues() url.Values {
	return this.values
}

/* 图片上传的来源，有电脑版本宝贝发布，手机版本宝贝发布
client:computer电脑版本宝贝使用
client:phone手机版本宝贝使用 */
func (this *PictureUploadRequest) SetClientType(value string) {
	this.Set("client_type", value)
}

/* 包括后缀名的图片标题,不能为空，如Bule.jpg,有些卖家希望图片上传后取图片文件的默认名 */
func (this *PictureUploadRequest) SetImageInputTitle(value string) {
	this.Set("image_input_title", value)
}

/* 图片二进制文件流,不能为空,允许png、jpg、gif图片格式,3M以内。 */
func (this *PictureUploadRequest) SetImg(value string) {
	this.Set("img", value)
}

/* 图片分类ID，设置具体某个分类ID或设置0上传到默认分类，只能传入一个分类<br /> 支持最大值为：9223372036854775807<br /> 支持最小值为：0 */
func (this *PictureUploadRequest) SetPictureCategoryId(value string) {
	this.Set("picture_category_id", value)
}

/* 图片标题,如果为空,传的图片标题就取去掉后缀名的image_input_title,超过50字符长度会截取50字符,重名会在标题末尾加"(1)";标题末尾已经有"(数字)"了，则数字加1 */
func (this *PictureUploadRequest) SetTitle(value string) {
	this.Set("title", value)
}

type PictureUploadResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	PictureUploadResponseResult `json:"picture_upload_response"`
}
type PictureUploadResponseResult struct {
	/* 当前上传的一张图片信息 */
	Picture *Picture `json:"picture"`
}

/*taobao.picture.userinfo.get*/
type PictureUserinfoGetRequest struct {
	values url.Values
}

func (this *PictureUserinfoGetRequest) GetApiMethodName() string {
	return "taobao.picture.userinfo.get"
}
func (this *PictureUserinfoGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *PictureUserinfoGetRequest) GetValues() url.Values {
	return this.values
}

type PictureUserinfoGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	PictureUserinfoGetResponseResult `json:"picture_userinfo_get_response"`
}
type PictureUserinfoGetResponseResult struct {
	/* 用户使用图片空间的信息 */
	UserInfo *UserInfo `json:"user_info"`
}

/*taobao.sellercenter.role.add*/
type SellercenterRoleAddRequest struct {
	values url.Values
}

func (this *SellercenterRoleAddRequest) GetApiMethodName() string {
	return "taobao.sellercenter.role.add"
}
func (this *SellercenterRoleAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SellercenterRoleAddRequest) GetValues() url.Values {
	return this.values
}

/* 角色描述<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *SellercenterRoleAddRequest) SetDescription(value string) {
	this.Set("description", value)
}

/* 角色名<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *SellercenterRoleAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 表示卖家昵称<br /> 支持最大长度为：500<br /> 支持的最大列表长度为：500 */
func (this *SellercenterRoleAddRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 需要授权的权限点permission_code列表,以","分割.其code值可以通过调用taobao.sellercenter.user.permissions.get返回，其中permission.is_authorize=1的权限点可以通过本接口授权给对应角色。 */
func (this *SellercenterRoleAddRequest) SetPermissionCodes(value string) {
	this.Set("permission_codes", value)
}

type SellercenterRoleAddResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	SellercenterRoleAddResponseResult `json:"sellercenter_role_add_response"`
}
type SellercenterRoleAddResponseResult struct {
	/* 子账号角色 */
	Role *Role `json:"role"`
}

/*taobao.sellercenter.role.info.get*/
type SellercenterRoleInfoGetRequest struct {
	values url.Values
}

func (this *SellercenterRoleInfoGetRequest) GetApiMethodName() string {
	return "taobao.sellercenter.role.info.get"
}
func (this *SellercenterRoleInfoGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SellercenterRoleInfoGetRequest) GetValues() url.Values {
	return this.values
}

/* 角色id<br /> 支持的最大列表长度为：100 */
func (this *SellercenterRoleInfoGetRequest) SetRoleId(value string) {
	this.Set("role_id", value)
}

type SellercenterRoleInfoGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	SellercenterRoleInfoGetResponseResult `json:"sellercenter_role_info_get_response"`
}
type SellercenterRoleInfoGetResponseResult struct {
	/* 角色具体信息 */
	Role *Role `json:"role"`
}

/*taobao.sellercenter.rolemembers.get*/
type SellercenterRolemembersGetRequest struct {
	values url.Values
}

func (this *SellercenterRolemembersGetRequest) GetApiMethodName() string {
	return "taobao.sellercenter.rolemembers.get"
}
func (this *SellercenterRolemembersGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SellercenterRolemembersGetRequest) GetValues() url.Values {
	return this.values
}

/* 角色id<br /> 支持的最大列表长度为：100 */
func (this *SellercenterRolemembersGetRequest) SetRoleId(value string) {
	this.Set("role_id", value)
}

type SellercenterRolemembersGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	SellercenterRolemembersGetResponseResult `json:"sellercenter_rolemembers_get_response"`
}
type SellercenterRolemembersGetResponseResult struct {
	/* 子账号基本信息列表。具体信息为id、子账号用户名、主账号id、主账号昵称、当前状态值、是否分流 */
	Subusers []*SubUserInfo `json:"subusers"`
}

/*taobao.sellercenter.roles.get*/
type SellercenterRolesGetRequest struct {
	values url.Values
}

func (this *SellercenterRolesGetRequest) GetApiMethodName() string {
	return "taobao.sellercenter.roles.get"
}
func (this *SellercenterRolesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SellercenterRolesGetRequest) GetValues() url.Values {
	return this.values
}

/* 卖家昵称(只允许查询自己的信息：当前登陆者)<br /> 支持最大长度为：500<br /> 支持的最大列表长度为：500 */
func (this *SellercenterRolesGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SellercenterRolesGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	SellercenterRolesGetResponseResult `json:"sellercenter_roles_get_response"`
}
type SellercenterRolesGetResponseResult struct {
	/* 卖家子账号角色列表。<br/>返回对象为 role数据对象中的role_id，role_name，description，seller_id，create_time，modified_time。不包含permissions(权限点) */
	Roles []*Role `json:"roles"`
}

/*taobao.sellercenter.subuser.permissions.roles.get*/
type SellercenterSubuserPermissionsRolesGetRequest struct {
	values url.Values
}

func (this *SellercenterSubuserPermissionsRolesGetRequest) GetApiMethodName() string {
	return "taobao.sellercenter.subuser.permissions.roles.get"
}
func (this *SellercenterSubuserPermissionsRolesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SellercenterSubuserPermissionsRolesGetRequest) GetValues() url.Values {
	return this.values
}

/* 子账号昵称(子账号标识)<br /> 支持最大长度为：100<br /> 支持的最大列表长度为：100 */
func (this *SellercenterSubuserPermissionsRolesGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SellercenterSubuserPermissionsRolesGetResponse struct {
	*ErrorResponse                                       `json:"error_response,omitempty"`
	SellercenterSubuserPermissionsRolesGetResponseResult `json:"sellercenter_subuser_permissions_roles_get_response"`
}
type SellercenterSubuserPermissionsRolesGetResponseResult struct {
	/* 子账号被所拥有的权限 */
	SubuserPermission *SubUserPermission `json:"subuser_permission"`
}

/*taobao.sellercenter.subusers.get*/
type SellercenterSubusersGetRequest struct {
	values url.Values
}

func (this *SellercenterSubusersGetRequest) GetApiMethodName() string {
	return "taobao.sellercenter.subusers.get"
}
func (this *SellercenterSubusersGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SellercenterSubusersGetRequest) GetValues() url.Values {
	return this.values
}

/* 表示卖家昵称 */
func (this *SellercenterSubusersGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SellercenterSubusersGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	SellercenterSubusersGetResponseResult `json:"sellercenter_subusers_get_response"`
}
type SellercenterSubusersGetResponseResult struct {
	/* 子账号基本信息列表。具体信息为id、子账号用户名、主账号id、主账号昵称、当前状态值、是否分流 */
	Subusers []*SubUserInfo `json:"subusers"`
}

/*taobao.sellercenter.user.permissions.get*/
type SellercenterUserPermissionsGetRequest struct {
	values url.Values
}

func (this *SellercenterUserPermissionsGetRequest) GetApiMethodName() string {
	return "taobao.sellercenter.user.permissions.get"
}
func (this *SellercenterUserPermissionsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SellercenterUserPermissionsGetRequest) GetValues() url.Values {
	return this.values
}

/* 用户标识，次入参必须为子账号比如zhangsan:cool。如果只输入主账号zhangsan，将报错。 */
func (this *SellercenterUserPermissionsGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type SellercenterUserPermissionsGetResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	SellercenterUserPermissionsGetResponseResult `json:"sellercenter_user_permissions_get_response"`
}
type SellercenterUserPermissionsGetResponseResult struct {
	/* 权限列表 */
	Permissions []*Permission `json:"permissions"`
}

/*taobao.subuser.department.add*/
type SubuserDepartmentAddRequest struct {
	values url.Values
}

func (this *SubuserDepartmentAddRequest) GetApiMethodName() string {
	return "taobao.subuser.department.add"
}
func (this *SubuserDepartmentAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SubuserDepartmentAddRequest) GetValues() url.Values {
	return this.values
}

/* 部门名称 */
func (this *SubuserDepartmentAddRequest) SetDepartmentName(value string) {
	this.Set("department_name", value)
}

/* 父部门ID 如果是最高部门则传入0 */
func (this *SubuserDepartmentAddRequest) SetParentId(value string) {
	this.Set("parent_id", value)
}

/* 主账号用户名 */
func (this *SubuserDepartmentAddRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type SubuserDepartmentAddResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	SubuserDepartmentAddResponseResult `json:"subuser_department_add_response"`
}
type SubuserDepartmentAddResponseResult struct {
	/* 操作是否成功 true:操作成功; false:操作失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.subuser.department.delete*/
type SubuserDepartmentDeleteRequest struct {
	values url.Values
}

func (this *SubuserDepartmentDeleteRequest) GetApiMethodName() string {
	return "taobao.subuser.department.delete"
}
func (this *SubuserDepartmentDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SubuserDepartmentDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 部门ID */
func (this *SubuserDepartmentDeleteRequest) SetDepartmentId(value string) {
	this.Set("department_id", value)
}

/* 主账号用户名 */
func (this *SubuserDepartmentDeleteRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type SubuserDepartmentDeleteResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	SubuserDepartmentDeleteResponseResult `json:"subuser_department_delete_response"`
}
type SubuserDepartmentDeleteResponseResult struct {
	/* 操作是否成功 true:操作成功; false:操作失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.subuser.department.update*/
type SubuserDepartmentUpdateRequest struct {
	values url.Values
}

func (this *SubuserDepartmentUpdateRequest) GetApiMethodName() string {
	return "taobao.subuser.department.update"
}
func (this *SubuserDepartmentUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SubuserDepartmentUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 部门ID */
func (this *SubuserDepartmentUpdateRequest) SetDepartmentId(value string) {
	this.Set("department_id", value)
}

/* 部门名称 */
func (this *SubuserDepartmentUpdateRequest) SetDepartmentName(value string) {
	this.Set("department_name", value)
}

/* 父部门ID 如果是最高部门则传入0 */
func (this *SubuserDepartmentUpdateRequest) SetParentId(value string) {
	this.Set("parent_id", value)
}

/* 主账号用户名 */
func (this *SubuserDepartmentUpdateRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type SubuserDepartmentUpdateResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	SubuserDepartmentUpdateResponseResult `json:"subuser_department_update_response"`
}
type SubuserDepartmentUpdateResponseResult struct {
	/* 操作是否成功 true:操作成功; false:操作失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.subuser.departments.get*/
type SubuserDepartmentsGetRequest struct {
	values url.Values
}

func (this *SubuserDepartmentsGetRequest) GetApiMethodName() string {
	return "taobao.subuser.departments.get"
}
func (this *SubuserDepartmentsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SubuserDepartmentsGetRequest) GetValues() url.Values {
	return this.values
}

/* 主账号用户名 */
func (this *SubuserDepartmentsGetRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type SubuserDepartmentsGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	SubuserDepartmentsGetResponseResult `json:"subuser_departments_get_response"`
}
type SubuserDepartmentsGetResponseResult struct {
	/* 部门信息 */
	Departments []*Department `json:"departments"`
}

/*taobao.subuser.duty.add*/
type SubuserDutyAddRequest struct {
	values url.Values
}

func (this *SubuserDutyAddRequest) GetApiMethodName() string {
	return "taobao.subuser.duty.add"
}
func (this *SubuserDutyAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SubuserDutyAddRequest) GetValues() url.Values {
	return this.values
}

/* 职务级别 */
func (this *SubuserDutyAddRequest) SetDutyLevel(value string) {
	this.Set("duty_level", value)
}

/* 职务名称 */
func (this *SubuserDutyAddRequest) SetDutyName(value string) {
	this.Set("duty_name", value)
}

/* 主账号用户名 */
func (this *SubuserDutyAddRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type SubuserDutyAddResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	SubuserDutyAddResponseResult `json:"subuser_duty_add_response"`
}
type SubuserDutyAddResponseResult struct {
	/* 操作是否成功 true:操作成功; false:操作失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.subuser.duty.delete*/
type SubuserDutyDeleteRequest struct {
	values url.Values
}

func (this *SubuserDutyDeleteRequest) GetApiMethodName() string {
	return "taobao.subuser.duty.delete"
}
func (this *SubuserDutyDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SubuserDutyDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 职务ID */
func (this *SubuserDutyDeleteRequest) SetDutyId(value string) {
	this.Set("duty_id", value)
}

/* 主账号用户名 */
func (this *SubuserDutyDeleteRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type SubuserDutyDeleteResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	SubuserDutyDeleteResponseResult `json:"subuser_duty_delete_response"`
}
type SubuserDutyDeleteResponseResult struct {
	/* 操作是否成功 true:操作成功; false:操作失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.subuser.duty.update*/
type SubuserDutyUpdateRequest struct {
	values url.Values
}

func (this *SubuserDutyUpdateRequest) GetApiMethodName() string {
	return "taobao.subuser.duty.update"
}
func (this *SubuserDutyUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SubuserDutyUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 职务ID */
func (this *SubuserDutyUpdateRequest) SetDutyId(value string) {
	this.Set("duty_id", value)
}

/* 职务级别 */
func (this *SubuserDutyUpdateRequest) SetDutyLevel(value string) {
	this.Set("duty_level", value)
}

/* 职务名称 */
func (this *SubuserDutyUpdateRequest) SetDutyName(value string) {
	this.Set("duty_name", value)
}

/* 主账号用户名 */
func (this *SubuserDutyUpdateRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type SubuserDutyUpdateResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	SubuserDutyUpdateResponseResult `json:"subuser_duty_update_response"`
}
type SubuserDutyUpdateResponseResult struct {
	/* 操作是否成功 true:操作成功; false:操作失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.subuser.dutys.get*/
type SubuserDutysGetRequest struct {
	values url.Values
}

func (this *SubuserDutysGetRequest) GetApiMethodName() string {
	return "taobao.subuser.dutys.get"
}
func (this *SubuserDutysGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SubuserDutysGetRequest) GetValues() url.Values {
	return this.values
}

/* 主账号用户名 */
func (this *SubuserDutysGetRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type SubuserDutysGetResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	SubuserDutysGetResponseResult `json:"subuser_dutys_get_response"`
}
type SubuserDutysGetResponseResult struct {
	/* 职务信息 */
	Dutys []*Duty `json:"dutys"`
}

/*taobao.subuser.employee.add*/
type SubuserEmployeeAddRequest struct {
	values url.Values
}

func (this *SubuserEmployeeAddRequest) GetApiMethodName() string {
	return "taobao.subuser.employee.add"
}
func (this *SubuserEmployeeAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SubuserEmployeeAddRequest) GetValues() url.Values {
	return this.values
}

/* 当前员工所属部门ID */
func (this *SubuserEmployeeAddRequest) SetDepartmentId(value string) {
	this.Set("department_id", value)
}

/* 当前员工担任职务ID */
func (this *SubuserEmployeeAddRequest) SetDutyId(value string) {
	this.Set("duty_id", value)
}

/* 员工姓名 */
func (this *SubuserEmployeeAddRequest) SetEmployeeName(value string) {
	this.Set("employee_name", value)
}

/* 员工花名 */
func (this *SubuserEmployeeAddRequest) SetEmployeeNickname(value string) {
	this.Set("employee_nickname", value)
}

/* 员工工号(可以用大小写英文字母和数字) */
func (this *SubuserEmployeeAddRequest) SetEmployeeNum(value string) {
	this.Set("employee_num", value)
}

/* 员工入职时间 */
func (this *SubuserEmployeeAddRequest) SetEntryDate(value string) {
	this.Set("entry_date", value)
}

/* 员工身份证号码 */
func (this *SubuserEmployeeAddRequest) SetIdCardNum(value string) {
	this.Set("id_card_num", value)
}

/* 直接上级的员工ID */
func (this *SubuserEmployeeAddRequest) SetLeaderId(value string) {
	this.Set("leader_id", value)
}

/* 办公电话 */
func (this *SubuserEmployeeAddRequest) SetOfficePhone(value string) {
	this.Set("office_phone", value)
}

/* 员工私人邮箱 */
func (this *SubuserEmployeeAddRequest) SetPersonalEmail(value string) {
	this.Set("personal_email", value)
}

/* 员工手机号码 */
func (this *SubuserEmployeeAddRequest) SetPersonalMobile(value string) {
	this.Set("personal_mobile", value)
}

/* 员工性别 1：男; 2:女 */
func (this *SubuserEmployeeAddRequest) SetSex(value string) {
	this.Set("sex", value)
}

/* 子账号ID */
func (this *SubuserEmployeeAddRequest) SetSubId(value string) {
	this.Set("sub_id", value)
}

/* 工作地点 */
func (this *SubuserEmployeeAddRequest) SetWorkLocation(value string) {
	this.Set("work_location", value)
}

type SubuserEmployeeAddResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	SubuserEmployeeAddResponseResult `json:"subuser_employee_add_response"`
}
type SubuserEmployeeAddResponseResult struct {
	/* 操作是否成功 true:操作成功; false:操作失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.subuser.employee.update*/
type SubuserEmployeeUpdateRequest struct {
	values url.Values
}

func (this *SubuserEmployeeUpdateRequest) GetApiMethodName() string {
	return "taobao.subuser.employee.update"
}
func (this *SubuserEmployeeUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SubuserEmployeeUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 当前员工所属部门ID */
func (this *SubuserEmployeeUpdateRequest) SetDepartmentId(value string) {
	this.Set("department_id", value)
}

/* 当前员工担任职务ID(若需要将该字段的值置为空，请传入-1） */
func (this *SubuserEmployeeUpdateRequest) SetDutyId(value string) {
	this.Set("duty_id", value)
}

/* 员工姓名 */
func (this *SubuserEmployeeUpdateRequest) SetEmployeeName(value string) {
	this.Set("employee_name", value)
}

/* 员工花名(若需要将该字段的值置为空，请传入“-1”） */
func (this *SubuserEmployeeUpdateRequest) SetEmployeeNickname(value string) {
	this.Set("employee_nickname", value)
}

/* 员工工号(卖家自定义)(若需要将该字段的值置为空，请传入“-1”） */
func (this *SubuserEmployeeUpdateRequest) SetEmployeeNum(value string) {
	this.Set("employee_num", value)
}

/* 登记员工离职  true:登记员工离职 */
func (this *SubuserEmployeeUpdateRequest) SetEmployeeTurnover(value string) {
	this.Set("employee_turnover", value)
}

/* 员工入职时间(若需要将该字段的值置为空，请传入1900-01-01 00:00:00） */
func (this *SubuserEmployeeUpdateRequest) SetEntryDate(value string) {
	this.Set("entry_date", value)
}

/* 员工身份证号码(若需要将该字段的值置为空，请传入“-1”） */
func (this *SubuserEmployeeUpdateRequest) SetIdCardNum(value string) {
	this.Set("id_card_num", value)
}

/* 直接上级的员工ID(若需要将该字段的值置为空，请传入-1） */
func (this *SubuserEmployeeUpdateRequest) SetLeaderId(value string) {
	this.Set("leader_id", value)
}

/* 办公电话(若需要将该字段的值置为空，请传入“-1”） */
func (this *SubuserEmployeeUpdateRequest) SetOfficePhone(value string) {
	this.Set("office_phone", value)
}

/* 员工私人邮箱(若需要将该字段的值置为空，请传入“-1”） */
func (this *SubuserEmployeeUpdateRequest) SetPersonalEmail(value string) {
	this.Set("personal_email", value)
}

/* 员工手机号码(若需要将该字段的值置为空，请传入“-1”） */
func (this *SubuserEmployeeUpdateRequest) SetPersonalMobile(value string) {
	this.Set("personal_mobile", value)
}

/* 员工性别  1：男;  2:女 */
func (this *SubuserEmployeeUpdateRequest) SetSex(value string) {
	this.Set("sex", value)
}

/* 子账号ID */
func (this *SubuserEmployeeUpdateRequest) SetSubId(value string) {
	this.Set("sub_id", value)
}

/* 杭州大厦(若需要将该字段的值置为空，请传入“-1”） */
func (this *SubuserEmployeeUpdateRequest) SetWorkLocation(value string) {
	this.Set("work_location", value)
}

type SubuserEmployeeUpdateResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	SubuserEmployeeUpdateResponseResult `json:"subuser_employee_update_response"`
}
type SubuserEmployeeUpdateResponseResult struct {
	/* 操作是否成功 true:操作成功; false:操作失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.subuser.fullinfo.get*/
type SubuserFullinfoGetRequest struct {
	values url.Values
}

func (this *SubuserFullinfoGetRequest) GetApiMethodName() string {
	return "taobao.subuser.fullinfo.get"
}
func (this *SubuserFullinfoGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SubuserFullinfoGetRequest) GetValues() url.Values {
	return this.values
}

/* 传入所需要的参数信息（若不需要获取子账号或主账号的企业邮箱地址，则无需传入该参数；若需要获取子账号或主账号的企业邮箱地址，则需要传入fields；可选参数值为subuser_email和user_email，传入其他参数值均无效；两个参数都需要则以逗号隔开传入即可，例如：subuser_email,user_email） */
func (this *SubuserFullinfoGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 子账号ID（传参中sub_id和sub_nick至少需要其中一个，若sub_id与sub_nick同时传入并且合法，那么sub_nick优先，以sub_nick查询子账号） */
func (this *SubuserFullinfoGetRequest) SetSubId(value string) {
	this.Set("sub_id", value)
}

/* 子账号用户名（传参中sub_id和sub_nick至少需要其中一个，若sub_id与sub_nick同时传入并且合法，那么sub_nick优先，以sub_nick查询子账号） */
func (this *SubuserFullinfoGetRequest) SetSubNick(value string) {
	this.Set("sub_nick", value)
}

type SubuserFullinfoGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	SubuserFullinfoGetResponseResult `json:"subuser_fullinfo_get_response"`
}
type SubuserFullinfoGetResponseResult struct {
	/* 子账号详细信息，其中包括账号基本信息、员工信息和部门职务信息 */
	SubFullinfo *SubUserFullInfo `json:"sub_fullinfo"`
}

/*taobao.subuser.info.update*/
type SubuserInfoUpdateRequest struct {
	values url.Values
}

func (this *SubuserInfoUpdateRequest) GetApiMethodName() string {
	return "taobao.subuser.info.update"
}
func (this *SubuserInfoUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SubuserInfoUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 是否停用子账号 true:表示停用该子账号false:表示开启该子账号 */
func (this *SubuserInfoUpdateRequest) SetIsDisableSubaccount(value string) {
	this.Set("is_disable_subaccount", value)
}

/* 子账号是否参与分流 true:参与分流 false:不参与分流 */
func (this *SubuserInfoUpdateRequest) SetIsDispatch(value string) {
	this.Set("is_dispatch", value)
}

/* 子账号ID */
func (this *SubuserInfoUpdateRequest) SetSubId(value string) {
	this.Set("sub_id", value)
}

type SubuserInfoUpdateResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	SubuserInfoUpdateResponseResult `json:"subuser_info_update_response"`
}
type SubuserInfoUpdateResponseResult struct {
	/* 操作是否成功 true:操作成功; false:操作失败 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.subusers.get*/
type SubusersGetRequest struct {
	values url.Values
}

func (this *SubusersGetRequest) GetApiMethodName() string {
	return "taobao.subusers.get"
}
func (this *SubusersGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SubusersGetRequest) GetValues() url.Values {
	return this.values
}

/* 主账号用户名 */
func (this *SubusersGetRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type SubusersGetResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	SubusersGetResponseResult `json:"subusers_get_response"`
}
type SubusersGetResponseResult struct {
	/* 子账号基本信息 */
	Subaccounts []*SubAccountInfo `json:"subaccounts"`
}

/*taobao.fuwu.sale.link.gen*/
type FuwuSaleLinkGenRequest struct {
	values url.Values
}

func (this *FuwuSaleLinkGenRequest) GetApiMethodName() string {
	return "taobao.fuwu.sale.link.gen"
}
func (this *FuwuSaleLinkGenRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FuwuSaleLinkGenRequest) GetValues() url.Values {
	return this.values
}

/* 用户需要营销的目标人群中的用户nick */
func (this *FuwuSaleLinkGenRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 从服务商后台，营销链接功能中生成的参数串直接复制使用。不要修改，否则抛错。 */
func (this *FuwuSaleLinkGenRequest) SetParamStr(value string) {
	this.Set("param_str", value)
}

type FuwuSaleLinkGenResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	FuwuSaleLinkGenResponseResult `json:"fuwu_sale_link_gen_response"`
}
type FuwuSaleLinkGenResponseResult struct {
	/* 通过营销链接接口生成的营销链接短地址 */
	Url string `json:"url"`
}

/*taobao.fuwu.scores.get*/
type FuwuScoresGetRequest struct {
	values url.Values
}

func (this *FuwuScoresGetRequest) GetApiMethodName() string {
	return "taobao.fuwu.scores.get"
}
func (this *FuwuScoresGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *FuwuScoresGetRequest) GetValues() url.Values {
	return this.values
}

/* 当前页 */
func (this *FuwuScoresGetRequest) SetCurrentPage(value string) {
	this.Set("current_page", value)
}

/* 评价日期，查询某一天的评价 */
func (this *FuwuScoresGetRequest) SetDate(value string) {
	this.Set("date", value)
}

/* 每页获取条数。默认值40，最小值1，最大值100。<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *FuwuScoresGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type FuwuScoresGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	FuwuScoresGetResponseResult `json:"fuwu_scores_get_response"`
}
type FuwuScoresGetResponseResult struct {
	/* 评价流水记录 */
	ScoreResult []*ScoreResult `json:"score_result"`
}

/*taobao.vas.order.search*/
type VasOrderSearchRequest struct {
	values url.Values
}

func (this *VasOrderSearchRequest) GetApiMethodName() string {
	return "taobao.vas.order.search"
}
func (this *VasOrderSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *VasOrderSearchRequest) GetValues() url.Values {
	return this.values
}

/* 应用收费代码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得该应用的收费代码 */
func (this *VasOrderSearchRequest) SetArticleCode(value string) {
	this.Set("article_code", value)
}

/* 订单号 */
func (this *VasOrderSearchRequest) SetBizOrderId(value string) {
	this.Set("biz_order_id", value)
}

/* 订单类型，1=新订 2=续订 3=升级 4=后台赠送 5=后台自动续订 6=订单审核后生成订购关系（暂时用不到） 空=全部 */
func (this *VasOrderSearchRequest) SetBizType(value string) {
	this.Set("biz_type", value)
}

/* 订单创建时间（订购时间）结束值 */
func (this *VasOrderSearchRequest) SetEndCreated(value string) {
	this.Set("end_created", value)
}

/* 收费项目代码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得收费项目代码 */
func (this *VasOrderSearchRequest) SetItemCode(value string) {
	this.Set("item_code", value)
}

/* 淘宝会员名 */
func (this *VasOrderSearchRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 子订单号 */
func (this *VasOrderSearchRequest) SetOrderId(value string) {
	this.Set("order_id", value)
}

/* 页码 */
func (this *VasOrderSearchRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 一页包含的记录数<br /> 支持最大值为：200 */
func (this *VasOrderSearchRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 订单创建时间（订购时间）起始值（当start_created和end_created都不填写时，默认返回最近90天的数据） */
func (this *VasOrderSearchRequest) SetStartCreated(value string) {
	this.Set("start_created", value)
}

type VasOrderSearchResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	VasOrderSearchResponseResult `json:"vas_order_search_response"`
}
type VasOrderSearchResponseResult struct {
	/* 商品订单对象 */
	ArticleBizOrders []*ArticleBizOrder `json:"article_biz_orders"`
	/* 总记录数 */
	TotalItem int64 `json:"total_item"`
}

/*taobao.vas.subsc.search*/
type VasSubscSearchRequest struct {
	values url.Values
}

func (this *VasSubscSearchRequest) GetApiMethodName() string {
	return "taobao.vas.subsc.search"
}
func (this *VasSubscSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *VasSubscSearchRequest) GetValues() url.Values {
	return this.values
}

/* 应用收费代码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得该应用的收费代码 */
func (this *VasSubscSearchRequest) SetArticleCode(value string) {
	this.Set("article_code", value)
}

/* 是否自动续费，true=自动续费 false=非自动续费 空=全部 */
func (this *VasSubscSearchRequest) SetAutosub(value string) {
	this.Set("autosub", value)
}

/* 到期时间结束值 */
func (this *VasSubscSearchRequest) SetEndDeadline(value string) {
	this.Set("end_deadline", value)
}

/* 是否到期提醒，true=到期提醒 false=非到期提醒 空=全部 */
func (this *VasSubscSearchRequest) SetExpireNotice(value string) {
	this.Set("expire_notice", value)
}

/* 收费项目代码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得收费项目代码 */
func (this *VasSubscSearchRequest) SetItemCode(value string) {
	this.Set("item_code", value)
}

/* 淘宝会员名 */
func (this *VasSubscSearchRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 页码 */
func (this *VasSubscSearchRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 一页包含的记录数<br /> 支持最大值为：200 */
func (this *VasSubscSearchRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 到期时间起始值（当start_deadline和end_deadline都不填写时，默认返回最近90天的数据） */
func (this *VasSubscSearchRequest) SetStartDeadline(value string) {
	this.Set("start_deadline", value)
}

/* 订购记录状态，1=有效 2=过期 空=全部 */
func (this *VasSubscSearchRequest) SetStatus(value string) {
	this.Set("status", value)
}

type VasSubscSearchResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	VasSubscSearchResponseResult `json:"vas_subsc_search_response"`
}
type VasSubscSearchResponseResult struct {
	/* 订购关系对象 */
	ArticleSubs []*ArticleSub `json:"article_subs"`
	/* 总记录数 */
	TotalItem int64 `json:"total_item"`
}

/*taobao.vas.subscribe.get*/
type VasSubscribeGetRequest struct {
	values url.Values
}

func (this *VasSubscribeGetRequest) GetApiMethodName() string {
	return "taobao.vas.subscribe.get"
}
func (this *VasSubscribeGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *VasSubscribeGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品编码，从合作伙伴后台（my.open.taobao.com）-收费管理-收费项目列表 能够获得该应用的商品代码 */
func (this *VasSubscribeGetRequest) SetArticleCode(value string) {
	this.Set("article_code", value)
}

/* 淘宝会员名 */
func (this *VasSubscribeGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type VasSubscribeGetResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	VasSubscribeGetResponseResult `json:"vas_subscribe_get_response"`
}
type VasSubscribeGetResponseResult struct {
	/* 用户订购信息 */
	ArticleUserSubscribes []*ArticleUserSubscribe `json:"article_user_subscribes"`
}

/*taobao.weike.performance.put*/
type WeikePerformancePutRequest struct {
	values url.Values
}

func (this *WeikePerformancePutRequest) GetApiMethodName() string {
	return "taobao.weike.performance.put"
}
func (this *WeikePerformancePutRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeikePerformancePutRequest) GetValues() url.Values {
	return this.values
}

/* 订单id */
func (this *WeikePerformancePutRequest) SetId(value string) {
	this.Set("id", value)
}

/* 绩效数据封装类 */
func (this *WeikePerformancePutRequest) SetPerInfoWrapper(value string) {
	this.Set("per_info_wrapper", value)
}

type WeikePerformancePutResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	WeikePerformancePutResponseResult `json:"weike_performance_put_response"`
}
type WeikePerformancePutResponseResult struct {
	/* 返回结果 */
	Result bool `json:"result"`
}

/*taobao.weike.subscinfo.get*/
type WeikeSubscinfoGetRequest struct {
	values url.Values
}

func (this *WeikeSubscinfoGetRequest) GetApiMethodName() string {
	return "taobao.weike.subscinfo.get"
}
func (this *WeikeSubscinfoGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeikeSubscinfoGetRequest) GetValues() url.Values {
	return this.values
}

/* 时间范围结束时间 */
func (this *WeikeSubscinfoGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 页码 */
func (this *WeikeSubscinfoGetRequest) SetPageNum(value string) {
	this.Set("page_num", value)
}

/* 商家旺旺名称 */
func (this *WeikeSubscinfoGetRequest) SetSellerName(value string) {
	this.Set("seller_name", value)
}

/* 时间范围开始时间 */
func (this *WeikeSubscinfoGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type WeikeSubscinfoGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	WeikeSubscinfoGetResponseResult `json:"weike_subscinfo_get_response"`
}
type WeikeSubscinfoGetResponseResult struct {
	/* 返回结果 */
	Result *SubscInfoWrapper `json:"result"`
}

/*taobao.refund.get*/
type RefundGetRequest struct {
	values url.Values
}

func (this *RefundGetRequest) GetApiMethodName() string {
	return "taobao.refund.get"
}
func (this *RefundGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *RefundGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要返回的字段。目前支持有：refund_id, alipay_no, tid, oid, buyer_nick, seller_nick, total_fee, status, created, refund_fee, good_status, has_good_return, payment, reason, desc, num_iid, title, price, num, good_return_time, company_name, sid, address, shipping_type, refund_remind_timeout */
func (this *RefundGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 退款单号<br /> 支持最大值为：9223372036854775807<br /> 支持最小值为：1 */
func (this *RefundGetRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

type RefundGetResponse struct {
	*ErrorResponse          `json:"error_response,omitempty"`
	RefundGetResponseResult `json:"refund_get_response"`
}
type RefundGetResponseResult struct {
	/* 搜索到的交易信息列表 */
	Refund *Refund `json:"refund"`
}

/*taobao.refund.message.add*/
type RefundMessageAddRequest struct {
	values url.Values
}

func (this *RefundMessageAddRequest) GetApiMethodName() string {
	return "taobao.refund.message.add"
}
func (this *RefundMessageAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *RefundMessageAddRequest) GetValues() url.Values {
	return this.values
}

/* 留言内容。最大长度: 400个字节 */
func (this *RefundMessageAddRequest) SetContent(value string) {
	this.Set("content", value)
}

/* 图片（凭证）。类型: JPG,GIF,PNG;最大为: 500K */
func (this *RefundMessageAddRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 退款编号。 */
func (this *RefundMessageAddRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

type RefundMessageAddResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	RefundMessageAddResponseResult `json:"refund_message_add_response"`
}
type RefundMessageAddResponseResult struct {
	/* 退款信息。包含id和created */
	RefundMessage *RefundMessage `json:"refund_message"`
}

/*taobao.refund.messages.get*/
type RefundMessagesGetRequest struct {
	values url.Values
}

func (this *RefundMessagesGetRequest) GetApiMethodName() string {
	return "taobao.refund.messages.get"
}
func (this *RefundMessagesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *RefundMessagesGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表。可选值：RefundMessage结构体中的所有字段，以半角逗号(,)分隔。 */
func (this *RefundMessagesGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 页码。取值范围:大于零的整数; 默认值:1<br /> 支持最小值为：1 */
func (this *RefundMessagesGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数。取值范围:大于零的整数; 默认值:40;最大值:100<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *RefundMessagesGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 退款单号 */
func (this *RefundMessagesGetRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

type RefundMessagesGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	RefundMessagesGetResponseResult `json:"refund_messages_get_response"`
}
type RefundMessagesGetResponseResult struct {
	/* 搜索到的留言凭证信息列表 */
	RefundMessages []*RefundMessage `json:"refund_messages"`
	/* 搜索到的留言凭证总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.refund.refuse*/
type RefundRefuseRequest struct {
	values url.Values
}

func (this *RefundRefuseRequest) GetApiMethodName() string {
	return "taobao.refund.refuse"
}
func (this *RefundRefuseRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *RefundRefuseRequest) GetValues() url.Values {
	return this.values
}

/* 退款记录对应的交易子订单号 */
func (this *RefundRefuseRequest) SetOid(value string) {
	this.Set("oid", value)
}

/* 退款单号 */
func (this *RefundRefuseRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

/* 拒绝退款时的说明信息，长度2-200<br /> 支持最大长度为：200<br /> 支持的最大列表长度为：200 */
func (this *RefundRefuseRequest) SetRefuseMessage(value string) {
	this.Set("refuse_message", value)
}

/* 拒绝退款时的退款凭证，一般是卖家拒绝退款时使用的发货凭证，最大长度130000字节，支持的图片格式：GIF, JPG, PNG<br /> 支持的文件类型为：gif,jpg,png<br /> 支持的最大列表长度为：130000 */
func (this *RefundRefuseRequest) SetRefuseProof(value string) {
	this.Set("refuse_proof", value)
}

/* 退款记录对应的交易订单号 */
func (this *RefundRefuseRequest) SetTid(value string) {
	this.Set("tid", value)
}

type RefundRefuseResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	RefundRefuseResponseResult `json:"refund_refuse_response"`
}
type RefundRefuseResponseResult struct {
	/* 拒绝退款成功后，会返回Refund数据结构中的refund_id, status, modified字段 */
	Refund *Refund `json:"refund"`
}

/*taobao.refunds.apply.get*/
type RefundsApplyGetRequest struct {
	values url.Values
}

func (this *RefundsApplyGetRequest) GetApiMethodName() string {
	return "taobao.refunds.apply.get"
}
func (this *RefundsApplyGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *RefundsApplyGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要返回的字段。目前支持有：refund_id, tid, title, buyer_nick, seller_nick, total_fee, status, created, refund_fee */
func (this *RefundsApplyGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 页码。传入值为 1 代表第一页，传入值为 2 代表第二页，依此类推。默认返回的数据是从第一页开始<br /> 支持最小值为：1 */
func (this *RefundsApplyGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数。取值范围:大于零的整数; 默认值:40;最大值:100<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *RefundsApplyGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 卖家昵称 */
func (this *RefundsApplyGetRequest) SetSellerNick(value string) {
	this.Set("seller_nick", value)
}

/* 退款状态，默认查询所有退款状态的数据，除了默认值外每次只能查询一种状态。
WAIT_SELLER_AGREE(买家已经申请退款，等待卖家同意)
WAIT_BUYER_RETURN_GOODS(卖家已经同意退款，等待买家退货)
WAIT_SELLER_CONFIRM_GOODS(买家已经退货，等待卖家确认收货)
SELLER_REFUSE_BUYER(卖家拒绝退款)
CLOSED(退款关闭)
SUCCESS(退款成功) */
func (this *RefundsApplyGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 交易类型列表，一次查询多种类型可用半角逗号分隔，默认同时查询guarantee_trade, auto_delivery的2种类型的数据。
fixed(一口价)
auction(拍卖)
guarantee_trade(一口价、拍卖)
independent_simple_trade(旺店入门版交易)
independent_shop_trade(旺店标准版交易)
auto_delivery(自动发货)
ec(直冲)
cod(货到付款)
fenxiao(分销)
game_equipment(游戏装备)
shopex_trade(ShopEX交易)
netcn_trade(万网交易)
external_trade(统一外部交易) */
func (this *RefundsApplyGetRequest) SetType(value string) {
	this.Set("type", value)
}

type RefundsApplyGetResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	RefundsApplyGetResponseResult `json:"refunds_apply_get_response"`
}
type RefundsApplyGetResponseResult struct {
	/* 搜索到的退款信息列表 */
	Refunds []*Refund `json:"refunds"`
	/* 搜索到的交易信息总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.refunds.receive.get*/
type RefundsReceiveGetRequest struct {
	values url.Values
}

func (this *RefundsReceiveGetRequest) GetApiMethodName() string {
	return "taobao.refunds.receive.get"
}
func (this *RefundsReceiveGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *RefundsReceiveGetRequest) GetValues() url.Values {
	return this.values
}

/* 买家昵称 */
func (this *RefundsReceiveGetRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 查询修改时间结束。格式: yyyy-MM-dd HH:mm:ss */
func (this *RefundsReceiveGetRequest) SetEndModified(value string) {
	this.Set("end_modified", value)
}

/* 需要返回的字段。目前支持有：refund_id, tid, title, buyer_nick, seller_nick, total_fee, status, created, refund_fee, oid, good_status, company_name, sid, payment, reason, desc, has_good_return, modified, order_status */
func (this *RefundsReceiveGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 页码。取值范围:大于零的整数; 默认值:1<br /> 支持最小值为：1 */
func (this *RefundsReceiveGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数。取值范围:大于零的整数; 默认值:40;最大值:100<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *RefundsReceiveGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 查询修改时间开始。格式: yyyy-MM-dd HH:mm:ss */
func (this *RefundsReceiveGetRequest) SetStartModified(value string) {
	this.Set("start_modified", value)
}

/* 退款状态，默认查询所有退款状态的数据，除了默认值外每次只能查询一种状态。
WAIT_SELLER_AGREE(买家已经申请退款，等待卖家同意)
WAIT_BUYER_RETURN_GOODS(卖家已经同意退款，等待买家退货)
WAIT_SELLER_CONFIRM_GOODS(买家已经退货，等待卖家确认收货)
SELLER_REFUSE_BUYER(卖家拒绝退款)
CLOSED(退款关闭)
SUCCESS(退款成功) */
func (this *RefundsReceiveGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 交易类型列表，一次查询多种类型可用半角逗号分隔，默认同时查询guarantee_trade, auto_delivery的2种类型的数据。
fixed(一口价)
auction(拍卖)
guarantee_trade(一口价、拍卖)
independent_simple_trade(旺店入门版交易)
independent_shop_trade(旺店标准版交易)
auto_delivery(自动发货)
ec(直冲)
cod(货到付款)
fenxiao(分销)
game_equipment(游戏装备)
shopex_trade(ShopEX交易)
netcn_trade(万网交易)
external_trade(统一外部交易) */
func (this *RefundsReceiveGetRequest) SetType(value string) {
	this.Set("type", value)
}

/* 是否启用has_next的分页方式，如果指定true,则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的的字段，通过此种方式获取增量退款，接口调用成功率在原有的基础上有所提升。 */
func (this *RefundsReceiveGetRequest) SetUseHasNext(value string) {
	this.Set("use_has_next", value)
}

type RefundsReceiveGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	RefundsReceiveGetResponseResult `json:"refunds_receive_get_response"`
}
type RefundsReceiveGetResponseResult struct {
	/* 是否存在下一页 */
	HasNext bool `json:"has_next"`
	/* 搜索到的退款信息列表 */
	Refunds []*Refund `json:"refunds"`
	/* 搜索到的退款信息总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.rp.refunds.agree*/
type RpRefundsAgreeRequest struct {
	values url.Values
}

func (this *RpRefundsAgreeRequest) GetApiMethodName() string {
	return "taobao.rp.refunds.agree"
}
func (this *RpRefundsAgreeRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *RpRefundsAgreeRequest) GetValues() url.Values {
	return this.values
}

/* 短信验证码 */
func (this *RpRefundsAgreeRequest) SetCode(value string) {
	this.Set("code", value)
}

/* 需要退款的退款ID以及和其对应的金额列表，其中金额以分为单位，ID与金额以“|”符号分隔，多笔订单以“,”分隔。version 取退款更新时间modified（需转成时间戳格式） */
func (this *RpRefundsAgreeRequest) SetRefundInfos(value string) {
	this.Set("refund_infos", value)
}

type RpRefundsAgreeResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	RpRefundsAgreeResponseResult `json:"rp_refunds_agree_response"`
}
type RpRefundsAgreeResponseResult struct {
	/* 同意退款操作返回信息 */
	Response *RefundAgreeResponse `json:"response"`
}

/*taobao.rp.returngoods.agree*/
type RpReturngoodsAgreeRequest struct {
	values url.Values
}

func (this *RpReturngoodsAgreeRequest) GetApiMethodName() string {
	return "taobao.rp.returngoods.agree"
}
func (this *RpReturngoodsAgreeRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *RpReturngoodsAgreeRequest) GetValues() url.Values {
	return this.values
}

/* 卖家提供的退货地址 */
func (this *RpReturngoodsAgreeRequest) SetAddress(value string) {
	this.Set("address", value)
}

/* 卖家手机 */
func (this *RpReturngoodsAgreeRequest) SetMobile(value string) {
	this.Set("mobile", value)
}

/* 卖家姓名 */
func (this *RpReturngoodsAgreeRequest) SetName(value string) {
	this.Set("name", value)
}

/* 卖家提供的退货地址的邮编 */
func (this *RpReturngoodsAgreeRequest) SetPost(value string) {
	this.Set("post", value)
}

/* 退款编号 */
func (this *RpReturngoodsAgreeRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

/* 卖家退货留言 */
func (this *RpReturngoodsAgreeRequest) SetRemark(value string) {
	this.Set("remark", value)
}

/* 卖家座机 */
func (this *RpReturngoodsAgreeRequest) SetTel(value string) {
	this.Set("tel", value)
}

type RpReturngoodsAgreeResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	RpReturngoodsAgreeResponseResult `json:"rp_returngoods_agree_response"`
}
type RpReturngoodsAgreeResponseResult struct {
	/* 同意退货返回对象 */
	Response *RefundBaseResponse `json:"response"`
}

/*taobao.qt.report.add*/
type QtReportAddRequest struct {
	values url.Values
}

func (this *QtReportAddRequest) GetApiMethodName() string {
	return "taobao.qt.report.add"
}
func (this *QtReportAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *QtReportAddRequest) GetValues() url.Values {
	return this.values
}

/* 自定义属性字段;分号分隔<br /> 支持最大长度为：2000<br /> 支持的最大列表长度为：2000 */
func (this *QtReportAddRequest) SetExtAttr(value string) {
	this.Set("ext_attr", value)
}

/* 质检有效到期时间，一般为一年有效期
status状态为3时必须非空 */
func (this *QtReportAddRequest) SetGmtExpiry(value string) {
	this.Set("gmt_expiry", value)
}

/* 提交报告结果时间 */
func (this *QtReportAddRequest) SetGmtReport(value string) {
	this.Set("gmt_report", value)
}

/* 送检日期 */
func (this *QtReportAddRequest) SetGmtSubmit(value string) {
	this.Set("gmt_submit", value)
}

/* 只有status=3时赋值,
true 质检结果合格,false质检结果不合格.
留空表示成分鉴定,不做判定 */
func (this *QtReportAddRequest) SetIsPassed(value string) {
	this.Set("is_passed", value)
}

/* 样品信息描述<br /> 支持最大长度为：150<br /> 支持的最大列表长度为：150 */
func (this *QtReportAddRequest) SetItemDesc(value string) {
	this.Set("item_desc", value)
}

/* 样品链接.
QT_TYPE=9的时候，请填写N\A<br /> 支持最大长度为：256<br /> 支持的最大列表长度为：256 */
func (this *QtReportAddRequest) SetItemUrl(value string) {
	this.Set("item_url", value)
}

/* 检测结果消息描述<br /> 支持最大长度为：600<br /> 支持的最大列表长度为：600 */
func (this *QtReportAddRequest) SetMessage(value string) {
	this.Set("message", value)
}

/* 送检者昵称<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *QtReportAddRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 当前接口只有淘宝订单真假鉴定（QT_TYPE=9）的报告在该字段传入订单号，其他类型报告都不需要传输该值 */
func (this *QtReportAddRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* 一个质检服务唯一标识质量检验单的编号<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *QtReportAddRequest) SetQtCode(value string) {
	this.Set("qt_code", value)
}

/* 质检名称<br /> 支持最大长度为：150<br /> 支持的最大列表长度为：150 */
func (this *QtReportAddRequest) SetQtName(value string) {
	this.Set("qt_name", value)
}

/* 质检标准
status=3 时 必须非空<br /> 支持最大长度为：16<br /> 支持的最大列表长度为：16 */
func (this *QtReportAddRequest) SetQtStandard(value string) {
	this.Set("qt_standard", value)
}

/* (1L, "聚划算"),
(2L, "消保"),
(3L, "分销"),
(4L, "抽检"),
(5L, "良无限线下数据"),
(6L, "入驻/续签商城"),
(7L, "买家质检维权"),
(8L, "实地验证"),
(9L, "淘宝买家订单商品鉴定"),
(10L,"假一赔三");<br /> 支持最大值为：15<br /> 支持最小值为：0 */
func (this *QtReportAddRequest) SetQtType(value string) {
	this.Set("qt_type", value)
}

/* 质检报告源文件url
status状态为3时必须非空<br /> 支持最大长度为：256<br /> 支持的最大列表长度为：256 */
func (this *QtReportAddRequest) SetReportUrl(value string) {
	this.Set("report_url", value)
}

/* 收费项code<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *QtReportAddRequest) SetServcieItemCode(value string) {
	this.Set("servcie_item_code", value)
}

/* 质检服务商名称<br /> 支持最大长度为：50<br /> 支持的最大列表长度为：50 */
func (this *QtReportAddRequest) SetSpName(value string) {
	this.Set("sp_name", value)
}

/* 0:已提交申请
1:已收到样品
2:已出检测结果
3.已出具报告<br /> 支持最大值为：4<br /> 支持最小值为：0 */
func (this *QtReportAddRequest) SetStatus(value string) {
	this.Set("status", value)
}

type QtReportAddResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	QtReportAddResponseResult `json:"qt_report_add_response"`
}
type QtReportAddResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.qt.report.delete*/
type QtReportDeleteRequest struct {
	values url.Values
}

func (this *QtReportDeleteRequest) GetApiMethodName() string {
	return "taobao.qt.report.delete"
}
func (this *QtReportDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *QtReportDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 一个质检服务唯一标识质量检验单的编号<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *QtReportDeleteRequest) SetQtCode(value string) {
	this.Set("qt_code", value)
}

type QtReportDeleteResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	QtReportDeleteResponseResult `json:"qt_report_delete_response"`
}
type QtReportDeleteResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.qt.report.get*/
type QtReportGetRequest struct {
	values url.Values
}

func (this *QtReportGetRequest) GetApiMethodName() string {
	return "taobao.qt.report.get"
}
func (this *QtReportGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *QtReportGetRequest) GetValues() url.Values {
	return this.values
}

/* 质检编号 */
func (this *QtReportGetRequest) SetQtCode(value string) {
	this.Set("qt_code", value)
}

type QtReportGetResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	QtReportGetResponseResult `json:"qt_report_get_response"`
}
type QtReportGetResponseResult struct {
	/* 质检报告对象 */
	QtReport *QtReport `json:"qt_report"`
}

/*taobao.qt.report.update*/
type QtReportUpdateRequest struct {
	values url.Values
}

func (this *QtReportUpdateRequest) GetApiMethodName() string {
	return "taobao.qt.report.update"
}
func (this *QtReportUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *QtReportUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 自定义属性字段;分号分隔<br /> 支持最大长度为：2000<br /> 支持的最大列表长度为：2000 */
func (this *QtReportUpdateRequest) SetExtAttr(value string) {
	this.Set("ext_attr", value)
}

/* 质检有效到期时间，一般为一年有效期
status状态为3时必须非空 */
func (this *QtReportUpdateRequest) SetGmtExpiry(value string) {
	this.Set("gmt_expiry", value)
}

/* 提交报告结果时间 */
func (this *QtReportUpdateRequest) SetGmtReport(value string) {
	this.Set("gmt_report", value)
}

/* 送检日期 */
func (this *QtReportUpdateRequest) SetGmtSubmit(value string) {
	this.Set("gmt_submit", value)
}

/* 只有status=3时赋值,
0:未通过1:通过 空代表未判定 */
func (this *QtReportUpdateRequest) SetIsPassed(value string) {
	this.Set("is_passed", value)
}

/* 样品宝贝描述<br /> 支持最大长度为：150<br /> 支持的最大列表长度为：150 */
func (this *QtReportUpdateRequest) SetItemDesc(value string) {
	this.Set("item_desc", value)
}

/* 宝贝样品url<br /> 支持最大长度为：256<br /> 支持的最大列表长度为：256 */
func (this *QtReportUpdateRequest) SetItemUrl(value string) {
	this.Set("item_url", value)
}

/* 检测结果消息描述<br /> 支持最大长度为：300<br /> 支持的最大列表长度为：300 */
func (this *QtReportUpdateRequest) SetMessage(value string) {
	this.Set("message", value)
}

/* 送检者昵称<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *QtReportUpdateRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 外部ID，和QT_TYPE 一起表示某种平台的实体ID。
QT_TYPE=9的时候，num_iid为淘宝订单号 */
func (this *QtReportUpdateRequest) SetNumIid(value string) {
	this.Set("num_iid", value)
}

/* 一个质检服务唯一标识质量检验单的编号<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *QtReportUpdateRequest) SetQtCode(value string) {
	this.Set("qt_code", value)
}

/* 质检名称<br /> 支持最大长度为：150<br /> 支持的最大列表长度为：150 */
func (this *QtReportUpdateRequest) SetQtName(value string) {
	this.Set("qt_name", value)
}

/* 质检标准
status=3 时必须非空<br /> 支持最大长度为：16<br /> 支持的最大列表长度为：16 */
func (this *QtReportUpdateRequest) SetQtStandard(value string) {
	this.Set("qt_standard", value)
}

/* (1L, "聚划算"),
(2L, "消保"),
(3L, "分销"),
(4L, "抽检"),
(5L, "良无限线下数据"),
(6L, "入驻/续签商城"),
(7L, "买家质检维权"),
(8L, "实地验证"),
(9L, "淘宝买家订单商品鉴定"),
(10L,"假一赔三");<br /> 支持最大值为：15<br /> 支持最小值为：0 */
func (this *QtReportUpdateRequest) SetQtType(value string) {
	this.Set("qt_type", value)
}

/* 质检报告源文件url
status状态为3时必须非空<br /> 支持最大长度为：256<br /> 支持的最大列表长度为：256 */
func (this *QtReportUpdateRequest) SetReportUrl(value string) {
	this.Set("report_url", value)
}

/* 收费项code<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *QtReportUpdateRequest) SetServcieItemCode(value string) {
	this.Set("servcie_item_code", value)
}

/* 质检服务商名称<br /> 支持最大长度为：50<br /> 支持的最大列表长度为：50 */
func (this *QtReportUpdateRequest) SetSpName(value string) {
	this.Set("sp_name", value)
}

/* 0:已提交申请
1:已收到样品
2:已出检测结果
3.已出具报告<br /> 支持最大值为：4<br /> 支持最小值为：0 */
func (this *QtReportUpdateRequest) SetStatus(value string) {
	this.Set("status", value)
}

type QtReportUpdateResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	QtReportUpdateResponseResult `json:"qt_report_update_response"`
}
type QtReportUpdateResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.qt.reports.get*/
type QtReportsGetRequest struct {
	values url.Values
}

func (this *QtReportsGetRequest) GetApiMethodName() string {
	return "taobao.qt.reports.get"
}
func (this *QtReportsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *QtReportsGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询时间段的结束时间 */
func (this *QtReportsGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 送检者昵称 */
func (this *QtReportsGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 质检类型，目前只支持查询qt_type=11的类型 */
func (this *QtReportsGetRequest) SetQtType(value string) {
	this.Set("qt_type", value)
}

/* 收费项code */
func (this *QtReportsGetRequest) SetServcieItemCode(value string) {
	this.Set("servcie_item_code", value)
}

/* 质检服务商名<br /> 支持最大长度为：50<br /> 支持的最大列表长度为：50 */
func (this *QtReportsGetRequest) SetSpName(value string) {
	this.Set("sp_name", value)
}

/* 查询时间段的开始时间 */
func (this *QtReportsGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type QtReportsGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	QtReportsGetResponseResult `json:"qt_reports_get_response"`
}
type QtReportsGetResponseResult struct {
	/* 质检报告列表 */
	Reports []*QtReport `json:"reports"`
}

/*taobao.ts.property.get*/
type TsPropertyGetRequest struct {
	values url.Values
}

func (this *TsPropertyGetRequest) GetApiMethodName() string {
	return "taobao.ts.property.get"
}
func (this *TsPropertyGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TsPropertyGetRequest) GetValues() url.Values {
	return this.values
}

/* 服务收费项code<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *TsPropertyGetRequest) SetServiceItemCode(value string) {
	this.Set("service_item_code", value)
}

type TsPropertyGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	TsPropertyGetResponseResult `json:"ts_property_get_response"`
}
type TsPropertyGetResponseResult struct {
	/* 服务收费项相关属性对象 */
	ServiceItemProperty *ServiceItemProperty `json:"service_item_property"`
}

/*taobao.ts.subscribe.get*/
type TsSubscribeGetRequest struct {
	values url.Values
}

func (this *TsSubscribeGetRequest) GetApiMethodName() string {
	return "taobao.ts.subscribe.get"
}
func (this *TsSubscribeGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TsSubscribeGetRequest) GetValues() url.Values {
	return this.values
}

/* 订购用户昵称<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *TsSubscribeGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 服务收费项code<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *TsSubscribeGetRequest) SetServcieItemCode(value string) {
	this.Set("servcie_item_code", value)
}

type TsSubscribeGetResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	TsSubscribeGetResponseResult `json:"ts_subscribe_get_response"`
}
type TsSubscribeGetResponseResult struct {
	/* 订购关系对象 */
	ServiceSubscribe *ServiceSubscribe `json:"service_subscribe"`
}

/*taobao.categoryrecommend.items.get*/
type CategoryrecommendItemsGetRequest struct {
	values url.Values
}

func (this *CategoryrecommendItemsGetRequest) GetApiMethodName() string {
	return "taobao.categoryrecommend.items.get"
}
func (this *CategoryrecommendItemsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CategoryrecommendItemsGetRequest) GetValues() url.Values {
	return this.values
}

/* 传入叶子类目ID */
func (this *CategoryrecommendItemsGetRequest) SetCategoryId(value string) {
	this.Set("category_id", value)
}

/* 请求个数，建议获取20个 */
func (this *CategoryrecommendItemsGetRequest) SetCount(value string) {
	this.Set("count", value)
}

/* 额外参数 */
func (this *CategoryrecommendItemsGetRequest) SetExt(value string) {
	this.Set("ext", value)
}

/* 请求类型，1：类目下热门商品推荐。其他值当非法值处理 */
func (this *CategoryrecommendItemsGetRequest) SetRecommendType(value string) {
	this.Set("recommend_type", value)
}

type CategoryrecommendItemsGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	CategoryrecommendItemsGetResponseResult `json:"categoryrecommend_items_get_response"`
}
type CategoryrecommendItemsGetResponseResult struct {
	/* 返回关联的商品集合 */
	FavoriteItems []*FavoriteItem `json:"favorite_items"`
}

/*taobao.itemrecommend.items.get*/
type ItemrecommendItemsGetRequest struct {
	values url.Values
}

func (this *ItemrecommendItemsGetRequest) GetApiMethodName() string {
	return "taobao.itemrecommend.items.get"
}
func (this *ItemrecommendItemsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemrecommendItemsGetRequest) GetValues() url.Values {
	return this.values
}

/* 请求返回宝贝的个数，建议取20个 */
func (this *ItemrecommendItemsGetRequest) SetCount(value string) {
	this.Set("count", value)
}

/* 额外的参数信息 */
func (this *ItemrecommendItemsGetRequest) SetExt(value string) {
	this.Set("ext", value)
}

/* 商品ID */
func (this *ItemrecommendItemsGetRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 查询类型标识符，可传入1-3，1：同类商品推荐，2：异类商品推荐， 3：同店商品推荐。其他值当非法值处理 */
func (this *ItemrecommendItemsGetRequest) SetRecommendType(value string) {
	this.Set("recommend_type", value)
}

type ItemrecommendItemsGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	ItemrecommendItemsGetResponseResult `json:"itemrecommend_items_get_response"`
}
type ItemrecommendItemsGetResponseResult struct {
	/* 返回的推荐商品列表结果集 */
	Values []*FavoriteItem `json:"values"`
}

/*taobao.shoprecommend.items.get*/
type ShoprecommendItemsGetRequest struct {
	values url.Values
}

func (this *ShoprecommendItemsGetRequest) GetApiMethodName() string {
	return "taobao.shoprecommend.items.get"
}
func (this *ShoprecommendItemsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ShoprecommendItemsGetRequest) GetValues() url.Values {
	return this.values
}

/* 请求个数，最大只能获取10个 */
func (this *ShoprecommendItemsGetRequest) SetCount(value string) {
	this.Set("count", value)
}

/* 额外参数 */
func (this *ShoprecommendItemsGetRequest) SetExt(value string) {
	this.Set("ext", value)
}

/* 请求类型，1：店内热门商品推荐。其他值当非法值处理 */
func (this *ShoprecommendItemsGetRequest) SetRecommendType(value string) {
	this.Set("recommend_type", value)
}

/* <p>传入卖家ID。这里的seller_id得通过<a href="http://api.taobao.com/apidoc/api.htm?path=cid:38-apiId:10449">taobao.taobaoke.shops.get</a>
跟<a href="http://api.taobao.com/apidoc/api.htm?path=cid:38-apiId:21419">taobao.taobaoke.widget.shops.convert</a>这两个接口去获取user_id字段。</p>
<p>如果是非淘客卖家，则无法获取，暂无替代方案。</p> */
func (this *ShoprecommendItemsGetRequest) SetSellerId(value string) {
	this.Set("seller_id", value)
}

type ShoprecommendItemsGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	ShoprecommendItemsGetResponseResult `json:"shoprecommend_items_get_response"`
}
type ShoprecommendItemsGetResponseResult struct {
	/* 返回与店铺关联的宝贝集合 */
	FavoriteItems []*FavoriteItem `json:"favorite_items"`
}

/*taobao.shoprecommend.shops.get*/
type ShoprecommendShopsGetRequest struct {
	values url.Values
}

func (this *ShoprecommendShopsGetRequest) GetApiMethodName() string {
	return "taobao.shoprecommend.shops.get"
}
func (this *ShoprecommendShopsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ShoprecommendShopsGetRequest) GetValues() url.Values {
	return this.values
}

/* 请求个数，建议获取16个 */
func (this *ShoprecommendShopsGetRequest) SetCount(value string) {
	this.Set("count", value)
}

/* 额外参数 */
func (this *ShoprecommendShopsGetRequest) SetExt(value string) {
	this.Set("ext", value)
}

/* 请求类型，1：关联店铺推荐。其他值当非法值处理 */
func (this *ShoprecommendShopsGetRequest) SetRecommendType(value string) {
	this.Set("recommend_type", value)
}

/* 传入卖家ID */
func (this *ShoprecommendShopsGetRequest) SetSellerId(value string) {
	this.Set("seller_id", value)
}

type ShoprecommendShopsGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	ShoprecommendShopsGetResponseResult `json:"shoprecommend_shops_get_response"`
}
type ShoprecommendShopsGetResponseResult struct {
	/* 返回与店铺关联的店铺集 */
	FavoriteShops []*FavoriteShop `json:"favorite_shops"`
}

/*taobao.userrecommend.items.get*/
type UserrecommendItemsGetRequest struct {
	values url.Values
}

func (this *UserrecommendItemsGetRequest) GetApiMethodName() string {
	return "taobao.userrecommend.items.get"
}
func (this *UserrecommendItemsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *UserrecommendItemsGetRequest) GetValues() url.Values {
	return this.values
}

/* 请求个数，建议取20个 */
func (this *UserrecommendItemsGetRequest) SetCount(value string) {
	this.Set("count", value)
}

/* 额外参数 */
func (this *UserrecommendItemsGetRequest) SetExt(value string) {
	this.Set("ext", value)
}

/* 请求类型，1：用户购买意图。其他值当非法值处理 */
func (this *UserrecommendItemsGetRequest) SetRecommendType(value string) {
	this.Set("recommend_type", value)
}

type UserrecommendItemsGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	UserrecommendItemsGetResponseResult `json:"userrecommend_items_get_response"`
}
type UserrecommendItemsGetResponseResult struct {
	/* 返回用户相关的关联宝贝集合 */
	FavoriteItems []*FavoriteItem `json:"favorite_items"`
}

/*taobao.widget.loginstatus.get*/
type WidgetLoginstatusGetRequest struct {
	values url.Values
}

func (this *WidgetLoginstatusGetRequest) GetApiMethodName() string {
	return "taobao.widget.loginstatus.get"
}
func (this *WidgetLoginstatusGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WidgetLoginstatusGetRequest) GetValues() url.Values {
	return this.values
}

/* 指定判断当前浏览器登陆用户是否此昵称用户，并且返回是否登陆。如果用户不一致返回未登陆，如果用户一致且已登录返回已登陆 */
func (this *WidgetLoginstatusGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type WidgetLoginstatusGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	WidgetLoginstatusGetResponseResult `json:"widget_loginstatus_get_response"`
}
type WidgetLoginstatusGetResponseResult struct {
	/* 当前浏览器用户是否已登陆。如果指定了nick，但是nick与浏览器用户不一致返回false。如果未指定nick，以浏览器用户登陆状态为准。如果指定了nick且与浏览器用户一致，以浏览器用户登陆状态为准 */
	IsLogin bool `json:"is_login"`
	/* 淘宝用户的昵称，传了session且已登陆才返回 */
	Nick string `json:"nick"`
	/* 淘宝用户的数字id，传了session且已登录才返回。 */
	UserId string `json:"user_id"`
}

/*alipay.data.bill.downloadurl.get*/
type AlipayDataBillDownloadurlGetRequest struct {
	values url.Values
}

func (this *AlipayDataBillDownloadurlGetRequest) GetApiMethodName() string {
	return "alipay.data.bill.downloadurl.get"
}
func (this *AlipayDataBillDownloadurlGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayDataBillDownloadurlGetRequest) GetValues() url.Values {
	return this.values
}

/* 支付宝给用户的授权。如果没有top的授权，这个字段是必填项 */
func (this *AlipayDataBillDownloadurlGetRequest) SetAuthToken(value string) {
	this.Set("auth_token", value)
}

/* 账单时间：日账单格式为yyyy-MM-dd,月账单格式为yyyy-MM */
func (this *AlipayDataBillDownloadurlGetRequest) SetBillDate(value string) {
	this.Set("bill_date", value)
}

/* 账单类型，目前支持的类型有：air */
func (this *AlipayDataBillDownloadurlGetRequest) SetBillType(value string) {
	this.Set("bill_type", value)
}

type AlipayDataBillDownloadurlGetResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	AlipayDataBillDownloadurlGetResponseResult `json:"alipay_data_bill_downloadurl_get_response"`
}
type AlipayDataBillDownloadurlGetResponseResult struct {
	/* 账单下载地址链接，获取连接后30秒后未下载，链接地址失效。 */
	BillDownloadUrl string `json:"bill_download_url"`
}

/*alipay.ebpp.bill.add*/
type AlipayEbppBillAddRequest struct {
	values url.Values
}

func (this *AlipayEbppBillAddRequest) GetApiMethodName() string {
	return "alipay.ebpp.bill.add"
}
func (this *AlipayEbppBillAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayEbppBillAddRequest) GetValues() url.Values {
	return this.values
}

/* 如果传入调用api有淘宝授权的session可以不传这个字段 */
func (this *AlipayEbppBillAddRequest) SetAuthToken(value string) {
	this.Set("auth_token", value)
}

/* 账单的账期，例如201203表示2012年3月的账单。 */
func (this *AlipayEbppBillAddRequest) SetBillDate(value string) {
	this.Set("bill_date", value)
}

/* 账单单据号，例如水费单号，手机号，电费号，信用卡卡号。没有唯一性要求。<br /> 支持最大长度为：50<br /> 支持的最大列表长度为：50 */
func (this *AlipayEbppBillAddRequest) SetBillKey(value string) {
	this.Set("bill_key", value)
}

/* 支付宝给每个出账机构指定了一个对应的英文短名称来唯一表示该收费单位。<br /> 支持最大长度为：80<br /> 支持的最大列表长度为：80 */
func (this *AlipayEbppBillAddRequest) SetChargeInst(value string) {
	this.Set("charge_inst", value)
}

/* 输出机构的业务流水号，需要保证唯一性。<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *AlipayEbppBillAddRequest) SetMerchantOrderNo(value string) {
	this.Set("merchant_order_no", value)
}

/* 用户的手机号 */
func (this *AlipayEbppBillAddRequest) SetMobile(value string) {
	this.Set("mobile", value)
}

/* 支付宝订单类型。公共事业缴纳JF,信用卡还款HK<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *AlipayEbppBillAddRequest) SetOrderType(value string) {
	this.Set("order_type", value)
}

/* 拥有该账单的用户姓名<br /> 支持最大长度为：50<br /> 支持的最大列表长度为：50 */
func (this *AlipayEbppBillAddRequest) SetOwnerName(value string) {
	this.Set("owner_name", value)
}

/* 缴费金额。用户支付的总金额。单位为：RMB Yuan。取值范围为[0.01，100000000.00]，精确到小数点后两位。 */
func (this *AlipayEbppBillAddRequest) SetPayAmount(value string) {
	this.Set("pay_amount", value)
}

/* 账单的服务费。 */
func (this *AlipayEbppBillAddRequest) SetServiceAmount(value string) {
	this.Set("service_amount", value)
}

/* 子业务类型是业务类型的下一级概念，例如：WATER表示JF下面的水费，ELECTRIC表示JF下面的电费，GAS表示JF下面的燃气费。<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *AlipayEbppBillAddRequest) SetSubOrderType(value string) {
	this.Set("sub_order_type", value)
}

/* 交通违章地点，sub_order_type=TRAFFIC时填写。 */
func (this *AlipayEbppBillAddRequest) SetTrafficLocation(value string) {
	this.Set("traffic_location", value)
}

/* 违章行为，sub_order_type=TRAFFIC时填写。 */
func (this *AlipayEbppBillAddRequest) SetTrafficRegulations(value string) {
	this.Set("traffic_regulations", value)
}

type AlipayEbppBillAddResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	AlipayEbppBillAddResponseResult `json:"alipay_ebpp_bill_add_response"`
}
type AlipayEbppBillAddResponseResult struct {
	/* 支付宝的业务订单号，具有唯一性。 */
	AlipayOrderNo string `json:"alipay_order_no"`
	/* 账单的账期，例如201203表示2012年3月的账单。 */
	BillDate string `json:"bill_date"`
	/* 账单单据号，例如水费单号，手机号，电费号，信用卡卡号。没有唯一性要求。 */
	BillKey string `json:"bill_key"`
	/* 支付宝给每个出账机构指定了一个对应的英文短名称来唯一表示该收费单位。 */
	ChargeInst string `json:"charge_inst"`
	/* 出账机构中文名称。 */
	ChargeInstName string `json:"charge_inst_name"`
	/* 输出机构的业务流水号，需要保证唯一性。 */
	MerchantOrderNo string `json:"merchant_order_no"`
	/* 支付宝订单类型。公共事业缴纳JF,信用卡还款HK */
	OrderType string `json:"order_type"`
	/* 拥有该账单的用户姓名 */
	OwnerName string `json:"owner_name"`
	/* 缴费金额。用户支付的总金额。单位为：RMB Yuan。取值范围为[0.01，100000000.00]，精确到小数点后两位。 */
	PayAmount string `json:"pay_amount"`
	/* 账单的服务费 */
	ServiceAmount string `json:"service_amount"`
	/* 子业务类型是业务类型的下一级概念，例如：WATER表示JF下面的水费，ELECTRIC表示JF下面的电费，GAS表示JF下面的燃气费。 */
	SubOrderType string `json:"sub_order_type"`
}

/*alipay.ebpp.bill.key.search*/
type AlipayEbppBillKeySearchRequest struct {
	values url.Values
}

func (this *AlipayEbppBillKeySearchRequest) GetApiMethodName() string {
	return "alipay.ebpp.bill.key.search"
}
func (this *AlipayEbppBillKeySearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayEbppBillKeySearchRequest) GetValues() url.Values {
	return this.values
}

/* 支付宝给每个出账机构指定了一个对应的英文短名称来唯一表示该收费单位。<br /> 支持最大长度为：80<br /> 支持的最大列表长度为：80 */
func (this *AlipayEbppBillKeySearchRequest) SetChargeInst(value string) {
	this.Set("charge_inst", value)
}

/* 结束时间。与开始时间间隔在七天之内 */
func (this *AlipayEbppBillKeySearchRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 需要返回的字段列表。bill_key:户号 */
func (this *AlipayEbppBillKeySearchRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 是否仅包含订阅数据 */
func (this *AlipayEbppBillKeySearchRequest) SetOnlySubscribed(value string) {
	this.Set("only_subscribed", value)
}

/* 支付宝订单类型。公共事业缴纳JF,信用卡还款HK<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *AlipayEbppBillKeySearchRequest) SetOrderType(value string) {
	this.Set("order_type", value)
}

/* 开始时间，时间必须是今天范围之内。格式为yyyy-MM-dd HH:mm:ss，精确到天 */
func (this *AlipayEbppBillKeySearchRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 子业务类型是业务类型的下一级概念，例如：WATER表示JF下面的水费，ELECTRIC表示JF下面的电费，GAS表示JF下面的燃气费。<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *AlipayEbppBillKeySearchRequest) SetSubOrderType(value string) {
	this.Set("sub_order_type", value)
}

type AlipayEbppBillKeySearchResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	AlipayEbppBillKeySearchResponseResult `json:"alipay_ebpp_bill_key_search_response"`
}
type AlipayEbppBillKeySearchResponseResult struct {
	/* 请求受理ID。 */
	TaskId string `json:"task_id"`
}

/*alipay.ebpp.owe.bill.upload*/
type AlipayEbppOweBillUploadRequest struct {
	values url.Values
}

func (this *AlipayEbppOweBillUploadRequest) GetApiMethodName() string {
	return "alipay.ebpp.owe.bill.upload"
}
func (this *AlipayEbppOweBillUploadRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayEbppOweBillUploadRequest) GetValues() url.Values {
	return this.values
}

/* 支付宝给每个出账机构指定了一个对应的英文短名称来唯一表示该收费单位。<br /> 支持最大长度为：80<br /> 支持的最大列表长度为：80 */
func (this *AlipayEbppOweBillUploadRequest) SetChargeInst(value string) {
	this.Set("charge_inst", value)
}

/* 销账机构<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *AlipayEbppOweBillUploadRequest) SetChargeoffInst(value string) {
	this.Set("chargeoff_inst", value)
}

/* 文件摘要，算法SHA */
func (this *AlipayEbppOweBillUploadRequest) SetDigestOweBill(value string) {
	this.Set("digest_owe_bill", value)
}

/* 支付宝订单类型。公共事业缴纳JF,信用卡还款HK<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *AlipayEbppOweBillUploadRequest) SetOrderType(value string) {
	this.Set("order_type", value)
}

/* 文件内容<br /> 支持的文件类型为：zip,rar,csv,doc,docx,xls,xlsx<br /> 支持的最大列表长度为：52428800 */
func (this *AlipayEbppOweBillUploadRequest) SetOweBill(value string) {
	this.Set("owe_bill", value)
}

/* 子业务类型是业务类型的下一级概念，例如：WATER表示JF下面的水费，ELECTRIC表示JF下面的电费，GAS表示JF下面的燃气费。<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *AlipayEbppOweBillUploadRequest) SetSubOrderType(value string) {
	this.Set("sub_order_type", value)
}

type AlipayEbppOweBillUploadResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	AlipayEbppOweBillUploadResponseResult `json:"alipay_ebpp_owe_bill_upload_response"`
}
type AlipayEbppOweBillUploadResponseResult struct {
	/* 出账机构 */
	ChargeInst string `json:"charge_inst"`
	/* 销账机构 */
	ChargeoffInst string `json:"chargeoff_inst"`
	/* 业务类型 */
	OrderType string `json:"order_type"`
	/* 子业务类型 */
	SubOrderType string `json:"sub_order_type"`
}

/*alipay.micropay.order.confirmpayurl.get*/
type AlipayMicropayOrderConfirmpayurlGetRequest struct {
	values url.Values
}

func (this *AlipayMicropayOrderConfirmpayurlGetRequest) GetApiMethodName() string {
	return "alipay.micropay.order.confirmpayurl.get"
}
func (this *AlipayMicropayOrderConfirmpayurlGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayMicropayOrderConfirmpayurlGetRequest) GetValues() url.Values {
	return this.values
}

/* 支付宝订单号，冻结流水号.这个是创建冻结订单支付宝返回的 */
func (this *AlipayMicropayOrderConfirmpayurlGetRequest) SetAlipayOrderNo(value string) {
	this.Set("alipay_order_no", value)
}

/* 支付金额,区间必须在[0.01,30]，只能保留小数点后两位 */
func (this *AlipayMicropayOrderConfirmpayurlGetRequest) SetAmount(value string) {
	this.Set("amount", value)
}

/* 支付宝用户给应用的授权. */
func (this *AlipayMicropayOrderConfirmpayurlGetRequest) SetAuthToken(value string) {
	this.Set("auth_token", value)
}

/* 支付备注 */
func (this *AlipayMicropayOrderConfirmpayurlGetRequest) SetMemo(value string) {
	this.Set("memo", value)
}

/* 收款方的支付宝ID */
func (this *AlipayMicropayOrderConfirmpayurlGetRequest) SetReceiveUserId(value string) {
	this.Set("receive_user_id", value)
}

/* 本次转账的外部单据号（只能由字母和数字组成,maxlength=32） */
func (this *AlipayMicropayOrderConfirmpayurlGetRequest) SetTransferOutOrderNo(value string) {
	this.Set("transfer_out_order_no", value)
}

type AlipayMicropayOrderConfirmpayurlGetResponse struct {
	*ErrorResponse                                    `json:"error_response,omitempty"`
	AlipayMicropayOrderConfirmpayurlGetResponseResult `json:"alipay_micropay_order_confirmpayurl_get_response"`
}
type AlipayMicropayOrderConfirmpayurlGetResponseResult struct {
	/* SinglePayDetail信息 */
	SinglePayDetail *SinglePayDetail `json:"single_pay_detail"`
}

/*alipay.micropay.order.direct.pay*/
type AlipayMicropayOrderDirectPayRequest struct {
	values url.Values
}

func (this *AlipayMicropayOrderDirectPayRequest) GetApiMethodName() string {
	return "alipay.micropay.order.direct.pay"
}
func (this *AlipayMicropayOrderDirectPayRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayMicropayOrderDirectPayRequest) GetValues() url.Values {
	return this.values
}

/* 支付宝订单号，冻结流水号.这个是创建冻结订单支付宝返回的 */
func (this *AlipayMicropayOrderDirectPayRequest) SetAlipayOrderNo(value string) {
	this.Set("alipay_order_no", value)
}

/* 支付金额,区间必须在[0.01,30]，只能保留小数点后两位 */
func (this *AlipayMicropayOrderDirectPayRequest) SetAmount(value string) {
	this.Set("amount", value)
}

/* 支付宝给应用的授权 */
func (this *AlipayMicropayOrderDirectPayRequest) SetAuthToken(value string) {
	this.Set("auth_token", value)
}

/* 支付备注 */
func (this *AlipayMicropayOrderDirectPayRequest) SetMemo(value string) {
	this.Set("memo", value)
}

/* 收款方的支付宝ID */
func (this *AlipayMicropayOrderDirectPayRequest) SetReceiveUserId(value string) {
	this.Set("receive_user_id", value)
}

/* 本次转账的外部单据号（只能由字母和数字组成,maxlength=32 */
func (this *AlipayMicropayOrderDirectPayRequest) SetTransferOutOrderNo(value string) {
	this.Set("transfer_out_order_no", value)
}

type AlipayMicropayOrderDirectPayResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	AlipayMicropayOrderDirectPayResponseResult `json:"alipay_micropay_order_direct_pay_response"`
}
type AlipayMicropayOrderDirectPayResponseResult struct {
	/* 单笔直接支付返回结果 */
	SinglePayDetail *SinglePayDetail `json:"single_pay_detail"`
}

/*alipay.micropay.order.freeze*/
type AlipayMicropayOrderFreezeRequest struct {
	values url.Values
}

func (this *AlipayMicropayOrderFreezeRequest) GetApiMethodName() string {
	return "alipay.micropay.order.freeze"
}
func (this *AlipayMicropayOrderFreezeRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayMicropayOrderFreezeRequest) GetValues() url.Values {
	return this.values
}

/* 需要冻结金额，[0.01,2000]，必须是正数，最多只能保留小数点两位,单位是元 */
func (this *AlipayMicropayOrderFreezeRequest) SetAmount(value string) {
	this.Set("amount", value)
}

/* 支付宝用户给应用的授权. */
func (this *AlipayMicropayOrderFreezeRequest) SetAuthToken(value string) {
	this.Set("auth_token", value)
}

/* 冻结资金的到期时间，超过此日期，冻结金会自动解冻,时间要求是:[当前时间+24h,订购时间-8h] . */
func (this *AlipayMicropayOrderFreezeRequest) SetExpireTime(value string) {
	this.Set("expire_time", value)
}

/* 冻结备注,maxLength=40 */
func (this *AlipayMicropayOrderFreezeRequest) SetMemo(value string) {
	this.Set("memo", value)
}

/* 商户订单号,只能由字母和数字组成，最大长度32.此外部订单号与支付宝的冻结订单号对应,注意 应用id和订购者id和外部订单号必须保证唯一性。 */
func (this *AlipayMicropayOrderFreezeRequest) SetMerchantOrderNo(value string) {
	this.Set("merchant_order_no", value)
}

/* 在解冻转账的时候的支付方式:
NO_CONFIRM：不需要付款确认，调用接口直接扣款
PAY_PASSWORD:
在转账需要付款方用支付密码确认，才可以转账成功 */
func (this *AlipayMicropayOrderFreezeRequest) SetPayConfirm(value string) {
	this.Set("pay_confirm", value)
}

type AlipayMicropayOrderFreezeResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	AlipayMicropayOrderFreezeResponseResult `json:"alipay_micropay_order_freeze_response"`
}
type AlipayMicropayOrderFreezeResponseResult struct {
	/* 冻结订单详情 */
	MicroPayOrderDetail *MicroPayOrderDetail `json:"micro_pay_order_detail"`
}

/*alipay.micropay.order.freezepayurl.get*/
type AlipayMicropayOrderFreezepayurlGetRequest struct {
	values url.Values
}

func (this *AlipayMicropayOrderFreezepayurlGetRequest) GetApiMethodName() string {
	return "alipay.micropay.order.freezepayurl.get"
}
func (this *AlipayMicropayOrderFreezepayurlGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayMicropayOrderFreezepayurlGetRequest) GetValues() url.Values {
	return this.values
}

/* 冻结订单号,创建冻结订单时支付宝返回的 */
func (this *AlipayMicropayOrderFreezepayurlGetRequest) SetAlipayOrderNo(value string) {
	this.Set("alipay_order_no", value)
}

/* 支付宝用户给应用的授权。 */
func (this *AlipayMicropayOrderFreezepayurlGetRequest) SetAuthToken(value string) {
	this.Set("auth_token", value)
}

type AlipayMicropayOrderFreezepayurlGetResponse struct {
	*ErrorResponse                                   `json:"error_response,omitempty"`
	AlipayMicropayOrderFreezepayurlGetResponseResult `json:"alipay_micropay_order_freezepayurl_get_response"`
}
type AlipayMicropayOrderFreezepayurlGetResponseResult struct {
	/* 支付冻结金的地址 */
	PayFreezeUrl string `json:"pay_freeze_url"`
}

/*alipay.micropay.order.get*/
type AlipayMicropayOrderGetRequest struct {
	values url.Values
}

func (this *AlipayMicropayOrderGetRequest) GetApiMethodName() string {
	return "alipay.micropay.order.get"
}
func (this *AlipayMicropayOrderGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayMicropayOrderGetRequest) GetValues() url.Values {
	return this.values
}

/* 支付宝订单号，冻结流水号(创建冻结订单返回) */
func (this *AlipayMicropayOrderGetRequest) SetAlipayOrderNo(value string) {
	this.Set("alipay_order_no", value)
}

/* 支付宝用户给应用的授权. */
func (this *AlipayMicropayOrderGetRequest) SetAuthToken(value string) {
	this.Set("auth_token", value)
}

type AlipayMicropayOrderGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	AlipayMicropayOrderGetResponseResult `json:"alipay_micropay_order_get_response"`
}
type AlipayMicropayOrderGetResponseResult struct {
	/* 冻结订单详情 */
	MicroPayOrderDetail *MicroPayOrderDetail `json:"micro_pay_order_detail"`
}

/*alipay.micropay.order.unfreeze*/
type AlipayMicropayOrderUnfreezeRequest struct {
	values url.Values
}

func (this *AlipayMicropayOrderUnfreezeRequest) GetApiMethodName() string {
	return "alipay.micropay.order.unfreeze"
}
func (this *AlipayMicropayOrderUnfreezeRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayMicropayOrderUnfreezeRequest) GetValues() url.Values {
	return this.values
}

/* 冻结资金流水号,在创建资金订单时支付宝返回的流水号 */
func (this *AlipayMicropayOrderUnfreezeRequest) SetAlipayOrderNo(value string) {
	this.Set("alipay_order_no", value)
}

/* 支付宝用户给应用的授权. */
func (this *AlipayMicropayOrderUnfreezeRequest) SetAuthToken(value string) {
	this.Set("auth_token", value)
}

/* 冻结备注 */
func (this *AlipayMicropayOrderUnfreezeRequest) SetMemo(value string) {
	this.Set("memo", value)
}

type AlipayMicropayOrderUnfreezeResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	AlipayMicropayOrderUnfreezeResponseResult `json:"alipay_micropay_order_unfreeze_response"`
}
type AlipayMicropayOrderUnfreezeResponseResult struct {
	/* 冻结订单详情结果 */
	UnfreezeOrderDetail *UnfreezeOrderDetail `json:"unfreeze_order_detail"`
}

/*alipay.point.budget.get*/
type AlipayPointBudgetGetRequest struct {
	values url.Values
}

func (this *AlipayPointBudgetGetRequest) GetApiMethodName() string {
	return "alipay.point.budget.get"
}
func (this *AlipayPointBudgetGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayPointBudgetGetRequest) GetValues() url.Values {
	return this.values
}

/* 支付宝给用户的授权。如果没有top的授权，这个字段是必填项 */
func (this *AlipayPointBudgetGetRequest) SetAuthToken(value string) {
	this.Set("auth_token", value)
}

type AlipayPointBudgetGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	AlipayPointBudgetGetResponseResult `json:"alipay_point_budget_get_response"`
}
type AlipayPointBudgetGetResponseResult struct {
	/* 还可以发放的集分宝个数 */
	BudgetAmount int64 `json:"budget_amount"`
}

/*alipay.point.order.add*/
type AlipayPointOrderAddRequest struct {
	values url.Values
}

func (this *AlipayPointOrderAddRequest) GetApiMethodName() string {
	return "alipay.point.order.add"
}
func (this *AlipayPointOrderAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayPointOrderAddRequest) GetValues() url.Values {
	return this.values
}

/* 支付宝用户给应用发放集分宝的授权。 */
func (this *AlipayPointOrderAddRequest) SetAuthToken(value string) {
	this.Set("auth_token", value)
}

/* 向用户展示集分宝发放备注 */
func (this *AlipayPointOrderAddRequest) SetMemo(value string) {
	this.Set("memo", value)
}

/* isv提供的发放号订单号，由数字和组成，最大长度为32为，需要保证每笔发放的唯一性，支付宝会对该参数做唯一性控制。如果使用同样的订单号，支付宝将返回订单号已经存在的错误 */
func (this *AlipayPointOrderAddRequest) SetMerchantOrderNo(value string) {
	this.Set("merchant_order_no", value)
}

/* 发放集分宝时间 */
func (this *AlipayPointOrderAddRequest) SetOrderTime(value string) {
	this.Set("order_time", value)
}

/* 发放集分宝的数量 */
func (this *AlipayPointOrderAddRequest) SetPointCount(value string) {
	this.Set("point_count", value)
}

/* 用户标识符，用于指定集分宝发放的用户，和user_symbol_type一起使用，确定一个唯一的支付宝用户 */
func (this *AlipayPointOrderAddRequest) SetUserSymbol(value string) {
	this.Set("user_symbol", value)
}

/* 用户标识符类型，现在支持ALIPAY_USER_ID:表示支付宝用户ID,ALIPAY_LOGON_ID:表示支付宝登陆号 */
func (this *AlipayPointOrderAddRequest) SetUserSymbolType(value string) {
	this.Set("user_symbol_type", value)
}

type AlipayPointOrderAddResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	AlipayPointOrderAddResponseResult `json:"alipay_point_order_add_response"`
}
type AlipayPointOrderAddResponseResult struct {
	/* 支付宝集分宝发放流水号 */
	AlipayOrderNo string `json:"alipay_order_no"`
	/* 充值结果：SUCCESS表示成功，其他表示失败 */
	ResultCode bool `json:"result_code"`
}

/*alipay.point.order.get*/
type AlipayPointOrderGetRequest struct {
	values url.Values
}

func (this *AlipayPointOrderGetRequest) GetApiMethodName() string {
	return "alipay.point.order.get"
}
func (this *AlipayPointOrderGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayPointOrderGetRequest) GetValues() url.Values {
	return this.values
}

/* 支付宝用户给应用的授权。 */
func (this *AlipayPointOrderGetRequest) SetAuthToken(value string) {
	this.Set("auth_token", value)
}

/* isv提供的发放号订单号，由数字和组成，最大长度为32为，需要保证每笔发放的唯一性，支付宝会对该参数做唯一性控制。如果使用同样的订单号，支付宝将返回订单号已经存在的错误 */
func (this *AlipayPointOrderGetRequest) SetMerchantOrderNo(value string) {
	this.Set("merchant_order_no", value)
}

/* 用户标识符，用于指定集分宝发放的用户，和user_symbol_type一起使用，确定一个唯一的支付宝用户 */
func (this *AlipayPointOrderGetRequest) SetUserSymbol(value string) {
	this.Set("user_symbol", value)
}

/* 用户标识符类型，现在支持ALIPAY_USER_ID:表示支付宝用户ID,ALIPAY_LOGON_ID:表示支付宝登陆号 */
func (this *AlipayPointOrderGetRequest) SetUserSymbolType(value string) {
	this.Set("user_symbol_type", value)
}

type AlipayPointOrderGetResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	AlipayPointOrderGetResponseResult `json:"alipay_point_order_get_response"`
}
type AlipayPointOrderGetResponseResult struct {
	/* 支付宝集分宝发放流水号 */
	AlipayOrderNo string `json:"alipay_order_no"`
	/* 发放时间，格式：yyyy-MM-dd HH:mm:ss */
	CreateTime string `json:"create_time"`
	/* 支付宝集分宝发放者用户ID */
	DispatchUserId string `json:"dispatch_user_id"`
	/* 向用户展示集分宝发放备注 */
	Memo string `json:"memo"`
	/* isv提供的发放号订单号，由数字和字母组成，最大长度为32为，需要保证每笔发放的唯一性，支付宝会对该参数做唯一性控制。如果使用同样的订单号，支付宝将返回订单号已经存在的错误 */
	MerchantOrderNo string `json:"merchant_order_no"`
	/* 集分宝发放流水状态，I表示处理中，S表示成功，F表示失败 */
	OrderStatus string `json:"order_status"`
	/* 发放集分宝的数量 */
	PointCount int64 `json:"point_count"`
	/* 支付宝集分宝接收者用户ID */
	ReceiveUserId string `json:"receive_user_id"`
}

/*alipay.system.oauth.token*/
type AlipaySystemOauthTokenRequest struct {
	values url.Values
}

func (this *AlipaySystemOauthTokenRequest) GetApiMethodName() string {
	return "alipay.system.oauth.token"
}
func (this *AlipaySystemOauthTokenRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipaySystemOauthTokenRequest) GetValues() url.Values {
	return this.values
}

/* 授权码，用户对应用授权后得到。<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *AlipaySystemOauthTokenRequest) SetCode(value string) {
	this.Set("code", value)
}

/* 获取访问令牌的类型，authorization_code表示用授权码换，refresh_token表示用刷新令牌来换。<br /> 支持最大长度为：20<br /> 支持的最大列表长度为：20 */
func (this *AlipaySystemOauthTokenRequest) SetGrantType(value string) {
	this.Set("grant_type", value)
}

/* 刷新令牌，上次换取访问令牌是得到。<br /> 支持最大长度为：40<br /> 支持的最大列表长度为：40 */
func (this *AlipaySystemOauthTokenRequest) SetRefreshToken(value string) {
	this.Set("refresh_token", value)
}

type AlipaySystemOauthTokenResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	AlipaySystemOauthTokenResponseResult `json:"alipay_system_oauth_token_response"`
}
type AlipaySystemOauthTokenResponseResult struct {
	/* 访问令牌 */
	AccessToken string `json:"access_token"`
	/* 支付宝用户的id。 */
	AlipayUserId string `json:"alipay_user_id"`
	/* 访问令牌的有效时间，单位是秒。 */
	ExpiresIn string `json:"expires_in"`
	/* 刷新令牌的有效时间，单位是秒。 */
	ReExpiresIn string `json:"re_expires_in"`
	/* 刷新令牌 */
	RefreshToken string `json:"refresh_token"`
}

/*alipay.topats.user.accountreport.get*/
type AlipayTopatsUserAccountreportGetRequest struct {
	values url.Values
}

func (this *AlipayTopatsUserAccountreportGetRequest) GetApiMethodName() string {
	return "alipay.topats.user.accountreport.get"
}
func (this *AlipayTopatsUserAccountreportGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayTopatsUserAccountreportGetRequest) GetValues() url.Values {
	return this.values
}

/* 返回下载结果文件的数据格式，只支持utf-8和gbk编码，默认是utf-8 */
func (this *AlipayTopatsUserAccountreportGetRequest) SetCharset(value string) {
	this.Set("charset", value)
}

/* 对账单结束时间。end_time - start_time <= 1个自然月 */
func (this *AlipayTopatsUserAccountreportGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 需要返回的字段列表。create_time:创建时间,type：账务类型,business_type:子业务类型,balance:当时支付宝账户余额,in_amount:收入金额,out_amount:支出金额,alipay_order_no:支付宝订单号,merchant_order_no:商户订单号,self_user_id:自己的支付宝ID,opt_user_id:对方的支付宝ID,memo:账号备注 */
func (this *AlipayTopatsUserAccountreportGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 对账单开始时间。最近一个月内的日期。 */
func (this *AlipayTopatsUserAccountreportGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 账务类型。多个类型是，用逗号分隔，不传则查询所有类型的。PAYMENT:在线支付，TRANSFER:转账，DEPOSIT:充值，WITHDRAW:提现，CHARGE:收费，PREAUTH:预授权，OTHER：其它。 */
func (this *AlipayTopatsUserAccountreportGetRequest) SetType(value string) {
	this.Set("type", value)
}

type AlipayTopatsUserAccountreportGetResponse struct {
	*ErrorResponse                                 `json:"error_response,omitempty"`
	AlipayTopatsUserAccountreportGetResponseResult `json:"alipay_topats_user_accountreport_get_response"`
}
type AlipayTopatsUserAccountreportGetResponseResult struct {
	/* 创建任务信息。里面只包含task_id和created */
	Task *Task `json:"task"`
}

/*alipay.user.account.freeze.get*/
type AlipayUserAccountFreezeGetRequest struct {
	values url.Values
}

func (this *AlipayUserAccountFreezeGetRequest) GetApiMethodName() string {
	return "alipay.user.account.freeze.get"
}
func (this *AlipayUserAccountFreezeGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayUserAccountFreezeGetRequest) GetValues() url.Values {
	return this.values
}

/* 冻结类型，多个用,分隔。不传返回所有类型的冻结金额。
DEPOSIT_FREEZE,充值冻结
WITHDRAW_FREEZE,提现冻结
PAYMENT_FREEZE,支付冻结
BAIL_FREEZE,保证金冻结
CHARGE_FREEZE,收费冻结
PRE_DEPOSIT_FREEZE,预存款冻结
LOAN_FREEZE,贷款冻结
OTHER_FREEZE,其它 */
func (this *AlipayUserAccountFreezeGetRequest) SetFreezeType(value string) {
	this.Set("freeze_type", value)
}

type AlipayUserAccountFreezeGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	AlipayUserAccountFreezeGetResponseResult `json:"alipay_user_account_freeze_get_response"`
}
type AlipayUserAccountFreezeGetResponseResult struct {
	/* 冻结金额列表 */
	FreezeItems []*AccountFreeze `json:"freeze_items"`
	/* 冻结总条数 */
	TotalResults string `json:"total_results"`
}

/*alipay.user.account.get*/
type AlipayUserAccountGetRequest struct {
	values url.Values
}

func (this *AlipayUserAccountGetRequest) GetApiMethodName() string {
	return "alipay.user.account.get"
}
func (this *AlipayUserAccountGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayUserAccountGetRequest) GetValues() url.Values {
	return this.values
}

type AlipayUserAccountGetResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	AlipayUserAccountGetResponseResult `json:"alipay_user_account_get_response"`
}
type AlipayUserAccountGetResponseResult struct {
	/* 支付宝用户账户信息 */
	AlipayAccount *AlipayAccount `json:"alipay_account"`
}

/*alipay.user.accountreport.get*/
type AlipayUserAccountreportGetRequest struct {
	values url.Values
}

func (this *AlipayUserAccountreportGetRequest) GetApiMethodName() string {
	return "alipay.user.accountreport.get"
}
func (this *AlipayUserAccountreportGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayUserAccountreportGetRequest) GetValues() url.Values {
	return this.values
}

/* 对账单结束时间，其中end_time - start_time <= 1个自然月，对于对账记录比较多的情况，强烈建议按天查询，否则会出现超时的情况。 */
func (this *AlipayUserAccountreportGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 需要返回的字段列表。create_time:创建时间,type：账务类型,business_type:子业务类型,balance:当时支付宝账户余额,in_amount:收入金额,out_amount:支出金额,alipay_order_no:支付宝订单号,merchant_order_no:商户订单号,self_user_id:自己的支付宝ID,opt_user_id:对方的支付宝ID,memo:账号备注 */
func (this *AlipayUserAccountreportGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 要获取的对账单页码<br /> 支持最小值为：1 */
func (this *AlipayUserAccountreportGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每次查询获取对账记录数量<br /> 支持最大值为：200<br /> 支持最小值为：1 */
func (this *AlipayUserAccountreportGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 对账单开始时间。最近一个月内的日期。 */
func (this *AlipayUserAccountreportGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 账务类型。多个类型是，用逗号分隔，不传则查询所有类型的。PAYMENT:在线支付，TRANSFER:转账，DEPOSIT:充值，WITHDRAW:提现，CHARGE:收费，PREAUTH:预授权，OTHER：其它。 */
func (this *AlipayUserAccountreportGetRequest) SetType(value string) {
	this.Set("type", value)
}

type AlipayUserAccountreportGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	AlipayUserAccountreportGetResponseResult `json:"alipay_user_accountreport_get_response"`
}
type AlipayUserAccountreportGetResponseResult struct {
	/* 对账记录列表 */
	AlipayRecords []*AlipayRecord `json:"alipay_records"`
	/* 总页数 */
	TotalPages int64 `json:"total_pages"`
	/* 总记录数 */
	TotalResults int64 `json:"total_results"`
}

/*alipay.user.contract.get*/
type AlipayUserContractGetRequest struct {
	values url.Values
}

func (this *AlipayUserContractGetRequest) GetApiMethodName() string {
	return "alipay.user.contract.get"
}
func (this *AlipayUserContractGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayUserContractGetRequest) GetValues() url.Values {
	return this.values
}

/* 订购者支付宝ID。session与subscriber_user_id二选一即可。 */
func (this *AlipayUserContractGetRequest) SetSubscriberUserId(value string) {
	this.Set("subscriber_user_id", value)
}

type AlipayUserContractGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	AlipayUserContractGetResponseResult `json:"alipay_user_contract_get_response"`
}
type AlipayUserContractGetResponseResult struct {
	/* 支付宝用户订购信息 */
	AlipayContract *AlipayContract `json:"alipay_contract"`
}

/*alipay.user.get*/
type AlipayUserGetRequest struct {
	values url.Values
}

func (this *AlipayUserGetRequest) GetApiMethodName() string {
	return "alipay.user.get"
}
func (this *AlipayUserGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayUserGetRequest) GetValues() url.Values {
	return this.values
}

/* 支付宝给用户的授权。如果没有top的授权，这个字段是必填项 */
func (this *AlipayUserGetRequest) SetAuthToken(value string) {
	this.Set("auth_token", value)
}

/* 需要返回的字段列表。alipay_user_id：支付宝用户userId,user_status：支付宝用户状态,user_type：支付宝用户类型,certified：是否通过实名认证,real_name：真实姓名,logon_id：支付宝登录号,sex：用户性别 */
func (this *AlipayUserGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

type AlipayUserGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	AlipayUserGetResponseResult `json:"alipay_user_get_response"`
}
type AlipayUserGetResponseResult struct {
	/* 支付宝用户信息 */
	AlipayUserDetail *AlipayUserDetail `json:"alipay_user_detail"`
}

/*alipay.user.trade.search*/
type AlipayUserTradeSearchRequest struct {
	values url.Values
}

func (this *AlipayUserTradeSearchRequest) GetApiMethodName() string {
	return "alipay.user.trade.search"
}
func (this *AlipayUserTradeSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlipayUserTradeSearchRequest) GetValues() url.Values {
	return this.values
}

/* 支付宝订单号，为空查询所有记录 */
func (this *AlipayUserTradeSearchRequest) SetAlipayOrderNo(value string) {
	this.Set("alipay_order_no", value)
}

/* 结束时间。与开始时间间隔在七天之内 */
func (this *AlipayUserTradeSearchRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 商户订单号，为空查询所有记录 */
func (this *AlipayUserTradeSearchRequest) SetMerchantOrderNo(value string) {
	this.Set("merchant_order_no", value)
}

/* 订单来源，为空查询所有来源。淘宝(TAOBAO)，支付宝(ALIPAY)，其它(OTHER) */
func (this *AlipayUserTradeSearchRequest) SetOrderFrom(value string) {
	this.Set("order_from", value)
}

/* 订单状态，为空查询所有状态订单 */
func (this *AlipayUserTradeSearchRequest) SetOrderStatus(value string) {
	this.Set("order_status", value)
}

/* 订单类型，为空查询所有类型订单。 */
func (this *AlipayUserTradeSearchRequest) SetOrderType(value string) {
	this.Set("order_type", value)
}

/* 页码。取值范围:大于零的整数; 默认值1 */
func (this *AlipayUserTradeSearchRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页获取条数。最大值500。 */
func (this *AlipayUserTradeSearchRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 开始时间，时间必须是今天范围之内。格式为yyyy-MM-dd HH:mm:ss，精确到秒 */
func (this *AlipayUserTradeSearchRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type AlipayUserTradeSearchResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	AlipayUserTradeSearchResponseResult `json:"alipay_user_trade_search_response"`
}
type AlipayUserTradeSearchResponseResult struct {
	/* 总页数 */
	TotalPages string `json:"total_pages"`
	/* 总记录数 */
	TotalResults string `json:"total_results"`
	/* 交易记录列表 */
	TradeRecords []*TradeRecord `json:"trade_records"`
}

/*taobao.spmeffect.get*/
type SpmeffectGetRequest struct {
	values url.Values
}

func (this *SpmeffectGetRequest) GetApiMethodName() string {
	return "taobao.spmeffect.get"
}
func (this *SpmeffectGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpmeffectGetRequest) GetValues() url.Values {
	return this.values
}

/* 日期 */
func (this *SpmeffectGetRequest) SetDate(value string) {
	this.Set("date", value)
}

/* 查询指定的SPM第四位的效果报表。默认值为false，不传视为不需要 */
func (this *SpmeffectGetRequest) SetModuleDetail(value string) {
	this.Set("module_detail", value)
}

/* 查询指定的SPM第三位的效果报表。默认值为false，不传视为不需要 */
func (this *SpmeffectGetRequest) SetPageDetail(value string) {
	this.Set("page_detail", value)
}

type SpmeffectGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	SpmeffectGetResponseResult `json:"spmeffect_get_response"`
}
type SpmeffectGetResponseResult struct {
	/* 某一天该Appkey的站点导购数据 */
	SpmResult *SpmResult `json:"spm_result"`
}

/*tmall.items.discount.search*/
type TmallItemsDiscountSearchRequest struct {
	values url.Values
}

func (this *TmallItemsDiscountSearchRequest) GetApiMethodName() string {
	return "tmall.items.discount.search"
}
func (this *TmallItemsDiscountSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallItemsDiscountSearchRequest) GetValues() url.Values {
	return this.values
}

/* 商品标签。品牌特卖商品库：3458；天猫原创商品库：4801,不再支持 天猫精品库：8578； */
func (this *TmallItemsDiscountSearchRequest) SetAuctionTag(value string) {
	this.Set("auction_tag", value)
}

/* 品牌的id。点击某品牌类目的时候会出现。 */
func (this *TmallItemsDiscountSearchRequest) SetBrand(value string) {
	this.Set("brand", value)
}

/* 前台类目id，目前其他接口无法获取，只能自己去寻找。建议使用关键字获取数据。支持多选过滤，cat=catid1,catid2。 */
func (this *TmallItemsDiscountSearchRequest) SetCat(value string) {
	this.Set("cat", value)
}

/* 商品最高价格 */
func (this *TmallItemsDiscountSearchRequest) SetEndPrice(value string) {
	this.Set("end_price", value)
}

/* 是否包邮，-1为包邮 */
func (this *TmallItemsDiscountSearchRequest) SetPostFee(value string) {
	this.Set("post_fee", value)
}

/* 表示搜索的关键字，例如搜索query=nike。当输入关键字为中文时，将对他进行URLEncode的UTF-8格式编码，如 耐克，那么q=%E8%80%90%E5%85%8B。 */
func (this *TmallItemsDiscountSearchRequest) SetQ(value string) {
	this.Set("q", value)
}

/* 排序类型。类型包括：
s: 人气排序
p: 价格从低到高;
pd: 价格从高到低;
d: 月销量从高到低;
td: 总销量从高到低;
pt: 按发布时间排序. */
func (this *TmallItemsDiscountSearchRequest) SetSort(value string) {
	this.Set("sort", value)
}

/* 可以用该字段来实现分页功能。表示查询起始位置，默认从第0条开始，start=10,表示从第10条数据开始查询，start不得大于1000。<br /> 支持最大值为：1000 */
func (this *TmallItemsDiscountSearchRequest) SetStart(value string) {
	this.Set("start", value)
}

/* 商品最低价格 */
func (this *TmallItemsDiscountSearchRequest) SetStartPrice(value string) {
	this.Set("start_price", value)
}

type TmallItemsDiscountSearchResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	TmallItemsDiscountSearchResponseResult `json:"tmall_items_discount_search_response"`
}
type TmallItemsDiscountSearchResponseResult struct {
	/* 搜索结果品牌列表 */
	BrandList []*TmallBrand `json:"brand_list"`
	/* 搜索结果类目列表 */
	CatList []*TmallCat `json:"cat_list"`
	/* 搜索结果宝贝列表 */
	ItemList []*TmallSearchItem `json:"item_list"`
	/* 搜索结果minisite列表 */
	MinisiteList []*TmallMinisite `json:"minisite_list"`
	/* 当前页数 */
	Page int64 `json:"page"`
	/* 每页搜索返回数 */
	PageSize int64 `json:"page_size"`
	/* 搜索关键词 */
	ParamValue string `json:"param_value"`
	/* 搜索的URL */
	SearchUrl string `json:"search_url"`
	/* 搜索总页数 */
	TotalPage int64 `json:"total_page"`
	/* 搜索结果总数 */
	TotalResults string `json:"total_results"`
}

/*tmall.temai.items.search*/
type TmallTemaiItemsSearchRequest struct {
	values url.Values
}

func (this *TmallTemaiItemsSearchRequest) GetApiMethodName() string {
	return "tmall.temai.items.search"
}
func (this *TmallTemaiItemsSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallTemaiItemsSearchRequest) GetValues() url.Values {
	return this.values
}

/* 特卖前台类目id，传入的必须是特卖类目50100982或其下的二级类目。 */
func (this *TmallTemaiItemsSearchRequest) SetCat(value string) {
	this.Set("cat", value)
}

/* 排序类型。类型包括： s: 人气排序 p: 价格从低到高; pd: 价格从高到低; d: 月销量从高到低; pt: 按发布时间排序. */
func (this *TmallTemaiItemsSearchRequest) SetSort(value string) {
	this.Set("sort", value)
}

/* 表示查询起始位置:
start=0:返回第1条记录到第48条记录（即第一页）；
start=48:返回第48条记录到第96条记录（即第二页）；
start=96，start=144，start=192......
依此类推，每次加start值加48(每页返回记录数固定为48条) */
func (this *TmallTemaiItemsSearchRequest) SetStart(value string) {
	this.Set("start", value)
}

type TmallTemaiItemsSearchResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	TmallTemaiItemsSearchResponseResult `json:"tmall_temai_items_search_response"`
}
type TmallTemaiItemsSearchResponseResult struct {
	/* 特卖搜索结果宝贝列表 */
	ItemList []*TmallSearchTmItem `json:"item_list"`
	/* 当前页数 */
	Page int64 `json:"page"`
	/* 每页搜索返回数 */
	PageSize int64 `json:"page_size"`
	/* 搜索总页数 */
	TotalPage int64 `json:"total_page"`
	/* 搜索结果总数 */
	TotalResults int64 `json:"total_results"`
}

/*tmall.temai.subcats.search*/
type TmallTemaiSubcatsSearchRequest struct {
	values url.Values
}

func (this *TmallTemaiSubcatsSearchRequest) GetApiMethodName() string {
	return "tmall.temai.subcats.search"
}
func (this *TmallTemaiSubcatsSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallTemaiSubcatsSearchRequest) GetValues() url.Values {
	return this.values
}

/* 父类目ID，固定是特卖前台一级类目id：50100982 */
func (this *TmallTemaiSubcatsSearchRequest) SetCat(value string) {
	this.Set("cat", value)
}

type TmallTemaiSubcatsSearchResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	TmallTemaiSubcatsSearchResponseResult `json:"tmall_temai_subcats_search_response"`
}
type TmallTemaiSubcatsSearchResponseResult struct {
	/* 返回传入类目下子类目信息 */
	CatList []*TmallTmCat `json:"cat_list"`
}

/*taobao.jds.trade.traces.get*/
type JdsTradeTracesGetRequest struct {
	values url.Values
}

func (this *JdsTradeTracesGetRequest) GetApiMethodName() string {
	return "taobao.jds.trade.traces.get"
}
func (this *JdsTradeTracesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JdsTradeTracesGetRequest) GetValues() url.Values {
	return this.values
}

/* 淘宝的订单tid */
func (this *JdsTradeTracesGetRequest) SetTid(value string) {
	this.Set("tid", value)
}

type JdsTradeTracesGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	JdsTradeTracesGetResponseResult `json:"jds_trade_traces_get_response"`
}
type JdsTradeTracesGetResponseResult struct {
	/* 跟踪信息列表 */
	Traces []*TradeTrace `json:"traces"`
}

/*taobao.jds.trades.statistics.diff*/
type JdsTradesStatisticsDiffRequest struct {
	values url.Values
}

func (this *JdsTradesStatisticsDiffRequest) GetApiMethodName() string {
	return "taobao.jds.trades.statistics.diff"
}
func (this *JdsTradesStatisticsDiffRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JdsTradesStatisticsDiffRequest) GetValues() url.Values {
	return this.values
}

/* 查询的日期，格式如YYYYMMDD的日期对应的数字 */
func (this *JdsTradesStatisticsDiffRequest) SetDate(value string) {
	this.Set("date", value)
}

/* 页数 */
func (this *JdsTradesStatisticsDiffRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 需要比较的状态 */
func (this *JdsTradesStatisticsDiffRequest) SetPostStatus(value string) {
	this.Set("post_status", value)
}

/* 需要比较的状态，将会和post_status做比较 */
func (this *JdsTradesStatisticsDiffRequest) SetPreStatus(value string) {
	this.Set("pre_status", value)
}

type JdsTradesStatisticsDiffResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	JdsTradesStatisticsDiffResponseResult `json:"jds_trades_statistics_diff_response"`
}
type JdsTradesStatisticsDiffResponseResult struct {
	/* pre_status比post_status多的tid列表 */
	Tids []int64 `json:"tids"`
	/* 总记录数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.jds.trades.statistics.get*/
type JdsTradesStatisticsGetRequest struct {
	values url.Values
}

func (this *JdsTradesStatisticsGetRequest) GetApiMethodName() string {
	return "taobao.jds.trades.statistics.get"
}
func (this *JdsTradesStatisticsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JdsTradesStatisticsGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询的日期，格式如YYYYMMDD的日期对应的数字 */
func (this *JdsTradesStatisticsGetRequest) SetDate(value string) {
	this.Set("date", value)
}

type JdsTradesStatisticsGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	JdsTradesStatisticsGetResponseResult `json:"jds_trades_statistics_get_response"`
}
type JdsTradesStatisticsGetResponseResult struct {
	/* 订单状态计数值 */
	StatusInfos []*TradeStat `json:"status_infos"`
}

/*taobao.jushita.jdp.task.update*/
type JushitaJdpTaskUpdateRequest struct {
	values url.Values
}

func (this *JushitaJdpTaskUpdateRequest) GetApiMethodName() string {
	return "taobao.jushita.jdp.task.update"
}
func (this *JushitaJdpTaskUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JushitaJdpTaskUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 任务执行失败的错误信息，可以方便排查问题。<br /> 支持最大长度为：100<br /> 支持的最大列表长度为：100 */
func (this *JushitaJdpTaskUpdateRequest) SetErrorMessage(value string) {
	this.Set("error_message", value)
}

/* 任务执行的机器主机名,用于方便排查问题。<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *JushitaJdpTaskUpdateRequest) SetExecuteHost(value string) {
	this.Set("execute_host", value)
}

/* 任务的编号 */
func (this *JushitaJdpTaskUpdateRequest) SetId(value string) {
	this.Set("id", value)
}

/* 任务的下次开始执行时间。 */
func (this *JushitaJdpTaskUpdateRequest) SetNextExecuteTime(value string) {
	this.Set("next_execute_time", value)
}

/* 任务当前同步到的时间点。 */
func (this *JushitaJdpTaskUpdateRequest) SetNowSyncTime(value string) {
	this.Set("now_sync_time", value)
}

/* 任务的参数，用json格式表示<br /> 支持最大长度为：512<br /> 支持的最大列表长度为：512 */
func (this *JushitaJdpTaskUpdateRequest) SetParams(value string) {
	this.Set("params", value)
}

/* 任务的状态，0表示任务新建或未执行完成，1表示任务停止，2表示任务已经完成，-1表示任务执行失败。<br /> 支持最大值为：2<br /> 支持最小值为：-1 */
func (this *JushitaJdpTaskUpdateRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 任务的类型,<br /> 支持最小值为：0 */
func (this *JushitaJdpTaskUpdateRequest) SetType(value string) {
	this.Set("type", value)
}

/* 任务更新时的版本号，此值在选择出的任务中获取到。 */
func (this *JushitaJdpTaskUpdateRequest) SetVersion(value string) {
	this.Set("version", value)
}

type JushitaJdpTaskUpdateResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	JushitaJdpTaskUpdateResponseResult `json:"jushita_jdp_task_update_response"`
}
type JushitaJdpTaskUpdateResponseResult struct {
	/* 更新任务是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.jushita.jdp.tasks.get*/
type JushitaJdpTasksGetRequest struct {
	values url.Values
}

func (this *JushitaJdpTasksGetRequest) GetApiMethodName() string {
	return "taobao.jushita.jdp.tasks.get"
}
func (this *JushitaJdpTasksGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JushitaJdpTasksGetRequest) GetValues() url.Values {
	return this.values
}

/* 最大可返回的任务数量<br /> 支持最大值为：200<br /> 支持最小值为：1 */
func (this *JushitaJdpTasksGetRequest) SetFetchNum(value string) {
	this.Set("fetch_num", value)
}

/* 任务分组数量，表示把所有任务平均分成x组，在线订购应用此参数必传；非在线订购应用此参数忽略。<br /> 支持最小值为：1 */
func (this *JushitaJdpTasksGetRequest) SetTaskItemNum(value string) {
	this.Set("task_item_num", value)
}

/* 指定获取哪些分组的任务，取多个分组有半角逗号分隔，在线订购应用此参数必传；非在线订购应用此参数忽略。其中task_items >= 0且task_items < task_item_num */
func (this *JushitaJdpTasksGetRequest) SetTaskItems(value string) {
	this.Set("task_items", value)
}

/* 任务类型<br /> 支持最小值为：0 */
func (this *JushitaJdpTasksGetRequest) SetType(value string) {
	this.Set("type", value)
}

/* 需要查询哪些用户的任务，非在线订购应用此参数必传；在线订购应用此参数忽略。 */
func (this *JushitaJdpTasksGetRequest) SetUserIds(value string) {
	this.Set("user_ids", value)
}

type JushitaJdpTasksGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	JushitaJdpTasksGetResponseResult `json:"jushita_jdp_tasks_get_response"`
}
type JushitaJdpTasksGetResponseResult struct {
	/* 查询到的未执行任务 */
	DataPushTasks []*DataPushTask `json:"data_push_tasks"`
}

/*taobao.jushita.jdp.user.add*/
type JushitaJdpUserAddRequest struct {
	values url.Values
}

func (this *JushitaJdpUserAddRequest) GetApiMethodName() string {
	return "taobao.jushita.jdp.user.add"
}
func (this *JushitaJdpUserAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JushitaJdpUserAddRequest) GetValues() url.Values {
	return this.values
}

/* RDS实例名称，如果有多个RDS必须设置。 */
func (this *JushitaJdpUserAddRequest) SetRdsName(value string) {
	this.Set("rds_name", value)
}

type JushitaJdpUserAddResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	JushitaJdpUserAddResponseResult `json:"jushita_jdp_user_add_response"`
}
type JushitaJdpUserAddResponseResult struct {
	/* 是否添加成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.jushita.jdp.user.delete*/
type JushitaJdpUserDeleteRequest struct {
	values url.Values
}

func (this *JushitaJdpUserDeleteRequest) GetApiMethodName() string {
	return "taobao.jushita.jdp.user.delete"
}
func (this *JushitaJdpUserDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JushitaJdpUserDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 要删除用户的昵称 */
func (this *JushitaJdpUserDeleteRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* 需要删除的用户编号<br /> 支持最小值为：1 */
func (this *JushitaJdpUserDeleteRequest) SetUserId(value string) {
	this.Set("user_id", value)
}

type JushitaJdpUserDeleteResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	JushitaJdpUserDeleteResponseResult `json:"jushita_jdp_user_delete_response"`
}
type JushitaJdpUserDeleteResponseResult struct {
	/* 是否删除成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.jushita.jdp.users.get*/
type JushitaJdpUsersGetRequest struct {
	values url.Values
}

func (this *JushitaJdpUsersGetRequest) GetApiMethodName() string {
	return "taobao.jushita.jdp.users.get"
}
func (this *JushitaJdpUsersGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JushitaJdpUsersGetRequest) GetValues() url.Values {
	return this.values
}

/* 此参数一般不用传，用于查询最后更改时间在某个时间段内的用户 */
func (this *JushitaJdpUsersGetRequest) SetEndModified(value string) {
	this.Set("end_modified", value)
}

/* 当前页数 */
func (this *JushitaJdpUsersGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页记录数，默认200 */
func (this *JushitaJdpUsersGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 此参数一般不用传，用于查询最后更改时间在某个时间段内的用户 */
func (this *JushitaJdpUsersGetRequest) SetStartModified(value string) {
	this.Set("start_modified", value)
}

/* 如果传了user_id表示单条查询 */
func (this *JushitaJdpUsersGetRequest) SetUserId(value string) {
	this.Set("user_id", value)
}

type JushitaJdpUsersGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	JushitaJdpUsersGetResponseResult `json:"jushita_jdp_users_get_response"`
}
type JushitaJdpUsersGetResponseResult struct {
	/* 总记录数 */
	TotalResults int64 `json:"total_results"`
	/* 用户列表 */
	Users []*JdpUser `json:"users"`
}

/*taobao.rds.db.create*/
type RdsDbCreateRequest struct {
	values url.Values
}

func (this *RdsDbCreateRequest) GetApiMethodName() string {
	return "taobao.rds.db.create"
}
func (this *RdsDbCreateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *RdsDbCreateRequest) GetValues() url.Values {
	return this.values
}

/* 数据库名<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *RdsDbCreateRequest) SetDbName(value string) {
	this.Set("db_name", value)
}

/* rds的实例名<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *RdsDbCreateRequest) SetInstanceName(value string) {
	this.Set("instance_name", value)
}

type RdsDbCreateResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	RdsDbCreateResponseResult `json:"rds_db_create_response"`
}
type RdsDbCreateResponseResult struct {
	/* rds创建、查询、删除db返回结果的数据结构 */
	RdsDbInfo *RdsDbInfo `json:"rds_db_info"`
}

/*taobao.rds.db.delete*/
type RdsDbDeleteRequest struct {
	values url.Values
}

func (this *RdsDbDeleteRequest) GetApiMethodName() string {
	return "taobao.rds.db.delete"
}
func (this *RdsDbDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *RdsDbDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 数据库的name，可以通过 taobao.rds.db.get 获取 */
func (this *RdsDbDeleteRequest) SetDbName(value string) {
	this.Set("db_name", value)
}

/* rds的实例名<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *RdsDbDeleteRequest) SetInstanceName(value string) {
	this.Set("instance_name", value)
}

type RdsDbDeleteResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	RdsDbDeleteResponseResult `json:"rds_db_delete_response"`
}
type RdsDbDeleteResponseResult struct {
	/* 删除数据库，返回结果对象 */
	RdsDbInfo *RdsDbInfo `json:"rds_db_info"`
}

/*taobao.rds.db.get*/
type RdsDbGetRequest struct {
	values url.Values
}

func (this *RdsDbGetRequest) GetApiMethodName() string {
	return "taobao.rds.db.get"
}
func (this *RdsDbGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *RdsDbGetRequest) GetValues() url.Values {
	return this.values
}

/* 数据库状态，默认值1<br /> 支持最大值为：3<br /> 支持最小值为：0<br /> 支持的最大列表长度为：1 */
func (this *RdsDbGetRequest) SetDbStatus(value string) {
	this.Set("db_status", value)
}

/* rds的实例名<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *RdsDbGetRequest) SetInstanceName(value string) {
	this.Set("instance_name", value)
}

type RdsDbGetResponse struct {
	*ErrorResponse         `json:"error_response,omitempty"`
	RdsDbGetResponseResult `json:"rds_db_get_response"`
}
type RdsDbGetResponseResult struct {
	/* 数据库查询返回数据结构 */
	RdsDbInfos []*RdsDbInfo `json:"rds_db_infos"`
}

/*taobao.topats.jushita.jdp.datadelete*/
type TopatsJushitaJdpDatadeleteRequest struct {
	values url.Values
}

func (this *TopatsJushitaJdpDatadeleteRequest) GetApiMethodName() string {
	return "taobao.topats.jushita.jdp.datadelete"
}
func (this *TopatsJushitaJdpDatadeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TopatsJushitaJdpDatadeleteRequest) GetValues() url.Values {
	return this.values
}

/* 删除数据时间段的结束修改时间，格式为：yyyy-MM-dd HH:mm:ss，结束时间必须为前天的23:59:59秒以前，根据是业务的modified时间 */
func (this *TopatsJushitaJdpDatadeleteRequest) SetEndModified(value string) {
	this.Set("end_modified", value)
}

/* 删除数据时间段的起始修改时间，格式为：yyyy-MM-dd HH:mm:ss,根据是业务的modified时间 */
func (this *TopatsJushitaJdpDatadeleteRequest) SetStartModified(value string) {
	this.Set("start_modified", value)
}

/* 推送的数据类型，可选值为：tb_trade(淘宝交易)，tb_item(淘宝商品)，tb_refund(淘宝退款)，fx_trade(分销订单)，tm_refund(天猫退款)，同时删除多种类型以分号分隔，如："tb_trade;tb_item;tb_refund;fx_trade;tm_refund" */
func (this *TopatsJushitaJdpDatadeleteRequest) SetSyncType(value string) {
	this.Set("sync_type", value)
}

/* 用户昵称，不填表示删除所有用户的数据。 */
func (this *TopatsJushitaJdpDatadeleteRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type TopatsJushitaJdpDatadeleteResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	TopatsJushitaJdpDatadeleteResponseResult `json:"topats_jushita_jdp_datadelete_response"`
}
type TopatsJushitaJdpDatadeleteResponseResult struct {
	/* 创建任务信息。里面只包含task_id和created */
	Task *Task `json:"task"`
}

/*taobao.travel.items.add*/
type TravelItemsAddRequest struct {
	values url.Values
}

func (this *TravelItemsAddRequest) GetApiMethodName() string {
	return "taobao.travel.items.add"
}
func (this *TravelItemsAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TravelItemsAddRequest) GetValues() url.Values {
	return this.values
}

/* 商品上传后的状态。可选值:onsale(出售中),instock(仓库中);默认值:onsale。 */
func (this *TravelItemsAddRequest) SetApproveStatus(value string) {
	this.Set("approve_status", value)
}

/* 商品的积分返点比例。如:5,表示:返点比例0.5%. 注意：返点比例必须是>0的整数.B商家在发布非虚拟商品时，这个字段必须设置，返点必须是 5的倍数，即0.5%的倍数。注意该字段值最高值不超过500，即50%。 */
func (this *TravelItemsAddRequest) SetAuctionPoint(value string) {
	this.Set("auction_point", value)
}

/* 发布电子凭证宝贝时候表示是否使用邮寄 0: 代表不使用邮寄； 1：代表使用邮寄；如果不设置这个值，代表不使用邮寄。 */
func (this *TravelItemsAddRequest) SetChooseLogis(value string) {
	this.Set("choose_logis", value)
}

/* 商品所属叶子类目ID。 */
func (this *TravelItemsAddRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 宝贝所在地市。 */
func (this *TravelItemsAddRequest) SetCity(value string) {
	this.Set("city", value)
}

/* Json串：{"combos":[{"combo_name":"套餐一","price_calendar":[{"child_num":100,"child_price":100,"date":"2012-06-08","diff_price":1000,"man_num":100,"man_price":1000},{"child_num":100,"child_price":100,"date":"2012-06-09","diff_price":1000,"man_num":100,"man_price":1000}]}]} */
func (this *TravelItemsAddRequest) SetComboPriceCalendar(value string) {
	this.Set("combo_price_calendar", value)
}

/* 商品描述，不超过50000个字符。 */
func (this *TravelItemsAddRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 最晚成团提前天数，最小0天，最大为300天。 */
func (this *TravelItemsAddRequest) SetDuration(value string) {
	this.Set("duration", value)
}

/* 电子交易凭证有效期，目前此字段只涉及到的信息为有效期; 如果有效期为起止日期类型，此值为2012-08-06,2012-08-16 如果有效期为【购买成功日 至】类型则格式为2012-08-16 如果有效期为天数类型则格式为15。 */
func (this *TravelItemsAddRequest) SetExpirydate(value string) {
	this.Set("expirydate", value)
}

/* 费用包含，不超过1500个字符。 */
func (this *TravelItemsAddRequest) SetFeeInclude(value string) {
	this.Set("fee_include", value)
}

/* 费用不包，不超过1500个字符。 */
func (this *TravelItemsAddRequest) SetFeeNotInclude(value string) {
	this.Set("fee_not_include", value)
}

/* 机票信息，不超过1500字符 */
func (this *TravelItemsAddRequest) SetFlightInfo(value string) {
	this.Set("flight_info", value)
}

/* 集合地，不超过30个字符。 */
func (this *TravelItemsAddRequest) SetGatheringPlace(value string) {
	this.Set("gathering_place", value)
}

/* 支持会员打折。可选值:true,false;默认值:false(不打折)。 */
func (this *TravelItemsAddRequest) SetHasDiscount(value string) {
	this.Set("has_discount", value)
}

/* 是否有发票。可选值:true,false (商城卖家此字段必须为true);默认值:false(无发票)。 */
func (this *TravelItemsAddRequest) SetHasInvoice(value string) {
	this.Set("has_invoice", value)
}

/* 橱窗推荐。可选值:true,false;默认值:false(不推荐)，B商家不用设置该字段，均为true。 */
func (this *TravelItemsAddRequest) SetHasShowcase(value string) {
	this.Set("has_showcase", value)
}

/* 酒店信息，不超过1500字符 */
func (this *TravelItemsAddRequest) SetHotelInfo(value string) {
	this.Set("hotel_info", value)
}

/* 商品主图。类型:JPG,GIF;最大长度:500k，支持的文件类型：gif,jpg,jpeg,png。 */
func (this *TravelItemsAddRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 用户自行输入的类目属性ID串。结构："pid1,pid2,pid3"，如："2000"（表示品牌） 注：通常一个类目下用户可输入的关键属性不超过1个。在度假线路类目中，该属性ID为“自由行包含元素”或“一日游包含元素”属性ID。 */
func (this *TravelItemsAddRequest) SetInputPids(value string) {
	this.Set("input_pids", value)
}

/* 用户自行输入的子属性名和属性值，如“自定义自由行包含元素”。 */
func (this *TravelItemsAddRequest) SetInputStr(value string) {
	this.Set("input_str", value)
}

/* 是否为铁定出游商品的参数设置为true，那么该商品为铁定出游商品；设置为false，那么该商品为非铁定出游商品。默认为false */
func (this *TravelItemsAddRequest) SetIsTdcy(value string) {
	this.Set("is_tdcy", value)
}

/* 定时上架时间。(时间格式：yyyy-MM-dd HH:mm:ss) */
func (this *TravelItemsAddRequest) SetListTime(value string) {
	this.Set("list_time", value)
}

/* 码商信息，格式为 码商id:nick。 */
func (this *TravelItemsAddRequest) SetMerchant(value string) {
	this.Set("merchant", value)
}

/* 网点ID。 */
func (this *TravelItemsAddRequest) SetNetworkId(value string) {
	this.Set("network_id", value)
}

/* 商品库存。如果发布旅游度假线路宝贝，该字段可以忽略。 */
func (this *TravelItemsAddRequest) SetNum(value string) {
	this.Set("num", value)
}

/* 电子凭证售中自动退款比例，百分比%前的数字，介于1-100之间的整数。(暂未使用) */
func (this *TravelItemsAddRequest) SetOnsaleAutoRefundRatio(value string) {
	this.Set("onsale_auto_refund_ratio", value)
}

/* 预定须知，不超过1500个字符。 */
func (this *TravelItemsAddRequest) SetOrderInfo(value string) {
	this.Set("order_info", value)
}

/* 商家的外部编码，最大为512字节。 */
func (this *TravelItemsAddRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 自费项目，不超过1500个字符。 */
func (this *TravelItemsAddRequest) SetOwnExpense(value string) {
	this.Set("own_expense", value)
}

/* 商品主图需要关联的图片空间的相对url。这个url所对应的图片必须要属于当前用户。pic_path和image只需要传入一个,如果两个都传，默认选择pic_path。 */
func (this *TravelItemsAddRequest) SetPicPath(value string) {
	this.Set("pic_path", value)
}

/* 商品一口价。如果发布旅游度假线路的宝贝，该字段可以忽略。 */
func (this *TravelItemsAddRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 商品属性列表。格式为：pid:vid;pid:vid。例如发布度假线路商品，那么这里就需要填写：出发地属性id:城市id;目的地市属性id:目的地市id;……等等。 */
func (this *TravelItemsAddRequest) SetProps(value string) {
	this.Set("props", value)
}

/* 宝贝所在地省份。 */
func (this *TravelItemsAddRequest) SetProv(value string) {
	this.Set("prov", value)
}

/* 退款比例，百分比%前的数字,1-100的正整数值。 */
func (this *TravelItemsAddRequest) SetRefundRatio(value string) {
	this.Set("refund_ratio", value)
}

/* 退改规定，不超过1500个字符。 */
func (this *TravelItemsAddRequest) SetRefundRegulation(value string) {
	this.Set("refund_regulation", value)
}

/* 商品秒杀三个值：可选类型web_only(只能通过web网络秒杀)，wap_only(只能通过wap网络秒杀)，web_and_wap(既能通过web秒杀也能通过wap秒杀)。 */
func (this *TravelItemsAddRequest) SetSecondKill(value string) {
	this.Set("second_kill", value)
}

/* 关联商品与店铺类目，结构:",cid1,cid2,...,"，如果店铺类目存在二级类目，必须传入子类目cids。<br /> 支持最大长度为：256<br /> 支持的最大列表长度为：256 */
func (this *TravelItemsAddRequest) SetSellerCids(value string) {
	this.Set("seller_cids", value)
}

/* 购物店信息，不超过1500个字符。 */
func (this *TravelItemsAddRequest) SetShopingInfo(value string) {
	this.Set("shoping_info", value)
}

/* sku销售属性串对应的价格，精确到分，每一个属性串都会对应一个价格，单位为分。sku_prices的数组大小应该和sku_properties的数组大小一致。如果发布线路的商品，该字段可以忽略。 */
func (this *TravelItemsAddRequest) SetSkuPrices(value string) {
	this.Set("sku_prices", value)
}

/* Sku销售属性串，调用taobao.travel.itemsprops.get接口获取商品销售属性code，然后拼接成pid:vid;pid:vid格式。如果发布线路的商品，该字段可以忽略。 */
func (this *TravelItemsAddRequest) SetSkuProperties(value string) {
	this.Set("sku_properties", value)
}

/* Sku销售属性串对应的库存，每一个属性串都会对应一个库存，显然sku_quantities的数组大小应该和sku_properties的数组大小一致。如果发布线路的商品，该字段可以忽略。 */
func (this *TravelItemsAddRequest) SetSkuQuantities(value string) {
	this.Set("sku_quantities", value)
}

/* 商品是否支持拍下减库存:1支持;2取消支持(付款减库存);0(默认)不更改，集市卖家默认拍下减库存;商城卖家默认付款减库存。 */
func (this *TravelItemsAddRequest) SetSubStock(value string) {
	this.Set("sub_stock", value)
}

/* 门票信息，不超过1500字符 */
func (this *TravelItemsAddRequest) SetTicketInfo(value string) {
	this.Set("ticket_info", value)
}

/* 商品标题。 */
func (this *TravelItemsAddRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 核销打款 1代表核销打款 0代表非核销打款。 */
func (this *TravelItemsAddRequest) SetVerification(value string) {
	this.Set("verification", value)
}

type TravelItemsAddResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	TravelItemsAddResponseResult `json:"travel_items_add_response"`
}
type TravelItemsAddResponseResult struct {
	/* 旅游商品结构。 */
	TravelItems *TravelItems `json:"travel_items"`
}

/*taobao.travel.items.get*/
type TravelItemsGetRequest struct {
	values url.Values
}

func (this *TravelItemsGetRequest) GetApiMethodName() string {
	return "taobao.travel.items.get"
}
func (this *TravelItemsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TravelItemsGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品数字ID。 */
func (this *TravelItemsGetRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

type TravelItemsGetResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	TravelItemsGetResponseResult `json:"travel_items_get_response"`
}
type TravelItemsGetResponseResult struct {
	/* 旅游商品结构 */
	TravelItems *TravelItems `json:"travel_items"`
}

/*taobao.travel.items.update*/
type TravelItemsUpdateRequest struct {
	values url.Values
}

func (this *TravelItemsUpdateRequest) GetApiMethodName() string {
	return "taobao.travel.items.update"
}
func (this *TravelItemsUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TravelItemsUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 套餐价格日历增量更新字段，添加若干新套餐。（说明：如果使用增量更新字段，则全量更新字段combo_price_calendar不用设置，如果设置了则会优先使用全量更新），套餐价格日历json格式。如：{"combos":[{"combo_name":"套餐一","price_calendar":[{"child_num":100,"child_price":100,"date":"2012-06-08","diff_price":1000,"man_num":100,"man_price":1000},{"child_num":100,"child_price":100,"date":"2012-06-09","diff_price":1000,"man_num":100,"man_price":1000}]}]} */
func (this *TravelItemsUpdateRequest) SetAddComboPriceCalendar(value string) {
	this.Set("add_combo_price_calendar", value)
}

/* 商品上传后的状态。可选值:onsale(出售中),instock(仓库中);默认值:onsale。 */
func (this *TravelItemsUpdateRequest) SetApproveStatus(value string) {
	this.Set("approve_status", value)
}

/* 商品的积分返点比例。如:5,表示:返点比例0.5%. 注意：返点比例必须是>0的整数. */
func (this *TravelItemsUpdateRequest) SetAuctionPoint(value string) {
	this.Set("auction_point", value)
}

/* 发布电子凭证宝贝时候表示是否使用邮寄 0: 代表不使用邮寄； 1：代表使用邮寄；如果不设置这个值，代表不使用邮寄。 */
func (this *TravelItemsUpdateRequest) SetChooseLogis(value string) {
	this.Set("choose_logis", value)
}

/* 商品所属类目ID。发布旅游线路商品有两个值：1(国内线路类目ID)，2(国际线路类目ID)。 */
func (this *TravelItemsUpdateRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 宝贝所在地市。如果发布旅游度假线路的宝贝，该字段可以忽略。 */
func (this *TravelItemsUpdateRequest) SetCity(value string) {
	this.Set("city", value)
}

/* Json串，全量更新套餐价格日历信息（针对旅游度假线路的销售属性），定义了两个套餐日历价格，套餐明分别为：套餐一和套餐二。如：{"combos":[{"combo_name":"套餐一","price_calendar":[{"child_num":100,"child_price":100,"date":"2012-06-08","diff_price":1000,"man_num":100,"man_price":1000},{"child_num":100,"child_price":100,"date":"2012-06-09","diff_price":1000,"man_num":100,"man_price":1000}]}]} */
func (this *TravelItemsUpdateRequest) SetComboPriceCalendar(value string) {
	this.Set("combo_price_calendar", value)
}

/* 商品描述，不超过50000个字符。 */
func (this *TravelItemsUpdateRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 最晚成团提前天数，最小0天，最大为300天。 */
func (this *TravelItemsUpdateRequest) SetDuration(value string) {
	this.Set("duration", value)
}

/* 支持宝贝信息的删除，各个参数的名称之间用【,】分割, 如果对应的参数有设置过值，即使在这个列表中，也不会被删除; 目前支持此功能的宝贝信息如下：locality_life表示删除电子凭证，merchant表示删除码商信息，refund_ratio表示删除电子凭证退款比例，network_id表示删除电子凭证网点信息,seller_cids表示删除关联店铺类目，outer_id表示删除商家外部编码，second_kill表示删除秒杀信息，input_pids表示删除用户自定义属性 */
func (this *TravelItemsUpdateRequest) SetEmptyFields(value string) {
	this.Set("empty_fields", value)
}

/* 电子交易凭证有效期，目前此字段只涉及到的信息为有效期; 如果有效期为起止日期类型，此值为2012-08-06,2012-08-16 如果有效期为【购买成功日 至】类型则格式为2012-08-16 如果有效期为天数类型则格式为15。 */
func (this *TravelItemsUpdateRequest) SetExpirydate(value string) {
	this.Set("expirydate", value)
}

/* 费用包含，不超过1500个字符。 */
func (this *TravelItemsUpdateRequest) SetFeeInclude(value string) {
	this.Set("fee_include", value)
}

/* 费用不包，不超过1500个字符。 */
func (this *TravelItemsUpdateRequest) SetFeeNotInclude(value string) {
	this.Set("fee_not_include", value)
}

/* 机票信息，不超过1500字符 */
func (this *TravelItemsUpdateRequest) SetFlightInfo(value string) {
	this.Set("flight_info", value)
}

/* 集合地，不超过30个字符。 */
func (this *TravelItemsUpdateRequest) SetGatheringPlace(value string) {
	this.Set("gathering_place", value)
}

/* 支持会员打折。可选值:true,false;默认值:false(不打折)。 */
func (this *TravelItemsUpdateRequest) SetHasDiscount(value string) {
	this.Set("has_discount", value)
}

/* 是否有发票。可选值:true,false (商城卖家此字段必须为true);默认值:false(无发票)。 */
func (this *TravelItemsUpdateRequest) SetHasInvoice(value string) {
	this.Set("has_invoice", value)
}

/* 橱窗推荐。可选值:true,false;默认值:false(不推荐)，B商家不用设置该字段，均为true。 */
func (this *TravelItemsUpdateRequest) SetHasShowcase(value string) {
	this.Set("has_showcase", value)
}

/* 酒店信息，不超过1500字符 */
func (this *TravelItemsUpdateRequest) SetHotelInfo(value string) {
	this.Set("hotel_info", value)
}

/* 商品主图。类型:JPG,GIF;最大长度:500k，支持的文件类型：gif,jpg,jpeg,png。 */
func (this *TravelItemsUpdateRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 用户自行输入的类目属性ID串。结构："pid1,pid2,pid3"，如："2000"（表示品牌） 注：通常一个类目下用户可输入的关键属性不超过1个。在度假线路类目中，该属性ID为“自由行包含元素”或“一日游包含元素”属性ID。 */
func (this *TravelItemsUpdateRequest) SetInputPids(value string) {
	this.Set("input_pids", value)
}

/* 用户自行输入的子属性名和属性值，如“自定义自由行包含元素”。 */
func (this *TravelItemsUpdateRequest) SetInputStr(value string) {
	this.Set("input_str", value)
}

/* 是否是铁定出游商品 */
func (this *TravelItemsUpdateRequest) SetIsTdcy(value string) {
	this.Set("is_tdcy", value)
}

/* 商品数字ID。 */
func (this *TravelItemsUpdateRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 码商信息，格式为 码商id:nick。 */
func (this *TravelItemsUpdateRequest) SetMerchant(value string) {
	this.Set("merchant", value)
}

/* 网点ID。 */
func (this *TravelItemsUpdateRequest) SetNetworkId(value string) {
	this.Set("network_id", value)
}

/* 商品库存。如果发布旅游度假线路宝贝，该字段可以忽略，参考后面：add_combo_price_calendar,update_combo_price_calendar,remove_combo_price_calendar 这些字段去使用商品销售属性 */
func (this *TravelItemsUpdateRequest) SetNum(value string) {
	this.Set("num", value)
}

/* 电子凭证售中自动退款比例，百分比%前的数字，介于1-100之间的整数。 */
func (this *TravelItemsUpdateRequest) SetOnsaleAutoRefundRatio(value string) {
	this.Set("onsale_auto_refund_ratio", value)
}

/* 预定须知，不超过1500个字符。 */
func (this *TravelItemsUpdateRequest) SetOrderInfo(value string) {
	this.Set("order_info", value)
}

/* 商家的外部编码，最大为512字节。 */
func (this *TravelItemsUpdateRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 自费项目，不超过1500个字符。 */
func (this *TravelItemsUpdateRequest) SetOwnExpense(value string) {
	this.Set("own_expense", value)
}

/* 商品主图需要关联的图片空间的相对url。这个url所对应的图片必须要属于当前用户。pic_path和image只需要传入一个,如果两个都传，默认选择pic_path。 */
func (this *TravelItemsUpdateRequest) SetPicPath(value string) {
	this.Set("pic_path", value)
}

/* 商品一口价。如果发布旅游度假线路宝贝，该字段可以忽略，参考后面：add_combo_price_calendar,update_combo_price_calendar,remove_combo_price_calendar 这些字段去使用商品销售属性 */
func (this *TravelItemsUpdateRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 商品属性列表。格式为：pid:vid;pid:vid。例如发布旅游度假线路商品，那么这里就需要填写：出发地属性id:城市id;目的地市属性id:目的地市id;……等等。 */
func (this *TravelItemsUpdateRequest) SetProps(value string) {
	this.Set("props", value)
}

/* 宝贝所在地省份。如果发布旅游线路宝贝，该字段可以忽略。 */
func (this *TravelItemsUpdateRequest) SetProv(value string) {
	this.Set("prov", value)
}

/* 退款比例，百分比%前的数字,1-100的正整数值。 */
func (this *TravelItemsUpdateRequest) SetRefundRatio(value string) {
	this.Set("refund_ratio", value)
}

/* 退改规定，不超过1500个字符。 */
func (this *TravelItemsUpdateRequest) SetRefundRegulation(value string) {
	this.Set("refund_regulation", value)
}

/* 套餐价格日历增量更新字段，删除若干套餐。（说明：如果使用增量更新字段，则全量更新字段combo_price_calendar不用设置，如果设置了则会优先使用全量更新）。删除时，需要设置套餐属性id（pid），套餐属性值id（vid）。格式为：pid:vid1;pid:vid2;pid:vid3。 */
func (this *TravelItemsUpdateRequest) SetRemoveComboPriceCalendar(value string) {
	this.Set("remove_combo_price_calendar", value)
}

/* 商品属性（不包含销售属性）增量更新字段，删除商品属性。（说明：如果使用增量更新字段，则全量更新字段props不用设置，如果设置了则会优先使用全量更新）。格式：pid1:vid1;pid2:vid2;pid3:vid3。 */
func (this *TravelItemsUpdateRequest) SetRemoveProps(value string) {
	this.Set("remove_props", value)
}

/* 商品秒杀三个值：可选类型web_only(只能通过web网络秒杀)，wap_only(只能通过wap网络秒杀)，web_and_wap(既能通过web秒杀也能通过wap秒杀)。 */
func (this *TravelItemsUpdateRequest) SetSecondKill(value string) {
	this.Set("second_kill", value)
}

/* 关联商品与店铺类目，结构:",cid1,cid2,...,"，如果店铺类目存在二级类目，必须传入子类目cids。 */
func (this *TravelItemsUpdateRequest) SetSellerCids(value string) {
	this.Set("seller_cids", value)
}

/* 购物店信息，不超过1500个字符。 */
func (this *TravelItemsUpdateRequest) SetShopingInfo(value string) {
	this.Set("shoping_info", value)
}

/* Sku销售属性串对应的价格，每一个属性串都会对应一个价格，精确到两位小数，单位为元。sku_prices的数组大小应该和sku_properties的数组大小一致。如果发布线路的商品，参考后面：add_combo_price_calendar,update_combo_price_calendar,remove_combo_price_calendar 这些字段去使用商品销售属性 */
func (this *TravelItemsUpdateRequest) SetSkuPrices(value string) {
	this.Set("sku_prices", value)
}

/* Sku销售属性串，调用taobao.travel.itemsprops.get接口获取商品销售属性code，然后拼接成pid:vid;pid:vid格式。如果发布线路的商品，参考后面：add_combo_price_calendar,update_combo_price_calendar,remove_combo_price_calendar 这些字段去使用商品销售属性 */
func (this *TravelItemsUpdateRequest) SetSkuProperties(value string) {
	this.Set("sku_properties", value)
}

/* Sku销售属性串对应的库存，每一个属性串都会对应一个库存，显然sku_quantities的数组大小应该和sku_properties的数组大小一致。如果发布线路的商品，参考后面：add_combo_price_calendar,update_combo_price_calendar,remove_combo_price_calendar 这些字段去使用商品销售属性 */
func (this *TravelItemsUpdateRequest) SetSkuQuantities(value string) {
	this.Set("sku_quantities", value)
}

/* 商品是否支持拍下减库存:1支持;2取消支持(付款减库存);0(默认)不更改，集市卖家默认拍下减库存;商城卖家默认付款减库存。 */
func (this *TravelItemsUpdateRequest) SetSubStock(value string) {
	this.Set("sub_stock", value)
}

/* 门票信息，不超过1500字符 */
func (this *TravelItemsUpdateRequest) SetTicketInfo(value string) {
	this.Set("ticket_info", value)
}

/* 商品标题。注意：在商品更新时，如果不设置该属性，默认不进行更新，下同。 */
func (this *TravelItemsUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 否	套餐价格日历增量更新字段，更新若干套餐。（说明：如果使用增量更新字段，则全量更新字段combo_price_calendar不用设置，如果设置了则会优先使用全量更新），套餐价格日历json格式。更新时，需要设置套餐属性id（pid），套餐属性值id（vid），套餐名称可以不设置，设置了也会忽略，会以传入的pid和vid为准。如：{"combos":[{"combo_name":"套餐一","pid":102020,"vid":289129,"price_calendar":[{"child_num":100,"child_price":100,"date":"2012-06-08","diff_price":1000,"man_num":100,"man_price":1000},{"child_num":100,"child_price":100,"date":"2012-06-09","diff_price":1000,"man_num":100,"man_price":1000}]}]} */
func (this *TravelItemsUpdateRequest) SetUpdateComboPriceCalendar(value string) {
	this.Set("update_combo_price_calendar", value)
}

/* 商品属性（不包含销售属性）增量更新字段，更新或者添加商品属性。（说明：如果使用增量更新字段，则全量更新字段props不用设置，如果设置了则会优先使用全量更新）。格式：pid1:vid1;pid2:vid2;pid3:vid3。对于重复设置的同一个属性的多个值，对于单选属性，则会以最后一个为准；对于多选，则会对该属性新增属性值。 */
func (this *TravelItemsUpdateRequest) SetUpdateOrAddProps(value string) {
	this.Set("update_or_add_props", value)
}

/* 核销打款 1代表核销打款 0代表非核销打款。 */
func (this *TravelItemsUpdateRequest) SetVerification(value string) {
	this.Set("verification", value)
}

type TravelItemsUpdateResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	TravelItemsUpdateResponseResult `json:"travel_items_update_response"`
}
type TravelItemsUpdateResponseResult struct {
	/* 旅游商品结构。 */
	TravelItems *TravelItems `json:"travel_items"`
}

/*taobao.travel.itemsarea.get*/
type TravelItemsareaGetRequest struct {
	values url.Values
}

func (this *TravelItemsareaGetRequest) GetApiMethodName() string {
	return "taobao.travel.itemsarea.get"
}
func (this *TravelItemsareaGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TravelItemsareaGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品所属叶子类目ID，支持旅游度假线路8个类目。 */
func (this *TravelItemsareaGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

type TravelItemsareaGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	TravelItemsareaGetResponseResult `json:"travel_itemsarea_get_response"`
}
type TravelItemsareaGetResponseResult struct {
	/* 旅游度假商品地区（目的地）级联结构。 */
	TravelItemsAreaNodes []*TravelItemsAreaNode `json:"travel_items_area_nodes"`
}

/*taobao.travel.itemsprops.get*/
type TravelItemspropsGetRequest struct {
	values url.Values
}

func (this *TravelItemspropsGetRequest) GetApiMethodName() string {
	return "taobao.travel.itemsprops.get"
}
func (this *TravelItemspropsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TravelItemspropsGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品所属叶子类目ID，支持旅游度假线路8个类目。 */
func (this *TravelItemspropsGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 属性id (取某个类目属性时，传pid；若不传该值，返回该类目下所有属性) */
func (this *TravelItemspropsGetRequest) SetPid(value string) {
	this.Set("pid", value)
}

type TravelItemspropsGetResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	TravelItemspropsGetResponseResult `json:"travel_itemsprops_get_response"`
}
type TravelItemspropsGetResponseResult struct {
	/* 旅游商品类目属性结构。 */
	TravelItemsProps []*TravelItemsProp `json:"travel_items_props"`
}

/*taobao.caipiao.goods.info.get*/
type CaipiaoGoodsInfoGetRequest struct {
	values url.Values
}

func (this *CaipiaoGoodsInfoGetRequest) GetApiMethodName() string {
	return "taobao.caipiao.goods.info.get"
}
func (this *CaipiaoGoodsInfoGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CaipiaoGoodsInfoGetRequest) GetValues() url.Values {
	return this.values
}

type CaipiaoGoodsInfoGetResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	CaipiaoGoodsInfoGetResponseResult `json:"caipiao_goods_info_get_response"`
}
type CaipiaoGoodsInfoGetResponseResult struct {
	/* 查询的结果列表 */
	Results []*LotteryWangcaiSellerGoodsInfo `json:"results"`
	/* 返回列表的大小 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.caipiao.goods.info.input*/
type CaipiaoGoodsInfoInputRequest struct {
	values url.Values
}

func (this *CaipiaoGoodsInfoInputRequest) GetApiMethodName() string {
	return "taobao.caipiao.goods.info.input"
}
func (this *CaipiaoGoodsInfoInputRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CaipiaoGoodsInfoInputRequest) GetValues() url.Values {
	return this.values
}

/* 活动结束时间，格式需严格遵守yyyy-MM-dd HH:mm:ss，不可为空 */
func (this *CaipiaoGoodsInfoInputRequest) SetActEndDate(value string) {
	this.Set("act_end_date", value)
}

/* 活动开始时间，格式需严格遵守yyyy-MM-dd HH:mm:ss，不可为空 */
func (this *CaipiaoGoodsInfoInputRequest) SetActStartDate(value string) {
	this.Set("act_start_date", value)
}

/* 店铺相关商品参加的送彩票活动描述 */
func (this *CaipiaoGoodsInfoInputRequest) SetGoodsDesc(value string) {
	this.Set("goods_desc", value)
}

/* 商品在淘宝的唯一id，不可为空 */
func (this *CaipiaoGoodsInfoInputRequest) SetGoodsId(value string) {
	this.Set("goods_id", value)
}

/* 商品主图地址 */
func (this *CaipiaoGoodsInfoInputRequest) SetGoodsImage(value string) {
	this.Set("goods_image", value)
}

/* 商品价格,保留两位小数，不可为空 */
func (this *CaipiaoGoodsInfoInputRequest) SetGoodsPrice(value string) {
	this.Set("goods_price", value)
}

/* 商品标题 */
func (this *CaipiaoGoodsInfoInputRequest) SetGoodsTitle(value string) {
	this.Set("goods_title", value)
}

/* 商品类目编号，不可为空 */
func (this *CaipiaoGoodsInfoInputRequest) SetGoodsType(value string) {
	this.Set("goods_type", value)
}

/* 彩种id,不可为空 */
func (this *CaipiaoGoodsInfoInputRequest) SetLotteryTypeId(value string) {
	this.Set("lottery_type_id", value)
}

/* 赠送类型：0-满就送；1-好评送；2-分享送；3-游戏送；4-收藏送，不可为空 */
func (this *CaipiaoGoodsInfoInputRequest) SetPresentType(value string) {
	this.Set("present_type", value)
}

type CaipiaoGoodsInfoInputResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	CaipiaoGoodsInfoInputResponseResult `json:"caipiao_goods_info_input_response"`
}
type CaipiaoGoodsInfoInputResponseResult struct {
	/* 录入操作是否成功 */
	InputResult bool `json:"input_result"`
}

/*taobao.caipiao.lottery.send*/
type CaipiaoLotterySendRequest struct {
	values url.Values
}

func (this *CaipiaoLotterySendRequest) GetApiMethodName() string {
	return "taobao.caipiao.lottery.send"
}
func (this *CaipiaoLotterySendRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CaipiaoLotterySendRequest) GetValues() url.Values {
	return this.values
}

/* 彩票接收方淘宝数字ID，不可为空、0和负数。 */
func (this *CaipiaoLotterySendRequest) SetBuyerNumId(value string) {
	this.Set("buyer_num_id", value)
}

/* 彩种ID，此彩种ID为彩票系统中的序号。 */
func (this *CaipiaoLotterySendRequest) SetLotteryTypeId(value string) {
	this.Set("lottery_type_id", value)
}

/* 送彩方淘宝数字ID， 不可为空、0和负数。 */
func (this *CaipiaoLotterySendRequest) SetSellerNumId(value string) {
	this.Set("seller_num_id", value)
}

/* 彩票注数，不可为空、0和负数，最大值为100。 */
func (this *CaipiaoLotterySendRequest) SetStakeCount(value string) {
	this.Set("stake_count", value)
}

/* 送彩票给接收方的赠言。 不能超过50个字符，1个中文字符、1个英文字母及1个数字等均当作一个字符，如果超过，则会截取。 */
func (this *CaipiaoLotterySendRequest) SetSweetyWords(value string) {
	this.Set("sweety_words", value)
}

type CaipiaoLotterySendResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	CaipiaoLotterySendResponseResult `json:"caipiao_lottery_send_response"`
}
type CaipiaoLotterySendResponseResult struct {
	/* 赠送是否成功，成功为true, 否则为false */
	SendResult bool `json:"send_result"`
}

/*taobao.caipiao.lottery.sendbynick*/
type CaipiaoLotterySendbynickRequest struct {
	values url.Values
}

func (this *CaipiaoLotterySendbynickRequest) GetApiMethodName() string {
	return "taobao.caipiao.lottery.sendbynick"
}
func (this *CaipiaoLotterySendbynickRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CaipiaoLotterySendbynickRequest) GetValues() url.Values {
	return this.values
}

/* 彩票接收方nick， 不可为空、""。 */
func (this *CaipiaoLotterySendbynickRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 彩种ID，此彩种ID为彩票系统中的序号。 */
func (this *CaipiaoLotterySendbynickRequest) SetLotteryTypeId(value string) {
	this.Set("lottery_type_id", value)
}

/* 彩票注数，不可为空、0和负数，最大值为100。 */
func (this *CaipiaoLotterySendbynickRequest) SetStakeCount(value string) {
	this.Set("stake_count", value)
}

/* 送彩票给接收方的赠言。 不能超过20个字符，1个中文字符、1个英文字母及1个数字等均当作一个字符，如果超过，则会截取。 */
func (this *CaipiaoLotterySendbynickRequest) SetSweetyWords(value string) {
	this.Set("sweety_words", value)
}

type CaipiaoLotterySendbynickResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	CaipiaoLotterySendbynickResponseResult `json:"caipiao_lottery_sendbynick_response"`
}
type CaipiaoLotterySendbynickResponseResult struct {
	/* 赠送是否成功，成功为true, 否则为false */
	SendResult bool `json:"send_result"`
}

/*taobao.caipiao.lotterytypes.get*/
type CaipiaoLotterytypesGetRequest struct {
	values url.Values
}

func (this *CaipiaoLotterytypesGetRequest) GetApiMethodName() string {
	return "taobao.caipiao.lotterytypes.get"
}
func (this *CaipiaoLotterytypesGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CaipiaoLotterytypesGetRequest) GetValues() url.Values {
	return this.values
}

type CaipiaoLotterytypesGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	CaipiaoLotterytypesGetResponseResult `json:"caipiao_lotterytypes_get_response"`
}
type CaipiaoLotterytypesGetResponseResult struct {
	/* 彩种的数据结构 */
	Results []*LotteryType `json:"results"`
	/* 彩种个数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.caipiao.present.items.get*/
type CaipiaoPresentItemsGetRequest struct {
	values url.Values
}

func (this *CaipiaoPresentItemsGetRequest) GetApiMethodName() string {
	return "taobao.caipiao.present.items.get"
}
func (this *CaipiaoPresentItemsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CaipiaoPresentItemsGetRequest) GetValues() url.Values {
	return this.values
}

/* 赠送订单的截止时间，格式为yyyyMMdd, 距当前最长时间间隔是3个月，最近可以取当天的时间。不可为空。要求endDate-startDate必须<=3个月， */
func (this *CaipiaoPresentItemsGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* 当前页码， 不可为空、0和负数。 */
func (this *CaipiaoPresentItemsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页的大小，不可为空、0和负数。最大为500，如果超过500，则取默认的500. */
func (this *CaipiaoPresentItemsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 赠送订单的开始时间， 格式为yyyyMMdd, 距当前最长时间间隔是3个月， 最近可以取当天的时间. 不可为空。 */
func (this *CaipiaoPresentItemsGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type CaipiaoPresentItemsGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	CaipiaoPresentItemsGetResponseResult `json:"caipiao_present_items_get_response"`
}
type CaipiaoPresentItemsGetResponseResult struct {
	/* 查询的结果列表 */
	Results []*LotteryWangcaiPresent `json:"results"`
	/* 返回列表的大小 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.caipiao.present.stat.get*/
type CaipiaoPresentStatGetRequest struct {
	values url.Values
}

func (this *CaipiaoPresentStatGetRequest) GetApiMethodName() string {
	return "taobao.caipiao.present.stat.get"
}
func (this *CaipiaoPresentStatGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CaipiaoPresentStatGetRequest) GetValues() url.Values {
	return this.values
}

/* 指定查询的天数，从当前日期（不包括当前日期）向前推算的天数，可为空。如果为空、0、负数或者大于90天，则设置为默认的90天。举例：当天是20120703， days=2， 则统计数据的日期为：20120702，20120701. */
func (this *CaipiaoPresentStatGetRequest) SetDays(value string) {
	this.Set("days", value)
}

type CaipiaoPresentStatGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	CaipiaoPresentStatGetResponseResult `json:"caipiao_present_stat_get_response"`
}
type CaipiaoPresentStatGetResponseResult struct {
	/* 查询的结果集 */
	Results []*LotteryWangcaiPresentStat `json:"results"`
	/* 查询的结果集大小 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.caipiao.present.win.items.get*/
type CaipiaoPresentWinItemsGetRequest struct {
	values url.Values
}

func (this *CaipiaoPresentWinItemsGetRequest) GetApiMethodName() string {
	return "taobao.caipiao.present.win.items.get"
}
func (this *CaipiaoPresentWinItemsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CaipiaoPresentWinItemsGetRequest) GetValues() url.Values {
	return this.values
}

/* 查询日期，格式请严格遵守yyyy-MM-dd */
func (this *CaipiaoPresentWinItemsGetRequest) SetDate(value string) {
	this.Set("date", value)
}

/* 查询个数，最大值为500.如果为空、0和负数，则取默认值500 */
func (this *CaipiaoPresentWinItemsGetRequest) SetNum(value string) {
	this.Set("num", value)
}

/* 查询页码，空，零，负的情况默认为1（注意每页数据量为50） */
func (this *CaipiaoPresentWinItemsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 0：查询中奖订单，1：查询所有订单，默认为0，注意按列表数量查询只会查询中奖订单。 */
func (this *CaipiaoPresentWinItemsGetRequest) SetSearchType(value string) {
	this.Set("search_type", value)
}

type CaipiaoPresentWinItemsGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	CaipiaoPresentWinItemsGetResponseResult `json:"caipiao_present_win_items_get_response"`
}
type CaipiaoPresentWinItemsGetResponseResult struct {
	/* 查询的结果集 */
	Results []*LotteryWangcaiPresent `json:"results"`
	/* 查询的结果集大小 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.caipiao.shop.info.input*/
type CaipiaoShopInfoInputRequest struct {
	values url.Values
}

func (this *CaipiaoShopInfoInputRequest) GetApiMethodName() string {
	return "taobao.caipiao.shop.info.input"
}
func (this *CaipiaoShopInfoInputRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CaipiaoShopInfoInputRequest) GetValues() url.Values {
	return this.values
}

/* 活动结束时间，格式需严格遵守yyyy-MM-dd HH:mm:ss，不可为空 */
func (this *CaipiaoShopInfoInputRequest) SetActEndDate(value string) {
	this.Set("act_end_date", value)
}

/* 活动开始时间，格式需严格遵守yyyy-MM-dd HH:mm:ss，不可为空 */
func (this *CaipiaoShopInfoInputRequest) SetActStartDate(value string) {
	this.Set("act_start_date", value)
}

/* 赠送类型：0-满就送；1-好评送；2-分享送；3-游戏送；4-收藏送，不可为空 */
func (this *CaipiaoShopInfoInputRequest) SetPresentType(value string) {
	this.Set("present_type", value)
}

/* 店铺参加的送彩票活动描述 */
func (this *CaipiaoShopInfoInputRequest) SetShopDesc(value string) {
	this.Set("shop_desc", value)
}

/* 店铺名称 */
func (this *CaipiaoShopInfoInputRequest) SetShopName(value string) {
	this.Set("shop_name", value)
}

/* 店铺类目编号，不可为空 */
func (this *CaipiaoShopInfoInputRequest) SetShopType(value string) {
	this.Set("shop_type", value)
}

type CaipiaoShopInfoInputResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	CaipiaoShopInfoInputResponseResult `json:"caipiao_shop_info_input_response"`
}
type CaipiaoShopInfoInputResponseResult struct {
	/* 录入操作是否成功 */
	InputResult bool `json:"input_result"`
}

/*taobao.caipiao.signstatus.check*/
type CaipiaoSignstatusCheckRequest struct {
	values url.Values
}

func (this *CaipiaoSignstatusCheckRequest) GetApiMethodName() string {
	return "taobao.caipiao.signstatus.check"
}
func (this *CaipiaoSignstatusCheckRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *CaipiaoSignstatusCheckRequest) GetValues() url.Values {
	return this.values
}

type CaipiaoSignstatusCheckResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	CaipiaoSignstatusCheckResponseResult `json:"caipiao_signstatus_check_response"`
}
type CaipiaoSignstatusCheckResponseResult struct {
	/* 是否签署了支付宝代扣协议 */
	Sign bool `json:"sign"`
	/* 签署支付宝代扣协议的Url */
	SignUrl string `json:"sign_url"`
}

/*taobao.bill.accounts.get*/
type BillAccountsGetRequest struct {
	values url.Values
}

func (this *BillAccountsGetRequest) GetApiMethodName() string {
	return "taobao.bill.accounts.get"
}
func (this *BillAccountsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *BillAccountsGetRequest) GetValues() url.Values {
	return this.values
}

/* 需要获取的科目ID */
func (this *BillAccountsGetRequest) SetAids(value string) {
	this.Set("aids", value)
}

/* 需要返回的字段 */
func (this *BillAccountsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

type BillAccountsGetResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	BillAccountsGetResponseResult `json:"bill_accounts_get_response"`
}
type BillAccountsGetResponseResult struct {
	/* 返回的科目信息 */
	Accounts []*Account `json:"accounts"`
	/* 返回记录行数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.bill.bill.get*/
type BillBillGetRequest struct {
	values url.Values
}

func (this *BillBillGetRequest) GetApiMethodName() string {
	return "taobao.bill.bill.get"
}
func (this *BillBillGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *BillBillGetRequest) GetValues() url.Values {
	return this.values
}

/* 账单编号 */
func (this *BillBillGetRequest) SetBid(value string) {
	this.Set("bid", value)
}

/* 传入需要返回的字段 */
func (this *BillBillGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

type BillBillGetResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	BillBillGetResponseResult `json:"bill_bill_get_response"`
}
type BillBillGetResponseResult struct {
	/* 账单明细 */
	Bill *Bill `json:"bill"`
}

/*taobao.bill.bills.get*/
type BillBillsGetRequest struct {
	values url.Values
}

func (this *BillBillsGetRequest) GetApiMethodName() string {
	return "taobao.bill.bills.get"
}
func (this *BillBillsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *BillBillsGetRequest) GetValues() url.Values {
	return this.values
}

/* 科目编号 */
func (this *BillBillsGetRequest) SetAccountId(value string) {
	this.Set("account_id", value)
}

/* 结束时间,限制:结束时间-开始时间不能大于1天(根据order_id或者trade_id查询除外) */
func (this *BillBillsGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 传入需要返回的字段,参见Bill结构体 */
func (this *BillBillsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 子订单编号 */
func (this *BillBillsGetRequest) SetOrderId(value string) {
	this.Set("order_id", value)
}

/* 页数,建议不要超过100页,越大性能越低,有可能会超时 */
func (this *BillBillsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小,默认40条,可选范围 ：40~100 */
func (this *BillBillsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 开始时间 */
func (this *BillBillsGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 查询条件中的时间类型:1-交易订单完成时间biz_time 2-支付宝扣款时间pay_time 如果不填默认为2即根据支付时间查询,查询的结果会根据该时间倒排序 */
func (this *BillBillsGetRequest) SetTimeType(value string) {
	this.Set("time_type", value)
}

/* 交易编号 */
func (this *BillBillsGetRequest) SetTradeId(value string) {
	this.Set("trade_id", value)
}

type BillBillsGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	BillBillsGetResponseResult `json:"bill_bills_get_response"`
}
type BillBillsGetResponseResult struct {
	/* 账单列表 */
	Bills []*Bill `json:"bills"`
	/* 是否存在下一页 */
	HasNext bool `json:"has_next"`
	/* 当前页查询返回的结果数(0-100)。相同的查询时间段条件下，最大只能获取总共5000条记录。所以当大于等于5000时 ISV可以通过start_time及end_time来进行拆分，以保证可以查询到全部数据 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.bill.book.bill.get*/
type BillBookBillGetRequest struct {
	values url.Values
}

func (this *BillBookBillGetRequest) GetApiMethodName() string {
	return "taobao.bill.book.bill.get"
}
func (this *BillBookBillGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *BillBookBillGetRequest) GetValues() url.Values {
	return this.values
}

/* 虚拟账户流水编号 */
func (this *BillBookBillGetRequest) SetBid(value string) {
	this.Set("bid", value)
}

/* 需要返回的字段:参见BookBill结构体 */
func (this *BillBookBillGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

type BillBookBillGetResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	BillBookBillGetResponseResult `json:"bill_book_bill_get_response"`
}
type BillBookBillGetResponseResult struct {
	/* 虚拟账户账单 */
	Bookbill *BookBill `json:"bookbill"`
}

/*taobao.bill.book.bills.get*/
type BillBookBillsGetRequest struct {
	values url.Values
}

func (this *BillBookBillsGetRequest) GetApiMethodName() string {
	return "taobao.bill.book.bills.get"
}
func (this *BillBookBillsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *BillBookBillsGetRequest) GetValues() url.Values {
	return this.values
}

/* 虚拟账户科目编号 */
func (this *BillBookBillsGetRequest) SetAccountId(value string) {
	this.Set("account_id", value)
}

/* 记账结束时间,end_time与start_time相差不能超过30天 */
func (this *BillBookBillsGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 需要返回的字段:bid,account_id,journal_type,amount,book_time,description,gmt_create,gmt_modified ,如果不是以上字段将自动忽略<br /> 支持的最大列表长度为：300 */
func (this *BillBookBillsGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 明细流水类型:流水类型:101、可用金充值；102、可用金扣除；103、冻结；104、解冻；105、冻结金充值；106、冻结金扣除 */
func (this *BillBookBillsGetRequest) SetJournalTypes(value string) {
	this.Set("journal_types", value)
}

/* 页码,传入值为1代表第一页,传入值为2代表第二页,依此类推.默认返回的数据是从第一页开始 */
func (this *BillBookBillsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小,建议40~100,不能超过100 */
func (this *BillBookBillsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 记账开始时间 */
func (this *BillBookBillsGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

type BillBookBillsGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	BillBookBillsGetResponseResult `json:"bill_book_bills_get_response"`
}
type BillBookBillsGetResponseResult struct {
	/* 虚拟账户账单列表 */
	Bills []*BookBill `json:"bills"`
	/* 是否有下一页 */
	HasNext bool `json:"has_next"`
	/* 当前查询的结果数,非总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.qianniu.number.put*/
type QianniuNumberPutRequest struct {
	values url.Values
}

func (this *QianniuNumberPutRequest) GetApiMethodName() string {
	return "taobao.qianniu.number.put"
}
func (this *QianniuNumberPutRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *QianniuNumberPutRequest) GetValues() url.Values {
	return this.values
}

/* 考虑到稳定性，建议一次卖家最多为200个。
标准json格式的数组构成的字符串。每个元素为{user_id:****,field:"****",value:"****"}分别是用户的userid，数据的名称，以及数据的值。 */
func (this *QianniuNumberPutRequest) SetData(value string) {
	this.Set("data", value)
}

type QianniuNumberPutResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	QianniuNumberPutResponseResult `json:"qianniu_number_put_response"`
}
type QianniuNumberPutResponseResult struct {
	/* 是否上传成功。返回的是个json串，分别表示每条记录是否成功。 */
	Result string `json:"result"`
}

/*tmall.eai.base.gateway.register*/
type TmallEaiBaseGatewayRegisterRequest struct {
	values url.Values
}

func (this *TmallEaiBaseGatewayRegisterRequest) GetApiMethodName() string {
	return "tmall.eai.base.gateway.register"
}
func (this *TmallEaiBaseGatewayRegisterRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiBaseGatewayRegisterRequest) GetValues() url.Values {
	return this.values
}

/* 用户应用的回调URL,若是普通OPEN-API用户(user_type=0)这个字段可以不填。但是若是JIP用户注册，也就是(user_type=1)时,则此字段必填。否则调用不会成功。 */
func (this *TmallEaiBaseGatewayRegisterRequest) SetCallBackUrl(value string) {
	this.Set("call_back_url", value)
}

/* 字符集编码GBK,UTF-8默认,GB2312 */
func (this *TmallEaiBaseGatewayRegisterRequest) SetCharSet(value string) {
	this.Set("char_set", value)
}

/* 用户所在的城市 */
func (this *TmallEaiBaseGatewayRegisterRequest) SetCity(value string) {
	this.Set("city", value)
}

/* 数据格式:XML,JSON。
默认:JSON */
func (this *TmallEaiBaseGatewayRegisterRequest) SetContentType(value string) {
	this.Set("content_type", value)
}

/* 接入方式描述，为了更好的方便我们为您服务请务必详细描述下您的APP情况。 */
func (this *TmallEaiBaseGatewayRegisterRequest) SetDescription(value string) {
	this.Set("description", value)
}

/* 用户所在区域 */
func (this *TmallEaiBaseGatewayRegisterRequest) SetDistrict(value string) {
	this.Set("district", value)
}

/* 用户的联系邮箱 */
func (this *TmallEaiBaseGatewayRegisterRequest) SetEmail(value string) {
	this.Set("email", value)
}

/* 暂时还没有支持 */
func (this *TmallEaiBaseGatewayRegisterRequest) SetMaxFlow(value string) {
	this.Set("max_flow", value)
}

/* 用户手机号码 */
func (this *TmallEaiBaseGatewayRegisterRequest) SetMobile(value string) {
	this.Set("mobile", value)
}

/* 用户通知接收方式,邮件,电话或者其他。
email:邮件;
message:短信;
aliwangwang:阿里旺旺弹出消息。 */
func (this *TmallEaiBaseGatewayRegisterRequest) SetNotifyType(value string) {
	this.Set("notify_type", value)
}

/* 联系人姓名 */
func (this *TmallEaiBaseGatewayRegisterRequest) SetPrincipal(value string) {
	this.Set("principal", value)
}

/* 用户联系电话-座机 */
func (this *TmallEaiBaseGatewayRegisterRequest) SetTelephone(value string) {
	this.Set("telephone", value)
}

/* 接口/api名称:
天猫退款消息可选值为:
tmall.eai.order.refund.refundBill.push
tmall.eai.order.refund.refundStatus.push */
func (this *TmallEaiBaseGatewayRegisterRequest) SetTopic(value string) {
	this.Set("topic", value)
}

/* Topic组.暂时还不能支持. */
func (this *TmallEaiBaseGatewayRegisterRequest) SetTopicGroup(value string) {
	this.Set("topic_group", value)
}

/* url协议
HTTP默认 */
func (this *TmallEaiBaseGatewayRegisterRequest) SetUrlProtocal(value string) {
	this.Set("url_protocal", value)
}

/* 0:普通TOP-OPEN-API用户;
1:JIP用户。 */
func (this *TmallEaiBaseGatewayRegisterRequest) SetUserType(value string) {
	this.Set("user_type", value)
}

type TmallEaiBaseGatewayRegisterResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	TmallEaiBaseGatewayRegisterResponseResult `json:"tmall_eai_base_gateway_register_response"`
}
type TmallEaiBaseGatewayRegisterResponseResult struct {
	/* 操作插入删除或者更新的记录数 */
	Count int64 `json:"count"`
	/* 调用结果成功与否 */
	IsSuccess bool `json:"is_success"`
}

/*tmall.eai.order.refund.agree*/
type TmallEaiOrderRefundAgreeRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRefundAgreeRequest) GetApiMethodName() string {
	return "tmall.eai.order.refund.agree"
}
func (this *TmallEaiOrderRefundAgreeRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRefundAgreeRequest) GetValues() url.Values {
	return this.values
}

/* 短信验证码 */
func (this *TmallEaiOrderRefundAgreeRequest) SetCode(value string) {
	this.Set("code", value)
}

/* 需要退款的退款ID|其对应的金额|对应版本号列表|退款阶段（onsale\aftersale），其中金额以分为单位，ID与金额以“|”符号分隔，多笔订单以“,”分隔。允许批量操作30笔，最大金额1W。 */
func (this *TmallEaiOrderRefundAgreeRequest) SetRefundInfos(value string) {
	this.Set("refund_infos", value)
}

type TmallEaiOrderRefundAgreeResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	TmallEaiOrderRefundAgreeResponseResult `json:"tmall_eai_order_refund_agree_response"`
}
type TmallEaiOrderRefundAgreeResponseResult struct {
	/* 操作结果编码 */
	Code int64 `json:"code"`
	/* 接口调用结果 */
	Message string `json:"message"`
	/* 同意退款结果 */
	ResultList []*RefundAgreeResult `json:"result_list"`
}

/*tmall.eai.order.refund.billsum.get*/
type TmallEaiOrderRefundBillsumGetRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRefundBillsumGetRequest) GetApiMethodName() string {
	return "tmall.eai.order.refund.billsum.get"
}
func (this *TmallEaiOrderRefundBillsumGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRefundBillsumGetRequest) GetValues() url.Values {
	return this.values
}

/* 查找数量的单据类型 refund_bill:退款单， return_bill:退货单 */
func (this *TmallEaiOrderRefundBillsumGetRequest) SetBillType(value string) {
	this.Set("bill_type", value)
}

/* 批量查询结束时间 */
func (this *TmallEaiOrderRefundBillsumGetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 批量查询开始时间 */
func (this *TmallEaiOrderRefundBillsumGetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 退货单 退款单状态 */
func (this *TmallEaiOrderRefundBillsumGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

type TmallEaiOrderRefundBillsumGetResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	TmallEaiOrderRefundBillsumGetResponseResult `json:"tmall_eai_order_refund_billsum_get_response"`
}
type TmallEaiOrderRefundBillsumGetResponseResult struct {
	/* 总数 */
	BillSum int64 `json:"bill_sum"`
}

/*tmall.eai.order.refund.examine*/
type TmallEaiOrderRefundExamineRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRefundExamineRequest) GetApiMethodName() string {
	return "tmall.eai.order.refund.examine"
}
func (this *TmallEaiOrderRefundExamineRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRefundExamineRequest) GetValues() url.Values {
	return this.values
}

/* 审核留言 */
func (this *TmallEaiOrderRefundExamineRequest) SetMessage(value string) {
	this.Set("message", value)
}

/* 审核人姓名 */
func (this *TmallEaiOrderRefundExamineRequest) SetOperator(value string) {
	this.Set("operator", value)
}

/* 退款单编号 */
func (this *TmallEaiOrderRefundExamineRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

/* 售中：onsale
售后：aftersale */
func (this *TmallEaiOrderRefundExamineRequest) SetRefundPhase(value string) {
	this.Set("refund_phase", value)
}

/* 退款版本号 */
func (this *TmallEaiOrderRefundExamineRequest) SetRefundVersion(value string) {
	this.Set("refund_version", value)
}

type TmallEaiOrderRefundExamineResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	TmallEaiOrderRefundExamineResponseResult `json:"tmall_eai_order_refund_examine_response"`
}
type TmallEaiOrderRefundExamineResponseResult struct {
	/* 操作结果 */
	IsSuccess bool `json:"is_success"`
}

/*tmall.eai.order.refund.examine.cancel*/
type TmallEaiOrderRefundExamineCancelRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRefundExamineCancelRequest) GetApiMethodName() string {
	return "tmall.eai.order.refund.examine.cancel"
}
func (this *TmallEaiOrderRefundExamineCancelRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRefundExamineCancelRequest) GetValues() url.Values {
	return this.values
}

/* 反审核留言 */
func (this *TmallEaiOrderRefundExamineCancelRequest) SetMessage(value string) {
	this.Set("message", value)
}

/* 反审核人姓名 */
func (this *TmallEaiOrderRefundExamineCancelRequest) SetOperator(value string) {
	this.Set("operator", value)
}

/* 退款单编号 */
func (this *TmallEaiOrderRefundExamineCancelRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

/* 售中：onsale
售后：aftersale */
func (this *TmallEaiOrderRefundExamineCancelRequest) SetRefundPhase(value string) {
	this.Set("refund_phase", value)
}

/* 退款版本号 */
func (this *TmallEaiOrderRefundExamineCancelRequest) SetRefundVersion(value string) {
	this.Set("refund_version", value)
}

type TmallEaiOrderRefundExamineCancelResponse struct {
	*ErrorResponse                                 `json:"error_response,omitempty"`
	TmallEaiOrderRefundExamineCancelResponseResult `json:"tmall_eai_order_refund_examine_cancel_response"`
}
type TmallEaiOrderRefundExamineCancelResponseResult struct {
	/* 操作结果 */
	IsSuccess bool `json:"is_success"`
}

/*tmall.eai.order.refund.get*/
type TmallEaiOrderRefundGetRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRefundGetRequest) GetApiMethodName() string {
	return "tmall.eai.order.refund.get"
}
func (this *TmallEaiOrderRefundGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRefundGetRequest) GetValues() url.Values {
	return this.values
}

/* 退款单编号 */
func (this *TmallEaiOrderRefundGetRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

/* 售中：onsale
售后：aftersale */
func (this *TmallEaiOrderRefundGetRequest) SetRefundPhase(value string) {
	this.Set("refund_phase", value)
}

type TmallEaiOrderRefundGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	TmallEaiOrderRefundGetResponseResult `json:"tmall_eai_order_refund_get_response"`
}
type TmallEaiOrderRefundGetResponseResult struct {
	/* 退款单 */
	RefundBill *RefundBill `json:"refund_bill"`
}

/*tmall.eai.order.refund.good.return.agree*/
type TmallEaiOrderRefundGoodReturnAgreeRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRefundGoodReturnAgreeRequest) GetApiMethodName() string {
	return "tmall.eai.order.refund.good.return.agree"
}
func (this *TmallEaiOrderRefundGoodReturnAgreeRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRefundGoodReturnAgreeRequest) GetValues() url.Values {
	return this.values
}

/* 同意退货留言 */
func (this *TmallEaiOrderRefundGoodReturnAgreeRequest) SetMessage(value string) {
	this.Set("message", value)
}

/* 退款单编号 */
func (this *TmallEaiOrderRefundGoodReturnAgreeRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

/* 售中：onsale
售后：aftersale */
func (this *TmallEaiOrderRefundGoodReturnAgreeRequest) SetRefundPhase(value string) {
	this.Set("refund_phase", value)
}

/* 退款版本号 */
func (this *TmallEaiOrderRefundGoodReturnAgreeRequest) SetRefundVersion(value string) {
	this.Set("refund_version", value)
}

/* 卖家收货地址编号 */
func (this *TmallEaiOrderRefundGoodReturnAgreeRequest) SetSellerLogisticsAddressId(value string) {
	this.Set("seller_logistics_address_id", value)
}

type TmallEaiOrderRefundGoodReturnAgreeResponse struct {
	*ErrorResponse                                   `json:"error_response,omitempty"`
	TmallEaiOrderRefundGoodReturnAgreeResponseResult `json:"tmall_eai_order_refund_good_return_agree_response"`
}
type TmallEaiOrderRefundGoodReturnAgreeResponseResult struct {
	/* 操作结果 */
	IsSuccess bool `json:"is_success"`
}

/*tmall.eai.order.refund.good.return.check*/
type TmallEaiOrderRefundGoodReturnCheckRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRefundGoodReturnCheckRequest) GetApiMethodName() string {
	return "tmall.eai.order.refund.good.return.check"
}
func (this *TmallEaiOrderRefundGoodReturnCheckRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRefundGoodReturnCheckRequest) GetValues() url.Values {
	return this.values
}

/* 物流公司编号 */
func (this *TmallEaiOrderRefundGoodReturnCheckRequest) SetCompanyCode(value string) {
	this.Set("company_code", value)
}

/* 1.验货通过
2.验货不通过 */
func (this *TmallEaiOrderRefundGoodReturnCheckRequest) SetConfirmResult(value string) {
	this.Set("confirm_result", value)
}

/* 验货时间 */
func (this *TmallEaiOrderRefundGoodReturnCheckRequest) SetConfirmTime(value string) {
	this.Set("confirm_time", value)
}

/* 验货人员 */
func (this *TmallEaiOrderRefundGoodReturnCheckRequest) SetOperator(value string) {
	this.Set("operator", value)
}

/* 退款单编号 */
func (this *TmallEaiOrderRefundGoodReturnCheckRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

/* 售中：onsale
售后：aftersale */
func (this *TmallEaiOrderRefundGoodReturnCheckRequest) SetRefundPhase(value string) {
	this.Set("refund_phase", value)
}

/* 物流运单号 */
func (this *TmallEaiOrderRefundGoodReturnCheckRequest) SetSid(value string) {
	this.Set("sid", value)
}

type TmallEaiOrderRefundGoodReturnCheckResponse struct {
	*ErrorResponse                                   `json:"error_response,omitempty"`
	TmallEaiOrderRefundGoodReturnCheckResponseResult `json:"tmall_eai_order_refund_good_return_check_response"`
}
type TmallEaiOrderRefundGoodReturnCheckResponseResult struct {
	/* 操作结果 */
	IsSuccess bool `json:"is_success"`
}

/*tmall.eai.order.refund.good.return.get*/
type TmallEaiOrderRefundGoodReturnGetRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRefundGoodReturnGetRequest) GetApiMethodName() string {
	return "tmall.eai.order.refund.good.return.get"
}
func (this *TmallEaiOrderRefundGoodReturnGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRefundGoodReturnGetRequest) GetValues() url.Values {
	return this.values
}

/* 退款单编号 */
func (this *TmallEaiOrderRefundGoodReturnGetRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

/* 售中：onsale
售后：aftersale */
func (this *TmallEaiOrderRefundGoodReturnGetRequest) SetRefundPhase(value string) {
	this.Set("refund_phase", value)
}

type TmallEaiOrderRefundGoodReturnGetResponse struct {
	*ErrorResponse                                 `json:"error_response,omitempty"`
	TmallEaiOrderRefundGoodReturnGetResponseResult `json:"tmall_eai_order_refund_good_return_get_response"`
}
type TmallEaiOrderRefundGoodReturnGetResponseResult struct {
	/* 退货单 */
	ReturnBill *ReturnBill `json:"return_bill"`
}

/*tmall.eai.order.refund.good.return.mget*/
type TmallEaiOrderRefundGoodReturnMgetRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRefundGoodReturnMgetRequest) GetApiMethodName() string {
	return "tmall.eai.order.refund.good.return.mget"
}
func (this *TmallEaiOrderRefundGoodReturnMgetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRefundGoodReturnMgetRequest) GetValues() url.Values {
	return this.values
}

/* 批量查询结束时间 */
func (this *TmallEaiOrderRefundGoodReturnMgetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 页码。取值范围:大于零的整数; 默认值:1<br /> 支持最小值为：1 */
func (this *TmallEaiOrderRefundGoodReturnMgetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数。取值范围:大于零的整数; 默认值:10;最大值:40<br /> 支持最大值为：40<br /> 支持最小值为：1 */
func (this *TmallEaiOrderRefundGoodReturnMgetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 批量查询开始时间 */
func (this *TmallEaiOrderRefundGoodReturnMgetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 退货单 退款单状态 */
func (this *TmallEaiOrderRefundGoodReturnMgetRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 是否启用has_next的分页方式，如果指定true,则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的的字段，通过此种方式获取增量退款，接口调用成功率在原有的基础上有所提升。 */
func (this *TmallEaiOrderRefundGoodReturnMgetRequest) SetUseHasNext(value string) {
	this.Set("use_has_next", value)
}

type TmallEaiOrderRefundGoodReturnMgetResponse struct {
	*ErrorResponse                                  `json:"error_response,omitempty"`
	TmallEaiOrderRefundGoodReturnMgetResponseResult `json:"tmall_eai_order_refund_good_return_mget_response"`
}
type TmallEaiOrderRefundGoodReturnMgetResponseResult struct {
	/* 是否用下一页 */
	HasNext bool `json:"has_next"`
	/* 退货单列表 */
	ReturnBillList []*ReturnBill `json:"return_bill_list"`
	/* 查询总数 */
	TotalResults int64 `json:"total_results"`
}

/*tmall.eai.order.refund.good.return.refuse*/
type TmallEaiOrderRefundGoodReturnRefuseRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRefundGoodReturnRefuseRequest) GetApiMethodName() string {
	return "tmall.eai.order.refund.good.return.refuse"
}
func (this *TmallEaiOrderRefundGoodReturnRefuseRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRefundGoodReturnRefuseRequest) GetValues() url.Values {
	return this.values
}

/* 退款单编号 */
func (this *TmallEaiOrderRefundGoodReturnRefuseRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

/* 售中：onsale
售后：aftersale */
func (this *TmallEaiOrderRefundGoodReturnRefuseRequest) SetRefundPhase(value string) {
	this.Set("refund_phase", value)
}

/* 退款版本号 */
func (this *TmallEaiOrderRefundGoodReturnRefuseRequest) SetRefundVersion(value string) {
	this.Set("refund_version", value)
}

/* 拒绝退款原因留言 */
func (this *TmallEaiOrderRefundGoodReturnRefuseRequest) SetRefuseMessage(value string) {
	this.Set("refuse_message", value)
}

/* 拒绝退款举证上传 */
func (this *TmallEaiOrderRefundGoodReturnRefuseRequest) SetRefuseProof(value string) {
	this.Set("refuse_proof", value)
}

type TmallEaiOrderRefundGoodReturnRefuseResponse struct {
	*ErrorResponse                                    `json:"error_response,omitempty"`
	TmallEaiOrderRefundGoodReturnRefuseResponseResult `json:"tmall_eai_order_refund_good_return_refuse_response"`
}
type TmallEaiOrderRefundGoodReturnRefuseResponseResult struct {
	/* 返回结果 */
	IsSuccess bool `json:"is_success"`
}

/*tmall.eai.order.refund.message.get*/
type TmallEaiOrderRefundMessageGetRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRefundMessageGetRequest) GetApiMethodName() string {
	return "tmall.eai.order.refund.message.get"
}
func (this *TmallEaiOrderRefundMessageGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRefundMessageGetRequest) GetValues() url.Values {
	return this.values
}

/* 页码。取值范围:大于零的整数; 默认值:1<br /> 支持最小值为：1 */
func (this *TmallEaiOrderRefundMessageGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数。取值范围:大于零的整数; 默认值:40;最大值:40<br /> 支持最大值为：40<br /> 支持最小值为：1 */
func (this *TmallEaiOrderRefundMessageGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 退款单编号 */
func (this *TmallEaiOrderRefundMessageGetRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

/* 售中：onsale
售后：aftersale */
func (this *TmallEaiOrderRefundMessageGetRequest) SetRefundPhase(value string) {
	this.Set("refund_phase", value)
}

type TmallEaiOrderRefundMessageGetResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	TmallEaiOrderRefundMessageGetResponseResult `json:"tmall_eai_order_refund_message_get_response"`
}
type TmallEaiOrderRefundMessageGetResponseResult struct {
	/* 留言列表 */
	MessageList []*TmallRefundMessage `json:"message_list"`
	/* 查询总数，用于分页 */
	TotalResults int64 `json:"total_results"`
}

/*tmall.eai.order.refund.mget*/
type TmallEaiOrderRefundMgetRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRefundMgetRequest) GetApiMethodName() string {
	return "tmall.eai.order.refund.mget"
}
func (this *TmallEaiOrderRefundMgetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRefundMgetRequest) GetValues() url.Values {
	return this.values
}

/* 批量查询结束时间。注：该字段对应为退款单更新时间，非退款单创建时间。 */
func (this *TmallEaiOrderRefundMgetRequest) SetEndTime(value string) {
	this.Set("end_time", value)
}

/* 页码。取值范围:大于零的整数; 默认值:1<br /> 支持最小值为：1 */
func (this *TmallEaiOrderRefundMgetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页条数。取值范围:大于零的整数; 默认值:10;最大值:40<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *TmallEaiOrderRefundMgetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 批量查询开始时间。注：该字段对应为退款单更新时间，非退款单创建时间。 */
func (this *TmallEaiOrderRefundMgetRequest) SetStartTime(value string) {
	this.Set("start_time", value)
}

/* 退货单 退款单状态 */
func (this *TmallEaiOrderRefundMgetRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 是否启用has_next的分页方式，如果指定true,则返回的结果中不包含总记录数，但是会新增一个是否存在下一页的的字段，通过此种方式获取增量退款，接口调用成功率在原有的基础上有所提升。 */
func (this *TmallEaiOrderRefundMgetRequest) SetUseHasNext(value string) {
	this.Set("use_has_next", value)
}

type TmallEaiOrderRefundMgetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	TmallEaiOrderRefundMgetResponseResult `json:"tmall_eai_order_refund_mget_response"`
}
type TmallEaiOrderRefundMgetResponseResult struct {
	/* 是否有下一页 */
	HasNext bool `json:"has_next"`
	/* 退款单列表 */
	RefundBillList []*RefundBill `json:"refund_bill_list"`
	/* 查询总数，用于分页 */
	TotalResults int64 `json:"total_results"`
}

/*tmall.eai.order.refund.order.hold*/
type TmallEaiOrderRefundOrderHoldRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRefundOrderHoldRequest) GetApiMethodName() string {
	return "tmall.eai.order.refund.order.hold"
}
func (this *TmallEaiOrderRefundOrderHoldRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRefundOrderHoldRequest) GetValues() url.Values {
	return this.values
}

/* 1. 截停成功
2. 截停失败 */
func (this *TmallEaiOrderRefundOrderHoldRequest) SetHoldResult(value string) {
	this.Set("hold_result", value)
}

/* 截停环节
1. 订单处理环节
2. 发货环节 */
func (this *TmallEaiOrderRefundOrderHoldRequest) SetHoldStep(value string) {
	this.Set("hold_step", value)
}

/* 截单时间 */
func (this *TmallEaiOrderRefundOrderHoldRequest) SetHoldTime(value string) {
	this.Set("hold_time", value)
}

/* 退款单编号 */
func (this *TmallEaiOrderRefundOrderHoldRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

/* 售中：onsale
售后：aftersale */
func (this *TmallEaiOrderRefundOrderHoldRequest) SetRefundPhase(value string) {
	this.Set("refund_phase", value)
}

type TmallEaiOrderRefundOrderHoldResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	TmallEaiOrderRefundOrderHoldResponseResult `json:"tmall_eai_order_refund_order_hold_response"`
}
type TmallEaiOrderRefundOrderHoldResponseResult struct {
	/* 操作结果 */
	IsSuccess string `json:"is_success"`
}

/*tmall.eai.order.refund.refuse*/
type TmallEaiOrderRefundRefuseRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRefundRefuseRequest) GetApiMethodName() string {
	return "tmall.eai.order.refund.refuse"
}
func (this *TmallEaiOrderRefundRefuseRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRefundRefuseRequest) GetValues() url.Values {
	return this.values
}

/* 退款单编号 */
func (this *TmallEaiOrderRefundRefuseRequest) SetRefundId(value string) {
	this.Set("refund_id", value)
}

/* 售中：onsale
售后：aftersale */
func (this *TmallEaiOrderRefundRefuseRequest) SetRefundPhase(value string) {
	this.Set("refund_phase", value)
}

/* 退款版本号 */
func (this *TmallEaiOrderRefundRefuseRequest) SetRefundVersion(value string) {
	this.Set("refund_version", value)
}

/* 拒绝退款原因留言 */
func (this *TmallEaiOrderRefundRefuseRequest) SetRefuseMessage(value string) {
	this.Set("refuse_message", value)
}

/* 拒绝退款举证上传 */
func (this *TmallEaiOrderRefundRefuseRequest) SetRefuseProof(value string) {
	this.Set("refuse_proof", value)
}

type TmallEaiOrderRefundRefuseResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	TmallEaiOrderRefundRefuseResponseResult `json:"tmall_eai_order_refund_refuse_response"`
}
type TmallEaiOrderRefundRefuseResponseResult struct {
	/* 操作结果 */
	IsSuccess bool `json:"is_success"`
}

/*tmall.eai.order.register*/
type TmallEaiOrderRegisterRequest struct {
	values url.Values
}

func (this *TmallEaiOrderRegisterRequest) GetApiMethodName() string {
	return "tmall.eai.order.register"
}
func (this *TmallEaiOrderRegisterRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallEaiOrderRegisterRequest) GetValues() url.Values {
	return this.values
}

/* 对传入的事件的操作类型 0:取消订阅;1:订阅 */
func (this *TmallEaiOrderRegisterRequest) SetAction(value string) {
	this.Set("action", value)
}

/* 1:主订单模式;
2:子订单模式;
天猫退款消息订阅默认子订单模式。
不传入即可。<br /> 支持的最大列表长度为：50 */
func (this *TmallEaiOrderRegisterRequest) SetDataMode(value string) {
	this.Set("data_mode", value)
}

/* 需要订阅或者取消订阅的事件名称。
可选择的值如下所示:
RcRefundClosedEvent;
RcRefundPrepaidEvent;
RcReturnCreatedEvent;
RcRefundSucceedEvent;
RcRefundCreatedEvent;
RcRefundModifiedEvent;
RcReturnModifiedEvent;
RcRefundSellerRefuseEvent;
RcReturnConfirmFailedEvent;
RcRefundTaobaoInvolvedEvent;
RcRefundMessageCreatedEvent;
RcReturnConfirmSucceedEvent;
RcRefundPaymentFinishedEvent;
RcRefundRefundableMarkedEvent;
RcReturnBuyerReturnGoodsEvent;
RcRefundSellerAgreeReturnEvent;
RcRefundRefundableCanceledEvent;<br /> 支持最大长度为：50<br /> 支持的最大列表长度为：50 */
func (this *TmallEaiOrderRegisterRequest) SetEventName(value string) {
	this.Set("event_name", value)
}

/* 天猫退款订单可选topic:
tmall.eai.order.refund.refundBill.push;
tmall.eai.order.refund.refundStatus.push */
func (this *TmallEaiOrderRegisterRequest) SetTopic(value string) {
	this.Set("topic", value)
}

/* 标识出用户类型。
这里“用户”指的是外部开发者。
0:TOP-OPEN-API 用户
1:JIP用户 */
func (this *TmallEaiOrderRegisterRequest) SetUserType(value string) {
	this.Set("user_type", value)
}

type TmallEaiOrderRegisterResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	TmallEaiOrderRegisterResponseResult `json:"tmall_eai_order_register_response"`
}
type TmallEaiOrderRegisterResponseResult struct {
	/* 操作插入删除或者更新的记录数 */
	Count int64 `json:"count"`
	/* 调用结果成功与否 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.tmc.group.add*/
type TmcGroupAddRequest struct {
	values url.Values
}

func (this *TmcGroupAddRequest) GetApiMethodName() string {
	return "taobao.tmc.group.add"
}
func (this *TmcGroupAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmcGroupAddRequest) GetValues() url.Values {
	return this.values
}

/* 分组名称，同一个应用下需要保证唯一性，最长32个字符。添加分组后，消息通道会为用户的消息分配独立分组，但之前的消息还是存储于默认分组中。不能以default开头，default开头为系统默认组。<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *TmcGroupAddRequest) SetGroupName(value string) {
	this.Set("group_name", value)
}

/* 用户昵称列表，以半角逗号分隔，支持子账号，支持增量添加用户 */
func (this *TmcGroupAddRequest) SetNicks(value string) {
	this.Set("nicks", value)
}

type TmcGroupAddResponse struct {
	*ErrorResponse            `json:"error_response,omitempty"`
	TmcGroupAddResponseResult `json:"tmc_group_add_response"`
}
type TmcGroupAddResponseResult struct {
	/* 创建时间 */
	Created string `json:"created"`
	/* 分组名称 */
	GroupName string `json:"group_name"`
}

/*taobao.tmc.group.delete*/
type TmcGroupDeleteRequest struct {
	values url.Values
}

func (this *TmcGroupDeleteRequest) GetApiMethodName() string {
	return "taobao.tmc.group.delete"
}
func (this *TmcGroupDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmcGroupDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 分组名称，分组删除后，用户的消息将会存储于默认分组中。警告：由于分组已经删除，用户之前未消费的消息将无法再获取。不能以default开头，default开头为系统默认组。 */
func (this *TmcGroupDeleteRequest) SetGroupName(value string) {
	this.Set("group_name", value)
}

/* 用户列表，不传表示删除整个分组，如果用户全部删除后，也会自动删除整个分组 */
func (this *TmcGroupDeleteRequest) SetNicks(value string) {
	this.Set("nicks", value)
}

type TmcGroupDeleteResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	TmcGroupDeleteResponseResult `json:"tmc_group_delete_response"`
}
type TmcGroupDeleteResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.tmc.groups.get*/
type TmcGroupsGetRequest struct {
	values url.Values
}

func (this *TmcGroupsGetRequest) GetApiMethodName() string {
	return "taobao.tmc.groups.get"
}
func (this *TmcGroupsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmcGroupsGetRequest) GetValues() url.Values {
	return this.values
}

/* 要查询分组的名称，多个分组用半角逗号分隔，不传代表查询所有分组信息，但不会返回组下面的用户信息。如果应用没有设置分组则返回空。组名不能以default开头，default开头是系统默认的组。 */
func (this *TmcGroupsGetRequest) SetGroupNames(value string) {
	this.Set("group_names", value)
}

/* 页码<br /> 支持最小值为：1 */
func (this *TmcGroupsGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页返回多少个分组<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *TmcGroupsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type TmcGroupsGetResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	TmcGroupsGetResponseResult `json:"tmc_groups_get_response"`
}
type TmcGroupsGetResponseResult struct {
	/* 分组列表 */
	Groups []*TmcGroup `json:"groups"`
	/* 分组总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.tmc.message.produce*/
type TmcMessageProduceRequest struct {
	values url.Values
}

func (this *TmcMessageProduceRequest) GetApiMethodName() string {
	return "taobao.tmc.message.produce"
}
func (this *TmcMessageProduceRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmcMessageProduceRequest) GetValues() url.Values {
	return this.values
}

/* 消息内容的JSON表述，必须按照topic的定义来填充<br /> 支持最大长度为：2000<br /> 支持的最大列表长度为：2000 */
func (this *TmcMessageProduceRequest) SetContent(value string) {
	this.Set("content", value)
}

/* 发布消息关联的主题<br /> 支持最大长度为：256<br /> 支持的最大列表长度为：256 */
func (this *TmcMessageProduceRequest) SetTopic(value string) {
	this.Set("topic", value)
}

type TmcMessageProduceResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	TmcMessageProduceResponseResult `json:"tmc_message_produce_response"`
}
type TmcMessageProduceResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.tmc.messages.confirm*/
type TmcMessagesConfirmRequest struct {
	values url.Values
}

func (this *TmcMessagesConfirmRequest) GetApiMethodName() string {
	return "taobao.tmc.messages.confirm"
}
func (this *TmcMessagesConfirmRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmcMessagesConfirmRequest) GetValues() url.Values {
	return this.values
}

/* 处理失败的消息ID列表 */
func (this *TmcMessagesConfirmRequest) SetFMessageIds(value string) {
	this.Set("f_message_ids", value)
}

/* 分组名称，不传代表默认分组 */
func (this *TmcMessagesConfirmRequest) SetGroupName(value string) {
	this.Set("group_name", value)
}

/* 处理成功的消息ID列表
最大 200个ID */
func (this *TmcMessagesConfirmRequest) SetSMessageIds(value string) {
	this.Set("s_message_ids", value)
}

type TmcMessagesConfirmResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	TmcMessagesConfirmResponseResult `json:"tmc_messages_confirm_response"`
}
type TmcMessagesConfirmResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.tmc.messages.consume*/
type TmcMessagesConsumeRequest struct {
	values url.Values
}

func (this *TmcMessagesConsumeRequest) GetApiMethodName() string {
	return "taobao.tmc.messages.consume"
}
func (this *TmcMessagesConsumeRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmcMessagesConsumeRequest) GetValues() url.Values {
	return this.values
}

/* 用户分组名称，不传表示消费默认分组，如果应用没有设置用户分组，传入分组名称将会返回错误 */
func (this *TmcMessagesConsumeRequest) SetGroupName(value string) {
	this.Set("group_name", value)
}

/* 每次批量消费消息的条数<br /> 支持最大值为：200<br /> 支持最小值为：10 */
func (this *TmcMessagesConsumeRequest) SetQuantity(value string) {
	this.Set("quantity", value)
}

type TmcMessagesConsumeResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	TmcMessagesConsumeResponseResult `json:"tmc_messages_consume_response"`
}
type TmcMessagesConsumeResponseResult struct {
	/* 消息列表 */
	Messages []*TmcMessage `json:"messages"`
}

/*taobao.tmc.user.cancel*/
type TmcUserCancelRequest struct {
	values url.Values
}

func (this *TmcUserCancelRequest) GetApiMethodName() string {
	return "taobao.tmc.user.cancel"
}
func (this *TmcUserCancelRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmcUserCancelRequest) GetValues() url.Values {
	return this.values
}

/* 用户昵称，支持子账号 */
func (this *TmcUserCancelRequest) SetNick(value string) {
	this.Set("nick", value)
}

type TmcUserCancelResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	TmcUserCancelResponseResult `json:"tmc_user_cancel_response"`
}
type TmcUserCancelResponseResult struct {
	/* 是否成功,如果为false并且没有错误码，表示删除的用户不存在。 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.tmc.user.get*/
type TmcUserGetRequest struct {
	values url.Values
}

func (this *TmcUserGetRequest) GetApiMethodName() string {
	return "taobao.tmc.user.get"
}
func (this *TmcUserGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmcUserGetRequest) GetValues() url.Values {
	return this.values
}

/* 需返回的字段列表，多个字段以半角逗号分隔。可选值：TmcUser结构体中的所有字段，一定要返回topic。 */
func (this *TmcUserGetRequest) SetFields(value string) {
	this.Set("fields", value)
}

/* 用户昵称<br /> 支持最大长度为：100<br /> 支持的最大列表长度为：100 */
func (this *TmcUserGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

type TmcUserGetResponse struct {
	*ErrorResponse           `json:"error_response,omitempty"`
	TmcUserGetResponseResult `json:"tmc_user_get_response"`
}
type TmcUserGetResponseResult struct {
	/* 开通的用户数据 */
	TmcUser *TmcUser `json:"tmc_user"`
}

/*taobao.tmc.user.permit*/
type TmcUserPermitRequest struct {
	values url.Values
}

func (this *TmcUserPermitRequest) GetApiMethodName() string {
	return "taobao.tmc.user.permit"
}
func (this *TmcUserPermitRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmcUserPermitRequest) GetValues() url.Values {
	return this.values
}

/* 消息主题列表，用半角逗号分隔。当用户订阅的topic是应用订阅的子集时才需要设置，不设置表示继承应用所订阅的所有topic，一般情况建议不要设置。 */
func (this *TmcUserPermitRequest) SetTopics(value string) {
	this.Set("topics", value)
}

type TmcUserPermitResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	TmcUserPermitResponseResult `json:"tmc_user_permit_response"`
}
type TmcUserPermitResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.ebook.file.upload.chunk*/
type EbookFileUploadChunkRequest struct {
	values url.Values
}

func (this *EbookFileUploadChunkRequest) GetApiMethodName() string {
	return "taobao.ebook.file.upload.chunk"
}
func (this *EbookFileUploadChunkRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *EbookFileUploadChunkRequest) GetValues() url.Values {
	return this.values
}

/* 文件块总数 */
func (this *EbookFileUploadChunkRequest) SetChunkCount(value string) {
	this.Set("chunk_count", value)
}

/* 传输文件块，除最后一块外每块的大小 必须为 4MB */
func (this *EbookFileUploadChunkRequest) SetChunkData(value string) {
	this.Set("chunk_data", value)
}

/* 文件块的MD5 */
func (this *EbookFileUploadChunkRequest) SetChunkMd5(value string) {
	this.Set("chunk_md5", value)
}

/* 文件的ID，上传第一个文件块生成放回，在上传后续文件块时此参数必选 */
func (this *EbookFileUploadChunkRequest) SetFileId(value string) {
	this.Set("file_id", value)
}

/* 文件名 */
func (this *EbookFileUploadChunkRequest) SetFileName(value string) {
	this.Set("file_name", value)
}

/* 文件大小（非文件块大小） */
func (this *EbookFileUploadChunkRequest) SetFileSize(value string) {
	this.Set("file_size", value)
}

/* 文件块序号 */
func (this *EbookFileUploadChunkRequest) SetSequence(value string) {
	this.Set("sequence", value)
}

type EbookFileUploadChunkResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	EbookFileUploadChunkResponseResult `json:"ebook_file_upload_chunk_response"`
}
type EbookFileUploadChunkResponseResult struct {
	/* 文件ID */
	FileId string `json:"file_id"`
}

/*taobao.ebook.yunpan.token.get*/
type EbookYunpanTokenGetRequest struct {
	values url.Values
}

func (this *EbookYunpanTokenGetRequest) GetApiMethodName() string {
	return "taobao.ebook.yunpan.token.get"
}
func (this *EbookYunpanTokenGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *EbookYunpanTokenGetRequest) GetValues() url.Values {
	return this.values
}

/* 申请云盘应用的client_id */
func (this *EbookYunpanTokenGetRequest) SetClientId(value string) {
	this.Set("client_id", value)
}

type EbookYunpanTokenGetResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	EbookYunpanTokenGetResponseResult `json:"ebook_yunpan_token_get_response"`
}
type EbookYunpanTokenGetResponseResult struct {
	/* 访问云盘的token信息 */
	EbookYunpanToken *EbookYunpanToken `json:"ebook_yunpan_token"`
}

/*taobao.ebookmedia.chapter.add*/
type EbookmediaChapterAddRequest struct {
	values url.Values
}

func (this *EbookmediaChapterAddRequest) GetApiMethodName() string {
	return "taobao.ebookmedia.chapter.add"
}
func (this *EbookmediaChapterAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *EbookmediaChapterAddRequest) GetValues() url.Values {
	return this.values
}

/* 电子书商品ID */
func (this *EbookmediaChapterAddRequest) SetAuctionId(value string) {
	this.Set("auction_id", value)
}

/* 电子书完本价格。当状态为完本（即status=3）时，必填；只支持两位小数点的正数，例如：12.50 */
func (this *EbookmediaChapterAddRequest) SetBookPrice(value string) {
	this.Set("book_price", value)
}

/* 章节内容，最大长度不超过50000个字符 */
func (this *EbookmediaChapterAddRequest) SetContent(value string) {
	this.Set("content", value)
}

/* 章节内容地址,只有通过授权的用户才可以传入此参数,不能超过500个字符 */
func (this *EbookmediaChapterAddRequest) SetContentUrl(value string) {
	this.Set("content_url", value)
}

/* 第三方的章节ID。不能为空，必须是大于0的数字，同一个商品下不能重复 */
func (this *EbookmediaChapterAddRequest) SetCpCid(value string) {
	this.Set("cp_cid", value)
}

/* 是否免费.值只能是0或者1
0：收费，1：免费 */
func (this *EbookmediaChapterAddRequest) SetIsFree(value string) {
	this.Set("is_free", value)
}

/* 上一章节的淘宝地址id。不能为空，若添加的章节是第一章，则填0 */
func (this *EbookmediaChapterAddRequest) SetPreTbid(value string) {
	this.Set("pre_tbid", value)
}

/* 章节的收费字数 */
func (this *EbookmediaChapterAddRequest) SetPriceCount(value string) {
	this.Set("price_count", value)
}

/* 电子书状态。目前仅支持以下三种
1：更新中，3：完本，2：暂停 */
func (this *EbookmediaChapterAddRequest) SetStatus(value string) {
	this.Set("status", value)
}

/* 章节标题。不能为空，不超过30个字符 */
func (this *EbookmediaChapterAddRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 电子书章节所属的卷ID */
func (this *EbookmediaChapterAddRequest) SetVolumeId(value string) {
	this.Set("volume_id", value)
}

/* 章节的总字数。总字数必须大于或等于收费字数 */
func (this *EbookmediaChapterAddRequest) SetWordCount(value string) {
	this.Set("word_count", value)
}

type EbookmediaChapterAddResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	EbookmediaChapterAddResponseResult `json:"ebookmedia_chapter_add_response"`
}
type EbookmediaChapterAddResponseResult struct {
	/* 电子书章节信息 */
	EbookChapter *EbookMediaChapter `json:"ebook_chapter"`
}

/*taobao.ebookmedia.chapter.delete*/
type EbookmediaChapterDeleteRequest struct {
	values url.Values
}

func (this *EbookmediaChapterDeleteRequest) GetApiMethodName() string {
	return "taobao.ebookmedia.chapter.delete"
}
func (this *EbookmediaChapterDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *EbookmediaChapterDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 电子书商品数字ID */
func (this *EbookmediaChapterDeleteRequest) SetAuctionId(value string) {
	this.Set("auction_id", value)
}

/* 章节的淘宝地址id */
func (this *EbookmediaChapterDeleteRequest) SetTbid(value string) {
	this.Set("tbid", value)
}

type EbookmediaChapterDeleteResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	EbookmediaChapterDeleteResponseResult `json:"ebookmedia_chapter_delete_response"`
}
type EbookmediaChapterDeleteResponseResult struct {
	/* 是否删除成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.ebookmedia.chapter.update*/
type EbookmediaChapterUpdateRequest struct {
	values url.Values
}

func (this *EbookmediaChapterUpdateRequest) GetApiMethodName() string {
	return "taobao.ebookmedia.chapter.update"
}
func (this *EbookmediaChapterUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *EbookmediaChapterUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 电子书商品ID */
func (this *EbookmediaChapterUpdateRequest) SetAuctionId(value string) {
	this.Set("auction_id", value)
}

/* 章节内容，最大长度不超过50000个字符 */
func (this *EbookmediaChapterUpdateRequest) SetContent(value string) {
	this.Set("content", value)
}

/* 章节内容地址,只有通过授权的用户才可以传入此参数,不能超过500个字符 */
func (this *EbookmediaChapterUpdateRequest) SetContentUrl(value string) {
	this.Set("content_url", value)
}

/* 是否免费.值只能是0或者1
0：收费，1：免费 */
func (this *EbookmediaChapterUpdateRequest) SetIsFree(value string) {
	this.Set("is_free", value)
}

/* 章节的收费字数 */
func (this *EbookmediaChapterUpdateRequest) SetPriceCount(value string) {
	this.Set("price_count", value)
}

/* 需要修改的章节的淘宝地址id。不能为空 */
func (this *EbookmediaChapterUpdateRequest) SetTbid(value string) {
	this.Set("tbid", value)
}

/* 章节标题。不能为空，不超过30个字符 */
func (this *EbookmediaChapterUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 章节的总字数。总字数必须大于或等于收费字数 */
func (this *EbookmediaChapterUpdateRequest) SetWordCount(value string) {
	this.Set("word_count", value)
}

type EbookmediaChapterUpdateResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	EbookmediaChapterUpdateResponseResult `json:"ebookmedia_chapter_update_response"`
}
type EbookmediaChapterUpdateResponseResult struct {
	/* 是否修改成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.ebookmedia.file.query*/
type EbookmediaFileQueryRequest struct {
	values url.Values
}

func (this *EbookmediaFileQueryRequest) GetApiMethodName() string {
	return "taobao.ebookmedia.file.query"
}
func (this *EbookmediaFileQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *EbookmediaFileQueryRequest) GetValues() url.Values {
	return this.values
}

/* 电子书商品ID */
func (this *EbookmediaFileQueryRequest) SetAuctionId(value string) {
	this.Set("auction_id", value)
}

type EbookmediaFileQueryResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	EbookmediaFileQueryResponseResult `json:"ebookmedia_file_query_response"`
}
type EbookmediaFileQueryResponseResult struct {
	/* 查询的结果集 */
	Results []*EbookMediaResource `json:"results"`
}

/*taobao.ebookmedia.resource.add*/
type EbookmediaResourceAddRequest struct {
	values url.Values
}

func (this *EbookmediaResourceAddRequest) GetApiMethodName() string {
	return "taobao.ebookmedia.resource.add"
}
func (this *EbookmediaResourceAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *EbookmediaResourceAddRequest) GetValues() url.Values {
	return this.values
}

/* 电子书商品数字ID */
func (this *EbookmediaResourceAddRequest) SetAuctionId(value string) {
	this.Set("auction_id", value)
}

/* 电子书文件云盘ID */
func (this *EbookmediaResourceAddRequest) SetFileId(value string) {
	this.Set("file_id", value)
}

/* 文件ID */
func (this *EbookmediaResourceAddRequest) SetStrFileId(value string) {
	this.Set("str_file_id", value)
}

/* 资源文件后缀名 */
func (this *EbookmediaResourceAddRequest) SetSuffix(value string) {
	this.Set("suffix", value)
}

/* 资源类型，（1：正文，0：试读) */
func (this *EbookmediaResourceAddRequest) SetType(value string) {
	this.Set("type", value)
}

type EbookmediaResourceAddResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	EbookmediaResourceAddResponseResult `json:"ebookmedia_resource_add_response"`
}
type EbookmediaResourceAddResponseResult struct {
	/* 是否修改成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.ebookmedia.volume.add.or.update*/
type EbookmediaVolumeAddOrUpdateRequest struct {
	values url.Values
}

func (this *EbookmediaVolumeAddOrUpdateRequest) GetApiMethodName() string {
	return "taobao.ebookmedia.volume.add.or.update"
}
func (this *EbookmediaVolumeAddOrUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *EbookmediaVolumeAddOrUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 商品数字ID */
func (this *EbookmediaVolumeAddOrUpdateRequest) SetAuctionId(value string) {
	this.Set("auction_id", value)
}

/* 卷信息简介。不能超过2000个字符<br /> 支持最大长度为：2000<br /> 支持的最大列表长度为：2000 */
func (this *EbookmediaVolumeAddOrUpdateRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 卷序号ID。此序号ID必须按照数字顺序添加，不能跳过，若有重复则覆盖原来的卷信息,序号不能超过50 */
func (this *EbookmediaVolumeAddOrUpdateRequest) SetOrderId(value string) {
	this.Set("order_id", value)
}

/* 电子书卷标题，不能超过30个字符<br /> 支持最大长度为：30<br /> 支持的最大列表长度为：30 */
func (this *EbookmediaVolumeAddOrUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

type EbookmediaVolumeAddOrUpdateResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	EbookmediaVolumeAddOrUpdateResponseResult `json:"ebookmedia_volume_add_or_update_response"`
}
type EbookmediaVolumeAddOrUpdateResponseResult struct {
	/* 电子书卷信息 */
	EbookVolume *EbookMediaVolume `json:"ebook_volume"`
}

/*taobao.item.ebook.add*/
type ItemEbookAddRequest struct {
	values url.Values
}

func (this *ItemEbookAddRequest) GetApiMethodName() string {
	return "taobao.item.ebook.add"
}
func (this *ItemEbookAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemEbookAddRequest) GetValues() url.Values {
	return this.values
}

/* 版权到期时间，如2013-08-06 */
func (this *ItemEbookAddRequest) SetCopyrightEnd(value string) {
	this.Set("copyright_end", value)
}

/* 版权文件。类型:jpg,png；大小不能超过2M<br /> 支持的文件类型为：jpg,png<br /> 支持的最大列表长度为：2097152 */
func (this *ItemEbookAddRequest) SetCopyrightFiles(value string) {
	this.Set("copyright_files", value)
}

/* 商品主图片。类型:JPG,PNG;最大:2M，可以选择不填，不填，则获得默认封面图片<br /> 支持的文件类型为：gif,jpg,jpeg,png<br /> 支持的最大列表长度为：2097152 */
func (this *ItemEbookAddRequest) SetCover(value string) {
	this.Set("cover", value)
}

/* 宝贝描述。字数要大于5个字符，小于25000个字符，受违禁词控制<br /> 支持最大长度为：200000<br /> 支持的最大列表长度为：200000 */
func (this *ItemEbookAddRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 电子书ISBN号 */
func (this *ItemEbookAddRequest) SetIsbn(value string) {
	this.Set("isbn", value)
}

/* 书名。长度不能超过60个字符<br /> 支持最大长度为：60<br /> 支持的最大列表长度为：60 */
func (this *ItemEbookAddRequest) SetName(value string) {
	this.Set("name", value)
}

/* 商品外部编码，该字段的最大长度是512个字节 */
func (this *ItemEbookAddRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 电子书的售卖价格
取值范围:0.00-9999.99;精确到2位小数;单位:元。如:5.07，表示:5元7分. */
func (this *ItemEbookAddRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 试读章节数，至少大于或等于1，最大值不能超过100 */
func (this *ItemEbookAddRequest) SetProbation(value string) {
	this.Set("probation", value)
}

/* 宝贝标题。不能超过60字符，受违禁词控制<br /> 支持最大长度为：120<br /> 支持的最大列表长度为：120 */
func (this *ItemEbookAddRequest) SetTitle(value string) {
	this.Set("title", value)
}

type ItemEbookAddResponse struct {
	*ErrorResponse             `json:"error_response,omitempty"`
	ItemEbookAddResponseResult `json:"item_ebook_add_response"`
}
type ItemEbookAddResponseResult struct {
	/* 商品结构,仅有numIid和created返回 */
	Item *Item `json:"item"`
}

/*taobao.item.ebook.update*/
type ItemEbookUpdateRequest struct {
	values url.Values
}

func (this *ItemEbookUpdateRequest) GetApiMethodName() string {
	return "taobao.item.ebook.update"
}
func (this *ItemEbookUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *ItemEbookUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 商品主图片。类型:JPG,PNG;最大:2M，可以选择不填，不填，则获得默认封面图片<br /> 支持的文件类型为：gif,jpg,jpeg,png<br /> 支持的最大列表长度为：2097152 */
func (this *ItemEbookUpdateRequest) SetCover(value string) {
	this.Set("cover", value)
}

/* 宝贝描述。字数要大于5个字符，小于25000个字符，受违禁词控制<br /> 支持最大长度为：200000<br /> 支持的最大列表长度为：200000 */
func (this *ItemEbookUpdateRequest) SetDesc(value string) {
	this.Set("desc", value)
}

/* 电子书商品数字id */
func (this *ItemEbookUpdateRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 商品外部编码，该字段的最大长度是512个字节 */
func (this *ItemEbookUpdateRequest) SetOuterId(value string) {
	this.Set("outer_id", value)
}

/* 电子书的售卖价格
取值范围:0.00-9999.99;精确到2位小数;单位:元。如:5.07，表示:5元7分. */
func (this *ItemEbookUpdateRequest) SetPrice(value string) {
	this.Set("price", value)
}

/* 试读章节数，至少大于或等于1，不超过100 */
func (this *ItemEbookUpdateRequest) SetProbation(value string) {
	this.Set("probation", value)
}

/* 宝贝标题。不能超过60字符，受违禁词控制<br /> 支持最大长度为：120<br /> 支持的最大列表长度为：120 */
func (this *ItemEbookUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

type ItemEbookUpdateResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	ItemEbookUpdateResponseResult `json:"item_ebook_update_response"`
}
type ItemEbookUpdateResponseResult struct {
	/* 商品结构里的num_iid，modified */
	Item *Item `json:"item"`
}

/*taobao.weitao.cloudtags.group.add*/
type WeitaoCloudtagsGroupAddRequest struct {
	values url.Values
}

func (this *WeitaoCloudtagsGroupAddRequest) GetApiMethodName() string {
	return "taobao.weitao.cloudtags.group.add"
}
func (this *WeitaoCloudtagsGroupAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoCloudtagsGroupAddRequest) GetValues() url.Values {
	return this.values
}

/* 分组的sql */
func (this *WeitaoCloudtagsGroupAddRequest) SetExpression(value string) {
	this.Set("expression", value)
}

/* 组的描述<br /> 支持最大长度为：100<br /> 支持的最大列表长度为：100 */
func (this *WeitaoCloudtagsGroupAddRequest) SetGroupDesc(value string) {
	this.Set("group_desc", value)
}

/* 组的名字<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *WeitaoCloudtagsGroupAddRequest) SetGroupName(value string) {
	this.Set("group_name", value)
}

type WeitaoCloudtagsGroupAddResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	WeitaoCloudtagsGroupAddResponseResult `json:"weitao_cloudtags_group_add_response"`
}
type WeitaoCloudtagsGroupAddResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
	/* 是否添加成功 */
	Result string `json:"result"`
}

/*taobao.weitao.cloudtags.group.analyse*/
type WeitaoCloudtagsGroupAnalyseRequest struct {
	values url.Values
}

func (this *WeitaoCloudtagsGroupAnalyseRequest) GetApiMethodName() string {
	return "taobao.weitao.cloudtags.group.analyse"
}
func (this *WeitaoCloudtagsGroupAnalyseRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoCloudtagsGroupAnalyseRequest) GetValues() url.Values {
	return this.values
}

/* 透视的sql */
func (this *WeitaoCloudtagsGroupAnalyseRequest) SetAnalyzeExpression(value string) {
	this.Set("analyze_expression", value)
}

/* 分组sql信息 */
func (this *WeitaoCloudtagsGroupAnalyseRequest) SetGroupExpression(value string) {
	this.Set("group_expression", value)
}

type WeitaoCloudtagsGroupAnalyseResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	WeitaoCloudtagsGroupAnalyseResponseResult `json:"weitao_cloudtags_group_analyse_response"`
}
type WeitaoCloudtagsGroupAnalyseResponseResult struct {
	/* 透视返回结果 */
	DataList *AnalyzeDO `json:"data_list"`
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.weitao.cloudtags.group.custom.add*/
type WeitaoCloudtagsGroupCustomAddRequest struct {
	values url.Values
}

func (this *WeitaoCloudtagsGroupCustomAddRequest) GetApiMethodName() string {
	return "taobao.weitao.cloudtags.group.custom.add"
}
func (this *WeitaoCloudtagsGroupCustomAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoCloudtagsGroupCustomAddRequest) GetValues() url.Values {
	return this.values
}

/* 所要创建自定义分组的描述<br /> 支持最大长度为：256<br /> 支持的最大列表长度为：256 */
func (this *WeitaoCloudtagsGroupCustomAddRequest) SetGroupDesc(value string) {
	this.Set("group_desc", value)
}

/* 想要创建的自定义分组名称<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *WeitaoCloudtagsGroupCustomAddRequest) SetGroupName(value string) {
	this.Set("group_name", value)
}

/* 上传的文件内容转换成的字节数组。文件需要使用UTF-8编码方式编写。其中内容为用户id或手机号用英文逗号连接起来的单行文本。<br /> 支持的最大列表长度为：2097152 */
func (this *WeitaoCloudtagsGroupCustomAddRequest) SetUserListFileContent(value string) {
	this.Set("user_list_file_content", value)
}

type WeitaoCloudtagsGroupCustomAddResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	WeitaoCloudtagsGroupCustomAddResponseResult `json:"weitao_cloudtags_group_custom_add_response"`
}
type WeitaoCloudtagsGroupCustomAddResponseResult struct {
	/* 操作是否成功 */
	IsSuccess bool `json:"is_success"`
	/* 新创建的自定义分组id，未生效。 */
	Result string `json:"result"`
}

/*taobao.weitao.cloudtags.group.delete*/
type WeitaoCloudtagsGroupDeleteRequest struct {
	values url.Values
}

func (this *WeitaoCloudtagsGroupDeleteRequest) GetApiMethodName() string {
	return "taobao.weitao.cloudtags.group.delete"
}
func (this *WeitaoCloudtagsGroupDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoCloudtagsGroupDeleteRequest) GetValues() url.Values {
	return this.values
}

/* 需要删除的用户分组ID，必须为当前操作用户的粉丝分组ID<br /> 支持最小值为：1 */
func (this *WeitaoCloudtagsGroupDeleteRequest) SetGroupId(value string) {
	this.Set("group_id", value)
}

type WeitaoCloudtagsGroupDeleteResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	WeitaoCloudtagsGroupDeleteResponseResult `json:"weitao_cloudtags_group_delete_response"`
}
type WeitaoCloudtagsGroupDeleteResponseResult struct {
	/* 业务是否执行成功，result仅是系统调用是否成功 */
	IsSuccess bool `json:"is_success"`
	/* 是否成功 */
	Result bool `json:"result"`
}

/*taobao.weitao.cloudtags.group.get*/
type WeitaoCloudtagsGroupGetRequest struct {
	values url.Values
}

func (this *WeitaoCloudtagsGroupGetRequest) GetApiMethodName() string {
	return "taobao.weitao.cloudtags.group.get"
}
func (this *WeitaoCloudtagsGroupGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoCloudtagsGroupGetRequest) GetValues() url.Values {
	return this.values
}

/* 分组状态 */
func (this *WeitaoCloudtagsGroupGetRequest) SetStatus(value string) {
	this.Set("status", value)
}

type WeitaoCloudtagsGroupGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	WeitaoCloudtagsGroupGetResponseResult `json:"weitao_cloudtags_group_get_response"`
}
type WeitaoCloudtagsGroupGetResponseResult struct {
	/* 分组列表信息 */
	GroupList []*CloudGroup `json:"group_list"`
}

/*taobao.weitao.cloudtags.group.getbyid*/
type WeitaoCloudtagsGroupGetbyidRequest struct {
	values url.Values
}

func (this *WeitaoCloudtagsGroupGetbyidRequest) GetApiMethodName() string {
	return "taobao.weitao.cloudtags.group.getbyid"
}
func (this *WeitaoCloudtagsGroupGetbyidRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoCloudtagsGroupGetbyidRequest) GetValues() url.Values {
	return this.values
}

/* 分组id */
func (this *WeitaoCloudtagsGroupGetbyidRequest) SetGroupId(value string) {
	this.Set("group_id", value)
}

type WeitaoCloudtagsGroupGetbyidResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	WeitaoCloudtagsGroupGetbyidResponseResult `json:"weitao_cloudtags_group_getbyid_response"`
}
type WeitaoCloudtagsGroupGetbyidResponseResult struct {
	/* 分组列表信息 */
	GroupList []*CloudGroup `json:"group_list"`
}

/*taobao.weitao.cloudtags.tags.get*/
type WeitaoCloudtagsTagsGetRequest struct {
	values url.Values
}

func (this *WeitaoCloudtagsTagsGetRequest) GetApiMethodName() string {
	return "taobao.weitao.cloudtags.tags.get"
}
func (this *WeitaoCloudtagsTagsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoCloudtagsTagsGetRequest) GetValues() url.Values {
	return this.values
}

type WeitaoCloudtagsTagsGetResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	WeitaoCloudtagsTagsGetResponseResult `json:"weitao_cloudtags_tags_get_response"`
}
type WeitaoCloudtagsTagsGetResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
	/* 具体的标签数据 */
	TagList []*CloudsTag `json:"tag_list"`
}

/*taobao.weitao.comments.get*/
type WeitaoCommentsGetRequest struct {
	values url.Values
}

func (this *WeitaoCommentsGetRequest) GetApiMethodName() string {
	return "taobao.weitao.comments.get"
}
func (this *WeitaoCommentsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoCommentsGetRequest) GetValues() url.Values {
	return this.values
}

/* 翻页时当前页，如果time_stamp参数不设置，此值必需传入<br /> 支持最小值为：1 */
func (this *WeitaoCommentsGetRequest) SetCurrentPage(value string) {
	this.Set("current_page", value)
}

/* 向前后翻页，direction=0，向上翻;direction=1 向下翻<br /> 支持最大值为：1<br /> 支持最小值为：0<br /> 支持的最大列表长度为：2 */
func (this *WeitaoCommentsGetRequest) SetDirection(value string) {
	this.Set("direction", value)
}

/* 查询评论所对应feed的Id<br /> 支持最小值为：1 */
func (this *WeitaoCommentsGetRequest) SetFeedId(value string) {
	this.Set("feed_id", value)
}

/* 翻页查询一页大小<br /> 支持最大值为：100<br /> 支持最小值为：1 */
func (this *WeitaoCommentsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 翻页时间戳，没有时间参数，则说明是跳页查询或者第一页，current_page有效，direction无效；有时间参数，则说明是上下翻页，current_page无效，direction有效；
如果current_page=1，则time_stamp无效，强制刷新为第一页。<br /> 支持的最大列表长度为：15 */
func (this *WeitaoCommentsGetRequest) SetTimeStamp(value string) {
	this.Set("time_stamp", value)
}

type WeitaoCommentsGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	WeitaoCommentsGetResponseResult `json:"weitao_comments_get_response"`
}
type WeitaoCommentsGetResponseResult struct {
	/* 评论列表 */
	CommentList []*FeedComment `json:"comment_list"`
	/* 接口执行是否成功 */
	Result bool `json:"result"`
	/* feed的总记录数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.weitao.feed.add*/
type WeitaoFeedAddRequest struct {
	values url.Values
}

func (this *WeitaoFeedAddRequest) GetApiMethodName() string {
	return "taobao.weitao.feed.add"
}
func (this *WeitaoFeedAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoFeedAddRequest) GetValues() url.Values {
	return this.values
}

/* 封面图片地址，必须为自己在图片空间上传的图片<br /> 支持最大长度为：1000<br /> 支持的最大列表长度为：1000 */
func (this *WeitaoFeedAddRequest) SetCoverPic(value string) {
	this.Set("cover_pic", value)
}

/* feed的区域内容，有两种类型type=text或者type=pic。当type=text时，为文本内容，请输入description对应的文本值；当type=pic时，为图片内容，请输入pic对应的图片URL，图片的URL必须为当前操作用户(卖家)的图片空间图片地址,并且图片宽度要大于480，高宽比大于1/3小于2/3。支持type=text和type=pic的混排json<br /> 支持最大长度为：3000<br /> 支持的最大列表长度为：3000 */
func (this *WeitaoFeedAddRequest) SetJsonTiles(value string) {
	this.Set("json_tiles", value)
}

/* feed详情里允许放的一个超连接,不允许微信地址，最大长度256字符；输入link_desc后必须输入此参数<br /> 支持最大长度为：256<br /> 支持的最大列表长度为：256 */
func (this *WeitaoFeedAddRequest) SetLink(value string) {
	this.Set("link", value)
}

/* link超连接的描述，最大长度15字符，utf-8,byte[]长度22，允许为空<br /> 支持最大长度为：22<br /> 支持的最大列表长度为：22 */
func (this *WeitaoFeedAddRequest) SetLinkDesc(value string) {
	this.Set("link_desc", value)
}

/* 手机等客户端是否能够查看feed详情，如果为false，在feeds流时点击就进入到插件详情地址，否则进入查看feed详情 */
func (this *WeitaoFeedAddRequest) SetShowDetail(value string) {
	this.Set("show_detail", value)
}

/* 发送的微淘内容的标题<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *WeitaoFeedAddRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 业务参数，用key=value格式，有多个时用'&'连接 */
func (this *WeitaoFeedAddRequest) SetUrlParam(value string) {
	this.Set("url_param", value)
}

type WeitaoFeedAddResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	WeitaoFeedAddResponseResult `json:"weitao_feed_add_response"`
}
type WeitaoFeedAddResponseResult struct {
	/* 发布feed成功后返回的feedId */
	FeedId int64 `json:"feed_id"`
	/* 是否成功 */
	Result bool `json:"result"`
}

/*taobao.weitao.feed.get*/
type WeitaoFeedGetRequest struct {
	values url.Values
}

func (this *WeitaoFeedGetRequest) GetApiMethodName() string {
	return "taobao.weitao.feed.get"
}
func (this *WeitaoFeedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoFeedGetRequest) GetValues() url.Values {
	return this.values
}

/* feed的Id<br /> 支持最小值为：1 */
func (this *WeitaoFeedGetRequest) SetFeedId(value string) {
	this.Set("feed_id", value)
}

type WeitaoFeedGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	WeitaoFeedGetResponseResult `json:"weitao_feed_get_response"`
}
type WeitaoFeedGetResponseResult struct {
	/* feed的详细信息 */
	FeedDetail *FeedDetail `json:"feed_detail"`
	/* 接口执行是否成功 */
	Result bool `json:"result"`
}

/*taobao.weitao.feed.isrelation*/
type WeitaoFeedIsrelationRequest struct {
	values url.Values
}

func (this *WeitaoFeedIsrelationRequest) GetApiMethodName() string {
	return "taobao.weitao.feed.isrelation"
}
func (this *WeitaoFeedIsrelationRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoFeedIsrelationRequest) GetValues() url.Values {
	return this.values
}

/* 要查询的粉丝的淘宝昵称 */
func (this *WeitaoFeedIsrelationRequest) SetFansNick(value string) {
	this.Set("fans_nick", value)
}

/* 要查询的公共账号的淘宝昵称 */
func (this *WeitaoFeedIsrelationRequest) SetSellerNick(value string) {
	this.Set("seller_nick", value)
}

type WeitaoFeedIsrelationResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	WeitaoFeedIsrelationResponseResult `json:"weitao_feed_isrelation_response"`
}
type WeitaoFeedIsrelationResponseResult struct {
	/* 是否关注 */
	Result int64 `json:"result"`
}

/*taobao.weitao.feed.remained*/
type WeitaoFeedRemainedRequest struct {
	values url.Values
}

func (this *WeitaoFeedRemainedRequest) GetApiMethodName() string {
	return "taobao.weitao.feed.remained"
}
func (this *WeitaoFeedRemainedRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoFeedRemainedRequest) GetValues() url.Values {
	return this.values
}

type WeitaoFeedRemainedResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	WeitaoFeedRemainedResponseResult `json:"weitao_feed_remained_response"`
}
type WeitaoFeedRemainedResponseResult struct {
	/* 今天还能发送多少条Feed */
	RemainedCount int64 `json:"remained_count"`
	/* 今天发送的Feed的数目 */
	SendCount int64 `json:"send_count"`
}

/*taobao.weitao.feeds.get*/
type WeitaoFeedsGetRequest struct {
	values url.Values
}

func (this *WeitaoFeedsGetRequest) GetApiMethodName() string {
	return "taobao.weitao.feeds.get"
}
func (this *WeitaoFeedsGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoFeedsGetRequest) GetValues() url.Values {
	return this.values
}

/* 翻页时当前页，如果time_stamp参数不设置，此值必需传入 */
func (this *WeitaoFeedsGetRequest) SetCurrentPage(value string) {
	this.Set("current_page", value)
}

/* 向前后翻页，direction=1，向上翻;direction=0 向下翻<br /> 支持最大值为：1<br /> 支持最小值为：0<br /> 支持的最大列表长度为：2 */
func (this *WeitaoFeedsGetRequest) SetDirection(value string) {
	this.Set("direction", value)
}

/* 翻页查询一页大小<br /> 支持最大值为：100<br /> 支持最小值为：1<br /> 支持的最大列表长度为：3 */
func (this *WeitaoFeedsGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 翻页时间戳，没有时间参数，则说明是跳页查询或者第一页，current_page有效，direction无效；有时间参数，则说明是上下翻页，current_page无效，direction有效<br /> 支持的最大列表长度为：15 */
func (this *WeitaoFeedsGetRequest) SetTimeStamp(value string) {
	this.Set("time_stamp", value)
}

type WeitaoFeedsGetResponse struct {
	*ErrorResponse               `json:"error_response,omitempty"`
	WeitaoFeedsGetResponseResult `json:"weitao_feeds_get_response"`
}
type WeitaoFeedsGetResponseResult struct {
	/* 返回的feed列表 */
	FeedList []*SimpleFeed `json:"feed_list"`
	/* 接口执行是否成功 */
	Result bool `json:"result"`
	/* feed的总记录数 */
	TotalCount int64 `json:"total_count"`
}

/*taobao.weitao.menu.create*/
type WeitaoMenuCreateRequest struct {
	values url.Values
}

func (this *WeitaoMenuCreateRequest) GetApiMethodName() string {
	return "taobao.weitao.menu.create"
}
func (this *WeitaoMenuCreateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoMenuCreateRequest) GetValues() url.Values {
	return this.values
}

/* 支持的type共4种，宝贝分类、h5 url、wangwang和tel，具体见示例：[{ "name": "宝贝分类", "sub_button": [ { "name": "新品", "type": "shopCat", "catId": "111111" }, { "name": "特惠宝贝", "type": "shopCat", "catId": "213214" }, { "name": "特惠宝贝", "type": "shopCat", "catId": "21342435" }] }, { "name": "活动", "sub_button": [  { "name": "我的微官网", "type": "view", "url": "http://mweb.taobao.com" }, {"name": "我的特惠品", "type": "view" ,"url": "http://mpromotion.taobao.com" }, { "name": "我的活动", "type": "view", "url": "http://test.we.app.jae.m.taobao.com?seller_nick=test&seller_id=123124" }] }, { "name": "客服", "sub_button": [  { "name": "客服", "type": "wangwang", "wangwang": "商家测试帐号xx" }, {{ "name": "电话", "type": "tel", "tel": "66668888" }] }] */
func (this *WeitaoMenuCreateRequest) SetMenuString(value string) {
	this.Set("menu_string", value)
}

type WeitaoMenuCreateResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	WeitaoMenuCreateResponseResult `json:"weitao_menu_create_response"`
}
type WeitaoMenuCreateResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
	/* 菜单 */
	Menu string `json:"menu"`
}

/*taobao.weitao.menu.delete*/
type WeitaoMenuDeleteRequest struct {
	values url.Values
}

func (this *WeitaoMenuDeleteRequest) GetApiMethodName() string {
	return "taobao.weitao.menu.delete"
}
func (this *WeitaoMenuDeleteRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoMenuDeleteRequest) GetValues() url.Values {
	return this.values
}

type WeitaoMenuDeleteResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	WeitaoMenuDeleteResponseResult `json:"weitao_menu_delete_response"`
}
type WeitaoMenuDeleteResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.weitao.menu.query*/
type WeitaoMenuQueryRequest struct {
	values url.Values
}

func (this *WeitaoMenuQueryRequest) GetApiMethodName() string {
	return "taobao.weitao.menu.query"
}
func (this *WeitaoMenuQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WeitaoMenuQueryRequest) GetValues() url.Values {
	return this.values
}

type WeitaoMenuQueryResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	WeitaoMenuQueryResponseResult `json:"weitao_menu_query_response"`
}
type WeitaoMenuQueryResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
	/* 菜单数据 */
	Menu string `json:"menu"`
}

/*taobao.wireless.bunting.item.shorturl.create*/
type WirelessBuntingItemShorturlCreateRequest struct {
	values url.Values
}

func (this *WirelessBuntingItemShorturlCreateRequest) GetApiMethodName() string {
	return "taobao.wireless.bunting.item.shorturl.create"
}
func (this *WirelessBuntingItemShorturlCreateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WirelessBuntingItemShorturlCreateRequest) GetValues() url.Values {
	return this.values
}

/* 商品ID */
func (this *WirelessBuntingItemShorturlCreateRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

type WirelessBuntingItemShorturlCreateResponse struct {
	*ErrorResponse                                  `json:"error_response,omitempty"`
	WirelessBuntingItemShorturlCreateResponseResult `json:"wireless_bunting_item_shorturl_create_response"`
}
type WirelessBuntingItemShorturlCreateResponseResult struct {
	/* 短地址 */
	Shorturl string `json:"shorturl"`
}

/*taobao.wireless.bunting.shop.shorturl.create*/
type WirelessBuntingShopShorturlCreateRequest struct {
	values url.Values
}

func (this *WirelessBuntingShopShorturlCreateRequest) GetApiMethodName() string {
	return "taobao.wireless.bunting.shop.shorturl.create"
}
func (this *WirelessBuntingShopShorturlCreateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WirelessBuntingShopShorturlCreateRequest) GetValues() url.Values {
	return this.values
}

/* 商店id */
func (this *WirelessBuntingShopShorturlCreateRequest) SetShopId(value string) {
	this.Set("shop_id", value)
}

type WirelessBuntingShopShorturlCreateResponse struct {
	*ErrorResponse                                  `json:"error_response,omitempty"`
	WirelessBuntingShopShorturlCreateResponseResult `json:"wireless_bunting_shop_shorturl_create_response"`
}
type WirelessBuntingShopShorturlCreateResponseResult struct {
	/* 短链 */
	Shorturl string `json:"shorturl"`
}

/*taobao.wireless.qrcode.get*/
type WirelessQrcodeGetRequest struct {
	values url.Values
}

func (this *WirelessQrcodeGetRequest) GetApiMethodName() string {
	return "taobao.wireless.qrcode.get"
}
func (this *WirelessQrcodeGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *WirelessQrcodeGetRequest) GetValues() url.Values {
	return this.values
}

/* 二维码高度 */
func (this *WirelessQrcodeGetRequest) SetHeight(value string) {
	this.Set("height", value)
}

/* 用户的淘宝nick */
func (this *WirelessQrcodeGetRequest) SetNick(value string) {
	this.Set("nick", value)
}

/* url参数 */
func (this *WirelessQrcodeGetRequest) SetUrlparam(value string) {
	this.Set("urlparam", value)
}

/* 二维码宽度 */
func (this *WirelessQrcodeGetRequest) SetWidth(value string) {
	this.Set("width", value)
}

type WirelessQrcodeGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	WirelessQrcodeGetResponseResult `json:"wireless_qrcode_get_response"`
}
type WirelessQrcodeGetResponseResult struct {
	/* 二维码图片地址 */
	Module string `json:"module"`
}

/*taobao.sp.content.custom.publish*/
type SpContentCustomPublishRequest struct {
	values url.Values
}

func (this *SpContentCustomPublishRequest) GetApiMethodName() string {
	return "taobao.sp.content.custom.publish"
}
func (this *SpContentCustomPublishRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentCustomPublishRequest) GetValues() url.Values {
	return this.values
}

/* 内容的自定义分类，数值为文本内容，主要用于区分内容的分类（譬如连衣裙、T恤、阿迪达斯等），分类名称的长度限制为(0,5] (单位是字符，不区分中英文)，分类名称中不能包含非法内容，且一个站点下所拥有的总自定义分类数量不能超过16个<br /> 支持最大长度为：5<br /> 支持的最大列表长度为：5 */
func (this *SpContentCustomPublishRequest) SetClassname(value string) {
	this.Set("classname", value)
}

/* 自定义内容的正文，数值为文本内容（html形式），长度限制为[100,20000] (单位是字符，不区分中英文), 内容中不能有外链，不能有恶意脚本；内容中包含的商品链接系统自自动提取并保存起来;多个商品链接以空格隔开(如 href=http://detail.tmall.com/item.htm?id=35743839682 href=http://item.taobao.com/item.htm?id=36366644805 )<br /> 支持最大长度为：20000<br /> 支持的最大列表长度为：20000 */
func (this *SpContentCustomPublishRequest) SetContent(value string) {
	this.Set("content", value)
}

/* 内容的detail页面地址，数值为html链接，主要用于展现内容的detail信息的 */
func (this *SpContentCustomPublishRequest) SetDetailurl(value string) {
	this.Set("detailurl", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentCustomPublishRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

/* 内容的自定义标签，数值为文本内容，多个标签以英文逗号“,”分割。
主要用于细化内容的分类（譬如小清新,棉质,雪纺等），标签名称的长度限制为[0,6] (单位是字符，不区分中英文)，标签名称中不能包含非法内容，且一个内容关联的标签数目不能超过6个 */
func (this *SpContentCustomPublishRequest) SetTags(value string) {
	this.Set("tags", value)
}

/* 内容标题,标题的长度限制为(0,32](单位是字符，不区分中英文)<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentCustomPublishRequest) SetTitle(value string) {
	this.Set("title", value)
}

type SpContentCustomPublishResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	SpContentCustomPublishResponseResult `json:"sp_content_custom_publish_response"`
}
type SpContentCustomPublishResponseResult struct {
	/* 主键ID */
	Value string `json:"value"`
}

/*taobao.sp.content.custom.update*/
type SpContentCustomUpdateRequest struct {
	values url.Values
}

func (this *SpContentCustomUpdateRequest) GetApiMethodName() string {
	return "taobao.sp.content.custom.update"
}
func (this *SpContentCustomUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentCustomUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 内容的自定义分类，数值为文本内容，主要用于区分内容的分类（譬如连衣裙、T恤、阿迪达斯等），分类名称的长度限制为(0,5] (单位是字符，不区分中英文)，分类名称中不能包含非法内容，且一个站点下所拥有的总自定义分类数量不能超过16个<br /> 支持最大长度为：5<br /> 支持的最大列表长度为：5 */
func (this *SpContentCustomUpdateRequest) SetClassname(value string) {
	this.Set("classname", value)
}

/* 自定义内容的正文，数值为文本内容（html形式），长度限制为[100,20000] (单位是字符，不区分中英文), 内容中不能有外链，不能有恶意脚本；内容中包含的商品链接系统自自动提取并保存起来;多个商品链接以空格隔开(如 href=http://detail.tmall.com/item.htm?id=35743839682 href=http://item.taobao.com/item.htm?id=36366644805 )<br /> 支持最大长度为：20000<br /> 支持的最大列表长度为：20000 */
func (this *SpContentCustomUpdateRequest) SetContent(value string) {
	this.Set("content", value)
}

/* 内容的detail页面地址，数值为html链接，主要用于展现内容的detail信息的 */
func (this *SpContentCustomUpdateRequest) SetDetailurl(value string) {
	this.Set("detailurl", value)
}

/* 内容ID */
func (this *SpContentCustomUpdateRequest) SetId(value string) {
	this.Set("id", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentCustomUpdateRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

/* 内容的自定义标签，数值为文本内容，多个标签以逗号“,”分割。
主要用于细化内容的分类（譬如小清新，棉质、雪纺等），标签名称的长度限制为[0,6] (单位是字符，不区分中英文)，标签名称中不能包含非法内容，且一个内容关联的标签数目不能超过6个 */
func (this *SpContentCustomUpdateRequest) SetTags(value string) {
	this.Set("tags", value)
}

/* 内容标题,标题的长度限制为(0,32](单位是字符，不区分中英文)<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentCustomUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

type SpContentCustomUpdateResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	SpContentCustomUpdateResponseResult `json:"sp_content_custom_update_response"`
}
type SpContentCustomUpdateResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.sp.content.deletebyid*/
type SpContentDeletebyidRequest struct {
	values url.Values
}

func (this *SpContentDeletebyidRequest) GetApiMethodName() string {
	return "taobao.sp.content.deletebyid"
}
func (this *SpContentDeletebyidRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentDeletebyidRequest) GetValues() url.Values {
	return this.values
}

/* 内容的主键ID */
func (this *SpContentDeletebyidRequest) SetId(value string) {
	this.Set("id", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentDeletebyidRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpContentDeletebyidResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	SpContentDeletebyidResponseResult `json:"sp_content_deletebyid_response"`
}
type SpContentDeletebyidResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.sp.content.deletebyids*/
type SpContentDeletebyidsRequest struct {
	values url.Values
}

func (this *SpContentDeletebyidsRequest) GetApiMethodName() string {
	return "taobao.sp.content.deletebyids"
}
func (this *SpContentDeletebyidsRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentDeletebyidsRequest) GetValues() url.Values {
	return this.values
}

/* 主键ID列表，以逗号,分割 */
func (this *SpContentDeletebyidsRequest) SetIds(value string) {
	this.Set("ids", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentDeletebyidsRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpContentDeletebyidsResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	SpContentDeletebyidsResponseResult `json:"sp_content_deletebyids_response"`
}
type SpContentDeletebyidsResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.sp.content.deleteclass*/
type SpContentDeleteclassRequest struct {
	values url.Values
}

func (this *SpContentDeleteclassRequest) GetApiMethodName() string {
	return "taobao.sp.content.deleteclass"
}
func (this *SpContentDeleteclassRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentDeleteclassRequest) GetValues() url.Values {
	return this.values
}

/* 分类名称 */
func (this *SpContentDeleteclassRequest) SetClassname(value string) {
	this.Set("classname", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentDeleteclassRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpContentDeleteclassResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	SpContentDeleteclassResponseResult `json:"sp_content_deleteclass_response"`
}
type SpContentDeleteclassResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.sp.content.deletetag*/
type SpContentDeletetagRequest struct {
	values url.Values
}

func (this *SpContentDeletetagRequest) GetApiMethodName() string {
	return "taobao.sp.content.deletetag"
}
func (this *SpContentDeletetagRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentDeletetagRequest) GetValues() url.Values {
	return this.values
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentDeletetagRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

/* 标签名称<br /> 支持最大长度为：6<br /> 支持的最大列表长度为：6 */
func (this *SpContentDeletetagRequest) SetTagname(value string) {
	this.Set("tagname", value)
}

type SpContentDeletetagResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	SpContentDeletetagResponseResult `json:"sp_content_deletetag_response"`
}
type SpContentDeletetagResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.sp.content.detail.get*/
type SpContentDetailGetRequest struct {
	values url.Values
}

func (this *SpContentDetailGetRequest) GetApiMethodName() string {
	return "taobao.sp.content.detail.get"
}
func (this *SpContentDetailGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentDetailGetRequest) GetValues() url.Values {
	return this.values
}

/* 内容的主键ID */
func (this *SpContentDetailGetRequest) SetId(value string) {
	this.Set("id", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentDetailGetRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpContentDetailGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	SpContentDetailGetResponseResult `json:"sp_content_detail_get_response"`
}
type SpContentDetailGetResponseResult struct {
	/* 内容详情 */
	Content *SpContentDOForDetail `json:"content"`
}

/*taobao.sp.content.getallclass*/
type SpContentGetallclassRequest struct {
	values url.Values
}

func (this *SpContentGetallclassRequest) GetApiMethodName() string {
	return "taobao.sp.content.getallclass"
}
func (this *SpContentGetallclassRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentGetallclassRequest) GetValues() url.Values {
	return this.values
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentGetallclassRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpContentGetallclassResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	SpContentGetallclassResponseResult `json:"sp_content_getallclass_response"`
}
type SpContentGetallclassResponseResult struct {
	/* 返回Json格式的分类名称列表 */
	Value string `json:"value"`
}

/*taobao.sp.content.getalltag*/
type SpContentGetalltagRequest struct {
	values url.Values
}

func (this *SpContentGetalltagRequest) GetApiMethodName() string {
	return "taobao.sp.content.getalltag"
}
func (this *SpContentGetalltagRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentGetalltagRequest) GetValues() url.Values {
	return this.values
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentGetalltagRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpContentGetalltagResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	SpContentGetalltagResponseResult `json:"sp_content_getalltag_response"`
}
type SpContentGetalltagResponseResult struct {
	/* 返回JSON格式的TagName列表 */
	Value string `json:"value"`
}

/*taobao.sp.content.getcount*/
type SpContentGetcountRequest struct {
	values url.Values
}

func (this *SpContentGetcountRequest) GetApiMethodName() string {
	return "taobao.sp.content.getcount"
}
func (this *SpContentGetcountRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentGetcountRequest) GetValues() url.Values {
	return this.values
}

/* JSON格式的查询条件：
type(Integer，选填) ：内容类型，包括三种： 1 -- 宝贝，2 -- 图片，3 -- 心得；0或者不填则获取所有类型的内容；
   className(String，选填)：内容的自定义分类名称；
   tags(String，选填)：内容的自定义标签名称，多个标签以逗号“,”分割。如果设置了多个标签，则他们是或的关系；
   title(String，选填): 内容标题，此条件为模糊搜索， 慎用，可能比较慢；
   comments (String，选填)：内容的推荐理由，此条件为模糊搜索，慎用，可能会比较慢 */
func (this *SpContentGetcountRequest) SetQuery(value string) {
	this.Set("query", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentGetcountRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpContentGetcountResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	SpContentGetcountResponseResult `json:"sp_content_getcount_response"`
}
type SpContentGetcountResponseResult struct {
	/* 返回记录数 */
	Value string `json:"value"`
}

/*taobao.sp.content.getdetailbyid*/
type SpContentGetdetailbyidRequest struct {
	values url.Values
}

func (this *SpContentGetdetailbyidRequest) GetApiMethodName() string {
	return "taobao.sp.content.getdetailbyid"
}
func (this *SpContentGetdetailbyidRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentGetdetailbyidRequest) GetValues() url.Values {
	return this.values
}

/* 内容的主键ID */
func (this *SpContentGetdetailbyidRequest) SetId(value string) {
	this.Set("id", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentGetdetailbyidRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpContentGetdetailbyidResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	SpContentGetdetailbyidResponseResult `json:"sp_content_getdetailbyid_response"`
}
type SpContentGetdetailbyidResponseResult struct {
	/* Json格式value (Map<String,Object>)：返回查询结果，具体包含的属性信息如下：
	id(Long)：内容的主键ID；
	type(Integer) ：内容类型；
	className(String)：内容的自定义分类名称；
	picUrl(String)：内容关联的图片地址，以“,”分割；
	title(String)：内容标题；
	comments(String)：内容推荐理由；
	featureMap(Map<String,String>)：内容的扩展属性；
	likeNum(Long)：内容喜欢数；
	viewNum(Long)：内容浏览数；
	commentNum(Long)：内容评论数；
	shareNum(Long)：内容分享数；
	gmtModified(Date)：修改时间；
	gmtCreate(Date) : 发布时间；
	content(String)：内容的心得（只有type = 3的时候才有此值）；
	tags(String)：内容的自定义标签，多个标签以“,”分割。；
	items(String)：内容关联的商品列表，数值为商品的detail链接地址，多个宝贝以“,”分割。 */
	Value string `json:"value"`
}

/*taobao.sp.content.getpage*/
type SpContentGetpageRequest struct {
	values url.Values
}

func (this *SpContentGetpageRequest) GetApiMethodName() string {
	return "taobao.sp.content.getpage"
}
func (this *SpContentGetpageRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentGetpageRequest) GetValues() url.Values {
	return this.values
}

/* JOSN格式的分页参数：
page： 查询起始页 >=1
rows： 分页大小 <= 50
sort : 排序字段，支持的排序类型包括：gmtModified – 最后修改时间；likeNum – 喜欢数；viewNum – 浏览数；
order：排序方式：asc – 顺序；desc – 倒序 */
func (this *SpContentGetpageRequest) SetPagerequest(value string) {
	this.Set("pagerequest", value)
}

/* JSON格式的查询条件：
type(Integer，选填) ：内容类型，包括三种： 1 -- 宝贝，2 -- 图片，3 -- 自定义，4 -- 图文；
   className(String，选填)：内容的自定义分类名称；
   tags(String，选填)：内容的自定义标签名称，多个标签以逗号“,”分割。如果设置了多个标签，则他们是或的关系；
   title(String，选填): 内容标题，此条件为模糊搜索， 慎用，可能比较慢； */
func (this *SpContentGetpageRequest) SetQuery(value string) {
	this.Set("query", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentGetpageRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpContentGetpageResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	SpContentGetpageResponseResult `json:"sp_content_getpage_response"`
}
type SpContentGetpageResponseResult struct {
	/* JSON格式的 */
	Value string `json:"value"`
}

/*taobao.sp.content.graphic.publish*/
type SpContentGraphicPublishRequest struct {
	values url.Values
}

func (this *SpContentGraphicPublishRequest) GetApiMethodName() string {
	return "taobao.sp.content.graphic.publish"
}
func (this *SpContentGraphicPublishRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentGraphicPublishRequest) GetValues() url.Values {
	return this.values
}

/* 内容的自定义分类，数值为文本内容，主要用于区分内容的分类（譬如连衣裙、T恤、阿迪达斯等），分类名称的长度限制为(0,5] (单位是字符，不区分中英文)，分类名称中不能包含非法内容，且一个站点下所拥有的总自定义分类数量不能超过16个<br /> 支持最大长度为：5<br /> 支持的最大列表长度为：5 */
func (this *SpContentGraphicPublishRequest) SetClassname(value string) {
	this.Set("classname", value)
}

/* 图文内容，Json格式的数据。
必须是数组类型元素列表。展示时每一个元素会单独一行显示。
type: 表示图文元素的类型，目前支持3种类型的元素
1:text;文本元素；
2:image;图片元素；
3:item;宝贝元素；

value:表示图文类型的元素值。
当类型为text时，value值就是文本类型字符串；
当类型为image时，value值就是图片地址;
当类型为item时，value值就是宝贝ID; */
func (this *SpContentGraphicPublishRequest) SetContents(value string) {
	this.Set("contents", value)
}

/* 封面图片地址 图文的封面尺寸不能低于680*680，否则该条图文将无法同步至微淘 图片地址必须匹配正则表达式:http://(img01|img02|img03|img04|img1|img2|img3|img4)\.(taobaocdn|tbcdn)\.(com|net|cn).* */
func (this *SpContentGraphicPublishRequest) SetCoverpicurl(value string) {
	this.Set("coverpicurl", value)
}

/* 内容的detail页面地址，数值为html链接，主要用于展现内容的detail信息的 */
func (this *SpContentGraphicPublishRequest) SetDetailurl(value string) {
	this.Set("detailurl", value)
}

/* 是否要发送到微淘广播流 */
func (this *SpContentGraphicPublishRequest) SetIntimeline(value string) {
	this.Set("intimeline", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentGraphicPublishRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

/* 内容的自定义标签，数值为文本内容，多个标签以逗号“,”分割。
主要用于细化内容的分类（譬如小清新，棉质、雪纺等），标签名称的长度限制为[0,6] (单位是字符，不区分中英文)，标签名称中不能包含非法内容，且一个内容关联的标签数目不能超过6个 */
func (this *SpContentGraphicPublishRequest) SetTags(value string) {
	this.Set("tags", value)
}

/* 内容标题,标题的长度限制为(0,32](单位是字符，不区分中英文)<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentGraphicPublishRequest) SetTitle(value string) {
	this.Set("title", value)
}

type SpContentGraphicPublishResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	SpContentGraphicPublishResponseResult `json:"sp_content_graphic_publish_response"`
}
type SpContentGraphicPublishResponseResult struct {
	/* 主键ID */
	Value string `json:"value"`
}

/*taobao.sp.content.graphic.update*/
type SpContentGraphicUpdateRequest struct {
	values url.Values
}

func (this *SpContentGraphicUpdateRequest) GetApiMethodName() string {
	return "taobao.sp.content.graphic.update"
}
func (this *SpContentGraphicUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentGraphicUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 内容的自定义分类，数值为文本内容，主要用于区分内容的分类（譬如连衣裙、T恤、阿迪达斯等），分类名称的长度限制为(0,5] (单位是字符，不区分中英文)，分类名称中不能包含非法内容，且一个站点下所拥有的总自定义分类数量不能超过16个<br /> 支持最大长度为：5<br /> 支持的最大列表长度为：5 */
func (this *SpContentGraphicUpdateRequest) SetClassname(value string) {
	this.Set("classname", value)
}

/* 图文内容，Json格式的数据。
必须是数组类型元素列表。展示时每一个元素会单独一行显示。
type: 表示图文元素的类型，目前支持3种类型的元素
1:text;文本元素；
2:image;图片元素；
3:item;宝贝元素；

value:表示图文类型的元素值。
当类型为text时，value值就是文本类型字符串；
当类型为image时，value值就是图片地址;
当类型为item时，value值就是宝贝ID; */
func (this *SpContentGraphicUpdateRequest) SetContents(value string) {
	this.Set("contents", value)
}

/* 封面图片地址
图文的封面尺寸不能低于680*680，否则该条图文将无法同步至微淘
图片地址必须匹配正则表达式:http://(img01|img02|img03|img04|img1|img2|img3|img4)\.(taobaocdn|tbcdn)\.(com|net|cn).* */
func (this *SpContentGraphicUpdateRequest) SetCoverpicurl(value string) {
	this.Set("coverpicurl", value)
}

/* 内容的detail页面地址，数值为html链接，主要用于展现内容的detail信息的 */
func (this *SpContentGraphicUpdateRequest) SetDetailurl(value string) {
	this.Set("detailurl", value)
}

/* 内容ID */
func (this *SpContentGraphicUpdateRequest) SetId(value string) {
	this.Set("id", value)
}

/* 是否要发送到微淘广播流 */
func (this *SpContentGraphicUpdateRequest) SetIntimeline(value string) {
	this.Set("intimeline", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentGraphicUpdateRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

/* 内容的自定义标签，数值为文本内容，多个标签以逗号“,”分割。
主要用于细化内容的分类（譬如小清新，棉质、雪纺等），标签名称的长度限制为[0,6] (单位是字符，不区分中英文)，标签名称中不能包含非法内容，且一个内容关联的标签数目不能超过6个 */
func (this *SpContentGraphicUpdateRequest) SetTags(value string) {
	this.Set("tags", value)
}

/* 内容标题,标题的长度限制为(0,32](单位是字符，不区分中英文)<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentGraphicUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

type SpContentGraphicUpdateResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	SpContentGraphicUpdateResponseResult `json:"sp_content_graphic_update_response"`
}
type SpContentGraphicUpdateResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.sp.content.item.publish*/
type SpContentItemPublishRequest struct {
	values url.Values
}

func (this *SpContentItemPublishRequest) GetApiMethodName() string {
	return "taobao.sp.content.item.publish"
}
func (this *SpContentItemPublishRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentItemPublishRequest) GetValues() url.Values {
	return this.values
}

/* 内容的自定义分类，数值为文本内容，主要用于区分内容的分类（譬如连衣裙、T恤、阿迪达斯等），分类名称的长度限制为(0,5] (单位是字符，不区分中英文)，分类名称中不能包含非法内容，且一个站点下所拥有的总自定义分类数量不能超过16个<br /> 支持最大长度为：5<br /> 支持的最大列表长度为：5 */
func (this *SpContentItemPublishRequest) SetClassname(value string) {
	this.Set("classname", value)
}

/* 内容的推荐理由。数值为文本内容,推荐理由的长度限制为[0,140](单位是字符，不区分中英文)，推荐理由中不能含有非法内容，不能含有恶意脚本<br /> 支持最大长度为：140<br /> 支持的最大列表长度为：140 */
func (this *SpContentItemPublishRequest) SetComments(value string) {
	this.Set("comments", value)
}

/* 封面图片地址
图片地址必须匹配正则表达式:http://(img01|img02|img03|img04|img1|img2|img3|img4)\.(taobaocdn|tbcdn)\.(com|net|cn).* */
func (this *SpContentItemPublishRequest) SetCoverpicurl(value string) {
	this.Set("coverpicurl", value)
}

/* 内容的detail页面地址，数值为html链接，主要用于展现内容的detail信息的 */
func (this *SpContentItemPublishRequest) SetDetailurl(value string) {
	this.Set("detailurl", value)
}

/* 宝贝ID */
func (this *SpContentItemPublishRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentItemPublishRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

/* 内容的自定义标签，数值为文本内容，多个标签以英文逗号“,”分割。
主要用于细化内容的分类（譬如小清新,棉质,雪纺等），标签名称的长度限制为[0,6] (单位是字符，不区分中英文)，标签名称中不能包含非法内容，且一个内容关联的标签数目不能超过6个 */
func (this *SpContentItemPublishRequest) SetTags(value string) {
	this.Set("tags", value)
}

/* 内容标题,标题的长度限制为(0,32](单位是字符，不区分中英文)<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentItemPublishRequest) SetTitle(value string) {
	this.Set("title", value)
}

type SpContentItemPublishResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	SpContentItemPublishResponseResult `json:"sp_content_item_publish_response"`
}
type SpContentItemPublishResponseResult struct {
	/* 主键ID */
	Value string `json:"value"`
}

/*taobao.sp.content.item.update*/
type SpContentItemUpdateRequest struct {
	values url.Values
}

func (this *SpContentItemUpdateRequest) GetApiMethodName() string {
	return "taobao.sp.content.item.update"
}
func (this *SpContentItemUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentItemUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 内容的自定义分类，数值为文本内容，主要用于区分内容的分类（譬如连衣裙、T恤、阿迪达斯等），分类名称的长度限制为(0,5] (单位是字符，不区分中英文)，分类名称中不能包含非法内容，且一个站点下所拥有的总自定义分类数量不能超过16个<br /> 支持最大长度为：5<br /> 支持的最大列表长度为：5 */
func (this *SpContentItemUpdateRequest) SetClassname(value string) {
	this.Set("classname", value)
}

/* 内容的推荐理由。数值为文本内容,推荐理由的长度限制为[0,140](单位是字符，不区分中英文)，推荐理由中不能含有非法内容，不能含有恶意脚本<br /> 支持最大长度为：140<br /> 支持的最大列表长度为：140 */
func (this *SpContentItemUpdateRequest) SetComments(value string) {
	this.Set("comments", value)
}

/* 封面图片地址
图片地址必须匹配正则表达式:http://(img01|img02|img03|img04|img1|img2|img3|img4)\.(taobaocdn|tbcdn)\.(com|net|cn).* */
func (this *SpContentItemUpdateRequest) SetCoverpicurl(value string) {
	this.Set("coverpicurl", value)
}

/* 内容的detail页面地址，数值为html链接，主要用于展现内容的detail信息的 */
func (this *SpContentItemUpdateRequest) SetDetailurl(value string) {
	this.Set("detailurl", value)
}

/* 内容ID */
func (this *SpContentItemUpdateRequest) SetId(value string) {
	this.Set("id", value)
}

/* 宝贝ID */
func (this *SpContentItemUpdateRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentItemUpdateRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

/* 内容的自定义标签，数值为文本内容，多个标签以逗号“,”分割。
主要用于细化内容的分类（譬如小清新，棉质、雪纺等），标签名称的长度限制为[0,6] (单位是字符，不区分中英文)，标签名称中不能包含非法内容，且一个内容关联的标签数目不能超过6个 */
func (this *SpContentItemUpdateRequest) SetTags(value string) {
	this.Set("tags", value)
}

/* 内容标题,标题的长度限制为(0,32](单位是字符，不区分中英文)<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentItemUpdateRequest) SetTitle(value string) {
	this.Set("title", value)
}

type SpContentItemUpdateResponse struct {
	*ErrorResponse                    `json:"error_response,omitempty"`
	SpContentItemUpdateResponseResult `json:"sp_content_item_update_response"`
}
type SpContentItemUpdateResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.sp.content.list.get*/
type SpContentListGetRequest struct {
	values url.Values
}

func (this *SpContentListGetRequest) GetApiMethodName() string {
	return "taobao.sp.content.list.get"
}
func (this *SpContentListGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentListGetRequest) GetValues() url.Values {
	return this.values
}

/* JOSN格式的分页参数：
page： 查询起始页 >=1
rows： 分页大小 <= 50
sort : 排序字段(如果没有指定排序方式，默认按修改时间倒序)，支持的排序类型包括：gmtModified – 最后修改时间；likeNum – 喜欢数；viewNum – 浏览数；
order：排序方式：asc – 顺序；desc – 倒序 */
func (this *SpContentListGetRequest) SetPagerequest(value string) {
	this.Set("pagerequest", value)
}

/* JSON格式的查询条件： type(Integer，选填) ：内容类型，包括四种： 1 -- 宝贝，2 -- 图片，3 -- 自定义，4 -- 图文； className(String，选填)：内容的自定义分类名称；tags(String，选填)：内容的自定义标签名称，多个标签以逗号“,”分割。如果设置了多个标签，则他们是或的关系；title(String，选填): 内容标题，此条件为模糊搜索，慎用，可能比较慢； */
func (this *SpContentListGetRequest) SetQuery(value string) {
	this.Set("query", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentListGetRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpContentListGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	SpContentListGetResponseResult `json:"sp_content_list_get_response"`
}
type SpContentListGetResponseResult struct {
	/* 内容列表 */
	Contents []*SpContentDOForList `json:"contents"`
	/* 符合条件的总记录数 */
	TotalResult int64 `json:"total_result"`
}

/*taobao.sp.content.publish*/
type SpContentPublishRequest struct {
	values url.Values
}

func (this *SpContentPublishRequest) GetApiMethodName() string {
	return "taobao.sp.content.publish"
}
func (this *SpContentPublishRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentPublishRequest) GetValues() url.Values {
	return this.values
}

/* 表示为内容类型，包括2种选项： 1(宝贝);3(自定义) */
func (this *SpContentPublishRequest) SetSchemaName(value string) {
	this.Set("schema_name", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentPublishRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

/* 内容的自定义标签，数值为文本内容，多个标签以逗号“,”分割。
主要用于细化内容的分类（譬如小清新，棉质、雪纺等），标签名称的长度限制为[0,6] (单位是字符，不区分中英文)，标签名称中不能包含非法内容，且一个内容关联的标签数目不能超过6个 */
func (this *SpContentPublishRequest) SetTags(value string) {
	this.Set("tags", value)
}

/* 内容具体的信息，用json格式描述，kv对的方式: className(String，必填)：内容的自定义分类，数值为文本内容，主要用于区分内容的分类（譬如连衣裙、T恤、阿迪达斯等），分类名称

的长度限制为(0,5] (单位是字符，不区分中英文)，分类名称中不能包含非法内容，且一个站点下所拥有的总自定义分类数量不能超过16个； detailUrl(String，必填)：内容的detail页面

地址，数值为html链接，主要用于展现内容的detail信息的，此数值必须存在，它是U站首页或淘宝官网搜索到内容之后用户点击进入的跳转页面。（如果站点没有单个内容的detail页面，也可以直接填写站点首页）； items(String，宝贝必填)： 内容关联的商品，数值为商品的detail链接地址。此参数只有在type = 1 （即内容类型为宝贝）的时候才有效，宝贝只能并且必须

关联一个商品；title(String，宝贝和自定义必填): 内容标题，数值为文本内容，此参数只有在type = 1或3（即内容类型为宝贝或自定义）的时候才有效，且标题的长度限制为(0,32](单位是字符，不区分中英文)，标题中不能含有非法内容，不能含有恶意脚本。 comments (String，宝贝必填)： 内容的推荐理由，数值为文本内容，此参数只有在type =1 （即内容类型为宝贝）的时候才有效，且推荐理由的长度限制为[0,140](单位是字符，不区分中英文)，推荐理由中不能含有非法内容，不能含有恶意脚本。 content(String，自定义必填)：数值为文本内容（html形式），此参数只有在type = 3（即内容类型为自定义）的时候才有效，且自定义长度限制为[100,20000] (单位是字符，不区分中英文), 自定义中不能有外链，不能有恶意脚本；自定义中包含的商品链接系统自自动提取并保存起来;多个商品链接以空格隔开(如 href=http://detail.tmall.com/item.htm?id=35743839682 href=http://item.taobao.com/item.htm?id=36366644805 )； coverPicUrl(String，宝贝选填)：封面图片地址。此参数只有在type = 1（即内容类型为宝贝）的时候才有效。图片地址必须

匹配正则表达式:http://(img01|img02|img03|img04|img1|img2|img3|img4)\.(taobaocdn|tbcdn)\.(com|net|cn).*； */
func (this *SpContentPublishRequest) SetValue(value string) {
	this.Set("value", value)
}

type SpContentPublishResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	SpContentPublishResponseResult `json:"sp_content_publish_response"`
}
type SpContentPublishResponseResult struct {
	/* 主键ID */
	Value string `json:"value"`
}

/*taobao.sp.content.update*/
type SpContentUpdateRequest struct {
	values url.Values
}

func (this *SpContentUpdateRequest) GetApiMethodName() string {
	return "taobao.sp.content.update"
}
func (this *SpContentUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 内容的主键ID */
func (this *SpContentUpdateRequest) SetId(value string) {
	this.Set("id", value)
}

/* 表示为内容类型，包括2种选项： 1(宝贝);3(自定义) */
func (this *SpContentUpdateRequest) SetSchemaName(value string) {
	this.Set("schema_name", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentUpdateRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

/* 内容的自定义标签，数值为文本内容，多个标签以逗号“,”分割。
主要用于细化内容的分类（譬如小清新，棉质、雪纺等），标签名称的长度限制为[0,6] (单位是字符，不区分中英文)，标签名称中不能包含非法内容，且一个内容关联的标签数目不能超过6个 */
func (this *SpContentUpdateRequest) SetTags(value string) {
	this.Set("tags", value)
}

/* 内容具体的信息，用json格式描述，kv对的方式: className(String，必填)：内容的自定义分类，数值为文本内容，主要用于区分内容的分类（譬如连衣裙、T恤、阿迪达斯等），分类名称

的长度限制为(0,5] (单位是字符，不区分中英文)，分类名称中不能包含非法内容，且一个站点下所拥有的总自定义分类数量不能超过16个； detailUrl(String，必填)：内容的detail页面

地址，数值为html链接，主要用于展现内容的detail信息的，此数值必须存在，它是U站首页或淘宝官网搜索到内容之后用户点击进入的跳转页面。（如果站点没有单个内容的detail页面，也

可以直接填写站点首页）； items(String，宝贝必填)： 内容关联的商品，数值为商品的detail链接地址。此参数只有在type = 1 （即内容类型为宝贝）的时候才有效，宝贝只能并且必须

关联一个商品；title(String，宝贝和心得必填): 内容标题，数值为文本内容，此参数只有在type = 1或3（即内容类型为心得或宝贝）的时候才有效，且标题的长度限制为(0,30](单位是字

符，不区分中英文)，标题中不能含有非法内容，不能含有恶意脚本。 comments (String，宝贝必填)： 内容的推荐理由，数值为文本内容，此参数只有在type =1 （即内

容类型为宝贝）的时候才有效，且推荐理由的长度限制为[0,140](单位是字符，不区分中英文)，推荐理由中不能含有非法内容，不能含有恶意脚本。 content(String，心得必填)：内

容的心得，数值为文本内容（html形式），此参数只有在type = 3（即内容类型为心得）的时候才有效，且心得长度限制为[100,20000] (单位是字符，不区分中英文), 心得中不能有外链，

不能有恶意脚本；心得中包含的商品链接系统自自动提取并保存起来;多个商品链接以空格隔开(如 href=http://detail.tmall.com/item.htm?id=35743839682

href=http://item.taobao.com/item.htm?id=36366644805 )； coverPicUrl(String，宝贝选填)：封面图片地址。此参数只有在type = 1（即内容类型为宝贝）的时候才有效。图片地址必须

匹配正则表达式:http://(img01|img02|img03|img04|img1|img2|img3|img4)\.(taobaocdn|tbcdn)\.(com|net|cn).*； */
func (this *SpContentUpdateRequest) SetValue(value string) {
	this.Set("value", value)
}

type SpContentUpdateResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	SpContentUpdateResponseResult `json:"sp_content_update_response"`
}
type SpContentUpdateResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.sp.content.updateclass*/
type SpContentUpdateclassRequest struct {
	values url.Values
}

func (this *SpContentUpdateclassRequest) GetApiMethodName() string {
	return "taobao.sp.content.updateclass"
}
func (this *SpContentUpdateclassRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentUpdateclassRequest) GetValues() url.Values {
	return this.values
}

/* 新分类名称 */
func (this *SpContentUpdateclassRequest) SetNewname(value string) {
	this.Set("newname", value)
}

/* 旧分类名称 */
func (this *SpContentUpdateclassRequest) SetOldname(value string) {
	this.Set("oldname", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentUpdateclassRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpContentUpdateclassResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	SpContentUpdateclassResponseResult `json:"sp_content_updateclass_response"`
}
type SpContentUpdateclassResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.sp.content.updatetag*/
type SpContentUpdatetagRequest struct {
	values url.Values
}

func (this *SpContentUpdatetagRequest) GetApiMethodName() string {
	return "taobao.sp.content.updatetag"
}
func (this *SpContentUpdatetagRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpContentUpdatetagRequest) GetValues() url.Values {
	return this.values
}

/* 新的标签名称<br /> 支持最大长度为：6<br /> 支持的最大列表长度为：6 */
func (this *SpContentUpdatetagRequest) SetNewname(value string) {
	this.Set("newname", value)
}

/* 旧的标签名称<br /> 支持最大长度为：6<br /> 支持的最大列表长度为：6 */
func (this *SpContentUpdatetagRequest) SetOldname(value string) {
	this.Set("oldname", value)
}

/* 站长Key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpContentUpdatetagRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpContentUpdatetagResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	SpContentUpdatetagResponseResult `json:"sp_content_updatetag_response"`
}
type SpContentUpdatetagResponseResult struct {
	/* 是否成功 */
	IsSuccess bool `json:"is_success"`
}

/*taobao.sp.item.extra.info.get*/
type SpItemExtraInfoGetRequest struct {
	values url.Values
}

func (this *SpItemExtraInfoGetRequest) GetApiMethodName() string {
	return "taobao.sp.item.extra.info.get"
}
func (this *SpItemExtraInfoGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpItemExtraInfoGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品ID,可批量查询, 多个商品ID中间用逗号分隔, 最多可查20个id, ID之间不能有空格 */
func (this *SpItemExtraInfoGetRequest) SetId(value string) {
	this.Set("id", value)
}

/* 每个站点的唯一Key(加密的site id) */
func (this *SpItemExtraInfoGetRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpItemExtraInfoGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	SpItemExtraInfoGetResponseResult `json:"sp_item_extra_info_get_response"`
}
type SpItemExtraInfoGetResponseResult struct {
	/* 返回Json格式的商品附加信息:itemId:商品ID ;tk:是否是淘客,0：非淘客；5：淘客; finalPrice:优惠后的价格, 如果没有优惠则为一口价; biz30day:  30天内总销售笔数; promotedService: 消保类型 1-先行赔付服务, 2-假一赔三服务, 4-七天无理由退货服务, 8-闪电发货服务, 16-数 码与家电30天维修服务; sellerId: 卖家数字ID */
	Value string `json:"value"`
}

/*taobao.sp.item.feed.info.get*/
type SpItemFeedInfoGetRequest struct {
	values url.Values
}

func (this *SpItemFeedInfoGetRequest) GetApiMethodName() string {
	return "taobao.sp.item.feed.info.get"
}
func (this *SpItemFeedInfoGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpItemFeedInfoGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品ID */
func (this *SpItemFeedInfoGetRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 卖家数字ID */
func (this *SpItemFeedInfoGetRequest) SetSellerId(value string) {
	this.Set("seller_id", value)
}

/* 每个站点的唯一Key(加密的site id) */
func (this *SpItemFeedInfoGetRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpItemFeedInfoGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	SpItemFeedInfoGetResponseResult `json:"sp_item_feed_info_get_response"`
}
type SpItemFeedInfoGetResponseResult struct {
	/* 分别返回好评,中评,差评最新的50条, type:评价类型 1好评 0中评 -1差评; nick: 评价者昵称; feedback: 评价内容; date: 评价时间 */
	Value string `json:"value"`
}

/*taobao.sp.item.info.list.advanced.get*/
type SpItemInfoListAdvancedGetRequest struct {
	values url.Values
}

func (this *SpItemInfoListAdvancedGetRequest) GetApiMethodName() string {
	return "taobao.sp.item.info.list.advanced.get"
}
func (this *SpItemInfoListAdvancedGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpItemInfoListAdvancedGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品所在地:省名 */
func (this *SpItemInfoListAdvancedGetRequest) SetArea(value string) {
	this.Set("area", value)
}

/* 标准商品后台类目id。该ID可以通过taobao.itemcats.get接口获取到。 */
func (this *SpItemInfoListAdvancedGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 佣金比率上限，如：2345表示23.45%。注：start_commissionRate和end_commissionRate一起设置才有效。 */
func (this *SpItemInfoListAdvancedGetRequest) SetEndCommissionRate(value string) {
	this.Set("end_commission_rate", value)
}

/* 可选值和start_credit一样.start_credit的值一定要小于或等于end_credit的值。注：end_credit与start_credit一起使用才生效 */
func (this *SpItemInfoListAdvancedGetRequest) SetEndCredit(value string) {
	this.Set("end_credit", value)
}

/* 最高价格 */
func (this *SpItemInfoListAdvancedGetRequest) SetEndPrice(value string) {
	this.Set("end_price", value)
}

/* 商品标题中包含的关键字. 注意:查询时keyword,cid至少选择其中一个参数 */
func (this *SpItemInfoListAdvancedGetRequest) SetKeyword(value string) {
	this.Set("keyword", value)
}

/* 结果页数 */
func (this *SpItemInfoListAdvancedGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页返回结果数.最大每页40 */
func (this *SpItemInfoListAdvancedGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 站点key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpItemInfoListAdvancedGetRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

/* price_asc: 价格从低到高, 默认为折扣价格; sales_desc:销量从高到低; credit_desc:信用从高到低 */
func (this *SpItemInfoListAdvancedGetRequest) SetSort(value string) {
	this.Set("sort", value)
}

/* 佣金比率下限，如：1234表示12.34% */
func (this *SpItemInfoListAdvancedGetRequest) SetStartCommissionRate(value string) {
	this.Set("start_commission_rate", value)
}

/* 卖家信用: 1(一心) 2(两心) 3(三心) 4(四心) 5(五心) 6(一钻) 7(两钻) 8(三钻) 9(四钻) 10(五钻) 11(一冠) 12(两冠) 13(三冠) 14(四冠) 15(五冠) 16(一黄冠) 17(二黄冠) 18(三黄冠) 19(四黄冠) 20(五黄冠) */
func (this *SpItemInfoListAdvancedGetRequest) SetStartCredit(value string) {
	this.Set("start_credit", value)
}

/* 起始价格, 默认为折扣价格.传入价格参数时,需注意起始价格和最高价格必须一起传入,并且 start_price <= end_price */
func (this *SpItemInfoListAdvancedGetRequest) SetStartPrice(value string) {
	this.Set("start_price", value)
}

/* 是否商城的商品，设置为true表示该商品是属于淘宝商城的商品，设置为false或不设置表示不判断这个属性 */
func (this *SpItemInfoListAdvancedGetRequest) SetTmallItem(value string) {
	this.Set("tmall_item", value)
}

type SpItemInfoListAdvancedGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	SpItemInfoListAdvancedGetResponseResult `json:"sp_item_info_list_advanced_get_response"`
}
type SpItemInfoListAdvancedGetResponseResult struct {
	/* 商品信息 */
	ItemList []*SpItemInfo `json:"item_list"`
}

/*taobao.sp.item.info.list.get*/
type SpItemInfoListGetRequest struct {
	values url.Values
}

func (this *SpItemInfoListGetRequest) GetApiMethodName() string {
	return "taobao.sp.item.info.list.get"
}
func (this *SpItemInfoListGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpItemInfoListGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品ID,可批量查询, 多个商品ID中间用逗号分隔, 最多可查20个id, ID之间不能有空格 */
func (this *SpItemInfoListGetRequest) SetId(value string) {
	this.Set("id", value)
}

/* 每个站点的唯一Key(加密的site id) */
func (this *SpItemInfoListGetRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpItemInfoListGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	SpItemInfoListGetResponseResult `json:"sp_item_info_list_get_response"`
}
type SpItemInfoListGetResponseResult struct {
	/* 商品信息 */
	ItemList []*SpItem `json:"item_list"`
}

/*taobao.sp.item.list.get*/
type SpItemListGetRequest struct {
	values url.Values
}

func (this *SpItemListGetRequest) GetApiMethodName() string {
	return "taobao.sp.item.list.get"
}
func (this *SpItemListGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpItemListGetRequest) GetValues() url.Values {
	return this.values
}

/* 商品所在地:省名 */
func (this *SpItemListGetRequest) SetArea(value string) {
	this.Set("area", value)
}

/* 标准商品后台类目id。该ID可以通过taobao.itemcats.get接口获取到。 */
func (this *SpItemListGetRequest) SetCid(value string) {
	this.Set("cid", value)
}

/* 30天成交笔数(上限) */
func (this *SpItemListGetRequest) SetEndBiz30day(value string) {
	this.Set("end_biz30day", value)
}

/* 佣金比率上限，如：2345表示23.45%。注：start_commissionRate和end_commissionRate一起设置才有效。 */
func (this *SpItemListGetRequest) SetEndCommissionRate(value string) {
	this.Set("end_commission_rate", value)
}

/* 可选值和start_credit一样.start_credit的值一定要小于或等于end_credit的值。注：end_credit与start_credit一起使用才生效 */
func (this *SpItemListGetRequest) SetEndCredit(value string) {
	this.Set("end_credit", value)
}

/* 最高价格 */
func (this *SpItemListGetRequest) SetEndPrice(value string) {
	this.Set("end_price", value)
}

/* 是否支持货到付款，设置为true表示该商品支持货到付款，设置为false或不设置表示不判断这个属性 */
func (this *SpItemListGetRequest) SetHdfk(value string) {
	this.Set("hdfk", value)
}

/* 是否支持假一赔三，设置为true表示该商品支持假一赔三，设置为false或不设置表示不判断这个属性 */
func (this *SpItemListGetRequest) SetJyps(value string) {
	this.Set("jyps", value)
}

/* 商品标题中包含的关键字. 注意:查询时keyword,cid至少选择其中一个参数 */
func (this *SpItemListGetRequest) SetKeyword(value string) {
	this.Set("keyword", value)
}

/* 是否免邮费，设置为true表示该商品免邮，设置为false或不设置表示不判断这个属性 */
func (this *SpItemListGetRequest) SetMyf(value string) {
	this.Set("myf", value)
}

/* 结果页数. */
func (this *SpItemListGetRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页返回结果数.最大每页40 */
func (this *SpItemListGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* 是否支持七天退换，设置为true表示该商品支持七天退换，设置为false或不设置表示不判断这个属性 */
func (this *SpItemListGetRequest) SetQtth(value string) {
	this.Set("qtth", value)
}

/* 站点key<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *SpItemListGetRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

/* price_asc: 价格从低到高, 默认为折扣价格; sales_desc:销量从高到低; credit_desc:信用从高到低 */
func (this *SpItemListGetRequest) SetSort(value string) {
	this.Set("sort", value)
}

/* 30天成交笔数, 下限 */
func (this *SpItemListGetRequest) SetStartBiz30day(value string) {
	this.Set("start_biz30day", value)
}

/* 佣金比率下限，如：1234表示12.34% */
func (this *SpItemListGetRequest) SetStartCommissionRate(value string) {
	this.Set("start_commission_rate", value)
}

/* 卖家信用: 1(一心) 2(两心) 3(三心) 4(四心) 5(五心) 6(一钻) 7(两钻) 8(三钻) 9(四钻) 10(五钻) 11(一冠) 12(两冠) 13(三冠) 14(四冠) 15(五冠) 16(一黄冠) 17(二黄冠) 18(三黄冠) 19(四黄冠) 20(五黄冠) */
func (this *SpItemListGetRequest) SetStartCredit(value string) {
	this.Set("start_credit", value)
}

/* 起始价格, 默认为折扣价格.传入价格参数时,需注意起始价格和最高价格必须一起传入,并且 start_price <= end_price */
func (this *SpItemListGetRequest) SetStartPrice(value string) {
	this.Set("start_price", value)
}

/* 是否商城的商品，设置为true表示该商品是属于淘宝商城的商品，设置为false或不设置表示不判断这个属性 */
func (this *SpItemListGetRequest) SetTmallItem(value string) {
	this.Set("tmall_item", value)
}

/* 是否支持消费者保障，设置为true表示该商品支持消费者保障，设置为false或不设置表示不判断这个属性 */
func (this *SpItemListGetRequest) SetXfzbz(value string) {
	this.Set("xfzbz", value)
}

/* 是否支持正品保障，设置为true表示该商品支持正品保障，设置为false或不设置表示不判断这个属性 */
func (this *SpItemListGetRequest) SetZpbz(value string) {
	this.Set("zpbz", value)
}

type SpItemListGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	SpItemListGetResponseResult `json:"sp_item_list_get_response"`
}
type SpItemListGetResponseResult struct {
	/* {"sp_item_list_get_response":{"value":"[{\"itemId\":\"21\",\"sellerId\":\"20668\",\"nick\":\"zztest\",\"title\":\"淘女郎",\"price\":\"50.00\",\"finalPrice\":\"\",\"biz30day\":\"0\",\"tk\":\"5\",\"picUrl\":\"",\"itemUrl\":\"",\"shopUrl\":\""}]"}}
	itemId:商品ID; sellerId:卖家ID; nick:卖家昵称; title:商品标题; price:商品价格; finalPrice:商品优惠价格, 如果为空则无优惠; biz30day:30天内销售笔数; tk:0-非淘客商品,5-淘客商品; picUrl:图片地址; itemUrl:商品链接地址; shopUrl:店铺链接地址 */
	Value string `json:"value"`
}

/*taobao.sp.service.site.get*/
type SpServiceSiteGetRequest struct {
	values url.Values
}

func (this *SpServiceSiteGetRequest) GetApiMethodName() string {
	return "taobao.sp.service.site.get"
}
func (this *SpServiceSiteGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpServiceSiteGetRequest) GetValues() url.Values {
	return this.values
}

type SpServiceSiteGetResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	SpServiceSiteGetResponseResult `json:"sp_service_site_get_response"`
}
type SpServiceSiteGetResponseResult struct {
	/* 返回站点信息的Json字符串 */
	Value string `json:"value"`
}

/*taobao.sp.shop.extra.info.get*/
type SpShopExtraInfoGetRequest struct {
	values url.Values
}

func (this *SpShopExtraInfoGetRequest) GetApiMethodName() string {
	return "taobao.sp.shop.extra.info.get"
}
func (this *SpShopExtraInfoGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpShopExtraInfoGetRequest) GetValues() url.Values {
	return this.values
}

/* 店铺编号。shop+sid.taobao.com即店铺地址，如shop123456.taobao.com */
func (this *SpShopExtraInfoGetRequest) SetShopId(value string) {
	this.Set("shop_id", value)
}

/* 每个站点的唯一Key(加密的site id) */
func (this *SpShopExtraInfoGetRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpShopExtraInfoGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	SpShopExtraInfoGetResponseResult `json:"sp_shop_extra_info_get_response"`
}
type SpShopExtraInfoGetResponseResult struct {
	/* 返回Json格式的店铺附加信息:tmall: 1:B商家，0：非B; sellerCredit: 卖家信用等级,如果是天猫店铺则返回空值; auctionCount: 店铺宝贝数
	srt:(本店)近30天平均退款速度;
	art:(行业)近30天行业平均退款速度;
	srtp:(本店)近30天平均退款率 = 近30天退款笔数/近30天支付宝成交笔数;
	arr:近30天行业平均退款率;
	ccp:(本店)近30天投诉率=近30天投诉总数/近30天支付宝成交笔数;
	acr:(行业)近30天行业平均投诉率;
	punc:(本店)近30天被处罚总数;
	apts:(行业)近30天行业平均处罚次数;
	gerd:(本店)店铺好评率，即店铺累计好评数/店铺评价总数;
	iasgr:(行业)好评率（行业平均）,加载周期：周 */
	Value string `json:"value"`
}

/*taobao.sp.shop.info.get*/
type SpShopInfoGetRequest struct {
	values url.Values
}

func (this *SpShopInfoGetRequest) GetApiMethodName() string {
	return "taobao.sp.shop.info.get"
}
func (this *SpShopInfoGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *SpShopInfoGetRequest) GetValues() url.Values {
	return this.values
}

/* 卖家Nick对应的Userid */
func (this *SpShopInfoGetRequest) SetSellerId(value string) {
	this.Set("seller_id", value)
}

/* 每个站点的唯一Key(加密的site id) */
func (this *SpShopInfoGetRequest) SetSiteKey(value string) {
	this.Set("site_key", value)
}

type SpShopInfoGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	SpShopInfoGetResponseResult `json:"sp_shop_info_get_response"`
}
type SpShopInfoGetResponseResult struct {
	/* 店铺信息 */
	Shop *SpShop `json:"shop"`
}

/*alibaba.laiwang.media.upload*/
type AlibabaLaiwangMediaUploadRequest struct {
	values url.Values
}

func (this *AlibabaLaiwangMediaUploadRequest) GetApiMethodName() string {
	return "alibaba.laiwang.media.upload"
}
func (this *AlibabaLaiwangMediaUploadRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlibabaLaiwangMediaUploadRequest) GetValues() url.Values {
	return this.values
}

/* 需要上传的文件内容. */
func (this *AlibabaLaiwangMediaUploadRequest) SetMedia(value string) {
	this.Set("media", value)
}

/* 多媒体文件类型，目前支持: image(图片),audio(音频),video(视频) */
func (this *AlibabaLaiwangMediaUploadRequest) SetType(value string) {
	this.Set("type", value)
}

type AlibabaLaiwangMediaUploadResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	AlibabaLaiwangMediaUploadResponseResult `json:"alibaba_laiwang_media_upload_response"`
}
type AlibabaLaiwangMediaUploadResponseResult struct {
	/* 多媒体文件上传后返回的文件标识. */
	Mediaid string `json:"mediaid"`
	/* 访问上传文件的url路径信息. */
	Url string `json:"url"`
}

/*alibaba.laiwang.pp.menu.add*/
type AlibabaLaiwangPpMenuAddRequest struct {
	values url.Values
}

func (this *AlibabaLaiwangPpMenuAddRequest) GetApiMethodName() string {
	return "alibaba.laiwang.pp.menu.add"
}
func (this *AlibabaLaiwangPpMenuAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlibabaLaiwangPpMenuAddRequest) GetValues() url.Values {
	return this.values
}

/* 菜单的定义,将定义转换成对应的json格式传入。 */
func (this *AlibabaLaiwangPpMenuAddRequest) SetMenudef(value string) {
	this.Set("menudef", value)
}

type AlibabaLaiwangPpMenuAddResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	AlibabaLaiwangPpMenuAddResponseResult `json:"alibaba_laiwang_pp_menu_add_response"`
}
type AlibabaLaiwangPpMenuAddResponseResult struct {
	/* 调用是否成功 */
	Issuccess bool `json:"issuccess"`
}

/*alibaba.laiwang.pp.menu.create*/
type AlibabaLaiwangPpMenuCreateRequest struct {
	values url.Values
}

func (this *AlibabaLaiwangPpMenuCreateRequest) GetApiMethodName() string {
	return "alibaba.laiwang.pp.menu.create"
}
func (this *AlibabaLaiwangPpMenuCreateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlibabaLaiwangPpMenuCreateRequest) GetValues() url.Values {
	return this.values
}

/* 菜单的定义,将定义转换成对应的json格式传入。 */
func (this *AlibabaLaiwangPpMenuCreateRequest) SetMenudef(value string) {
	this.Set("menudef", value)
}

type AlibabaLaiwangPpMenuCreateResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	AlibabaLaiwangPpMenuCreateResponseResult `json:"alibaba_laiwang_pp_menu_create_response"`
}
type AlibabaLaiwangPpMenuCreateResponseResult struct {
	/* 调用是否成功 */
	Issuccess bool `json:"issuccess"`
}

/*alibaba.laiwang.pp.menu.get*/
type AlibabaLaiwangPpMenuGetRequest struct {
	values url.Values
}

func (this *AlibabaLaiwangPpMenuGetRequest) GetApiMethodName() string {
	return "alibaba.laiwang.pp.menu.get"
}
func (this *AlibabaLaiwangPpMenuGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlibabaLaiwangPpMenuGetRequest) GetValues() url.Values {
	return this.values
}

type AlibabaLaiwangPpMenuGetResponse struct {
	*ErrorResponse                        `json:"error_response,omitempty"`
	AlibabaLaiwangPpMenuGetResponseResult `json:"alibaba_laiwang_pp_menu_get_response"`
}
type AlibabaLaiwangPpMenuGetResponseResult struct {
	/* 所创建菜单的结构化json串数据. */
	Menu *LaiwangPPMenu `json:"menu"`
}

/*alibaba.laiwang.pp.menu.remove*/
type AlibabaLaiwangPpMenuRemoveRequest struct {
	values url.Values
}

func (this *AlibabaLaiwangPpMenuRemoveRequest) GetApiMethodName() string {
	return "alibaba.laiwang.pp.menu.remove"
}
func (this *AlibabaLaiwangPpMenuRemoveRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlibabaLaiwangPpMenuRemoveRequest) GetValues() url.Values {
	return this.values
}

type AlibabaLaiwangPpMenuRemoveResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	AlibabaLaiwangPpMenuRemoveResponseResult `json:"alibaba_laiwang_pp_menu_remove_response"`
}
type AlibabaLaiwangPpMenuRemoveResponseResult struct {
	/* 删除成功的菜单数量 */
	Deletedcount int64 `json:"deletedcount"`
}

/*alibaba.laiwang.pp.message.send*/
type AlibabaLaiwangPpMessageSendRequest struct {
	values url.Values
}

func (this *AlibabaLaiwangPpMessageSendRequest) GetApiMethodName() string {
	return "alibaba.laiwang.pp.message.send"
}
func (this *AlibabaLaiwangPpMessageSendRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlibabaLaiwangPpMessageSendRequest) GetValues() url.Values {
	return this.values
}

/* 发送的消息体，使用json格式来进行发送. */
func (this *AlibabaLaiwangPpMessageSendRequest) SetMessage(value string) {
	this.Set("message", value)
}

type AlibabaLaiwangPpMessageSendResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	AlibabaLaiwangPpMessageSendResponseResult `json:"alibaba_laiwang_pp_message_send_response"`
}
type AlibabaLaiwangPpMessageSendResponseResult struct {
	/* issuccess */
	Issuccess bool `json:"issuccess"`
}

/*alibaba.laiwang.user.get*/
type AlibabaLaiwangUserGetRequest struct {
	values url.Values
}

func (this *AlibabaLaiwangUserGetRequest) GetApiMethodName() string {
	return "alibaba.laiwang.user.get"
}
func (this *AlibabaLaiwangUserGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlibabaLaiwangUserGetRequest) GetValues() url.Values {
	return this.values
}

/* openid */
func (this *AlibabaLaiwangUserGetRequest) SetOpenid(value string) {
	this.Set("openid", value)
}

type AlibabaLaiwangUserGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	AlibabaLaiwangUserGetResponseResult `json:"alibaba_laiwang_user_get_response"`
}
type AlibabaLaiwangUserGetResponseResult struct {
	/* 来往用户信息 */
	User *LaiwangUser `json:"user"`
}

/*alibaba.laiwang.user.list.get*/
type AlibabaLaiwangUserListGetRequest struct {
	values url.Values
}

func (this *AlibabaLaiwangUserListGetRequest) GetApiMethodName() string {
	return "alibaba.laiwang.user.list.get"
}
func (this *AlibabaLaiwangUserListGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlibabaLaiwangUserListGetRequest) GetValues() url.Values {
	return this.values
}

/* 第一个拉取的OPENID，不填默认从头开始拉取 */
func (this *AlibabaLaiwangUserListGetRequest) SetNextOpenid(value string) {
	this.Set("next_openid", value)
}

type AlibabaLaiwangUserListGetResponse struct {
	*ErrorResponse                          `json:"error_response,omitempty"`
	AlibabaLaiwangUserListGetResponseResult `json:"alibaba_laiwang_user_list_get_response"`
}
type AlibabaLaiwangUserListGetResponseResult struct {
	/* 关注者列表 */
	Users *LaiwangUsers `json:"users"`
}

/*taobao.jae.client.camera.takephoto*/
type JaeClientCameraTakephotoRequest struct {
	values url.Values
}

func (this *JaeClientCameraTakephotoRequest) GetApiMethodName() string {
	return "taobao.jae.client.camera.takephoto"
}
func (this *JaeClientCameraTakephotoRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JaeClientCameraTakephotoRequest) GetValues() url.Values {
	return this.values
}

type JaeClientCameraTakephotoResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	JaeClientCameraTakephotoResponseResult `json:"jae_client_camera_takephoto_response"`
}
type JaeClientCameraTakephotoResponseResult struct {
	/* 淘宝CDN上图片的url地址 */
	Urls string `json:"urls"`
}

/*taobao.jae.client.context.getenvironment*/
type JaeClientContextGetenvironmentRequest struct {
	values url.Values
}

func (this *JaeClientContextGetenvironmentRequest) GetApiMethodName() string {
	return "taobao.jae.client.context.getenvironment"
}
func (this *JaeClientContextGetenvironmentRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JaeClientContextGetenvironmentRequest) GetValues() url.Values {
	return this.values
}

type JaeClientContextGetenvironmentResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	JaeClientContextGetenvironmentResponseResult `json:"jae_client_context_getenvironment_response"`
}
type JaeClientContextGetenvironmentResponseResult struct {
	/* 返回当前webview的类型，tbwebview=1，jaewebview=2，三方webview=3. */
	Env int64 `json:"env"`
}

/*taobao.jae.client.context.getnetworkstatus*/
type JaeClientContextGetnetworkstatusRequest struct {
	values url.Values
}

func (this *JaeClientContextGetnetworkstatusRequest) GetApiMethodName() string {
	return "taobao.jae.client.context.getnetworkstatus"
}
func (this *JaeClientContextGetnetworkstatusRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JaeClientContextGetnetworkstatusRequest) GetValues() url.Values {
	return this.values
}

type JaeClientContextGetnetworkstatusResponse struct {
	*ErrorResponse                                 `json:"error_response,omitempty"`
	JaeClientContextGetnetworkstatusResponseResult `json:"jae_client_context_getnetworkstatus_response"`
}
type JaeClientContextGetnetworkstatusResponseResult struct {
	/* 获取网络类型 */
	Result string `json:"result"`
}

/*taobao.jae.client.interaction.listenblow*/
type JaeClientInteractionListenblowRequest struct {
	values url.Values
}

func (this *JaeClientInteractionListenblowRequest) GetApiMethodName() string {
	return "taobao.jae.client.interaction.listenblow"
}
func (this *JaeClientInteractionListenblowRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JaeClientInteractionListenblowRequest) GetValues() url.Values {
	return this.values
}

type JaeClientInteractionListenblowResponse struct {
	*ErrorResponse                               `json:"error_response,omitempty"`
	JaeClientInteractionListenblowResponseResult `json:"jae_client_interaction_listenblow_response"`
}
type JaeClientInteractionListenblowResponseResult struct {
}

/*taobao.jae.client.interaction.listeningshake*/
type JaeClientInteractionListeningshakeRequest struct {
	values url.Values
}

func (this *JaeClientInteractionListeningshakeRequest) GetApiMethodName() string {
	return "taobao.jae.client.interaction.listeningshake"
}
func (this *JaeClientInteractionListeningshakeRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JaeClientInteractionListeningshakeRequest) GetValues() url.Values {
	return this.values
}

/* 失败回调函数 */
func (this *JaeClientInteractionListeningshakeRequest) SetFailure(value string) {
	this.Set("failure", value)
}

/* 用户参数 */
func (this *JaeClientInteractionListeningshakeRequest) SetOption(value string) {
	this.Set("option", value)
}

type JaeClientInteractionListeningshakeResponse struct {
	*ErrorResponse                                   `json:"error_response,omitempty"`
	JaeClientInteractionListeningshakeResponseResult `json:"jae_client_interaction_listeningshake_response"`
}
type JaeClientInteractionListeningshakeResponseResult struct {
	/* 无返回结果 */
	Result string `json:"result"`
}

/*taobao.jae.client.interaction.stoplistenblow*/
type JaeClientInteractionStoplistenblowRequest struct {
	values url.Values
}

func (this *JaeClientInteractionStoplistenblowRequest) GetApiMethodName() string {
	return "taobao.jae.client.interaction.stoplistenblow"
}
func (this *JaeClientInteractionStoplistenblowRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JaeClientInteractionStoplistenblowRequest) GetValues() url.Values {
	return this.values
}

type JaeClientInteractionStoplistenblowResponse struct {
	*ErrorResponse                                   `json:"error_response,omitempty"`
	JaeClientInteractionStoplistenblowResponseResult `json:"jae_client_interaction_stoplistenblow_response"`
}
type JaeClientInteractionStoplistenblowResponseResult struct {
}

/*taobao.jae.client.interaction.vibrate*/
type JaeClientInteractionVibrateRequest struct {
	values url.Values
}

func (this *JaeClientInteractionVibrateRequest) GetApiMethodName() string {
	return "taobao.jae.client.interaction.vibrate"
}
func (this *JaeClientInteractionVibrateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JaeClientInteractionVibrateRequest) GetValues() url.Values {
	return this.values
}

type JaeClientInteractionVibrateResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	JaeClientInteractionVibrateResponseResult `json:"jae_client_interaction_vibrate_response"`
}
type JaeClientInteractionVibrateResponseResult struct {
	/* 没有返回结果 */
	Result string `json:"result"`
}

/*taobao.jae.client.location.getlocation*/
type JaeClientLocationGetlocationRequest struct {
	values url.Values
}

func (this *JaeClientLocationGetlocationRequest) GetApiMethodName() string {
	return "taobao.jae.client.location.getlocation"
}
func (this *JaeClientLocationGetlocationRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JaeClientLocationGetlocationRequest) GetValues() url.Values {
	return this.values
}

type JaeClientLocationGetlocationResponse struct {
	*ErrorResponse                             `json:"error_response,omitempty"`
	JaeClientLocationGetlocationResponseResult `json:"jae_client_location_getlocation_response"`
}
type JaeClientLocationGetlocationResponseResult struct {
	/* 定位精度 */
	Accuracy string `json:"accuracy"`
	/* 区号 */
	Areacode string `json:"areacode"`
	/* 城市编码 */
	Citycode string `json:"citycode"`
	/* 城市名 */
	Cityname string `json:"cityname"`
	/* 维度 */
	Latitude string `json:"latitude"`
	/* 经度 */
	Longitude string `json:"longitude"`
	/* 地理信息描述 */
	Poi string `json:"poi"`
}

/*taobao.jae.client.relation.showfollowbutton*/
type JaeClientRelationShowfollowbuttonRequest struct {
	values url.Values
}

func (this *JaeClientRelationShowfollowbuttonRequest) GetApiMethodName() string {
	return "taobao.jae.client.relation.showfollowbutton"
}
func (this *JaeClientRelationShowfollowbuttonRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JaeClientRelationShowfollowbuttonRequest) GetValues() url.Values {
	return this.values
}

type JaeClientRelationShowfollowbuttonResponse struct {
	*ErrorResponse                                  `json:"error_response,omitempty"`
	JaeClientRelationShowfollowbuttonResponseResult `json:"jae_client_relation_showfollowbutton_response"`
}
type JaeClientRelationShowfollowbuttonResponseResult struct {
	/* 无返回结果 */
	Result string `json:"result"`
}

/*taobao.jae.client.sharing.showsharingmenu*/
type JaeClientSharingShowsharingmenuRequest struct {
	values url.Values
}

func (this *JaeClientSharingShowsharingmenuRequest) GetApiMethodName() string {
	return "taobao.jae.client.sharing.showsharingmenu"
}
func (this *JaeClientSharingShowsharingmenuRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *JaeClientSharingShowsharingmenuRequest) GetValues() url.Values {
	return this.values
}

/* 图片地址 */
func (this *JaeClientSharingShowsharingmenuRequest) SetImage(value string) {
	this.Set("image", value)
}

/* 分享内容 */
func (this *JaeClientSharingShowsharingmenuRequest) SetText(value string) {
	this.Set("text", value)
}

/* 标题 */
func (this *JaeClientSharingShowsharingmenuRequest) SetTitle(value string) {
	this.Set("title", value)
}

/* 分享的连接地址 */
func (this *JaeClientSharingShowsharingmenuRequest) SetUrl(value string) {
	this.Set("url", value)
}

type JaeClientSharingShowsharingmenuResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	JaeClientSharingShowsharingmenuResponseResult `json:"jae_client_sharing_showsharingmenu_response"`
}
type JaeClientSharingShowsharingmenuResponseResult struct {
}

/*taobao.brandservice.fanscount.query*/
type BrandserviceFanscountQueryRequest struct {
	values url.Values
}

func (this *BrandserviceFanscountQueryRequest) GetApiMethodName() string {
	return "taobao.brandservice.fanscount.query"
}
func (this *BrandserviceFanscountQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *BrandserviceFanscountQueryRequest) GetValues() url.Values {
	return this.values
}

/* 站长用户id */
func (this *BrandserviceFanscountQueryRequest) SetSiteOwnerId(value string) {
	this.Set("site_owner_id", value)
}

type BrandserviceFanscountQueryResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	BrandserviceFanscountQueryResponseResult `json:"brandservice_fanscount_query_response"`
}
type BrandserviceFanscountQueryResponseResult struct {
	/* 返回粉丝个数 */
	Value int64 `json:"value"`
}

/*taobao.brandservice.isfan.query*/
type BrandserviceIsfanQueryRequest struct {
	values url.Values
}

func (this *BrandserviceIsfanQueryRequest) GetApiMethodName() string {
	return "taobao.brandservice.isfan.query"
}
func (this *BrandserviceIsfanQueryRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *BrandserviceIsfanQueryRequest) GetValues() url.Values {
	return this.values
}

/* 站长用户id */
func (this *BrandserviceIsfanQueryRequest) SetSiteOwnerId(value string) {
	this.Set("site_owner_id", value)
}

/* 用户nick */
func (this *BrandserviceIsfanQueryRequest) SetUserNick(value string) {
	this.Set("user_nick", value)
}

type BrandserviceIsfanQueryResponse struct {
	*ErrorResponse                       `json:"error_response,omitempty"`
	BrandserviceIsfanQueryResponseResult `json:"brandservice_isfan_query_response"`
}
type BrandserviceIsfanQueryResponseResult struct {
	/* 返回相应的数值 */
	Value bool `json:"value"`
}

/*taobao.dd.store.export*/
type DdStoreExportRequest struct {
	values url.Values
}

func (this *DdStoreExportRequest) GetApiMethodName() string {
	return "taobao.dd.store.export"
}
func (this *DdStoreExportRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *DdStoreExportRequest) GetValues() url.Values {
	return this.values
}

/* 页码 */
func (this *DdStoreExportRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小<br /> 支持最大值为：100 */
func (this *DdStoreExportRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type DdStoreExportResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	DdStoreExportResponseResult `json:"dd_store_export_response"`
}
type DdStoreExportResponseResult struct {
	/* 淘点点店铺分页信息 */
	Result *DianDianShopPage `json:"result"`
}

/*taobao.dd.takeout.export*/
type DdTakeoutExportRequest struct {
	values url.Values
}

func (this *DdTakeoutExportRequest) GetApiMethodName() string {
	return "taobao.dd.takeout.export"
}
func (this *DdTakeoutExportRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *DdTakeoutExportRequest) GetValues() url.Values {
	return this.values
}

/* 页码 */
func (this *DdTakeoutExportRequest) SetPageNo(value string) {
	this.Set("page_no", value)
}

/* 每页大小<br /> 支持最大值为：100 */
func (this *DdTakeoutExportRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

type DdTakeoutExportResponse struct {
	*ErrorResponse                `json:"error_response,omitempty"`
	DdTakeoutExportResponseResult `json:"dd_takeout_export_response"`
}
type DdTakeoutExportResponseResult struct {
	/* 外卖店铺信息 */
	Result *DianDianShopPage `json:"result"`
}

/*taobao.ma.packcode.create*/
type MaPackcodeCreateRequest struct {
	values url.Values
}

func (this *MaPackcodeCreateRequest) GetApiMethodName() string {
	return "taobao.ma.packcode.create"
}
func (this *MaPackcodeCreateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *MaPackcodeCreateRequest) GetValues() url.Values {
	return this.values
}

type MaPackcodeCreateResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	MaPackcodeCreateResponseResult `json:"ma_packcode_create_response"`
}
type MaPackcodeCreateResponseResult struct {
	/* 生成包裹码二维码图片链接 */
	Qrcodeurl string `json:"qrcodeurl"`
}

/*taobao.ma.qrcode.common.create*/
type MaQrcodeCommonCreateRequest struct {
	values url.Values
}

func (this *MaQrcodeCommonCreateRequest) GetApiMethodName() string {
	return "taobao.ma.qrcode.common.create"
}
func (this *MaQrcodeCommonCreateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *MaQrcodeCommonCreateRequest) GetValues() url.Values {
	return this.values
}

/* 二维码需要布点的位置，方便用户在码平台上可以区分看到不同布点的扫码数据情况；列表值，用半角','号分割，单个渠道名不能超过16字符。<br /> 支持最大长度为：160<br /> 支持的最大列表长度为：160 */
func (this *MaQrcodeCommonCreateRequest) SetChannelName(value string) {
	this.Set("channel_name", value)
}

/* 二维码的内容之一，由type决定：type=page时，content传入无线页面的URL连接内容；type=item时，content传入宝贝数字ID；type=url时，content传入普通的URL连接内容；type=shop时，content传入店铺ID；<br /> 支持最大长度为：256<br /> 支持的最大列表长度为：256 */
func (this *MaQrcodeCommonCreateRequest) SetContent(value string) {
	this.Set("content", value)
}

/* 二维码的logo地址，只允许淘宝官方图片空间的图片地址，其他非图片空间图片不支持。官方淘logo图片地址：http://img01.taobaocdn.com/imgextra/T1Od8YFT8eXXXXXXXX。<br /> 支持最大长度为：256<br /> 支持的最大列表长度为：256 */
func (this *MaQrcodeCommonCreateRequest) SetLogo(value string) {
	this.Set("logo", value)
}

/* 二维码名字，即创建的二维码，在码平台上显示记录的名字。<br /> 支持最大长度为：32<br /> 支持的最大列表长度为：32 */
func (this *MaQrcodeCommonCreateRequest) SetName(value string) {
	this.Set("name", value)
}

/* 是否需要矢量图，如果需要矢量图，设置为true；只支持普通二维码，官方模板不支持矢量图 */
func (this *MaQrcodeCommonCreateRequest) SetNeedEps(value string) {
	this.Set("need_eps", value)
}

/* 二维码尺寸，只支持普通二维码，不支持官方模板，单位为像素，最小为60×60，最大为300×300，建议175×175。官方模板大小尺寸见style说明。<br /> 支持最大值为：300<br /> 支持最小值为：60 */
func (this *MaQrcodeCommonCreateRequest) SetSize(value string) {
	this.Set("size", value)
}

/* 二维码的样式名，支持普通码的颜色或官方模板的模板名；普通码的颜色可选输入：“000000”(黑色)、“EF4F2B”(橙色);官方模板的可选输入（实际尺寸比样例大）：“ww_color.png“ 尺寸290x320，样例：http://gtms03.alicdn.com/tps/i3/T1YLPRFRXXXXbsbYwb-100-102.png；“tb_scan.png“ 尺寸290x320，样例：http://gtms01.alicdn.com/tps/i1/T14vsEFThdXXbsbYwb-100-102.png；“ww_hide_color.png“  尺寸200x263，样例：http://gtms04.alicdn.com/tps/i4/TB1URvlFVXXXXbRXFXXwxcf6pXX-76-100.png；“tmall_hide_color.png“ 尺寸200x263，样例：http://gtms01.alicdn.com/tps/i1/TB1S5PiFVXXXXacXVXXwxcf6pXX-76-100.png。<br /> 支持最大长度为：50<br /> 支持的最大列表长度为：50 */
func (this *MaQrcodeCommonCreateRequest) SetStyle(value string) {
	this.Set("style", value)
}

/* 要制作的二维码业务类型：page:无线页面类型item:宝贝ID类型url:普通的URL连接类型shop:店铺ID类型<br /> 支持最大长度为：10<br /> 支持的最大列表长度为：10 */
func (this *MaQrcodeCommonCreateRequest) SetType(value string) {
	this.Set("type", value)
}

type MaQrcodeCommonCreateResponse struct {
	*ErrorResponse                     `json:"error_response,omitempty"`
	MaQrcodeCommonCreateResponseResult `json:"ma_qrcode_common_create_response"`
}
type MaQrcodeCommonCreateResponseResult struct {
	/* 二维码对像 */
	Modules []*QrcodeDO `json:"modules"`
	/* 执行是否成功 */
	Suc bool `json:"suc"`
}

/*alibaba.xiami.api.contract.gift.send*/
type AlibabaXiamiApiContractGiftSendRequest struct {
	values url.Values
}

func (this *AlibabaXiamiApiContractGiftSendRequest) GetApiMethodName() string {
	return "alibaba.xiami.api.contract.gift.send"
}
func (this *AlibabaXiamiApiContractGiftSendRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlibabaXiamiApiContractGiftSendRequest) GetValues() url.Values {
	return this.values
}

/* 买家昵称 */
func (this *AlibabaXiamiApiContractGiftSendRequest) SetBuyerNick(value string) {
	this.Set("buyer_nick", value)
}

/* 来源，可以传isv的应用名称，用来区分不同的isv */
func (this *AlibabaXiamiApiContractGiftSendRequest) SetComefrom(value string) {
	this.Set("comefrom", value)
}

/* 关联订单ID，必须保证唯一，可以传时间戳或者isv赠送详情表的主键ID */
func (this *AlibabaXiamiApiContractGiftSendRequest) SetOrderId(value string) {
	this.Set("order_id", value)
}

/* 关联信息ID，用来关联该礼包是isv的哪次赠送，建议传isv赠送详情表的主键ID */
func (this *AlibabaXiamiApiContractGiftSendRequest) SetRelationId(value string) {
	this.Set("relation_id", value)
}

/* 店铺ID */
func (this *AlibabaXiamiApiContractGiftSendRequest) SetShopId(value string) {
	this.Set("shop_id", value)
}

/* 礼包类型 */
func (this *AlibabaXiamiApiContractGiftSendRequest) SetType(value string) {
	this.Set("type", value)
}

type AlibabaXiamiApiContractGiftSendResponse struct {
	*ErrorResponse                                `json:"error_response,omitempty"`
	AlibabaXiamiApiContractGiftSendResponseResult `json:"alibaba_xiami_api_contract_gift_send_response"`
}
type AlibabaXiamiApiContractGiftSendResponseResult struct {
	/* 礼包订单ID */
	Data string `json:"data"`
}

/*alibaba.xiami.api.contract.issign*/
type AlibabaXiamiApiContractIssignRequest struct {
	values url.Values
}

func (this *AlibabaXiamiApiContractIssignRequest) GetApiMethodName() string {
	return "alibaba.xiami.api.contract.issign"
}
func (this *AlibabaXiamiApiContractIssignRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlibabaXiamiApiContractIssignRequest) GetValues() url.Values {
	return this.values
}

type AlibabaXiamiApiContractIssignResponse struct {
	*ErrorResponse                              `json:"error_response,omitempty"`
	AlibabaXiamiApiContractIssignResponseResult `json:"alibaba_xiami_api_contract_issign_response"`
}
type AlibabaXiamiApiContractIssignResponseResult struct {
	/* 是否已经签约 */
	Data string `json:"data"`
}

/*alibaba.xiami.api.contract.sellerlist.get*/
type AlibabaXiamiApiContractSellerlistGetRequest struct {
	values url.Values
}

func (this *AlibabaXiamiApiContractSellerlistGetRequest) GetApiMethodName() string {
	return "alibaba.xiami.api.contract.sellerlist.get"
}
func (this *AlibabaXiamiApiContractSellerlistGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlibabaXiamiApiContractSellerlistGetRequest) GetValues() url.Values {
	return this.values
}

/* 每页数量 */
func (this *AlibabaXiamiApiContractSellerlistGetRequest) SetLimit(value string) {
	this.Set("limit", value)
}

/* 当前页 */
func (this *AlibabaXiamiApiContractSellerlistGetRequest) SetPage(value string) {
	this.Set("page", value)
}

/* 结束时间 */
func (this *AlibabaXiamiApiContractSellerlistGetRequest) SetTimeEnd(value string) {
	this.Set("time_end", value)
}

/* 开始时间 */
func (this *AlibabaXiamiApiContractSellerlistGetRequest) SetTimeStart(value string) {
	this.Set("time_start", value)
}

type AlibabaXiamiApiContractSellerlistGetResponse struct {
	*ErrorResponse                                     `json:"error_response,omitempty"`
	AlibabaXiamiApiContractSellerlistGetResponseResult `json:"alibaba_xiami_api_contract_sellerlist_get_response"`
}
type AlibabaXiamiApiContractSellerlistGetResponseResult struct {
	/* 卖家销售详情和总条数 */
	Data *XiamiSellerlist `json:"data"`
}

/*alibaba.xiami.api.contract.sign*/
type AlibabaXiamiApiContractSignRequest struct {
	values url.Values
}

func (this *AlibabaXiamiApiContractSignRequest) GetApiMethodName() string {
	return "alibaba.xiami.api.contract.sign"
}
func (this *AlibabaXiamiApiContractSignRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AlibabaXiamiApiContractSignRequest) GetValues() url.Values {
	return this.values
}

type AlibabaXiamiApiContractSignResponse struct {
	*ErrorResponse                            `json:"error_response,omitempty"`
	AlibabaXiamiApiContractSignResponseResult `json:"alibaba_xiami_api_contract_sign_response"`
}
type AlibabaXiamiApiContractSignResponseResult struct {
	/* 签约链接 */
	Data string `json:"data"`
}

/*taobao.athena.item.knowledge.type.get*/
type AthenaItemKnowledgeTypeGetRequest struct {
	values url.Values
}

func (this *AthenaItemKnowledgeTypeGetRequest) GetApiMethodName() string {
	return "taobao.athena.item.knowledge.type.get"
}
func (this *AthenaItemKnowledgeTypeGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AthenaItemKnowledgeTypeGetRequest) GetValues() url.Values {
	return this.values
}

type AthenaItemKnowledgeTypeGetResponse struct {
	*ErrorResponse                           `json:"error_response,omitempty"`
	AthenaItemKnowledgeTypeGetResponseResult `json:"athena_item_knowledge_type_get_response"`
}
type AthenaItemKnowledgeTypeGetResponseResult struct {
	/* 宝贝自定义问题列表 */
	ItemKnowledgeTypeList []*ItemKnowledgeType `json:"item_knowledge_type_list"`
}

/*taobao.athena.item.solution.add*/
type AthenaItemSolutionAddRequest struct {
	values url.Values
}

func (this *AthenaItemSolutionAddRequest) GetApiMethodName() string {
	return "taobao.athena.item.solution.add"
}
func (this *AthenaItemSolutionAddRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AthenaItemSolutionAddRequest) GetValues() url.Values {
	return this.values
}

/* 商品ID<br /> 支持的最大列表长度为：64 */
func (this *AthenaItemSolutionAddRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 自定义的问题 */
func (this *AthenaItemSolutionAddRequest) SetQuestion(value string) {
	this.Set("question", value)
}

/* 解决方案<br /> 支持最大长度为：1024<br /> 支持的最大列表长度为：1024 */
func (this *AthenaItemSolutionAddRequest) SetSolution(value string) {
	this.Set("solution", value)
}

/* 发送状态 1半自动 2全自动 */
func (this *AthenaItemSolutionAddRequest) SetSolutionLevel(value string) {
	this.Set("solution_level", value)
}

/* stf 旺旺富文本格式的解决方案<br /> 支持最大长度为：1024<br /> 支持的最大列表长度为：1024 */
func (this *AthenaItemSolutionAddRequest) SetSolutionStf(value string) {
	this.Set("solution_stf", value)
}

/* 关联 athena_item_knowledge_type 表的 type_key字段<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *AthenaItemSolutionAddRequest) SetTypeKey(value string) {
	this.Set("type_key", value)
}

type AthenaItemSolutionAddResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	AthenaItemSolutionAddResponseResult `json:"athena_item_solution_add_response"`
}
type AthenaItemSolutionAddResponseResult struct {
	/* 添加结果 */
	Result string `json:"result"`
}

/*taobao.athena.item.solution.del*/
type AthenaItemSolutionDelRequest struct {
	values url.Values
}

func (this *AthenaItemSolutionDelRequest) GetApiMethodName() string {
	return "taobao.athena.item.solution.del"
}
func (this *AthenaItemSolutionDelRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AthenaItemSolutionDelRequest) GetValues() url.Values {
	return this.values
}

/* 主键ID */
func (this *AthenaItemSolutionDelRequest) SetId(value string) {
	this.Set("id", value)
}

type AthenaItemSolutionDelResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	AthenaItemSolutionDelResponseResult `json:"athena_item_solution_del_response"`
}
type AthenaItemSolutionDelResponseResult struct {
	/* 添加结果 */
	Result string `json:"result"`
}

/*taobao.athena.item.solution.get*/
type AthenaItemSolutionGetRequest struct {
	values url.Values
}

func (this *AthenaItemSolutionGetRequest) GetApiMethodName() string {
	return "taobao.athena.item.solution.get"
}
func (this *AthenaItemSolutionGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AthenaItemSolutionGetRequest) GetValues() url.Values {
	return this.values
}

/* 自定义问题的ID */
func (this *AthenaItemSolutionGetRequest) SetId(value string) {
	this.Set("id", value)
}

/* 宝贝商品ID */
func (this *AthenaItemSolutionGetRequest) SetItemId(value string) {
	this.Set("item_id", value)
}

/* 类型key */
func (this *AthenaItemSolutionGetRequest) SetTypeKey(value string) {
	this.Set("type_key", value)
}

type AthenaItemSolutionGetResponse struct {
	*ErrorResponse                      `json:"error_response,omitempty"`
	AthenaItemSolutionGetResponseResult `json:"athena_item_solution_get_response"`
}
type AthenaItemSolutionGetResponseResult struct {
	/* 解决方案列表 */
	ItemSolutions []*ItemKnowledgeSolutionVO `json:"item_solutions"`
}

/*taobao.athena.item.solution.update*/
type AthenaItemSolutionUpdateRequest struct {
	values url.Values
}

func (this *AthenaItemSolutionUpdateRequest) GetApiMethodName() string {
	return "taobao.athena.item.solution.update"
}
func (this *AthenaItemSolutionUpdateRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *AthenaItemSolutionUpdateRequest) GetValues() url.Values {
	return this.values
}

/* 主键ID */
func (this *AthenaItemSolutionUpdateRequest) SetId(value string) {
	this.Set("id", value)
}

/* 自定义的问题 */
func (this *AthenaItemSolutionUpdateRequest) SetQuestion(value string) {
	this.Set("question", value)
}

/* 解决方案<br /> 支持最大长度为：1024<br /> 支持的最大列表长度为：1024 */
func (this *AthenaItemSolutionUpdateRequest) SetSolution(value string) {
	this.Set("solution", value)
}

/* 发送状态 1半自动 2全自动 */
func (this *AthenaItemSolutionUpdateRequest) SetSolutionLevel(value string) {
	this.Set("solution_level", value)
}

/* stf 旺旺富文本格式的解决方案<br /> 支持最大长度为：1024<br /> 支持的最大列表长度为：1024 */
func (this *AthenaItemSolutionUpdateRequest) SetSolutionStf(value string) {
	this.Set("solution_stf", value)
}

/* 关联 athena_item_knowledge_type 表的 type_key字段<br /> 支持最大长度为：64<br /> 支持的最大列表长度为：64 */
func (this *AthenaItemSolutionUpdateRequest) SetTypeKey(value string) {
	this.Set("type_key", value)
}

type AthenaItemSolutionUpdateResponse struct {
	*ErrorResponse                         `json:"error_response,omitempty"`
	AthenaItemSolutionUpdateResponseResult `json:"athena_item_solution_update_response"`
}
type AthenaItemSolutionUpdateResponseResult struct {
	/* 添加结果 */
	Result string `json:"result"`
}

/*taobao.xhotel.city.get*/
type XhotelCityGetRequest struct {
	values url.Values
}

func (this *XhotelCityGetRequest) GetApiMethodName() string {
	return "taobao.xhotel.city.get"
}
func (this *XhotelCityGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *XhotelCityGetRequest) GetValues() url.Values {
	return this.values
}

/* 分页读取的城市个数，最小值为1，最大值为200 */
func (this *XhotelCityGetRequest) SetCount(value string) {
	this.Set("count", value)
}

/* 分页读取的开始下标,从0开始 */
func (this *XhotelCityGetRequest) SetStart(value string) {
	this.Set("start", value)
}

type XhotelCityGetResponse struct {
	*ErrorResponse              `json:"error_response,omitempty"`
	XhotelCityGetResponseResult `json:"xhotel_city_get_response"`
}
type XhotelCityGetResponseResult struct {
	/* 酒店区域的数据列表 */
	Divisions []*HotelDivision `json:"divisions"`
	/* 总数 */
	TotalResults int64 `json:"total_results"`
	/* 城市数据的版本。所有城市数据有一个统一的版本，与入参start和count无关。 ISV可通过版本判断城市数据是否有更新。判断方法如下：ISV在第一次拉取数据时请将version保存在本地；以后再调用接口时请比较本地version与接口返回的version。如果本地version小于于接口返回version，则说明城市数据有更新；如果本地version等于接口返回version，则说明城市数据无更新，不需要再继续拉取城市数据。 */
	Version int64 `json:"version"`
}

/*taobao.xhotel.info.list.get*/
type XhotelInfoListGetRequest struct {
	values url.Values
}

func (this *XhotelInfoListGetRequest) GetApiMethodName() string {
	return "taobao.xhotel.info.list.get"
}
func (this *XhotelInfoListGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *XhotelInfoListGetRequest) GetValues() url.Values {
	return this.values
}

/* 城市code */
func (this *XhotelInfoListGetRequest) SetCityCode(value string) {
	this.Set("city_code", value)
}

/* 分页参数：当前页数，从1开始计数。
默认值：1 */
func (this *XhotelInfoListGetRequest) SetCurrentPage(value string) {
	this.Set("current_page", value)
}

/* 分页参数：每页酒店数量。最小值1，最大值为50。默认值：20 */
func (this *XhotelInfoListGetRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* pid */
func (this *XhotelInfoListGetRequest) SetPid(value string) {
	this.Set("pid", value)
}

/* 标准酒店id，如果需要查询单条酒店的信息，需要传入此参数 */
func (this *XhotelInfoListGetRequest) SetShid(value string) {
	this.Set("shid", value)
}

type XhotelInfoListGetResponse struct {
	*ErrorResponse                  `json:"error_response,omitempty"`
	XhotelInfoListGetResponseResult `json:"xhotel_info_list_get_response"`
}
type XhotelInfoListGetResponseResult struct {
	/* 标准酒店信息 */
	Hotels []*SHotelInfoObject `json:"hotels"`
	/* 酒店总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.xhotel.list.search*/
type XhotelListSearchRequest struct {
	values url.Values
}

func (this *XhotelListSearchRequest) GetApiMethodName() string {
	return "taobao.xhotel.list.search"
}
func (this *XhotelListSearchRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *XhotelListSearchRequest) GetValues() url.Values {
	return this.values
}

/* 入住时间，默认值为当前时间加3天 */
func (this *XhotelListSearchRequest) SetCheckIn(value string) {
	this.Set("check_in", value)
}

/* 离店日期，默认值为当前时间加4天 */
func (this *XhotelListSearchRequest) SetCheckOut(value string) {
	this.Set("check_out", value)
}

/* 城市编码，需通过taobao.xhotel.city.get接口获取 */
func (this *XhotelListSearchRequest) SetCityCode(value string) {
	this.Set("city_code", value)
}

/* 城市名称，需通过taobao.xhotel.city.get接口获取 */
func (this *XhotelListSearchRequest) SetCityName(value string) {
	this.Set("city_name", value)
}

/* 分页参数：当前页数，从1开始计数。
默认值：1 */
func (this *XhotelListSearchRequest) SetCurrentPage(value string) {
	this.Set("current_page", value)
}

/* 酒店星级/档次。
五星/豪华:5
四星/高档:4
三星/舒适:3
二星及以下：2
经济连锁：1
客栈公寓:0
支持设置多个档次，多个档次用","隔开，如5,4,3 */
func (this *XhotelListSearchRequest) SetDangcis(value string) {
	this.Set("dangcis", value)
}

/* 排序方向。
从高往低: DESC
从低往高: ASC。
默认值为DESC
注意：如果按距离排序，设置此参数无效。如果按距离排序，则按离搜索中心点从近到远的顺序返回酒店列表，不需要再设置dir参数。 */
func (this *XhotelListSearchRequest) SetDir(value string) {
	this.Set("dir", value)
}

/* 指定价格范围搜索时的最高价，单位：元。 */
func (this *XhotelListSearchRequest) SetHighPrice(value string) {
	this.Set("high_price", value)
}

/* 搜索关键字 */
func (this *XhotelListSearchRequest) SetKeywords(value string) {
	this.Set("keywords", value)
}

/* 指定价格范围搜索时的最低价，单位：元。 */
func (this *XhotelListSearchRequest) SetLowPrice(value string) {
	this.Set("low_price", value)
}

/* 排序方式。
默认排序：DEFAULT
按销量排序：SALESCOUNT
按价格排序：PRICE
按照距离排序：DISTANCE。
注意：如果按距离排序，则按离搜索中心点从近到远的顺序返回酒店列表，不需要再设置dir参数。 */
func (this *XhotelListSearchRequest) SetOrder(value string) {
	this.Set("order", value)
}

/* 分页参数：每页酒店数量。最小值1，最大值为20。默认值：20 */
func (this *XhotelListSearchRequest) SetPageSize(value string) {
	this.Set("page_size", value)
}

/* pid */
func (this *XhotelListSearchRequest) SetPid(value string) {
	this.Set("pid", value)
}

/* 地图搜的半径，单位:米。默认值为5000米，允许的最大值为50000米。<br /> 支持最大值为：50000<br /> 支持最小值为：1 */
func (this *XhotelListSearchRequest) SetRadius(value string) {
	this.Set("radius", value)
}

/* 地图搜时中心点的经度。注意：如果设置此参数，则参数radius_lng也必须设置。 */
func (this *XhotelListSearchRequest) SetRadiusLat(value string) {
	this.Set("radius_lat", value)
}

/* 地图搜索时中心点的经度。注意：如果设置此参数，则参数radius_lat也必须设置。 */
func (this *XhotelListSearchRequest) SetRadiusLng(value string) {
	this.Set("radius_lng", value)
}

type XhotelListSearchResponse struct {
	*ErrorResponse                 `json:"error_response,omitempty"`
	XhotelListSearchResponseResult `json:"xhotel_list_search_response"`
}
type XhotelListSearchResponseResult struct {
	/* 渠道ID */
	ChannelId string `json:"channel_id"`
	/* h5的list的url */
	H5ListUrl string `json:"h5_list_url"`
	/* 酒店list的url */
	HotelListUrl string `json:"hotel_list_url"`
	/* 酒店列表结果集 */
	Hotels []*SearchHotelObject `json:"hotels"`
	/* 请求ID */
	RequestId string `json:"request_id"`
	/* 酒店总数 */
	TotalResults int64 `json:"total_results"`
}

/*taobao.xhotel.price.info.get*/
type XhotelPriceInfoGetRequest struct {
	values url.Values
}

func (this *XhotelPriceInfoGetRequest) GetApiMethodName() string {
	return "taobao.xhotel.price.info.get"
}
func (this *XhotelPriceInfoGetRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *XhotelPriceInfoGetRequest) GetValues() url.Values {
	return this.values
}

/* 结束日期，默认值为当前时间加4天,结束日期最多是当前时间加28天 */
func (this *XhotelPriceInfoGetRequest) SetEndDate(value string) {
	this.Set("end_date", value)
}

/* pid */
func (this *XhotelPriceInfoGetRequest) SetPid(value string) {
	this.Set("pid", value)
}

/* 标准酒店id和城市编码拼接字符串，最多50个 */
func (this *XhotelPriceInfoGetRequest) SetShidCityCode(value string) {
	this.Set("shid_city_code", value)
}

/* 开始时间，默认值为当前时间加3天,开始时间最多是当前时间加28天 */
func (this *XhotelPriceInfoGetRequest) SetStartDate(value string) {
	this.Set("start_date", value)
}

type XhotelPriceInfoGetResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	XhotelPriceInfoGetResponseResult `json:"xhotel_price_info_get_response"`
}
type XhotelPriceInfoGetResponseResult struct {
	/* 酒店价格信息对象 */
	HotelPrices []*HotelPriceSearchObject `json:"hotel_prices"`
	/* 返回的信息总条数 */
	TotalResults int64 `json:"total_results"`
}

/*tmall.yao.piats.check*/
type TmallYaoPiatsCheckRequest struct {
	values url.Values
}

func (this *TmallYaoPiatsCheckRequest) GetApiMethodName() string {
	return "tmall.yao.piats.check"
}
func (this *TmallYaoPiatsCheckRequest) Set(key, value string) {
	if this.values == nil {
		this.values = url.Values{}
	}
	this.values.Set(key, value)
}
func (this *TmallYaoPiatsCheckRequest) GetValues() url.Values {
	return this.values
}

/* 子订单号 */
func (this *TmallYaoPiatsCheckRequest) SetBizOrderId(value string) {
	this.Set("biz_order_id", value)
}

/* 药监码(多个用逗号分隔) */
func (this *TmallYaoPiatsCheckRequest) SetPiatsCodes(value string) {
	this.Set("piats_codes", value)
}

type TmallYaoPiatsCheckResponse struct {
	*ErrorResponse                   `json:"error_response,omitempty"`
	TmallYaoPiatsCheckResponseResult `json:"tmall_yao_piats_check_response"`
}
type TmallYaoPiatsCheckResponseResult struct {
	/* 校验药监码返回列表 */
	CheckYaoPiatsList []*CheckYaoPiats `json:"check_yao_piats_list"`
}
